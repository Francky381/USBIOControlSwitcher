
USBIOControlSwitcher.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1a4  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800a470  0800a470  0001a470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a4f0  0800a4f0  0001a4f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a4f8  0800a4f8  0001a4f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a4fc  0800a4fc  0001a4fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000184  24000000  0800a500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000184  0800a684  00020184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240001e4  0800a6e4  000201e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cac  24000244  0800a744  00020244  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001ef0  0800a744  00021ef0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d1e7  00000000  00000000  00020272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047ae  00000000  00000000  0004d459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  00051c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c8  00000000  00000000  00052f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035d7d  00000000  00000000  000540f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a115  00000000  00000000  00089e6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014a898  00000000  00000000  000a3f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ee81a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fa8  00000000  00000000  001ee870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000244 	.word	0x24000244
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800a458 	.word	0x0800a458

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000248 	.word	0x24000248
 8000308:	0800a458 	.word	0x0800a458

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96e 	b.w	8000600 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	4604      	mov	r4, r0
 8000344:	468c      	mov	ip, r1
 8000346:	2b00      	cmp	r3, #0
 8000348:	f040 8083 	bne.w	8000452 <__udivmoddi4+0x116>
 800034c:	428a      	cmp	r2, r1
 800034e:	4617      	mov	r7, r2
 8000350:	d947      	bls.n	80003e2 <__udivmoddi4+0xa6>
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	b142      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000358:	f1c2 0020 	rsb	r0, r2, #32
 800035c:	fa24 f000 	lsr.w	r0, r4, r0
 8000360:	4091      	lsls	r1, r2
 8000362:	4097      	lsls	r7, r2
 8000364:	ea40 0c01 	orr.w	ip, r0, r1
 8000368:	4094      	lsls	r4, r2
 800036a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800036e:	0c23      	lsrs	r3, r4, #16
 8000370:	fbbc f6f8 	udiv	r6, ip, r8
 8000374:	fa1f fe87 	uxth.w	lr, r7
 8000378:	fb08 c116 	mls	r1, r8, r6, ip
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f10e 	mul.w	r1, r6, lr
 8000384:	4299      	cmp	r1, r3
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x60>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 30ff 	add.w	r0, r6, #4294967295
 800038e:	f080 8119 	bcs.w	80005c4 <__udivmoddi4+0x288>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 8116 	bls.w	80005c4 <__udivmoddi4+0x288>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a4:	fb08 3310 	mls	r3, r8, r0, r3
 80003a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003ac:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x8c>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	f080 8105 	bcs.w	80005c8 <__udivmoddi4+0x28c>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f240 8102 	bls.w	80005c8 <__udivmoddi4+0x28c>
 80003c4:	3802      	subs	r0, #2
 80003c6:	443c      	add	r4, r7
 80003c8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	2600      	movs	r6, #0
 80003d2:	b11d      	cbz	r5, 80003dc <__udivmoddi4+0xa0>
 80003d4:	40d4      	lsrs	r4, r2
 80003d6:	2300      	movs	r3, #0
 80003d8:	e9c5 4300 	strd	r4, r3, [r5]
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xaa>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f282 	clz	r2, r2
 80003ea:	2a00      	cmp	r2, #0
 80003ec:	d150      	bne.n	8000490 <__udivmoddi4+0x154>
 80003ee:	1bcb      	subs	r3, r1, r7
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f f887 	uxth.w	r8, r7
 80003f8:	2601      	movs	r6, #1
 80003fa:	fbb3 fcfe 	udiv	ip, r3, lr
 80003fe:	0c21      	lsrs	r1, r4, #16
 8000400:	fb0e 331c 	mls	r3, lr, ip, r3
 8000404:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000408:	fb08 f30c 	mul.w	r3, r8, ip
 800040c:	428b      	cmp	r3, r1
 800040e:	d907      	bls.n	8000420 <__udivmoddi4+0xe4>
 8000410:	1879      	adds	r1, r7, r1
 8000412:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0xe2>
 8000418:	428b      	cmp	r3, r1
 800041a:	f200 80e9 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 800041e:	4684      	mov	ip, r0
 8000420:	1ac9      	subs	r1, r1, r3
 8000422:	b2a3      	uxth	r3, r4
 8000424:	fbb1 f0fe 	udiv	r0, r1, lr
 8000428:	fb0e 1110 	mls	r1, lr, r0, r1
 800042c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000430:	fb08 f800 	mul.w	r8, r8, r0
 8000434:	45a0      	cmp	r8, r4
 8000436:	d907      	bls.n	8000448 <__udivmoddi4+0x10c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x10a>
 8000440:	45a0      	cmp	r8, r4
 8000442:	f200 80d9 	bhi.w	80005f8 <__udivmoddi4+0x2bc>
 8000446:	4618      	mov	r0, r3
 8000448:	eba4 0408 	sub.w	r4, r4, r8
 800044c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000450:	e7bf      	b.n	80003d2 <__udivmoddi4+0x96>
 8000452:	428b      	cmp	r3, r1
 8000454:	d909      	bls.n	800046a <__udivmoddi4+0x12e>
 8000456:	2d00      	cmp	r5, #0
 8000458:	f000 80b1 	beq.w	80005be <__udivmoddi4+0x282>
 800045c:	2600      	movs	r6, #0
 800045e:	e9c5 0100 	strd	r0, r1, [r5]
 8000462:	4630      	mov	r0, r6
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	fab3 f683 	clz	r6, r3
 800046e:	2e00      	cmp	r6, #0
 8000470:	d14a      	bne.n	8000508 <__udivmoddi4+0x1cc>
 8000472:	428b      	cmp	r3, r1
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0x140>
 8000476:	4282      	cmp	r2, r0
 8000478:	f200 80b8 	bhi.w	80005ec <__udivmoddi4+0x2b0>
 800047c:	1a84      	subs	r4, r0, r2
 800047e:	eb61 0103 	sbc.w	r1, r1, r3
 8000482:	2001      	movs	r0, #1
 8000484:	468c      	mov	ip, r1
 8000486:	2d00      	cmp	r5, #0
 8000488:	d0a8      	beq.n	80003dc <__udivmoddi4+0xa0>
 800048a:	e9c5 4c00 	strd	r4, ip, [r5]
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0xa0>
 8000490:	f1c2 0320 	rsb	r3, r2, #32
 8000494:	fa20 f603 	lsr.w	r6, r0, r3
 8000498:	4097      	lsls	r7, r2
 800049a:	fa01 f002 	lsl.w	r0, r1, r2
 800049e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a2:	40d9      	lsrs	r1, r3
 80004a4:	4330      	orrs	r0, r6
 80004a6:	0c03      	lsrs	r3, r0, #16
 80004a8:	fbb1 f6fe 	udiv	r6, r1, lr
 80004ac:	fa1f f887 	uxth.w	r8, r7
 80004b0:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004b8:	fb06 f108 	mul.w	r1, r6, r8
 80004bc:	4299      	cmp	r1, r3
 80004be:	fa04 f402 	lsl.w	r4, r4, r2
 80004c2:	d909      	bls.n	80004d8 <__udivmoddi4+0x19c>
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ca:	f080 808d 	bcs.w	80005e8 <__udivmoddi4+0x2ac>
 80004ce:	4299      	cmp	r1, r3
 80004d0:	f240 808a 	bls.w	80005e8 <__udivmoddi4+0x2ac>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	443b      	add	r3, r7
 80004d8:	1a5b      	subs	r3, r3, r1
 80004da:	b281      	uxth	r1, r0
 80004dc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb00 f308 	mul.w	r3, r0, r8
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x1c4>
 80004f0:	1879      	adds	r1, r7, r1
 80004f2:	f100 3cff 	add.w	ip, r0, #4294967295
 80004f6:	d273      	bcs.n	80005e0 <__udivmoddi4+0x2a4>
 80004f8:	428b      	cmp	r3, r1
 80004fa:	d971      	bls.n	80005e0 <__udivmoddi4+0x2a4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4439      	add	r1, r7
 8000500:	1acb      	subs	r3, r1, r3
 8000502:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000506:	e778      	b.n	80003fa <__udivmoddi4+0xbe>
 8000508:	f1c6 0c20 	rsb	ip, r6, #32
 800050c:	fa03 f406 	lsl.w	r4, r3, r6
 8000510:	fa22 f30c 	lsr.w	r3, r2, ip
 8000514:	431c      	orrs	r4, r3
 8000516:	fa20 f70c 	lsr.w	r7, r0, ip
 800051a:	fa01 f306 	lsl.w	r3, r1, r6
 800051e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000522:	fa21 f10c 	lsr.w	r1, r1, ip
 8000526:	431f      	orrs	r7, r3
 8000528:	0c3b      	lsrs	r3, r7, #16
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fa1f f884 	uxth.w	r8, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053a:	fb09 fa08 	mul.w	sl, r9, r8
 800053e:	458a      	cmp	sl, r1
 8000540:	fa02 f206 	lsl.w	r2, r2, r6
 8000544:	fa00 f306 	lsl.w	r3, r0, r6
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x220>
 800054a:	1861      	adds	r1, r4, r1
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	d248      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 8000552:	458a      	cmp	sl, r1
 8000554:	d946      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 8000556:	f1a9 0902 	sub.w	r9, r9, #2
 800055a:	4421      	add	r1, r4
 800055c:	eba1 010a 	sub.w	r1, r1, sl
 8000560:	b2bf      	uxth	r7, r7
 8000562:	fbb1 f0fe 	udiv	r0, r1, lr
 8000566:	fb0e 1110 	mls	r1, lr, r0, r1
 800056a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800056e:	fb00 f808 	mul.w	r8, r0, r8
 8000572:	45b8      	cmp	r8, r7
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x24a>
 8000576:	19e7      	adds	r7, r4, r7
 8000578:	f100 31ff 	add.w	r1, r0, #4294967295
 800057c:	d22e      	bcs.n	80005dc <__udivmoddi4+0x2a0>
 800057e:	45b8      	cmp	r8, r7
 8000580:	d92c      	bls.n	80005dc <__udivmoddi4+0x2a0>
 8000582:	3802      	subs	r0, #2
 8000584:	4427      	add	r7, r4
 8000586:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058a:	eba7 0708 	sub.w	r7, r7, r8
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	454f      	cmp	r7, r9
 8000594:	46c6      	mov	lr, r8
 8000596:	4649      	mov	r1, r9
 8000598:	d31a      	bcc.n	80005d0 <__udivmoddi4+0x294>
 800059a:	d017      	beq.n	80005cc <__udivmoddi4+0x290>
 800059c:	b15d      	cbz	r5, 80005b6 <__udivmoddi4+0x27a>
 800059e:	ebb3 020e 	subs.w	r2, r3, lr
 80005a2:	eb67 0701 	sbc.w	r7, r7, r1
 80005a6:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005aa:	40f2      	lsrs	r2, r6
 80005ac:	ea4c 0202 	orr.w	r2, ip, r2
 80005b0:	40f7      	lsrs	r7, r6
 80005b2:	e9c5 2700 	strd	r2, r7, [r5]
 80005b6:	2600      	movs	r6, #0
 80005b8:	4631      	mov	r1, r6
 80005ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005be:	462e      	mov	r6, r5
 80005c0:	4628      	mov	r0, r5
 80005c2:	e70b      	b.n	80003dc <__udivmoddi4+0xa0>
 80005c4:	4606      	mov	r6, r0
 80005c6:	e6e9      	b.n	800039c <__udivmoddi4+0x60>
 80005c8:	4618      	mov	r0, r3
 80005ca:	e6fd      	b.n	80003c8 <__udivmoddi4+0x8c>
 80005cc:	4543      	cmp	r3, r8
 80005ce:	d2e5      	bcs.n	800059c <__udivmoddi4+0x260>
 80005d0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d4:	eb69 0104 	sbc.w	r1, r9, r4
 80005d8:	3801      	subs	r0, #1
 80005da:	e7df      	b.n	800059c <__udivmoddi4+0x260>
 80005dc:	4608      	mov	r0, r1
 80005de:	e7d2      	b.n	8000586 <__udivmoddi4+0x24a>
 80005e0:	4660      	mov	r0, ip
 80005e2:	e78d      	b.n	8000500 <__udivmoddi4+0x1c4>
 80005e4:	4681      	mov	r9, r0
 80005e6:	e7b9      	b.n	800055c <__udivmoddi4+0x220>
 80005e8:	4666      	mov	r6, ip
 80005ea:	e775      	b.n	80004d8 <__udivmoddi4+0x19c>
 80005ec:	4630      	mov	r0, r6
 80005ee:	e74a      	b.n	8000486 <__udivmoddi4+0x14a>
 80005f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f4:	4439      	add	r1, r7
 80005f6:	e713      	b.n	8000420 <__udivmoddi4+0xe4>
 80005f8:	3802      	subs	r0, #2
 80005fa:	443c      	add	r4, r7
 80005fc:	e724      	b.n	8000448 <__udivmoddi4+0x10c>
 80005fe:	bf00      	nop

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f000 fc1a 	bl	8000e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f80a 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 f910 	bl	8000834 <MX_GPIO_Init>
  MX_ETH_Init();
 8000614:	f000 f876 	bl	8000704 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000618:	f000 f8c0 	bl	800079c <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 800061c:	f009 f99e 	bl	800995c <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000620:	e7fe      	b.n	8000620 <main+0x1c>
	...

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b09c      	sub	sp, #112	; 0x70
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800062e:	224c      	movs	r2, #76	; 0x4c
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f009 ff08 	bl	800a448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2220      	movs	r2, #32
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f009 ff02 	bl	800a448 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000644:	2002      	movs	r0, #2
 8000646:	f002 fd7b 	bl	8003140 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800064a:	2300      	movs	r3, #0
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	4b2c      	ldr	r3, [pc, #176]	; (8000700 <SystemClock_Config+0xdc>)
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	4a2b      	ldr	r2, [pc, #172]	; (8000700 <SystemClock_Config+0xdc>)
 8000654:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000658:	6193      	str	r3, [r2, #24]
 800065a:	4b29      	ldr	r3, [pc, #164]	; (8000700 <SystemClock_Config+0xdc>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000666:	bf00      	nop
 8000668:	4b25      	ldr	r3, [pc, #148]	; (8000700 <SystemClock_Config+0xdc>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000674:	d1f8      	bne.n	8000668 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000676:	2321      	movs	r3, #33	; 0x21
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800067a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800067e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000688:	2302      	movs	r3, #2
 800068a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000690:	f240 1313 	movw	r3, #275	; 0x113
 8000694:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000696:	2301      	movs	r3, #1
 8000698:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800069a:	2304      	movs	r3, #4
 800069c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800069e:	2302      	movs	r3, #2
 80006a0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80006a2:	2304      	movs	r3, #4
 80006a4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006a6:	2300      	movs	r3, #0
 80006a8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b2:	4618      	mov	r0, r3
 80006b4:	f002 fd8e 	bl	80031d4 <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006be:	f000 f995 	bl	80009ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	233f      	movs	r3, #63	; 0x3f
 80006c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	2303      	movs	r3, #3
 80006c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006ce:	2308      	movs	r3, #8
 80006d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006d2:	2340      	movs	r3, #64	; 0x40
 80006d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006d6:	2340      	movs	r3, #64	; 0x40
 80006d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006de:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006e0:	2340      	movs	r3, #64	; 0x40
 80006e2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2103      	movs	r1, #3
 80006e8:	4618      	mov	r0, r3
 80006ea:	f003 f91f 	bl	800392c <HAL_RCC_ClockConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006f4:	f000 f97a 	bl	80009ec <Error_Handler>
  }
}
 80006f8:	bf00      	nop
 80006fa:	3770      	adds	r7, #112	; 0x70
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	58024800 	.word	0x58024800

08000704 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000708:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <MX_ETH_Init+0x80>)
 800070a:	4a1f      	ldr	r2, [pc, #124]	; (8000788 <MX_ETH_Init+0x84>)
 800070c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <MX_ETH_Init+0x88>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <MX_ETH_Init+0x88>)
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <MX_ETH_Init+0x88>)
 800071c:	22e1      	movs	r2, #225	; 0xe1
 800071e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_ETH_Init+0x88>)
 8000722:	2200      	movs	r2, #0
 8000724:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <MX_ETH_Init+0x88>)
 8000728:	2200      	movs	r2, #0
 800072a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_ETH_Init+0x88>)
 800072e:	2200      	movs	r2, #0
 8000730:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_ETH_Init+0x80>)
 8000734:	4a15      	ldr	r2, [pc, #84]	; (800078c <MX_ETH_Init+0x88>)
 8000736:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <MX_ETH_Init+0x80>)
 800073a:	2201      	movs	r2, #1
 800073c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_ETH_Init+0x80>)
 8000740:	4a13      	ldr	r2, [pc, #76]	; (8000790 <MX_ETH_Init+0x8c>)
 8000742:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_ETH_Init+0x80>)
 8000746:	4a13      	ldr	r2, [pc, #76]	; (8000794 <MX_ETH_Init+0x90>)
 8000748:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_ETH_Init+0x80>)
 800074c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000750:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000752:	480c      	ldr	r0, [pc, #48]	; (8000784 <MX_ETH_Init+0x80>)
 8000754:	f000 fd4e 	bl	80011f4 <HAL_ETH_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800075e:	f000 f945 	bl	80009ec <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000762:	2234      	movs	r2, #52	; 0x34
 8000764:	2100      	movs	r1, #0
 8000766:	480c      	ldr	r0, [pc, #48]	; (8000798 <MX_ETH_Init+0x94>)
 8000768:	f009 fe6e 	bl	800a448 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <MX_ETH_Init+0x94>)
 800076e:	2221      	movs	r2, #33	; 0x21
 8000770:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_ETH_Init+0x94>)
 8000774:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000778:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800077a:	4b07      	ldr	r3, [pc, #28]	; (8000798 <MX_ETH_Init+0x94>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	24000558 	.word	0x24000558
 8000788:	40028000 	.word	0x40028000
 800078c:	24000260 	.word	0x24000260
 8000790:	240001e4 	.word	0x240001e4
 8000794:	24000184 	.word	0x24000184
 8000798:	240005e0 	.word	0x240005e0

0800079c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007a0:	4b22      	ldr	r3, [pc, #136]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007a2:	4a23      	ldr	r2, [pc, #140]	; (8000830 <MX_USART3_UART_Init+0x94>)
 80007a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007a6:	4b21      	ldr	r3, [pc, #132]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b1f      	ldr	r3, [pc, #124]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b1d      	ldr	r3, [pc, #116]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b1c      	ldr	r3, [pc, #112]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b19      	ldr	r3, [pc, #100]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d2:	4b16      	ldr	r3, [pc, #88]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007de:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007e4:	4811      	ldr	r0, [pc, #68]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007e6:	f004 ff49 	bl	800567c <HAL_UART_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80007f0:	f000 f8fc 	bl	80009ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f4:	2100      	movs	r1, #0
 80007f6:	480d      	ldr	r0, [pc, #52]	; (800082c <MX_USART3_UART_Init+0x90>)
 80007f8:	f005 ffdc 	bl	80067b4 <HAL_UARTEx_SetTxFifoThreshold>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000802:	f000 f8f3 	bl	80009ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000806:	2100      	movs	r1, #0
 8000808:	4808      	ldr	r0, [pc, #32]	; (800082c <MX_USART3_UART_Init+0x90>)
 800080a:	f006 f811 	bl	8006830 <HAL_UARTEx_SetRxFifoThreshold>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000814:	f000 f8ea 	bl	80009ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <MX_USART3_UART_Init+0x90>)
 800081a:	f005 ff92 	bl	8006742 <HAL_UARTEx_DisableFifoMode>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000824:	f000 f8e2 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	24000488 	.word	0x24000488
 8000830:	40004800 	.word	0x40004800

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08c      	sub	sp, #48	; 0x30
 8000838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	4b62      	ldr	r3, [pc, #392]	; (80009d4 <MX_GPIO_Init+0x1a0>)
 800084c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000850:	4a60      	ldr	r2, [pc, #384]	; (80009d4 <MX_GPIO_Init+0x1a0>)
 8000852:	f043 0304 	orr.w	r3, r3, #4
 8000856:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085a:	4b5e      	ldr	r3, [pc, #376]	; (80009d4 <MX_GPIO_Init+0x1a0>)
 800085c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000860:	f003 0304 	and.w	r3, r3, #4
 8000864:	61bb      	str	r3, [r7, #24]
 8000866:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000868:	4b5a      	ldr	r3, [pc, #360]	; (80009d4 <MX_GPIO_Init+0x1a0>)
 800086a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800086e:	4a59      	ldr	r2, [pc, #356]	; (80009d4 <MX_GPIO_Init+0x1a0>)
 8000870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000874:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000878:	4b56      	ldr	r3, [pc, #344]	; (80009d4 <MX_GPIO_Init+0x1a0>)
 800087a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800087e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000882:	617b      	str	r3, [r7, #20]
 8000884:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b53      	ldr	r3, [pc, #332]	; (80009d4 <MX_GPIO_Init+0x1a0>)
 8000888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088c:	4a51      	ldr	r2, [pc, #324]	; (80009d4 <MX_GPIO_Init+0x1a0>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000896:	4b4f      	ldr	r3, [pc, #316]	; (80009d4 <MX_GPIO_Init+0x1a0>)
 8000898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089c:	f003 0301 	and.w	r3, r3, #1
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a4:	4b4b      	ldr	r3, [pc, #300]	; (80009d4 <MX_GPIO_Init+0x1a0>)
 80008a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008aa:	4a4a      	ldr	r2, [pc, #296]	; (80009d4 <MX_GPIO_Init+0x1a0>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b4:	4b47      	ldr	r3, [pc, #284]	; (80009d4 <MX_GPIO_Init+0x1a0>)
 80008b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c2:	4b44      	ldr	r3, [pc, #272]	; (80009d4 <MX_GPIO_Init+0x1a0>)
 80008c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c8:	4a42      	ldr	r2, [pc, #264]	; (80009d4 <MX_GPIO_Init+0x1a0>)
 80008ca:	f043 0308 	orr.w	r3, r3, #8
 80008ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d2:	4b40      	ldr	r3, [pc, #256]	; (80009d4 <MX_GPIO_Init+0x1a0>)
 80008d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d8:	f003 0308 	and.w	r3, r3, #8
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008e0:	4b3c      	ldr	r3, [pc, #240]	; (80009d4 <MX_GPIO_Init+0x1a0>)
 80008e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e6:	4a3b      	ldr	r2, [pc, #236]	; (80009d4 <MX_GPIO_Init+0x1a0>)
 80008e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f0:	4b38      	ldr	r3, [pc, #224]	; (80009d4 <MX_GPIO_Init+0x1a0>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008fe:	4b35      	ldr	r3, [pc, #212]	; (80009d4 <MX_GPIO_Init+0x1a0>)
 8000900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000904:	4a33      	ldr	r2, [pc, #204]	; (80009d4 <MX_GPIO_Init+0x1a0>)
 8000906:	f043 0310 	orr.w	r3, r3, #16
 800090a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800090e:	4b31      	ldr	r3, [pc, #196]	; (80009d4 <MX_GPIO_Init+0x1a0>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000914:	f003 0310 	and.w	r3, r3, #16
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000922:	482d      	ldr	r0, [pc, #180]	; (80009d8 <MX_GPIO_Init+0x1a4>)
 8000924:	f001 fa24 	bl	8001d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800092e:	482b      	ldr	r0, [pc, #172]	; (80009dc <MX_GPIO_Init+0x1a8>)
 8000930:	f001 fa1e 	bl	8001d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	2102      	movs	r1, #2
 8000938:	4829      	ldr	r0, [pc, #164]	; (80009e0 <MX_GPIO_Init+0x1ac>)
 800093a:	f001 fa19 	bl	8001d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800093e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	4824      	ldr	r0, [pc, #144]	; (80009e4 <MX_GPIO_Init+0x1b0>)
 8000954:	f001 f864 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000958:	f244 0301 	movw	r3, #16385	; 0x4001
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4819      	ldr	r0, [pc, #100]	; (80009d8 <MX_GPIO_Init+0x1a4>)
 8000972:	f001 f855 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	2301      	movs	r3, #1
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	4813      	ldr	r0, [pc, #76]	; (80009dc <MX_GPIO_Init+0x1a8>)
 8000990:	f001 f846 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000998:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	480f      	ldr	r0, [pc, #60]	; (80009e8 <MX_GPIO_Init+0x1b4>)
 80009aa:	f001 f839 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 80009ae:	2302      	movs	r3, #2
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4806      	ldr	r0, [pc, #24]	; (80009e0 <MX_GPIO_Init+0x1ac>)
 80009c6:	f001 f82b 	bl	8001a20 <HAL_GPIO_Init>

}
 80009ca:	bf00      	nop
 80009cc:	3730      	adds	r7, #48	; 0x30
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	58024400 	.word	0x58024400
 80009d8:	58020400 	.word	0x58020400
 80009dc:	58020c00 	.word	0x58020c00
 80009e0:	58021000 	.word	0x58021000
 80009e4:	58020800 	.word	0x58020800
 80009e8:	58021800 	.word	0x58021800

080009ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f0:	b672      	cpsid	i
}
 80009f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <Error_Handler+0x8>
	...

080009f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fe:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <HAL_MspInit+0x30>)
 8000a00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a04:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <HAL_MspInit+0x30>)
 8000a06:	f043 0302 	orr.w	r3, r3, #2
 8000a0a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_MspInit+0x30>)
 8000a10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a14:	f003 0302 	and.w	r3, r3, #2
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	58024400 	.word	0x58024400

08000a2c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08e      	sub	sp, #56	; 0x38
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a59      	ldr	r2, [pc, #356]	; (8000bb0 <HAL_ETH_MspInit+0x184>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	f040 80ab 	bne.w	8000ba6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000a50:	4b58      	ldr	r3, [pc, #352]	; (8000bb4 <HAL_ETH_MspInit+0x188>)
 8000a52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a56:	4a57      	ldr	r2, [pc, #348]	; (8000bb4 <HAL_ETH_MspInit+0x188>)
 8000a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a5c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a60:	4b54      	ldr	r3, [pc, #336]	; (8000bb4 <HAL_ETH_MspInit+0x188>)
 8000a62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a6a:	623b      	str	r3, [r7, #32]
 8000a6c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000a6e:	4b51      	ldr	r3, [pc, #324]	; (8000bb4 <HAL_ETH_MspInit+0x188>)
 8000a70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a74:	4a4f      	ldr	r2, [pc, #316]	; (8000bb4 <HAL_ETH_MspInit+0x188>)
 8000a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a7a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a7e:	4b4d      	ldr	r3, [pc, #308]	; (8000bb4 <HAL_ETH_MspInit+0x188>)
 8000a80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a88:	61fb      	str	r3, [r7, #28]
 8000a8a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000a8c:	4b49      	ldr	r3, [pc, #292]	; (8000bb4 <HAL_ETH_MspInit+0x188>)
 8000a8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a92:	4a48      	ldr	r2, [pc, #288]	; (8000bb4 <HAL_ETH_MspInit+0x188>)
 8000a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a98:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a9c:	4b45      	ldr	r3, [pc, #276]	; (8000bb4 <HAL_ETH_MspInit+0x188>)
 8000a9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa6:	61bb      	str	r3, [r7, #24]
 8000aa8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aaa:	4b42      	ldr	r3, [pc, #264]	; (8000bb4 <HAL_ETH_MspInit+0x188>)
 8000aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab0:	4a40      	ldr	r2, [pc, #256]	; (8000bb4 <HAL_ETH_MspInit+0x188>)
 8000ab2:	f043 0304 	orr.w	r3, r3, #4
 8000ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aba:	4b3e      	ldr	r3, [pc, #248]	; (8000bb4 <HAL_ETH_MspInit+0x188>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	f003 0304 	and.w	r3, r3, #4
 8000ac4:	617b      	str	r3, [r7, #20]
 8000ac6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac8:	4b3a      	ldr	r3, [pc, #232]	; (8000bb4 <HAL_ETH_MspInit+0x188>)
 8000aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ace:	4a39      	ldr	r2, [pc, #228]	; (8000bb4 <HAL_ETH_MspInit+0x188>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad8:	4b36      	ldr	r3, [pc, #216]	; (8000bb4 <HAL_ETH_MspInit+0x188>)
 8000ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	4b33      	ldr	r3, [pc, #204]	; (8000bb4 <HAL_ETH_MspInit+0x188>)
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aec:	4a31      	ldr	r2, [pc, #196]	; (8000bb4 <HAL_ETH_MspInit+0x188>)
 8000aee:	f043 0302 	orr.w	r3, r3, #2
 8000af2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af6:	4b2f      	ldr	r3, [pc, #188]	; (8000bb4 <HAL_ETH_MspInit+0x188>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afc:	f003 0302 	and.w	r3, r3, #2
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b04:	4b2b      	ldr	r3, [pc, #172]	; (8000bb4 <HAL_ETH_MspInit+0x188>)
 8000b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0a:	4a2a      	ldr	r2, [pc, #168]	; (8000bb4 <HAL_ETH_MspInit+0x188>)
 8000b0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b14:	4b27      	ldr	r3, [pc, #156]	; (8000bb4 <HAL_ETH_MspInit+0x188>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b22:	2332      	movs	r3, #50	; 0x32
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b32:	230b      	movs	r3, #11
 8000b34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	481e      	ldr	r0, [pc, #120]	; (8000bb8 <HAL_ETH_MspInit+0x18c>)
 8000b3e:	f000 ff6f 	bl	8001a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b42:	2386      	movs	r3, #134	; 0x86
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b52:	230b      	movs	r3, #11
 8000b54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4817      	ldr	r0, [pc, #92]	; (8000bbc <HAL_ETH_MspInit+0x190>)
 8000b5e:	f000 ff5f 	bl	8001a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b74:	230b      	movs	r3, #11
 8000b76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4810      	ldr	r0, [pc, #64]	; (8000bc0 <HAL_ETH_MspInit+0x194>)
 8000b80:	f000 ff4e 	bl	8001a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b84:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b96:	230b      	movs	r3, #11
 8000b98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4808      	ldr	r0, [pc, #32]	; (8000bc4 <HAL_ETH_MspInit+0x198>)
 8000ba2:	f000 ff3d 	bl	8001a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ba6:	bf00      	nop
 8000ba8:	3738      	adds	r7, #56	; 0x38
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40028000 	.word	0x40028000
 8000bb4:	58024400 	.word	0x58024400
 8000bb8:	58020800 	.word	0x58020800
 8000bbc:	58020000 	.word	0x58020000
 8000bc0:	58020400 	.word	0x58020400
 8000bc4:	58021800 	.word	0x58021800

08000bc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b0b6      	sub	sp, #216	; 0xd8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be0:	f107 0310 	add.w	r3, r7, #16
 8000be4:	22b4      	movs	r2, #180	; 0xb4
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f009 fc2d 	bl	800a448 <memset>
  if(huart->Instance==USART3)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a25      	ldr	r2, [pc, #148]	; (8000c88 <HAL_UART_MspInit+0xc0>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d142      	bne.n	8000c7e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c02:	f107 0310 	add.w	r3, r7, #16
 8000c06:	4618      	mov	r0, r3
 8000c08:	f003 fa1c 	bl	8004044 <HAL_RCCEx_PeriphCLKConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c12:	f7ff feeb 	bl	80009ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c16:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <HAL_UART_MspInit+0xc4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	4a1b      	ldr	r2, [pc, #108]	; (8000c8c <HAL_UART_MspInit+0xc4>)
 8000c1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c22:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <HAL_UART_MspInit+0xc4>)
 8000c28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c34:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <HAL_UART_MspInit+0xc4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	4a14      	ldr	r2, [pc, #80]	; (8000c8c <HAL_UART_MspInit+0xc4>)
 8000c3c:	f043 0308 	orr.w	r3, r3, #8
 8000c40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <HAL_UART_MspInit+0xc4>)
 8000c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4a:	f003 0308 	and.w	r3, r3, #8
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000c52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c6c:	2307      	movs	r3, #7
 8000c6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c72:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000c76:	4619      	mov	r1, r3
 8000c78:	4805      	ldr	r0, [pc, #20]	; (8000c90 <HAL_UART_MspInit+0xc8>)
 8000c7a:	f000 fed1 	bl	8001a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c7e:	bf00      	nop
 8000c80:	37d8      	adds	r7, #216	; 0xd8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40004800 	.word	0x40004800
 8000c8c:	58024400 	.word	0x58024400
 8000c90:	58020c00 	.word	0x58020c00

08000c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <NMI_Handler+0x4>

08000c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <HardFault_Handler+0x4>

08000ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <MemManage_Handler+0x4>

08000ca6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <BusFault_Handler+0x4>

08000cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <UsageFault_Handler+0x4>

08000cb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce0:	f000 f920 	bl	8000f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <OTG_HS_IRQHandler+0x10>)
 8000cee:	f001 f9af 	bl	8002050 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	24001ae8 	.word	0x24001ae8

08000cfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d00:	4b32      	ldr	r3, [pc, #200]	; (8000dcc <SystemInit+0xd0>)
 8000d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d06:	4a31      	ldr	r2, [pc, #196]	; (8000dcc <SystemInit+0xd0>)
 8000d08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d10:	4b2f      	ldr	r3, [pc, #188]	; (8000dd0 <SystemInit+0xd4>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f003 030f 	and.w	r3, r3, #15
 8000d18:	2b06      	cmp	r3, #6
 8000d1a:	d807      	bhi.n	8000d2c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d1c:	4b2c      	ldr	r3, [pc, #176]	; (8000dd0 <SystemInit+0xd4>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f023 030f 	bic.w	r3, r3, #15
 8000d24:	4a2a      	ldr	r2, [pc, #168]	; (8000dd0 <SystemInit+0xd4>)
 8000d26:	f043 0307 	orr.w	r3, r3, #7
 8000d2a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d2c:	4b29      	ldr	r3, [pc, #164]	; (8000dd4 <SystemInit+0xd8>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a28      	ldr	r2, [pc, #160]	; (8000dd4 <SystemInit+0xd8>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d38:	4b26      	ldr	r3, [pc, #152]	; (8000dd4 <SystemInit+0xd8>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d3e:	4b25      	ldr	r3, [pc, #148]	; (8000dd4 <SystemInit+0xd8>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	4924      	ldr	r1, [pc, #144]	; (8000dd4 <SystemInit+0xd8>)
 8000d44:	4b24      	ldr	r3, [pc, #144]	; (8000dd8 <SystemInit+0xdc>)
 8000d46:	4013      	ands	r3, r2
 8000d48:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d4a:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <SystemInit+0xd4>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f003 0308 	and.w	r3, r3, #8
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d007      	beq.n	8000d66 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d56:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <SystemInit+0xd4>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f023 030f 	bic.w	r3, r3, #15
 8000d5e:	4a1c      	ldr	r2, [pc, #112]	; (8000dd0 <SystemInit+0xd4>)
 8000d60:	f043 0307 	orr.w	r3, r3, #7
 8000d64:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d66:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <SystemInit+0xd8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <SystemInit+0xd8>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <SystemInit+0xd8>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d78:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <SystemInit+0xd8>)
 8000d7a:	4a18      	ldr	r2, [pc, #96]	; (8000ddc <SystemInit+0xe0>)
 8000d7c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <SystemInit+0xd8>)
 8000d80:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <SystemInit+0xe4>)
 8000d82:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d84:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <SystemInit+0xd8>)
 8000d86:	4a17      	ldr	r2, [pc, #92]	; (8000de4 <SystemInit+0xe8>)
 8000d88:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d8a:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <SystemInit+0xd8>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d90:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <SystemInit+0xd8>)
 8000d92:	4a14      	ldr	r2, [pc, #80]	; (8000de4 <SystemInit+0xe8>)
 8000d94:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <SystemInit+0xd8>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <SystemInit+0xd8>)
 8000d9e:	4a11      	ldr	r2, [pc, #68]	; (8000de4 <SystemInit+0xe8>)
 8000da0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <SystemInit+0xd8>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <SystemInit+0xd8>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a09      	ldr	r2, [pc, #36]	; (8000dd4 <SystemInit+0xd8>)
 8000dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000db2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <SystemInit+0xd8>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <SystemInit+0xec>)
 8000dbc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000dc0:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00
 8000dd0:	52002000 	.word	0x52002000
 8000dd4:	58024400 	.word	0x58024400
 8000dd8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ddc:	02020200 	.word	0x02020200
 8000de0:	01ff0000 	.word	0x01ff0000
 8000de4:	01010280 	.word	0x01010280
 8000de8:	52004000 	.word	0x52004000

08000dec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000dec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000df0:	f7ff ff84 	bl	8000cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df4:	480c      	ldr	r0, [pc, #48]	; (8000e28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000df6:	490d      	ldr	r1, [pc, #52]	; (8000e2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000df8:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dfc:	e002      	b.n	8000e04 <LoopCopyDataInit>

08000dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e02:	3304      	adds	r3, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e08:	d3f9      	bcc.n	8000dfe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e0c:	4c0a      	ldr	r4, [pc, #40]	; (8000e38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e10:	e001      	b.n	8000e16 <LoopFillZerobss>

08000e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e14:	3204      	adds	r2, #4

08000e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e18:	d3fb      	bcc.n	8000e12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e1a:	f009 fae3 	bl	800a3e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1e:	f7ff fbf1 	bl	8000604 <main>
  bx  lr
 8000e22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e24:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000e28:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e2c:	24000184 	.word	0x24000184
  ldr r2, =_sidata
 8000e30:	0800a500 	.word	0x0800a500
  ldr r2, =_sbss
 8000e34:	24000244 	.word	0x24000244
  ldr r4, =_ebss
 8000e38:	24001ef0 	.word	0x24001ef0

08000e3c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC3_IRQHandler>
	...

08000e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e46:	2003      	movs	r0, #3
 8000e48:	f000 f994 	bl	8001174 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e4c:	f002 ff24 	bl	8003c98 <HAL_RCC_GetSysClockFreq>
 8000e50:	4602      	mov	r2, r0
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_Init+0x68>)
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	0a1b      	lsrs	r3, r3, #8
 8000e58:	f003 030f 	and.w	r3, r3, #15
 8000e5c:	4913      	ldr	r1, [pc, #76]	; (8000eac <HAL_Init+0x6c>)
 8000e5e:	5ccb      	ldrb	r3, [r1, r3]
 8000e60:	f003 031f 	and.w	r3, r3, #31
 8000e64:	fa22 f303 	lsr.w	r3, r2, r3
 8000e68:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <HAL_Init+0x68>)
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	4a0e      	ldr	r2, [pc, #56]	; (8000eac <HAL_Init+0x6c>)
 8000e74:	5cd3      	ldrb	r3, [r2, r3]
 8000e76:	f003 031f 	and.w	r3, r3, #31
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e80:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <HAL_Init+0x70>)
 8000e82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e84:	4a0b      	ldr	r2, [pc, #44]	; (8000eb4 <HAL_Init+0x74>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f000 f814 	bl	8000eb8 <HAL_InitTick>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e002      	b.n	8000ea0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e9a:	f7ff fdad 	bl	80009f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e9e:	2300      	movs	r3, #0
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	58024400 	.word	0x58024400
 8000eac:	0800a4b8 	.word	0x0800a4b8
 8000eb0:	24000004 	.word	0x24000004
 8000eb4:	24000000 	.word	0x24000000

08000eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <HAL_InitTick+0x60>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d101      	bne.n	8000ecc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e021      	b.n	8000f10 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ecc:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <HAL_InitTick+0x64>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <HAL_InitTick+0x60>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 f979 	bl	80011da <HAL_SYSTICK_Config>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e00e      	b.n	8000f10 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b0f      	cmp	r3, #15
 8000ef6:	d80a      	bhi.n	8000f0e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295
 8000f00:	f000 f943 	bl	800118a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f04:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <HAL_InitTick+0x68>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e000      	b.n	8000f10 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	2400000c 	.word	0x2400000c
 8000f1c:	24000000 	.word	0x24000000
 8000f20:	24000008 	.word	0x24000008

08000f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_IncTick+0x20>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_IncTick+0x24>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <HAL_IncTick+0x24>)
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	2400000c 	.word	0x2400000c
 8000f48:	24000614 	.word	0x24000614

08000f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f50:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <HAL_GetTick+0x14>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	24000614 	.word	0x24000614

08000f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f6c:	f7ff ffee 	bl	8000f4c <HAL_GetTick>
 8000f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f7c:	d005      	beq.n	8000f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <HAL_Delay+0x44>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4413      	add	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f8a:	bf00      	nop
 8000f8c:	f7ff ffde 	bl	8000f4c <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d8f7      	bhi.n	8000f8c <HAL_Delay+0x28>
  {
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2400000c 	.word	0x2400000c

08000fac <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8000fbc:	4904      	ldr	r1, [pc, #16]	; (8000fd0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	604b      	str	r3, [r1, #4]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	58000400 	.word	0x58000400

08000fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <__NVIC_SetPriorityGrouping+0x40>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8000ffe:	4313      	orrs	r3, r2
 8001000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001002:	4a04      	ldr	r2, [pc, #16]	; (8001014 <__NVIC_SetPriorityGrouping+0x40>)
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	60d3      	str	r3, [r2, #12]
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00
 8001018:	05fa0000 	.word	0x05fa0000

0800101c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <__NVIC_GetPriorityGrouping+0x18>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	f003 0307 	and.w	r3, r3, #7
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001042:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001046:	2b00      	cmp	r3, #0
 8001048:	db0b      	blt.n	8001062 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104a:	88fb      	ldrh	r3, [r7, #6]
 800104c:	f003 021f 	and.w	r2, r3, #31
 8001050:	4907      	ldr	r1, [pc, #28]	; (8001070 <__NVIC_EnableIRQ+0x38>)
 8001052:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001056:	095b      	lsrs	r3, r3, #5
 8001058:	2001      	movs	r0, #1
 800105a:	fa00 f202 	lsl.w	r2, r0, r2
 800105e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000e100 	.word	0xe000e100

08001074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001080:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db0a      	blt.n	800109e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	490c      	ldr	r1, [pc, #48]	; (80010c0 <__NVIC_SetPriority+0x4c>)
 800108e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800109c:	e00a      	b.n	80010b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4908      	ldr	r1, [pc, #32]	; (80010c4 <__NVIC_SetPriority+0x50>)
 80010a4:	88fb      	ldrh	r3, [r7, #6]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	3b04      	subs	r3, #4
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	440b      	add	r3, r1
 80010b2:	761a      	strb	r2, [r3, #24]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	; 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf28      	it	cs
 80010e6:	2304      	movcs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d902      	bls.n	80010f8 <NVIC_EncodePriority+0x30>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3b03      	subs	r3, #3
 80010f6:	e000      	b.n	80010fa <NVIC_EncodePriority+0x32>
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001110:	f04f 31ff 	mov.w	r1, #4294967295
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43d9      	mvns	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4313      	orrs	r3, r2
         );
}
 8001122:	4618      	mov	r0, r3
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001140:	d301      	bcc.n	8001146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001142:	2301      	movs	r3, #1
 8001144:	e00f      	b.n	8001166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001146:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <SysTick_Config+0x40>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114e:	210f      	movs	r1, #15
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f7ff ff8e 	bl	8001074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <SysTick_Config+0x40>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115e:	4b04      	ldr	r3, [pc, #16]	; (8001170 <SysTick_Config+0x40>)
 8001160:	2207      	movs	r2, #7
 8001162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	e000e010 	.word	0xe000e010

08001174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff29 	bl	8000fd4 <__NVIC_SetPriorityGrouping>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001198:	f7ff ff40 	bl	800101c <__NVIC_GetPriorityGrouping>
 800119c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	68b9      	ldr	r1, [r7, #8]
 80011a2:	6978      	ldr	r0, [r7, #20]
 80011a4:	f7ff ff90 	bl	80010c8 <NVIC_EncodePriority>
 80011a8:	4602      	mov	r2, r0
 80011aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff5f 	bl	8001074 <__NVIC_SetPriority>
}
 80011b6:	bf00      	nop
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff33 	bl	8001038 <__NVIC_EnableIRQ>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ffa4 	bl	8001130 <SysTick_Config>
 80011e8:	4603      	mov	r3, r0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e0c6      	b.n	8001394 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800120a:	2b00      	cmp	r3, #0
 800120c:	d102      	bne.n	8001214 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff fc0c 	bl	8000a2c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2223      	movs	r2, #35	; 0x23
 8001218:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121a:	4b60      	ldr	r3, [pc, #384]	; (800139c <HAL_ETH_Init+0x1a8>)
 800121c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001220:	4a5e      	ldr	r2, [pc, #376]	; (800139c <HAL_ETH_Init+0x1a8>)
 8001222:	f043 0302 	orr.w	r3, r3, #2
 8001226:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800122a:	4b5c      	ldr	r3, [pc, #368]	; (800139c <HAL_ETH_Init+0x1a8>)
 800122c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	7a1b      	ldrb	r3, [r3, #8]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d103      	bne.n	8001248 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001240:	2000      	movs	r0, #0
 8001242:	f7ff feb3 	bl	8000fac <HAL_SYSCFG_ETHInterfaceSelect>
 8001246:	e003      	b.n	8001250 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001248:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800124c:	f7ff feae 	bl	8000fac <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f042 0201 	orr.w	r2, r2, #1
 8001262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001266:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001268:	f7ff fe70 	bl	8000f4c <HAL_GetTick>
 800126c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800126e:	e00f      	b.n	8001290 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001270:	f7ff fe6c 	bl	8000f4c <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800127e:	d907      	bls.n	8001290 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2204      	movs	r2, #4
 8001284:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	22e0      	movs	r2, #224	; 0xe0
 800128a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e081      	b.n	8001394 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1e6      	bne.n	8001270 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 fac0 	bl	8001828 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80012a8:	f002 fe70 	bl	8003f8c <HAL_RCC_GetHCLKFreq>
 80012ac:	4603      	mov	r3, r0
 80012ae:	4a3c      	ldr	r2, [pc, #240]	; (80013a0 <HAL_ETH_Init+0x1ac>)
 80012b0:	fba2 2303 	umull	r2, r3, r2, r3
 80012b4:	0c9a      	lsrs	r2, r3, #18
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	3a01      	subs	r2, #1
 80012bc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f000 fa13 	bl	80016ec <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80012dc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80012e0:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	f003 0303 	and.w	r3, r3, #3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d007      	beq.n	80012fe <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2201      	movs	r2, #1
 80012f2:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	22e0      	movs	r2, #224	; 0xe0
 80012f8:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e04a      	b.n	8001394 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	f241 1308 	movw	r3, #4360	; 0x1108
 8001306:	4413      	add	r3, r2
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	4b26      	ldr	r3, [pc, #152]	; (80013a4 <HAL_ETH_Init+0x1b0>)
 800130c:	4013      	ands	r3, r2
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	6952      	ldr	r2, [r2, #20]
 8001312:	0052      	lsls	r2, r2, #1
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	6809      	ldr	r1, [r1, #0]
 8001318:	431a      	orrs	r2, r3
 800131a:	f241 1308 	movw	r3, #4360	; 0x1108
 800131e:	440b      	add	r3, r1
 8001320:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 fad8 	bl	80018d8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f000 fb1c 	bl	8001966 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	3305      	adds	r3, #5
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	021a      	lsls	r2, r3, #8
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	3304      	adds	r3, #4
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4619      	mov	r1, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	3303      	adds	r3, #3
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	061a      	lsls	r2, r3, #24
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	3302      	adds	r3, #2
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	041b      	lsls	r3, r3, #16
 8001360:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	3301      	adds	r3, #1
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800136c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800137a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800137c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2210      	movs	r2, #16
 800138a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2210      	movs	r2, #16
 8001390:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	58024400 	.word	0x58024400
 80013a0:	431bde83 	.word	0x431bde83
 80013a4:	ffff8001 	.word	0xffff8001

080013a8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80013ba:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	791b      	ldrb	r3, [r3, #4]
 80013c0:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80013c2:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	7b1b      	ldrb	r3, [r3, #12]
 80013c8:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80013ca:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	7b5b      	ldrb	r3, [r3, #13]
 80013d0:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80013d2:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	7b9b      	ldrb	r3, [r3, #14]
 80013d8:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80013da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	7bdb      	ldrb	r3, [r3, #15]
 80013e0:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80013e2:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	7c12      	ldrb	r2, [r2, #16]
 80013e8:	2a00      	cmp	r2, #0
 80013ea:	d102      	bne.n	80013f2 <ETH_SetMACConfig+0x4a>
 80013ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013f0:	e000      	b.n	80013f4 <ETH_SetMACConfig+0x4c>
 80013f2:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80013f4:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	7c52      	ldrb	r2, [r2, #17]
 80013fa:	2a00      	cmp	r2, #0
 80013fc:	d102      	bne.n	8001404 <ETH_SetMACConfig+0x5c>
 80013fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001402:	e000      	b.n	8001406 <ETH_SetMACConfig+0x5e>
 8001404:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001406:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	7c9b      	ldrb	r3, [r3, #18]
 800140c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800140e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001414:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800141a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	7f1b      	ldrb	r3, [r3, #28]
 8001420:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001422:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	7f5b      	ldrb	r3, [r3, #29]
 8001428:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800142a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	7f92      	ldrb	r2, [r2, #30]
 8001430:	2a00      	cmp	r2, #0
 8001432:	d102      	bne.n	800143a <ETH_SetMACConfig+0x92>
 8001434:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001438:	e000      	b.n	800143c <ETH_SetMACConfig+0x94>
 800143a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800143c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	7fdb      	ldrb	r3, [r3, #31]
 8001442:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001444:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	f892 2020 	ldrb.w	r2, [r2, #32]
 800144c:	2a00      	cmp	r2, #0
 800144e:	d102      	bne.n	8001456 <ETH_SetMACConfig+0xae>
 8001450:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001454:	e000      	b.n	8001458 <ETH_SetMACConfig+0xb0>
 8001456:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001458:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800145e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001466:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001468:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800146e:	4313      	orrs	r3, r2
 8001470:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b56      	ldr	r3, [pc, #344]	; (80015d4 <ETH_SetMACConfig+0x22c>)
 800147a:	4013      	ands	r3, r2
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	6812      	ldr	r2, [r2, #0]
 8001480:	68f9      	ldr	r1, [r7, #12]
 8001482:	430b      	orrs	r3, r1
 8001484:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800148a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001492:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001494:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800149c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800149e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80014a6:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80014a8:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80014b0:	2a00      	cmp	r2, #0
 80014b2:	d102      	bne.n	80014ba <ETH_SetMACConfig+0x112>
 80014b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014b8:	e000      	b.n	80014bc <ETH_SetMACConfig+0x114>
 80014ba:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80014bc:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80014c2:	4313      	orrs	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	4b42      	ldr	r3, [pc, #264]	; (80015d8 <ETH_SetMACConfig+0x230>)
 80014ce:	4013      	ands	r3, r2
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	6812      	ldr	r2, [r2, #0]
 80014d4:	68f9      	ldr	r1, [r7, #12]
 80014d6:	430b      	orrs	r3, r1
 80014d8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014e0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80014e6:	4313      	orrs	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	68da      	ldr	r2, [r3, #12]
 80014f0:	4b3a      	ldr	r3, [pc, #232]	; (80015dc <ETH_SetMACConfig+0x234>)
 80014f2:	4013      	ands	r3, r2
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6812      	ldr	r2, [r2, #0]
 80014f8:	68f9      	ldr	r1, [r7, #12]
 80014fa:	430b      	orrs	r3, r1
 80014fc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001504:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800150a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001512:	2a00      	cmp	r2, #0
 8001514:	d101      	bne.n	800151a <ETH_SetMACConfig+0x172>
 8001516:	2280      	movs	r2, #128	; 0x80
 8001518:	e000      	b.n	800151c <ETH_SetMACConfig+0x174>
 800151a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800151c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001522:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001524:	4313      	orrs	r3, r2
 8001526:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800152e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001532:	4013      	ands	r3, r2
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	6812      	ldr	r2, [r2, #0]
 8001538:	68f9      	ldr	r1, [r7, #12]
 800153a:	430b      	orrs	r3, r1
 800153c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001544:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800154c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800154e:	4313      	orrs	r3, r2
 8001550:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800155a:	f023 0103 	bic.w	r1, r3, #3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	430a      	orrs	r2, r1
 8001566:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001572:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	430a      	orrs	r2, r1
 8001580:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800158e:	2a00      	cmp	r2, #0
 8001590:	d101      	bne.n	8001596 <ETH_SetMACConfig+0x1ee>
 8001592:	2240      	movs	r2, #64	; 0x40
 8001594:	e000      	b.n	8001598 <ETH_SetMACConfig+0x1f0>
 8001596:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001598:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80015a0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80015a2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80015aa:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80015ac:	4313      	orrs	r3, r2
 80015ae:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80015b8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68fa      	ldr	r2, [r7, #12]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80015c8:	bf00      	nop
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	00048083 	.word	0x00048083
 80015d8:	c0f88000 	.word	0xc0f88000
 80015dc:	fffffef0 	.word	0xfffffef0

080015e0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b38      	ldr	r3, [pc, #224]	; (80016d8 <ETH_SetDMAConfig+0xf8>)
 80015f6:	4013      	ands	r3, r2
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	6809      	ldr	r1, [r1, #0]
 8001600:	431a      	orrs	r2, r3
 8001602:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001606:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	791b      	ldrb	r3, [r3, #4]
 800160c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001612:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	7b1b      	ldrb	r3, [r3, #12]
 8001618:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800161a:	4313      	orrs	r3, r2
 800161c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	f241 0304 	movw	r3, #4100	; 0x1004
 8001626:	4413      	add	r3, r2
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	4b2c      	ldr	r3, [pc, #176]	; (80016dc <ETH_SetDMAConfig+0xfc>)
 800162c:	4013      	ands	r3, r2
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	6811      	ldr	r1, [r2, #0]
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	431a      	orrs	r2, r3
 8001636:	f241 0304 	movw	r3, #4100	; 0x1004
 800163a:	440b      	add	r3, r1
 800163c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	7b5b      	ldrb	r3, [r3, #13]
 8001642:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001648:	4313      	orrs	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <ETH_SetDMAConfig+0x100>)
 8001658:	4013      	ands	r3, r2
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	6811      	ldr	r1, [r2, #0]
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	431a      	orrs	r2, r3
 8001662:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001666:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	7d1b      	ldrb	r3, [r3, #20]
 8001670:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001672:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	7f5b      	ldrb	r3, [r3, #29]
 8001678:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800167a:	4313      	orrs	r3, r2
 800167c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	f241 1304 	movw	r3, #4356	; 0x1104
 8001686:	4413      	add	r3, r2
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <ETH_SetDMAConfig+0x104>)
 800168c:	4013      	ands	r3, r2
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6811      	ldr	r1, [r2, #0]
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	431a      	orrs	r2, r3
 8001696:	f241 1304 	movw	r3, #4356	; 0x1104
 800169a:	440b      	add	r3, r1
 800169c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	7f1b      	ldrb	r3, [r3, #28]
 80016a2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80016a8:	4313      	orrs	r3, r2
 80016aa:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	f241 1308 	movw	r3, #4360	; 0x1108
 80016b4:	4413      	add	r3, r2
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <ETH_SetDMAConfig+0x108>)
 80016ba:	4013      	ands	r3, r2
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6811      	ldr	r1, [r2, #0]
 80016c0:	68fa      	ldr	r2, [r7, #12]
 80016c2:	431a      	orrs	r2, r3
 80016c4:	f241 1308 	movw	r3, #4360	; 0x1108
 80016c8:	440b      	add	r3, r1
 80016ca:	601a      	str	r2, [r3, #0]
}
 80016cc:	bf00      	nop
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	ffff87fd 	.word	0xffff87fd
 80016dc:	ffff2ffe 	.word	0xffff2ffe
 80016e0:	fffec000 	.word	0xfffec000
 80016e4:	ffc0efef 	.word	0xffc0efef
 80016e8:	7fc0ffff 	.word	0x7fc0ffff

080016ec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b0a4      	sub	sp, #144	; 0x90
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80016f4:	2301      	movs	r3, #1
 80016f6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80016fa:	2300      	movs	r3, #0
 80016fc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001704:	2300      	movs	r3, #0
 8001706:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800170a:	2301      	movs	r3, #1
 800170c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001710:	2301      	movs	r3, #1
 8001712:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001716:	2301      	movs	r3, #1
 8001718:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800171c:	2300      	movs	r3, #0
 800171e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001722:	2301      	movs	r3, #1
 8001724:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800172c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800172e:	2300      	movs	r3, #0
 8001730:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001734:	2300      	movs	r3, #0
 8001736:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001738:	2300      	movs	r3, #0
 800173a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800173e:	2300      	movs	r3, #0
 8001740:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001744:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001748:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001750:	2300      	movs	r3, #0
 8001752:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001754:	2301      	movs	r3, #1
 8001756:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001760:	2300      	movs	r3, #0
 8001762:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001766:	2300      	movs	r3, #0
 8001768:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800176a:	2300      	movs	r3, #0
 800176c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800176e:	2300      	movs	r3, #0
 8001770:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001778:	2300      	movs	r3, #0
 800177a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800177e:	2301      	movs	r3, #1
 8001780:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001784:	2320      	movs	r3, #32
 8001786:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800178a:	2301      	movs	r3, #1
 800178c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001796:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800179c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017a0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80017a8:	2302      	movs	r3, #2
 80017aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80017c0:	2301      	movs	r3, #1
 80017c2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80017c6:	2300      	movs	r3, #0
 80017c8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80017ca:	2301      	movs	r3, #1
 80017cc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80017d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d4:	4619      	mov	r1, r3
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff fde6 	bl	80013a8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80017dc:	2301      	movs	r3, #1
 80017de:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80017e0:	2301      	movs	r3, #1
 80017e2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80017f6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017fa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001800:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001804:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800180c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001812:	f107 0308 	add.w	r3, r7, #8
 8001816:	4619      	mov	r1, r3
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff fee1 	bl	80015e0 <ETH_SetDMAConfig>
}
 800181e:	bf00      	nop
 8001820:	3790      	adds	r7, #144	; 0x90
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001838:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001840:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001842:	f002 fba3 	bl	8003f8c <HAL_RCC_GetHCLKFreq>
 8001846:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	4a1e      	ldr	r2, [pc, #120]	; (80018c4 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d908      	bls.n	8001862 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	4a1d      	ldr	r2, [pc, #116]	; (80018c8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d804      	bhi.n	8001862 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	e027      	b.n	80018b2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	4a18      	ldr	r2, [pc, #96]	; (80018c8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d908      	bls.n	800187c <ETH_MAC_MDIO_ClkConfig+0x54>
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	4a17      	ldr	r2, [pc, #92]	; (80018cc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d204      	bcs.n	800187c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	e01a      	b.n	80018b2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	4a13      	ldr	r2, [pc, #76]	; (80018cc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d303      	bcc.n	800188c <ETH_MAC_MDIO_ClkConfig+0x64>
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d911      	bls.n	80018b0 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	4a10      	ldr	r2, [pc, #64]	; (80018d0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d908      	bls.n	80018a6 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	4a0f      	ldr	r2, [pc, #60]	; (80018d4 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d804      	bhi.n	80018a6 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	e005      	b.n	80018b2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	e000      	b.n	80018b2 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80018b0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80018bc:	bf00      	nop
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	01312cff 	.word	0x01312cff
 80018c8:	02160ebf 	.word	0x02160ebf
 80018cc:	03938700 	.word	0x03938700
 80018d0:	05f5e0ff 	.word	0x05f5e0ff
 80018d4:	08f0d17f 	.word	0x08f0d17f

080018d8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018e0:	2300      	movs	r3, #0
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	e01d      	b.n	8001922 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68d9      	ldr	r1, [r3, #12]
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	4613      	mov	r3, r2
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	4413      	add	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	440b      	add	r3, r1
 80018f6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	2200      	movs	r2, #0
 8001902:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	2200      	movs	r2, #0
 800190e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001910:	68b9      	ldr	r1, [r7, #8]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	3206      	adds	r2, #6
 8001918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	3301      	adds	r3, #1
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2b03      	cmp	r3, #3
 8001926:	d9de      	bls.n	80018e6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	f241 132c 	movw	r3, #4396	; 0x112c
 8001936:	4413      	add	r3, r2
 8001938:	2203      	movs	r2, #3
 800193a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68d9      	ldr	r1, [r3, #12]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	f241 1314 	movw	r3, #4372	; 0x1114
 8001948:	4413      	add	r3, r2
 800194a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001958:	601a      	str	r2, [r3, #0]
}
 800195a:	bf00      	nop
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001966:	b480      	push	{r7}
 8001968:	b085      	sub	sp, #20
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	e024      	b.n	80019be <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6919      	ldr	r1, [r3, #16]
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	4613      	mov	r3, r2
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	4413      	add	r3, r2
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	440b      	add	r3, r1
 8001984:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	2200      	movs	r2, #0
 8001990:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	2200      	movs	r2, #0
 800199c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	2200      	movs	r2, #0
 80019a8:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	6879      	ldr	r1, [r7, #4]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	3310      	adds	r3, #16
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	3301      	adds	r3, #1
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	d9d7      	bls.n	8001974 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	f241 1330 	movw	r3, #4400	; 0x1130
 80019ea:	4413      	add	r3, r2
 80019ec:	2203      	movs	r2, #3
 80019ee:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6919      	ldr	r1, [r3, #16]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	f241 131c 	movw	r3, #4380	; 0x111c
 80019fc:	4413      	add	r3, r2
 80019fe:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	f241 1328 	movw	r3, #4392	; 0x1128
 8001a10:	4413      	add	r3, r2
 8001a12:	6019      	str	r1, [r3, #0]
}
 8001a14:	bf00      	nop
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b089      	sub	sp, #36	; 0x24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001a2e:	4b86      	ldr	r3, [pc, #536]	; (8001c48 <HAL_GPIO_Init+0x228>)
 8001a30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a32:	e18c      	b.n	8001d4e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	2101      	movs	r1, #1
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 817e 	beq.w	8001d48 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d005      	beq.n	8001a64 <HAL_GPIO_Init+0x44>
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d130      	bne.n	8001ac6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	2203      	movs	r2, #3
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	091b      	lsrs	r3, r3, #4
 8001ab0:	f003 0201 	and.w	r2, r3, #1
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	d017      	beq.n	8001b02 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	2203      	movs	r2, #3
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d123      	bne.n	8001b56 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	08da      	lsrs	r2, r3, #3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3208      	adds	r2, #8
 8001b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	220f      	movs	r2, #15
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	691a      	ldr	r2, [r3, #16]
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	08da      	lsrs	r2, r3, #3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3208      	adds	r2, #8
 8001b50:	69b9      	ldr	r1, [r7, #24]
 8001b52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	2203      	movs	r2, #3
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0203 	and.w	r2, r3, #3
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 80d8 	beq.w	8001d48 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b98:	4b2c      	ldr	r3, [pc, #176]	; (8001c4c <HAL_GPIO_Init+0x22c>)
 8001b9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b9e:	4a2b      	ldr	r2, [pc, #172]	; (8001c4c <HAL_GPIO_Init+0x22c>)
 8001ba0:	f043 0302 	orr.w	r3, r3, #2
 8001ba4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ba8:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <HAL_GPIO_Init+0x22c>)
 8001baa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bb6:	4a26      	ldr	r2, [pc, #152]	; (8001c50 <HAL_GPIO_Init+0x230>)
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	089b      	lsrs	r3, r3, #2
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	220f      	movs	r2, #15
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a1d      	ldr	r2, [pc, #116]	; (8001c54 <HAL_GPIO_Init+0x234>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d04a      	beq.n	8001c78 <HAL_GPIO_Init+0x258>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a1c      	ldr	r2, [pc, #112]	; (8001c58 <HAL_GPIO_Init+0x238>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d02b      	beq.n	8001c42 <HAL_GPIO_Init+0x222>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a1b      	ldr	r2, [pc, #108]	; (8001c5c <HAL_GPIO_Init+0x23c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d025      	beq.n	8001c3e <HAL_GPIO_Init+0x21e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a1a      	ldr	r2, [pc, #104]	; (8001c60 <HAL_GPIO_Init+0x240>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d01f      	beq.n	8001c3a <HAL_GPIO_Init+0x21a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a19      	ldr	r2, [pc, #100]	; (8001c64 <HAL_GPIO_Init+0x244>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d019      	beq.n	8001c36 <HAL_GPIO_Init+0x216>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a18      	ldr	r2, [pc, #96]	; (8001c68 <HAL_GPIO_Init+0x248>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d013      	beq.n	8001c32 <HAL_GPIO_Init+0x212>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a17      	ldr	r2, [pc, #92]	; (8001c6c <HAL_GPIO_Init+0x24c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d00d      	beq.n	8001c2e <HAL_GPIO_Init+0x20e>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a16      	ldr	r2, [pc, #88]	; (8001c70 <HAL_GPIO_Init+0x250>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d007      	beq.n	8001c2a <HAL_GPIO_Init+0x20a>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a15      	ldr	r2, [pc, #84]	; (8001c74 <HAL_GPIO_Init+0x254>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d101      	bne.n	8001c26 <HAL_GPIO_Init+0x206>
 8001c22:	2309      	movs	r3, #9
 8001c24:	e029      	b.n	8001c7a <HAL_GPIO_Init+0x25a>
 8001c26:	230a      	movs	r3, #10
 8001c28:	e027      	b.n	8001c7a <HAL_GPIO_Init+0x25a>
 8001c2a:	2307      	movs	r3, #7
 8001c2c:	e025      	b.n	8001c7a <HAL_GPIO_Init+0x25a>
 8001c2e:	2306      	movs	r3, #6
 8001c30:	e023      	b.n	8001c7a <HAL_GPIO_Init+0x25a>
 8001c32:	2305      	movs	r3, #5
 8001c34:	e021      	b.n	8001c7a <HAL_GPIO_Init+0x25a>
 8001c36:	2304      	movs	r3, #4
 8001c38:	e01f      	b.n	8001c7a <HAL_GPIO_Init+0x25a>
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e01d      	b.n	8001c7a <HAL_GPIO_Init+0x25a>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e01b      	b.n	8001c7a <HAL_GPIO_Init+0x25a>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e019      	b.n	8001c7a <HAL_GPIO_Init+0x25a>
 8001c46:	bf00      	nop
 8001c48:	58000080 	.word	0x58000080
 8001c4c:	58024400 	.word	0x58024400
 8001c50:	58000400 	.word	0x58000400
 8001c54:	58020000 	.word	0x58020000
 8001c58:	58020400 	.word	0x58020400
 8001c5c:	58020800 	.word	0x58020800
 8001c60:	58020c00 	.word	0x58020c00
 8001c64:	58021000 	.word	0x58021000
 8001c68:	58021400 	.word	0x58021400
 8001c6c:	58021800 	.word	0x58021800
 8001c70:	58021c00 	.word	0x58021c00
 8001c74:	58022400 	.word	0x58022400
 8001c78:	2300      	movs	r3, #0
 8001c7a:	69fa      	ldr	r2, [r7, #28]
 8001c7c:	f002 0203 	and.w	r2, r2, #3
 8001c80:	0092      	lsls	r2, r2, #2
 8001c82:	4093      	lsls	r3, r2
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c8a:	4938      	ldr	r1, [pc, #224]	; (8001d6c <HAL_GPIO_Init+0x34c>)
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	089b      	lsrs	r3, r3, #2
 8001c90:	3302      	adds	r3, #2
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001cbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001cec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	fa22 f303 	lsr.w	r3, r2, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f47f ae6b 	bne.w	8001a34 <HAL_GPIO_Init+0x14>
  }
}
 8001d5e:	bf00      	nop
 8001d60:	bf00      	nop
 8001d62:	3724      	adds	r7, #36	; 0x24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	58000400 	.word	0x58000400

08001d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	807b      	strh	r3, [r7, #2]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d80:	787b      	ldrb	r3, [r7, #1]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d86:	887a      	ldrh	r2, [r7, #2]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001d8c:	e003      	b.n	8001d96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d8e:	887b      	ldrh	r3, [r7, #2]
 8001d90:	041a      	lsls	r2, r3, #16
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	619a      	str	r2, [r3, #24]
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001da2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001da4:	b08f      	sub	sp, #60	; 0x3c
 8001da6:	af0a      	add	r7, sp, #40	; 0x28
 8001da8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e116      	b.n	8001fe2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d106      	bne.n	8001dd4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f007 ffbc 	bl	8009d4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d102      	bne.n	8001dee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f004 fec9 	bl	8006b8a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	603b      	str	r3, [r7, #0]
 8001dfe:	687e      	ldr	r6, [r7, #4]
 8001e00:	466d      	mov	r5, sp
 8001e02:	f106 0410 	add.w	r4, r6, #16
 8001e06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e12:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e16:	1d33      	adds	r3, r6, #4
 8001e18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e1a:	6838      	ldr	r0, [r7, #0]
 8001e1c:	f004 fd94 	bl	8006948 <USB_CoreInit>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d005      	beq.n	8001e32 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2202      	movs	r2, #2
 8001e2a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e0d7      	b.n	8001fe2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2100      	movs	r1, #0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f004 feb7 	bl	8006bac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e3e:	2300      	movs	r3, #0
 8001e40:	73fb      	strb	r3, [r7, #15]
 8001e42:	e04a      	b.n	8001eda <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e44:	7bfa      	ldrb	r2, [r7, #15]
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	1a9b      	subs	r3, r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	333d      	adds	r3, #61	; 0x3d
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e58:	7bfa      	ldrb	r2, [r7, #15]
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	1a9b      	subs	r3, r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	333c      	adds	r3, #60	; 0x3c
 8001e68:	7bfa      	ldrb	r2, [r7, #15]
 8001e6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e6c:	7bfa      	ldrb	r2, [r7, #15]
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
 8001e70:	b298      	uxth	r0, r3
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	1a9b      	subs	r3, r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	3342      	adds	r3, #66	; 0x42
 8001e80:	4602      	mov	r2, r0
 8001e82:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e84:	7bfa      	ldrb	r2, [r7, #15]
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	1a9b      	subs	r3, r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	333f      	adds	r3, #63	; 0x3f
 8001e94:	2200      	movs	r2, #0
 8001e96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e98:	7bfa      	ldrb	r2, [r7, #15]
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	1a9b      	subs	r3, r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	3344      	adds	r3, #68	; 0x44
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001eac:	7bfa      	ldrb	r2, [r7, #15]
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	1a9b      	subs	r3, r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	3348      	adds	r3, #72	; 0x48
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ec0:	7bfa      	ldrb	r2, [r7, #15]
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	1a9b      	subs	r3, r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	3350      	adds	r3, #80	; 0x50
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	73fb      	strb	r3, [r7, #15]
 8001eda:	7bfa      	ldrb	r2, [r7, #15]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d3af      	bcc.n	8001e44 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	73fb      	strb	r3, [r7, #15]
 8001ee8:	e044      	b.n	8001f74 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001eea:	7bfa      	ldrb	r2, [r7, #15]
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	1a9b      	subs	r3, r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f00:	7bfa      	ldrb	r2, [r7, #15]
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	1a9b      	subs	r3, r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001f12:	7bfa      	ldrb	r2, [r7, #15]
 8001f14:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f16:	7bfa      	ldrb	r2, [r7, #15]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	1a9b      	subs	r3, r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001f28:	2200      	movs	r2, #0
 8001f2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	1a9b      	subs	r3, r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f42:	7bfa      	ldrb	r2, [r7, #15]
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	1a9b      	subs	r3, r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	440b      	add	r3, r1
 8001f50:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f58:	7bfa      	ldrb	r2, [r7, #15]
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	1a9b      	subs	r3, r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
 8001f70:	3301      	adds	r3, #1
 8001f72:	73fb      	strb	r3, [r7, #15]
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d3b5      	bcc.n	8001eea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	603b      	str	r3, [r7, #0]
 8001f84:	687e      	ldr	r6, [r7, #4]
 8001f86:	466d      	mov	r5, sp
 8001f88:	f106 0410 	add.w	r4, r6, #16
 8001f8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f98:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f9c:	1d33      	adds	r3, r6, #4
 8001f9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fa0:	6838      	ldr	r0, [r7, #0]
 8001fa2:	f004 fe4f 	bl	8006c44 <USB_DevInit>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d005      	beq.n	8001fb8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2202      	movs	r2, #2
 8001fb0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e014      	b.n	8001fe2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d102      	bne.n	8001fd6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f001 f885 	bl	80030e0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f005 fee7 	bl	8007dae <USB_DevDisconnect>

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b084      	sub	sp, #16
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d101      	bne.n	8002006 <HAL_PCD_Start+0x1c>
 8002002:	2302      	movs	r3, #2
 8002004:	e020      	b.n	8002048 <HAL_PCD_Start+0x5e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002012:	2b01      	cmp	r3, #1
 8002014:	d109      	bne.n	800202a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800201a:	2b01      	cmp	r3, #1
 800201c:	d005      	beq.n	800202a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002022:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f004 fd9a 	bl	8006b68 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f005 fe97 	bl	8007d6c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002050:	b590      	push	{r4, r7, lr}
 8002052:	b08d      	sub	sp, #52	; 0x34
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f005 ff55 	bl	8007f16 <USB_GetMode>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	f040 83be 	bne.w	80027f0 <HAL_PCD_IRQHandler+0x7a0>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f005 feb9 	bl	8007df0 <USB_ReadInterrupts>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 83b4 	beq.w	80027ee <HAL_PCD_IRQHandler+0x79e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f005 feb0 	bl	8007df0 <USB_ReadInterrupts>
 8002090:	4603      	mov	r3, r0
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b02      	cmp	r3, #2
 8002098:	d107      	bne.n	80020aa <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	695a      	ldr	r2, [r3, #20]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f002 0202 	and.w	r2, r2, #2
 80020a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f005 fe9e 	bl	8007df0 <USB_ReadInterrupts>
 80020b4:	4603      	mov	r3, r0
 80020b6:	f003 0310 	and.w	r3, r3, #16
 80020ba:	2b10      	cmp	r3, #16
 80020bc:	d161      	bne.n	8002182 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	699a      	ldr	r2, [r3, #24]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0210 	bic.w	r2, r2, #16
 80020cc:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80020ce:	6a3b      	ldr	r3, [r7, #32]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	f003 020f 	and.w	r2, r3, #15
 80020da:	4613      	mov	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	1a9b      	subs	r3, r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	3304      	adds	r3, #4
 80020ec:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	0c5b      	lsrs	r3, r3, #17
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d124      	bne.n	8002144 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002100:	4013      	ands	r3, r2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d035      	beq.n	8002172 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	091b      	lsrs	r3, r3, #4
 800210e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002110:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002114:	b29b      	uxth	r3, r3
 8002116:	461a      	mov	r2, r3
 8002118:	6a38      	ldr	r0, [r7, #32]
 800211a:	f005 fcd5 	bl	8007ac8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	091b      	lsrs	r3, r3, #4
 8002126:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800212a:	441a      	add	r2, r3
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	699a      	ldr	r2, [r3, #24]
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	091b      	lsrs	r3, r3, #4
 8002138:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800213c:	441a      	add	r2, r3
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	619a      	str	r2, [r3, #24]
 8002142:	e016      	b.n	8002172 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	0c5b      	lsrs	r3, r3, #17
 8002148:	f003 030f 	and.w	r3, r3, #15
 800214c:	2b06      	cmp	r3, #6
 800214e:	d110      	bne.n	8002172 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002156:	2208      	movs	r2, #8
 8002158:	4619      	mov	r1, r3
 800215a:	6a38      	ldr	r0, [r7, #32]
 800215c:	f005 fcb4 	bl	8007ac8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	699a      	ldr	r2, [r3, #24]
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	091b      	lsrs	r3, r3, #4
 8002168:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800216c:	441a      	add	r2, r3
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	699a      	ldr	r2, [r3, #24]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f042 0210 	orr.w	r2, r2, #16
 8002180:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f005 fe32 	bl	8007df0 <USB_ReadInterrupts>
 800218c:	4603      	mov	r3, r0
 800218e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002192:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002196:	d16e      	bne.n	8002276 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002198:	2300      	movs	r3, #0
 800219a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f005 fe38 	bl	8007e16 <USB_ReadDevAllOutEpInterrupt>
 80021a6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80021a8:	e062      	b.n	8002270 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80021aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d057      	beq.n	8002264 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	4611      	mov	r1, r2
 80021be:	4618      	mov	r0, r3
 80021c0:	f005 fe5d 	bl	8007e7e <USB_ReadDevOutEPInterrupt>
 80021c4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00c      	beq.n	80021ea <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	015a      	lsls	r2, r3, #5
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	4413      	add	r3, r2
 80021d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021dc:	461a      	mov	r2, r3
 80021de:	2301      	movs	r3, #1
 80021e0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80021e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 fdd1 	bl	8002d8c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	f003 0308 	and.w	r3, r3, #8
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00c      	beq.n	800220e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	015a      	lsls	r2, r3, #5
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	4413      	add	r3, r2
 80021fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002200:	461a      	mov	r2, r3
 8002202:	2308      	movs	r3, #8
 8002204:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002206:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 fecb 	bl	8002fa4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	f003 0310 	and.w	r3, r3, #16
 8002214:	2b00      	cmp	r3, #0
 8002216:	d008      	beq.n	800222a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	015a      	lsls	r2, r3, #5
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	4413      	add	r3, r2
 8002220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002224:	461a      	mov	r2, r3
 8002226:	2310      	movs	r3, #16
 8002228:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	f003 0320 	and.w	r3, r3, #32
 8002230:	2b00      	cmp	r3, #0
 8002232:	d008      	beq.n	8002246 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	015a      	lsls	r2, r3, #5
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	4413      	add	r3, r2
 800223c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002240:	461a      	mov	r2, r3
 8002242:	2320      	movs	r3, #32
 8002244:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d009      	beq.n	8002264 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	015a      	lsls	r2, r3, #5
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	4413      	add	r3, r2
 8002258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800225c:	461a      	mov	r2, r3
 800225e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002262:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	3301      	adds	r3, #1
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800226a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226c:	085b      	lsrs	r3, r3, #1
 800226e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002272:	2b00      	cmp	r3, #0
 8002274:	d199      	bne.n	80021aa <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f005 fdb8 	bl	8007df0 <USB_ReadInterrupts>
 8002280:	4603      	mov	r3, r0
 8002282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002286:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800228a:	f040 80c4 	bne.w	8002416 <HAL_PCD_IRQHandler+0x3c6>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f005 fdd9 	bl	8007e4a <USB_ReadDevAllInEpInterrupt>
 8002298:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800229e:	e0b6      	b.n	800240e <HAL_PCD_IRQHandler+0x3be>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80022a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 80ab 	beq.w	8002402 <HAL_PCD_IRQHandler+0x3b2>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	4611      	mov	r1, r2
 80022b6:	4618      	mov	r0, r3
 80022b8:	f005 fdff 	bl	8007eba <USB_ReadDevInEPInterrupt>
 80022bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d057      	beq.n	8002378 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	2201      	movs	r2, #1
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	43db      	mvns	r3, r3
 80022e2:	69f9      	ldr	r1, [r7, #28]
 80022e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022e8:	4013      	ands	r3, r2
 80022ea:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	015a      	lsls	r2, r3, #5
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	4413      	add	r3, r2
 80022f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022f8:	461a      	mov	r2, r3
 80022fa:	2301      	movs	r3, #1
 80022fc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d132      	bne.n	800236c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800230a:	4613      	mov	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	1a9b      	subs	r3, r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	440b      	add	r3, r1
 8002314:	3348      	adds	r3, #72	; 0x48
 8002316:	6819      	ldr	r1, [r3, #0]
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231c:	4613      	mov	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	1a9b      	subs	r3, r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4403      	add	r3, r0
 8002326:	3344      	adds	r3, #68	; 0x44
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4419      	add	r1, r3
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002330:	4613      	mov	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	1a9b      	subs	r3, r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4403      	add	r3, r0
 800233a:	3348      	adds	r3, #72	; 0x48
 800233c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	2b00      	cmp	r3, #0
 8002342:	d113      	bne.n	800236c <HAL_PCD_IRQHandler+0x31c>
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002348:	4613      	mov	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	3350      	adds	r3, #80	; 0x50
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d108      	bne.n	800236c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6818      	ldr	r0, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002364:	461a      	mov	r2, r3
 8002366:	2101      	movs	r1, #1
 8002368:	f005 fe08 	bl	8007f7c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	b2db      	uxtb	r3, r3
 8002370:	4619      	mov	r1, r3
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f007 fd99 	bl	8009eaa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b00      	cmp	r3, #0
 8002380:	d008      	beq.n	8002394 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	015a      	lsls	r2, r3, #5
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	4413      	add	r3, r2
 800238a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800238e:	461a      	mov	r2, r3
 8002390:	2308      	movs	r3, #8
 8002392:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	f003 0310 	and.w	r3, r3, #16
 800239a:	2b00      	cmp	r3, #0
 800239c:	d008      	beq.n	80023b0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	015a      	lsls	r2, r3, #5
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	4413      	add	r3, r2
 80023a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023aa:	461a      	mov	r2, r3
 80023ac:	2310      	movs	r3, #16
 80023ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d008      	beq.n	80023cc <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	015a      	lsls	r2, r3, #5
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	4413      	add	r3, r2
 80023c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023c6:	461a      	mov	r2, r3
 80023c8:	2340      	movs	r3, #64	; 0x40
 80023ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00c      	beq.n	80023f0 <HAL_PCD_IRQHandler+0x3a0>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80023d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023d8:	6a38      	ldr	r0, [r7, #32]
 80023da:	f004 fd91 	bl	8006f00 <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	015a      	lsls	r2, r3, #5
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023ea:	461a      	mov	r2, r3
 80023ec:	2302      	movs	r3, #2
 80023ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_PCD_IRQHandler+0x3b2>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80023fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 fc38 	bl	8002c72 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	3301      	adds	r3, #1
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240a:	085b      	lsrs	r3, r3, #1
 800240c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800240e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002410:	2b00      	cmp	r3, #0
 8002412:	f47f af45 	bne.w	80022a0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f005 fce8 	bl	8007df0 <USB_ReadInterrupts>
 8002420:	4603      	mov	r3, r0
 8002422:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002426:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800242a:	d122      	bne.n	8002472 <HAL_PCD_IRQHandler+0x422>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	69fa      	ldr	r2, [r7, #28]
 8002436:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800243a:	f023 0301 	bic.w	r3, r3, #1
 800243e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002446:	2b01      	cmp	r3, #1
 8002448:	d108      	bne.n	800245c <HAL_PCD_IRQHandler+0x40c>
      {
        hpcd->LPM_State = LPM_L0;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002452:	2100      	movs	r1, #0
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 fe67 	bl	8003128 <HAL_PCDEx_LPM_Callback>
 800245a:	e002      	b.n	8002462 <HAL_PCD_IRQHandler+0x412>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f007 fd9b 	bl	8009f98 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695a      	ldr	r2, [r3, #20]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002470:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f005 fcba 	bl	8007df0 <USB_ReadInterrupts>
 800247c:	4603      	mov	r3, r0
 800247e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002482:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002486:	d112      	bne.n	80024ae <HAL_PCD_IRQHandler+0x45e>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b01      	cmp	r3, #1
 8002496:	d102      	bne.n	800249e <HAL_PCD_IRQHandler+0x44e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f007 fd57 	bl	8009f4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695a      	ldr	r2, [r3, #20]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80024ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f005 fc9c 	bl	8007df0 <USB_ReadInterrupts>
 80024b8:	4603      	mov	r3, r0
 80024ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024c2:	d121      	bne.n	8002508 <HAL_PCD_IRQHandler+0x4b8>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	695a      	ldr	r2, [r3, #20]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80024d2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d111      	bne.n	8002502 <HAL_PCD_IRQHandler+0x4b2>
      {
        hpcd->LPM_State = LPM_L1;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ec:	089b      	lsrs	r3, r3, #2
 80024ee:	f003 020f 	and.w	r2, r3, #15
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80024f8:	2101      	movs	r1, #1
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 fe14 	bl	8003128 <HAL_PCDEx_LPM_Callback>
 8002500:	e002      	b.n	8002508 <HAL_PCD_IRQHandler+0x4b8>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f007 fd22 	bl	8009f4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f005 fc6f 	bl	8007df0 <USB_ReadInterrupts>
 8002512:	4603      	mov	r3, r0
 8002514:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800251c:	f040 80b7 	bne.w	800268e <HAL_PCD_IRQHandler+0x63e>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	69fa      	ldr	r2, [r7, #28]
 800252a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800252e:	f023 0301 	bic.w	r3, r3, #1
 8002532:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2110      	movs	r1, #16
 800253a:	4618      	mov	r0, r3
 800253c:	f004 fce0 	bl	8006f00 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002540:	2300      	movs	r3, #0
 8002542:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002544:	e046      	b.n	80025d4 <HAL_PCD_IRQHandler+0x584>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	4413      	add	r3, r2
 800254e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002552:	461a      	mov	r2, r3
 8002554:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002558:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800255a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	4413      	add	r3, r2
 8002562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800256a:	0151      	lsls	r1, r2, #5
 800256c:	69fa      	ldr	r2, [r7, #28]
 800256e:	440a      	add	r2, r1
 8002570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002574:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002578:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800257a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257c:	015a      	lsls	r2, r3, #5
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	4413      	add	r3, r2
 8002582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002586:	461a      	mov	r2, r3
 8002588:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800258c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800258e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002590:	015a      	lsls	r2, r3, #5
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	4413      	add	r3, r2
 8002596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800259e:	0151      	lsls	r1, r2, #5
 80025a0:	69fa      	ldr	r2, [r7, #28]
 80025a2:	440a      	add	r2, r1
 80025a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80025a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80025ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80025ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025be:	0151      	lsls	r1, r2, #5
 80025c0:	69fa      	ldr	r2, [r7, #28]
 80025c2:	440a      	add	r2, r1
 80025c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80025c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80025cc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d0:	3301      	adds	r3, #1
 80025d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025da:	429a      	cmp	r2, r3
 80025dc:	d3b3      	bcc.n	8002546 <HAL_PCD_IRQHandler+0x4f6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	69fa      	ldr	r2, [r7, #28]
 80025e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ec:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80025f0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d016      	beq.n	8002628 <HAL_PCD_IRQHandler+0x5d8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002604:	69fa      	ldr	r2, [r7, #28]
 8002606:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800260a:	f043 030b 	orr.w	r3, r3, #11
 800260e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261a:	69fa      	ldr	r2, [r7, #28]
 800261c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002620:	f043 030b 	orr.w	r3, r3, #11
 8002624:	6453      	str	r3, [r2, #68]	; 0x44
 8002626:	e015      	b.n	8002654 <HAL_PCD_IRQHandler+0x604>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800262e:	695a      	ldr	r2, [r3, #20]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002636:	4619      	mov	r1, r3
 8002638:	f242 032b 	movw	r3, #8235	; 0x202b
 800263c:	4313      	orrs	r3, r2
 800263e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	69fa      	ldr	r2, [r7, #28]
 800264a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800264e:	f043 030b 	orr.w	r3, r3, #11
 8002652:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	69fa      	ldr	r2, [r7, #28]
 800265e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002662:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002666:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6818      	ldr	r0, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002678:	461a      	mov	r2, r3
 800267a:	f005 fc7f 	bl	8007f7c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695a      	ldr	r2, [r3, #20]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800268c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f005 fbac 	bl	8007df0 <USB_ReadInterrupts>
 8002698:	4603      	mov	r3, r0
 800269a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800269e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026a2:	d124      	bne.n	80026ee <HAL_PCD_IRQHandler+0x69e>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f005 fc43 	bl	8007f34 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f004 fc9d 	bl	8006ff2 <USB_GetDevSpeed>
 80026b8:	4603      	mov	r3, r0
 80026ba:	461a      	mov	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681c      	ldr	r4, [r3, #0]
 80026c4:	f001 fc62 	bl	8003f8c <HAL_RCC_GetHCLKFreq>
 80026c8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	461a      	mov	r2, r3
 80026d2:	4620      	mov	r0, r4
 80026d4:	f004 f9a6 	bl	8006a24 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f007 fc0e 	bl	8009efa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695a      	ldr	r2, [r3, #20]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80026ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f005 fb7c 	bl	8007df0 <USB_ReadInterrupts>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b08      	cmp	r3, #8
 8002700:	d10a      	bne.n	8002718 <HAL_PCD_IRQHandler+0x6c8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f007 fbeb 	bl	8009ede <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695a      	ldr	r2, [r3, #20]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f002 0208 	and.w	r2, r2, #8
 8002716:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	f005 fb67 	bl	8007df0 <USB_ReadInterrupts>
 8002722:	4603      	mov	r3, r0
 8002724:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002728:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800272c:	d10f      	bne.n	800274e <HAL_PCD_IRQHandler+0x6fe>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800272e:	2300      	movs	r3, #0
 8002730:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	b2db      	uxtb	r3, r3
 8002736:	4619      	mov	r1, r3
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f007 fc4d 	bl	8009fd8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695a      	ldr	r2, [r3, #20]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800274c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f005 fb4c 	bl	8007df0 <USB_ReadInterrupts>
 8002758:	4603      	mov	r3, r0
 800275a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800275e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002762:	d10f      	bne.n	8002784 <HAL_PCD_IRQHandler+0x734>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002764:	2300      	movs	r3, #0
 8002766:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	b2db      	uxtb	r3, r3
 800276c:	4619      	mov	r1, r3
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f007 fc20 	bl	8009fb4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	695a      	ldr	r2, [r3, #20]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002782:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f005 fb31 	bl	8007df0 <USB_ReadInterrupts>
 800278e:	4603      	mov	r3, r0
 8002790:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002798:	d10a      	bne.n	80027b0 <HAL_PCD_IRQHandler+0x760>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f007 fc2e 	bl	8009ffc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	695a      	ldr	r2, [r3, #20]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80027ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f005 fb1b 	bl	8007df0 <USB_ReadInterrupts>
 80027ba:	4603      	mov	r3, r0
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d115      	bne.n	80027f0 <HAL_PCD_IRQHandler+0x7a0>
    {
      temp = hpcd->Instance->GOTGINT;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d002      	beq.n	80027dc <HAL_PCD_IRQHandler+0x78c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f007 fc1e 	bl	800a018 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6859      	ldr	r1, [r3, #4]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	605a      	str	r2, [r3, #4]
 80027ec:	e000      	b.n	80027f0 <HAL_PCD_IRQHandler+0x7a0>
      return;
 80027ee:	bf00      	nop
    }
  }
}
 80027f0:	3734      	adds	r7, #52	; 0x34
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd90      	pop	{r4, r7, pc}

080027f6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	460b      	mov	r3, r1
 8002800:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_PCD_SetAddress+0x1a>
 800280c:	2302      	movs	r3, #2
 800280e:	e013      	b.n	8002838 <HAL_PCD_SetAddress+0x42>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	78fa      	ldrb	r2, [r7, #3]
 800281c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	78fa      	ldrb	r2, [r7, #3]
 8002826:	4611      	mov	r1, r2
 8002828:	4618      	mov	r0, r3
 800282a:	f005 fa79 	bl	8007d20 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	4608      	mov	r0, r1
 800284a:	4611      	mov	r1, r2
 800284c:	461a      	mov	r2, r3
 800284e:	4603      	mov	r3, r0
 8002850:	70fb      	strb	r3, [r7, #3]
 8002852:	460b      	mov	r3, r1
 8002854:	803b      	strh	r3, [r7, #0]
 8002856:	4613      	mov	r3, r2
 8002858:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800285e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002862:	2b00      	cmp	r3, #0
 8002864:	da0f      	bge.n	8002886 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002866:	78fb      	ldrb	r3, [r7, #3]
 8002868:	f003 020f 	and.w	r2, r3, #15
 800286c:	4613      	mov	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	1a9b      	subs	r3, r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	3338      	adds	r3, #56	; 0x38
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	4413      	add	r3, r2
 800287a:	3304      	adds	r3, #4
 800287c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2201      	movs	r2, #1
 8002882:	705a      	strb	r2, [r3, #1]
 8002884:	e00f      	b.n	80028a6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002886:	78fb      	ldrb	r3, [r7, #3]
 8002888:	f003 020f 	and.w	r2, r3, #15
 800288c:	4613      	mov	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	4413      	add	r3, r2
 800289c:	3304      	adds	r3, #4
 800289e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80028a6:	78fb      	ldrb	r3, [r7, #3]
 80028a8:	f003 030f 	and.w	r3, r3, #15
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80028b2:	883a      	ldrh	r2, [r7, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	78ba      	ldrb	r2, [r7, #2]
 80028bc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	785b      	ldrb	r3, [r3, #1]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d004      	beq.n	80028d0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80028d0:	78bb      	ldrb	r3, [r7, #2]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d102      	bne.n	80028dc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d101      	bne.n	80028ea <HAL_PCD_EP_Open+0xaa>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e00e      	b.n	8002908 <HAL_PCD_EP_Open+0xc8>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68f9      	ldr	r1, [r7, #12]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f004 fb9f 	bl	800703c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002906:	7afb      	ldrb	r3, [r7, #11]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800291c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002920:	2b00      	cmp	r3, #0
 8002922:	da0f      	bge.n	8002944 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	f003 020f 	and.w	r2, r3, #15
 800292a:	4613      	mov	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	1a9b      	subs	r3, r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	3338      	adds	r3, #56	; 0x38
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	4413      	add	r3, r2
 8002938:	3304      	adds	r3, #4
 800293a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2201      	movs	r2, #1
 8002940:	705a      	strb	r2, [r3, #1]
 8002942:	e00f      	b.n	8002964 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002944:	78fb      	ldrb	r3, [r7, #3]
 8002946:	f003 020f 	and.w	r2, r3, #15
 800294a:	4613      	mov	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	1a9b      	subs	r3, r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	4413      	add	r3, r2
 800295a:	3304      	adds	r3, #4
 800295c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002964:	78fb      	ldrb	r3, [r7, #3]
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	b2da      	uxtb	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002976:	2b01      	cmp	r3, #1
 8002978:	d101      	bne.n	800297e <HAL_PCD_EP_Close+0x6e>
 800297a:	2302      	movs	r3, #2
 800297c:	e00e      	b.n	800299c <HAL_PCD_EP_Close+0x8c>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68f9      	ldr	r1, [r7, #12]
 800298c:	4618      	mov	r0, r3
 800298e:	f004 fbdd 	bl	800714c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	460b      	mov	r3, r1
 80029b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029b4:	7afb      	ldrb	r3, [r7, #11]
 80029b6:	f003 020f 	and.w	r2, r3, #15
 80029ba:	4613      	mov	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	1a9b      	subs	r3, r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4413      	add	r3, r2
 80029ca:	3304      	adds	r3, #4
 80029cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2200      	movs	r2, #0
 80029de:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	2200      	movs	r2, #0
 80029e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029e6:	7afb      	ldrb	r3, [r7, #11]
 80029e8:	f003 030f 	and.w	r3, r3, #15
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d102      	bne.n	8002a00 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a00:	7afb      	ldrb	r3, [r7, #11]
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d109      	bne.n	8002a1e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6818      	ldr	r0, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	461a      	mov	r2, r3
 8002a16:	6979      	ldr	r1, [r7, #20]
 8002a18:	f004 fec0 	bl	800779c <USB_EP0StartXfer>
 8002a1c:	e008      	b.n	8002a30 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6818      	ldr	r0, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	461a      	mov	r2, r3
 8002a2a:	6979      	ldr	r1, [r7, #20]
 8002a2c:	f004 fc6a 	bl	8007304 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	460b      	mov	r3, r1
 8002a44:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a46:	78fb      	ldrb	r3, [r7, #3]
 8002a48:	f003 020f 	and.w	r2, r3, #15
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	1a9b      	subs	r3, r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002a5c:	681b      	ldr	r3, [r3, #0]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b086      	sub	sp, #24
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	603b      	str	r3, [r7, #0]
 8002a76:	460b      	mov	r3, r1
 8002a78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a7a:	7afb      	ldrb	r3, [r7, #11]
 8002a7c:	f003 020f 	and.w	r2, r3, #15
 8002a80:	4613      	mov	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	1a9b      	subs	r3, r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	3338      	adds	r3, #56	; 0x38
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3304      	adds	r3, #4
 8002a90:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002aaa:	7afb      	ldrb	r3, [r7, #11]
 8002aac:	f003 030f 	and.w	r3, r3, #15
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d102      	bne.n	8002ac4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ac4:	7afb      	ldrb	r3, [r7, #11]
 8002ac6:	f003 030f 	and.w	r3, r3, #15
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d109      	bne.n	8002ae2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6818      	ldr	r0, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	461a      	mov	r2, r3
 8002ada:	6979      	ldr	r1, [r7, #20]
 8002adc:	f004 fe5e 	bl	800779c <USB_EP0StartXfer>
 8002ae0:	e008      	b.n	8002af4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6818      	ldr	r0, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	461a      	mov	r2, r3
 8002aee:	6979      	ldr	r1, [r7, #20]
 8002af0:	f004 fc08 	bl	8007304 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b084      	sub	sp, #16
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
 8002b06:	460b      	mov	r3, r1
 8002b08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b0a:	78fb      	ldrb	r3, [r7, #3]
 8002b0c:	f003 020f 	and.w	r2, r3, #15
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d901      	bls.n	8002b1c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e050      	b.n	8002bbe <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	da0f      	bge.n	8002b44 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b24:	78fb      	ldrb	r3, [r7, #3]
 8002b26:	f003 020f 	and.w	r2, r3, #15
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	1a9b      	subs	r3, r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	3338      	adds	r3, #56	; 0x38
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	4413      	add	r3, r2
 8002b38:	3304      	adds	r3, #4
 8002b3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	705a      	strb	r2, [r3, #1]
 8002b42:	e00d      	b.n	8002b60 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b44:	78fa      	ldrb	r2, [r7, #3]
 8002b46:	4613      	mov	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	1a9b      	subs	r3, r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	4413      	add	r3, r2
 8002b56:	3304      	adds	r3, #4
 8002b58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2201      	movs	r2, #1
 8002b64:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b66:	78fb      	ldrb	r3, [r7, #3]
 8002b68:	f003 030f 	and.w	r3, r3, #15
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <HAL_PCD_EP_SetStall+0x82>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e01e      	b.n	8002bbe <HAL_PCD_EP_SetStall+0xc0>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68f9      	ldr	r1, [r7, #12]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f004 fff2 	bl	8007b78 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b94:	78fb      	ldrb	r3, [r7, #3]
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10a      	bne.n	8002bb4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	b2d9      	uxtb	r1, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f005 f9e4 	bl	8007f7c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b084      	sub	sp, #16
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	460b      	mov	r3, r1
 8002bd0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002bd2:	78fb      	ldrb	r3, [r7, #3]
 8002bd4:	f003 020f 	and.w	r2, r3, #15
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d901      	bls.n	8002be4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e042      	b.n	8002c6a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002be4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	da0f      	bge.n	8002c0c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bec:	78fb      	ldrb	r3, [r7, #3]
 8002bee:	f003 020f 	and.w	r2, r3, #15
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	1a9b      	subs	r3, r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	3338      	adds	r3, #56	; 0x38
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	4413      	add	r3, r2
 8002c00:	3304      	adds	r3, #4
 8002c02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2201      	movs	r2, #1
 8002c08:	705a      	strb	r2, [r3, #1]
 8002c0a:	e00f      	b.n	8002c2c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	f003 020f 	and.w	r2, r3, #15
 8002c12:	4613      	mov	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	1a9b      	subs	r3, r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	4413      	add	r3, r2
 8002c22:	3304      	adds	r3, #4
 8002c24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c32:	78fb      	ldrb	r3, [r7, #3]
 8002c34:	f003 030f 	and.w	r3, r3, #15
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <HAL_PCD_EP_ClrStall+0x86>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e00e      	b.n	8002c6a <HAL_PCD_EP_ClrStall+0xa4>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68f9      	ldr	r1, [r7, #12]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f004 fffa 	bl	8007c54 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b08a      	sub	sp, #40	; 0x28
 8002c76:	af02      	add	r7, sp, #8
 8002c78:	6078      	str	r0, [r7, #4]
 8002c7a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	1a9b      	subs	r3, r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	3338      	adds	r3, #56	; 0x38
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	4413      	add	r3, r2
 8002c96:	3304      	adds	r3, #4
 8002c98:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	699a      	ldr	r2, [r3, #24]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d901      	bls.n	8002caa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e06c      	b.n	8002d84 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	695a      	ldr	r2, [r3, #20]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	69fa      	ldr	r2, [r7, #28]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d902      	bls.n	8002cc6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	3303      	adds	r3, #3
 8002cca:	089b      	lsrs	r3, r3, #2
 8002ccc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cce:	e02b      	b.n	8002d28 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	695a      	ldr	r2, [r3, #20]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	69fa      	ldr	r2, [r7, #28]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d902      	bls.n	8002cec <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	3303      	adds	r3, #3
 8002cf0:	089b      	lsrs	r3, r3, #2
 8002cf2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	68d9      	ldr	r1, [r3, #12]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	4603      	mov	r3, r0
 8002d0a:	6978      	ldr	r0, [r7, #20]
 8002d0c:	f004 fe9e 	bl	8007a4c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	68da      	ldr	r2, [r3, #12]
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	441a      	add	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	699a      	ldr	r2, [r3, #24]
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	441a      	add	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	015a      	lsls	r2, r3, #5
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	4413      	add	r3, r2
 8002d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d809      	bhi.n	8002d52 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	699a      	ldr	r2, [r3, #24]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d203      	bcs.n	8002d52 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1be      	bne.n	8002cd0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	695a      	ldr	r2, [r3, #20]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d811      	bhi.n	8002d82 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	2201      	movs	r2, #1
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	43db      	mvns	r3, r3
 8002d78:	6939      	ldr	r1, [r7, #16]
 8002d7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d7e:	4013      	ands	r3, r2
 8002d80:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3720      	adds	r7, #32
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	333c      	adds	r3, #60	; 0x3c
 8002da4:	3304      	adds	r3, #4
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	f040 80a0 	bne.w	8002f04 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d015      	beq.n	8002dfa <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4a72      	ldr	r2, [pc, #456]	; (8002f9c <PCD_EP_OutXfrComplete_int+0x210>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	f240 80dd 	bls.w	8002f92 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 80d7 	beq.w	8002f92 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	015a      	lsls	r2, r3, #5
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002df0:	461a      	mov	r2, r3
 8002df2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002df6:	6093      	str	r3, [r2, #8]
 8002df8:	e0cb      	b.n	8002f92 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	f003 0320 	and.w	r3, r3, #32
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d009      	beq.n	8002e18 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e10:	461a      	mov	r2, r3
 8002e12:	2320      	movs	r3, #32
 8002e14:	6093      	str	r3, [r2, #8]
 8002e16:	e0bc      	b.n	8002f92 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f040 80b7 	bne.w	8002f92 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4a5d      	ldr	r2, [pc, #372]	; (8002f9c <PCD_EP_OutXfrComplete_int+0x210>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d90f      	bls.n	8002e4c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00a      	beq.n	8002e4c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	015a      	lsls	r2, r3, #5
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e42:	461a      	mov	r2, r3
 8002e44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e48:	6093      	str	r3, [r2, #8]
 8002e4a:	e0a2      	b.n	8002f92 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	4613      	mov	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	1a9b      	subs	r3, r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002e5e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	0159      	lsls	r1, r3, #5
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	440b      	add	r3, r1
 8002e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002e72:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	1a9b      	subs	r3, r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4403      	add	r3, r0
 8002e82:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002e86:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	1a9b      	subs	r3, r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e9a:	6819      	ldr	r1, [r3, #0]
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4403      	add	r3, r0
 8002eaa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4419      	add	r1, r3
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	1a9b      	subs	r3, r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4403      	add	r3, r0
 8002ec0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ec4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d114      	bne.n	8002ef6 <PCD_EP_OutXfrComplete_int+0x16a>
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	1a9b      	subs	r3, r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d108      	bne.n	8002ef6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6818      	ldr	r0, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002eee:	461a      	mov	r2, r3
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	f005 f843 	bl	8007f7c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	4619      	mov	r1, r3
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f006 ffb9 	bl	8009e74 <HAL_PCD_DataOutStageCallback>
 8002f02:	e046      	b.n	8002f92 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4a26      	ldr	r2, [pc, #152]	; (8002fa0 <PCD_EP_OutXfrComplete_int+0x214>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d124      	bne.n	8002f56 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00a      	beq.n	8002f2c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	015a      	lsls	r2, r3, #5
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f22:	461a      	mov	r2, r3
 8002f24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f28:	6093      	str	r3, [r2, #8]
 8002f2a:	e032      	b.n	8002f92 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f003 0320 	and.w	r3, r3, #32
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d008      	beq.n	8002f48 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f42:	461a      	mov	r2, r3
 8002f44:	2320      	movs	r3, #32
 8002f46:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f006 ff90 	bl	8009e74 <HAL_PCD_DataOutStageCallback>
 8002f54:	e01d      	b.n	8002f92 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d114      	bne.n	8002f86 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	4613      	mov	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d108      	bne.n	8002f86 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6818      	ldr	r0, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f7e:	461a      	mov	r2, r3
 8002f80:	2100      	movs	r1, #0
 8002f82:	f004 fffb 	bl	8007f7c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f006 ff71 	bl	8009e74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	4f54300a 	.word	0x4f54300a
 8002fa0:	4f54310a 	.word	0x4f54310a

08002fa4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	333c      	adds	r3, #60	; 0x3c
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	015a      	lsls	r2, r3, #5
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4413      	add	r3, r2
 8002fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4a15      	ldr	r2, [pc, #84]	; (800302c <PCD_EP_OutSetupPacket_int+0x88>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d90e      	bls.n	8002ff8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d009      	beq.n	8002ff8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ff6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f006 ff29 	bl	8009e50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4a0a      	ldr	r2, [pc, #40]	; (800302c <PCD_EP_OutSetupPacket_int+0x88>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d90c      	bls.n	8003020 <PCD_EP_OutSetupPacket_int+0x7c>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d108      	bne.n	8003020 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6818      	ldr	r0, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003018:	461a      	mov	r2, r3
 800301a:	2101      	movs	r1, #1
 800301c:	f004 ffae 	bl	8007f7c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	4f54300a 	.word	0x4f54300a

08003030 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	70fb      	strb	r3, [r7, #3]
 800303c:	4613      	mov	r3, r2
 800303e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003048:	78fb      	ldrb	r3, [r7, #3]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d107      	bne.n	800305e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800304e:	883b      	ldrh	r3, [r7, #0]
 8003050:	0419      	lsls	r1, r3, #16
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	430a      	orrs	r2, r1
 800305a:	629a      	str	r2, [r3, #40]	; 0x28
 800305c:	e028      	b.n	80030b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	0c1b      	lsrs	r3, r3, #16
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	4413      	add	r3, r2
 800306a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800306c:	2300      	movs	r3, #0
 800306e:	73fb      	strb	r3, [r7, #15]
 8003070:	e00d      	b.n	800308e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	3340      	adds	r3, #64	; 0x40
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	0c1b      	lsrs	r3, r3, #16
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	4413      	add	r3, r2
 8003086:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003088:	7bfb      	ldrb	r3, [r7, #15]
 800308a:	3301      	adds	r3, #1
 800308c:	73fb      	strb	r3, [r7, #15]
 800308e:	7bfa      	ldrb	r2, [r7, #15]
 8003090:	78fb      	ldrb	r3, [r7, #3]
 8003092:	3b01      	subs	r3, #1
 8003094:	429a      	cmp	r2, r3
 8003096:	d3ec      	bcc.n	8003072 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003098:	883b      	ldrh	r3, [r7, #0]
 800309a:	0418      	lsls	r0, r3, #16
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6819      	ldr	r1, [r3, #0]
 80030a0:	78fb      	ldrb	r3, [r7, #3]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	4302      	orrs	r2, r0
 80030a8:	3340      	adds	r3, #64	; 0x40
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
 80030c6:	460b      	mov	r3, r1
 80030c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	887a      	ldrh	r2, [r7, #2]
 80030d0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800310e:	4b05      	ldr	r3, [pc, #20]	; (8003124 <HAL_PCDEx_ActivateLPM+0x44>)
 8003110:	4313      	orrs	r3, r2
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	10000003 	.word	0x10000003

08003128 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003148:	4b19      	ldr	r3, [pc, #100]	; (80031b0 <HAL_PWREx_ConfigSupply+0x70>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b04      	cmp	r3, #4
 8003152:	d00a      	beq.n	800316a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003154:	4b16      	ldr	r3, [pc, #88]	; (80031b0 <HAL_PWREx_ConfigSupply+0x70>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	429a      	cmp	r2, r3
 8003160:	d001      	beq.n	8003166 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e01f      	b.n	80031a6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	e01d      	b.n	80031a6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800316a:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <HAL_PWREx_ConfigSupply+0x70>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f023 0207 	bic.w	r2, r3, #7
 8003172:	490f      	ldr	r1, [pc, #60]	; (80031b0 <HAL_PWREx_ConfigSupply+0x70>)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4313      	orrs	r3, r2
 8003178:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800317a:	f7fd fee7 	bl	8000f4c <HAL_GetTick>
 800317e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003180:	e009      	b.n	8003196 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003182:	f7fd fee3 	bl	8000f4c <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003190:	d901      	bls.n	8003196 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e007      	b.n	80031a6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003196:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <HAL_PWREx_ConfigSupply+0x70>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800319e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031a2:	d1ee      	bne.n	8003182 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	58024800 	.word	0x58024800

080031b4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	4a04      	ldr	r2, [pc, #16]	; (80031d0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80031be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031c2:	60d3      	str	r3, [r2, #12]
}
 80031c4:	bf00      	nop
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	58024800 	.word	0x58024800

080031d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08c      	sub	sp, #48	; 0x30
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e397      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 8087 	beq.w	8003302 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031f4:	4b9e      	ldr	r3, [pc, #632]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031fe:	4b9c      	ldr	r3, [pc, #624]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003202:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003206:	2b10      	cmp	r3, #16
 8003208:	d007      	beq.n	800321a <HAL_RCC_OscConfig+0x46>
 800320a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320c:	2b18      	cmp	r3, #24
 800320e:	d110      	bne.n	8003232 <HAL_RCC_OscConfig+0x5e>
 8003210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d10b      	bne.n	8003232 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800321a:	4b95      	ldr	r3, [pc, #596]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d06c      	beq.n	8003300 <HAL_RCC_OscConfig+0x12c>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d168      	bne.n	8003300 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e371      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800323a:	d106      	bne.n	800324a <HAL_RCC_OscConfig+0x76>
 800323c:	4b8c      	ldr	r3, [pc, #560]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a8b      	ldr	r2, [pc, #556]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003246:	6013      	str	r3, [r2, #0]
 8003248:	e02e      	b.n	80032a8 <HAL_RCC_OscConfig+0xd4>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10c      	bne.n	800326c <HAL_RCC_OscConfig+0x98>
 8003252:	4b87      	ldr	r3, [pc, #540]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a86      	ldr	r2, [pc, #536]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	4b84      	ldr	r3, [pc, #528]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a83      	ldr	r2, [pc, #524]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003264:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	e01d      	b.n	80032a8 <HAL_RCC_OscConfig+0xd4>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003274:	d10c      	bne.n	8003290 <HAL_RCC_OscConfig+0xbc>
 8003276:	4b7e      	ldr	r3, [pc, #504]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a7d      	ldr	r2, [pc, #500]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 800327c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	4b7b      	ldr	r3, [pc, #492]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a7a      	ldr	r2, [pc, #488]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	e00b      	b.n	80032a8 <HAL_RCC_OscConfig+0xd4>
 8003290:	4b77      	ldr	r3, [pc, #476]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a76      	ldr	r2, [pc, #472]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800329a:	6013      	str	r3, [r2, #0]
 800329c:	4b74      	ldr	r3, [pc, #464]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a73      	ldr	r2, [pc, #460]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 80032a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d013      	beq.n	80032d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b0:	f7fd fe4c 	bl	8000f4c <HAL_GetTick>
 80032b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032b8:	f7fd fe48 	bl	8000f4c <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b64      	cmp	r3, #100	; 0x64
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e325      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032ca:	4b69      	ldr	r3, [pc, #420]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0f0      	beq.n	80032b8 <HAL_RCC_OscConfig+0xe4>
 80032d6:	e014      	b.n	8003302 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d8:	f7fd fe38 	bl	8000f4c <HAL_GetTick>
 80032dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032e0:	f7fd fe34 	bl	8000f4c <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b64      	cmp	r3, #100	; 0x64
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e311      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032f2:	4b5f      	ldr	r3, [pc, #380]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1f0      	bne.n	80032e0 <HAL_RCC_OscConfig+0x10c>
 80032fe:	e000      	b.n	8003302 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003300:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 808a 	beq.w	8003424 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003310:	4b57      	ldr	r3, [pc, #348]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003318:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800331a:	4b55      	ldr	r3, [pc, #340]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 800331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d007      	beq.n	8003336 <HAL_RCC_OscConfig+0x162>
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	2b18      	cmp	r3, #24
 800332a:	d137      	bne.n	800339c <HAL_RCC_OscConfig+0x1c8>
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d132      	bne.n	800339c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003336:	4b4e      	ldr	r3, [pc, #312]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	2b00      	cmp	r3, #0
 8003340:	d005      	beq.n	800334e <HAL_RCC_OscConfig+0x17a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e2e3      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800334e:	4b48      	ldr	r3, [pc, #288]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f023 0219 	bic.w	r2, r3, #25
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	4945      	ldr	r1, [pc, #276]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 800335c:	4313      	orrs	r3, r2
 800335e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003360:	f7fd fdf4 	bl	8000f4c <HAL_GetTick>
 8003364:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003368:	f7fd fdf0 	bl	8000f4c <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e2cd      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800337a:	4b3d      	ldr	r3, [pc, #244]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0304 	and.w	r3, r3, #4
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0f0      	beq.n	8003368 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003386:	4b3a      	ldr	r3, [pc, #232]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	061b      	lsls	r3, r3, #24
 8003394:	4936      	ldr	r1, [pc, #216]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003396:	4313      	orrs	r3, r2
 8003398:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800339a:	e043      	b.n	8003424 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d026      	beq.n	80033f2 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80033a4:	4b32      	ldr	r3, [pc, #200]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f023 0219 	bic.w	r2, r3, #25
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	492f      	ldr	r1, [pc, #188]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b6:	f7fd fdc9 	bl	8000f4c <HAL_GetTick>
 80033ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033be:	f7fd fdc5 	bl	8000f4c <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e2a2      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033d0:	4b27      	ldr	r3, [pc, #156]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0f0      	beq.n	80033be <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033dc:	4b24      	ldr	r3, [pc, #144]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	061b      	lsls	r3, r3, #24
 80033ea:	4921      	ldr	r1, [pc, #132]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	604b      	str	r3, [r1, #4]
 80033f0:	e018      	b.n	8003424 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033f2:	4b1f      	ldr	r3, [pc, #124]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a1e      	ldr	r2, [pc, #120]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 80033f8:	f023 0301 	bic.w	r3, r3, #1
 80033fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fe:	f7fd fda5 	bl	8000f4c <HAL_GetTick>
 8003402:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003406:	f7fd fda1 	bl	8000f4c <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e27e      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003418:	4b15      	ldr	r3, [pc, #84]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1f0      	bne.n	8003406 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0310 	and.w	r3, r3, #16
 800342c:	2b00      	cmp	r3, #0
 800342e:	d06d      	beq.n	800350c <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003430:	4b0f      	ldr	r3, [pc, #60]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003438:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800343a:	4b0d      	ldr	r3, [pc, #52]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 800343c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	2b08      	cmp	r3, #8
 8003444:	d007      	beq.n	8003456 <HAL_RCC_OscConfig+0x282>
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	2b18      	cmp	r3, #24
 800344a:	d11e      	bne.n	800348a <HAL_RCC_OscConfig+0x2b6>
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	2b01      	cmp	r3, #1
 8003454:	d119      	bne.n	800348a <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003456:	4b06      	ldr	r3, [pc, #24]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345e:	2b00      	cmp	r3, #0
 8003460:	d008      	beq.n	8003474 <HAL_RCC_OscConfig+0x2a0>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	2b80      	cmp	r3, #128	; 0x80
 8003468:	d004      	beq.n	8003474 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e253      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
 800346e:	bf00      	nop
 8003470:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003474:	4ba3      	ldr	r3, [pc, #652]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	061b      	lsls	r3, r3, #24
 8003482:	49a0      	ldr	r1, [pc, #640]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 8003484:	4313      	orrs	r3, r2
 8003486:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003488:	e040      	b.n	800350c <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d023      	beq.n	80034da <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003492:	4b9c      	ldr	r3, [pc, #624]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a9b      	ldr	r2, [pc, #620]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 8003498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800349c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349e:	f7fd fd55 	bl	8000f4c <HAL_GetTick>
 80034a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80034a6:	f7fd fd51 	bl	8000f4c <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e22e      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034b8:	4b92      	ldr	r3, [pc, #584]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0f0      	beq.n	80034a6 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034c4:	4b8f      	ldr	r3, [pc, #572]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	061b      	lsls	r3, r3, #24
 80034d2:	498c      	ldr	r1, [pc, #560]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	60cb      	str	r3, [r1, #12]
 80034d8:	e018      	b.n	800350c <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80034da:	4b8a      	ldr	r3, [pc, #552]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a89      	ldr	r2, [pc, #548]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 80034e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e6:	f7fd fd31 	bl	8000f4c <HAL_GetTick>
 80034ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80034ee:	f7fd fd2d 	bl	8000f4c <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e20a      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003500:	4b80      	ldr	r3, [pc, #512]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1f0      	bne.n	80034ee <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0308 	and.w	r3, r3, #8
 8003514:	2b00      	cmp	r3, #0
 8003516:	d036      	beq.n	8003586 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d019      	beq.n	8003554 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003520:	4b78      	ldr	r3, [pc, #480]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 8003522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003524:	4a77      	ldr	r2, [pc, #476]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352c:	f7fd fd0e 	bl	8000f4c <HAL_GetTick>
 8003530:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003534:	f7fd fd0a 	bl	8000f4c <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e1e7      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003546:	4b6f      	ldr	r3, [pc, #444]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 8003548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0f0      	beq.n	8003534 <HAL_RCC_OscConfig+0x360>
 8003552:	e018      	b.n	8003586 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003554:	4b6b      	ldr	r3, [pc, #428]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 8003556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003558:	4a6a      	ldr	r2, [pc, #424]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 800355a:	f023 0301 	bic.w	r3, r3, #1
 800355e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003560:	f7fd fcf4 	bl	8000f4c <HAL_GetTick>
 8003564:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003568:	f7fd fcf0 	bl	8000f4c <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e1cd      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800357a:	4b62      	ldr	r3, [pc, #392]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 800357c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b00      	cmp	r3, #0
 8003590:	d036      	beq.n	8003600 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d019      	beq.n	80035ce <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800359a:	4b5a      	ldr	r3, [pc, #360]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a59      	ldr	r2, [pc, #356]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 80035a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035a6:	f7fd fcd1 	bl	8000f4c <HAL_GetTick>
 80035aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80035ae:	f7fd fccd 	bl	8000f4c <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e1aa      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035c0:	4b50      	ldr	r3, [pc, #320]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f0      	beq.n	80035ae <HAL_RCC_OscConfig+0x3da>
 80035cc:	e018      	b.n	8003600 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035ce:	4b4d      	ldr	r3, [pc, #308]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a4c      	ldr	r2, [pc, #304]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 80035d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035da:	f7fd fcb7 	bl	8000f4c <HAL_GetTick>
 80035de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80035e2:	f7fd fcb3 	bl	8000f4c <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e190      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035f4:	4b43      	ldr	r3, [pc, #268]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1f0      	bne.n	80035e2 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 8085 	beq.w	8003718 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800360e:	4b3e      	ldr	r3, [pc, #248]	; (8003708 <HAL_RCC_OscConfig+0x534>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a3d      	ldr	r2, [pc, #244]	; (8003708 <HAL_RCC_OscConfig+0x534>)
 8003614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003618:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800361a:	f7fd fc97 	bl	8000f4c <HAL_GetTick>
 800361e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003622:	f7fd fc93 	bl	8000f4c <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b64      	cmp	r3, #100	; 0x64
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e170      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003634:	4b34      	ldr	r3, [pc, #208]	; (8003708 <HAL_RCC_OscConfig+0x534>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0f0      	beq.n	8003622 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d106      	bne.n	8003656 <HAL_RCC_OscConfig+0x482>
 8003648:	4b2e      	ldr	r3, [pc, #184]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 800364a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364c:	4a2d      	ldr	r2, [pc, #180]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	6713      	str	r3, [r2, #112]	; 0x70
 8003654:	e02d      	b.n	80036b2 <HAL_RCC_OscConfig+0x4de>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10c      	bne.n	8003678 <HAL_RCC_OscConfig+0x4a4>
 800365e:	4b29      	ldr	r3, [pc, #164]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 8003660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003662:	4a28      	ldr	r2, [pc, #160]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 8003664:	f023 0301 	bic.w	r3, r3, #1
 8003668:	6713      	str	r3, [r2, #112]	; 0x70
 800366a:	4b26      	ldr	r3, [pc, #152]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 800366c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366e:	4a25      	ldr	r2, [pc, #148]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 8003670:	f023 0304 	bic.w	r3, r3, #4
 8003674:	6713      	str	r3, [r2, #112]	; 0x70
 8003676:	e01c      	b.n	80036b2 <HAL_RCC_OscConfig+0x4de>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	2b05      	cmp	r3, #5
 800367e:	d10c      	bne.n	800369a <HAL_RCC_OscConfig+0x4c6>
 8003680:	4b20      	ldr	r3, [pc, #128]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 8003682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003684:	4a1f      	ldr	r2, [pc, #124]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 8003686:	f043 0304 	orr.w	r3, r3, #4
 800368a:	6713      	str	r3, [r2, #112]	; 0x70
 800368c:	4b1d      	ldr	r3, [pc, #116]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 800368e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003690:	4a1c      	ldr	r2, [pc, #112]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 8003692:	f043 0301 	orr.w	r3, r3, #1
 8003696:	6713      	str	r3, [r2, #112]	; 0x70
 8003698:	e00b      	b.n	80036b2 <HAL_RCC_OscConfig+0x4de>
 800369a:	4b1a      	ldr	r3, [pc, #104]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 800369c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369e:	4a19      	ldr	r2, [pc, #100]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 80036a0:	f023 0301 	bic.w	r3, r3, #1
 80036a4:	6713      	str	r3, [r2, #112]	; 0x70
 80036a6:	4b17      	ldr	r3, [pc, #92]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 80036a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036aa:	4a16      	ldr	r2, [pc, #88]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 80036ac:	f023 0304 	bic.w	r3, r3, #4
 80036b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d015      	beq.n	80036e6 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ba:	f7fd fc47 	bl	8000f4c <HAL_GetTick>
 80036be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036c0:	e00a      	b.n	80036d8 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036c2:	f7fd fc43 	bl	8000f4c <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e11e      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036d8:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 80036da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0ee      	beq.n	80036c2 <HAL_RCC_OscConfig+0x4ee>
 80036e4:	e018      	b.n	8003718 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e6:	f7fd fc31 	bl	8000f4c <HAL_GetTick>
 80036ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036ec:	e00e      	b.n	800370c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ee:	f7fd fc2d 	bl	8000f4c <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d905      	bls.n	800370c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e108      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
 8003704:	58024400 	.word	0x58024400
 8003708:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800370c:	4b84      	ldr	r3, [pc, #528]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 800370e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1ea      	bne.n	80036ee <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80f9 	beq.w	8003914 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003722:	4b7f      	ldr	r3, [pc, #508]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800372a:	2b18      	cmp	r3, #24
 800372c:	f000 80b4 	beq.w	8003898 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	2b02      	cmp	r3, #2
 8003736:	f040 8095 	bne.w	8003864 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373a:	4b79      	ldr	r3, [pc, #484]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a78      	ldr	r2, [pc, #480]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 8003740:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003746:	f7fd fc01 	bl	8000f4c <HAL_GetTick>
 800374a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800374e:	f7fd fbfd 	bl	8000f4c <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e0da      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003760:	4b6f      	ldr	r3, [pc, #444]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1f0      	bne.n	800374e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800376c:	4b6c      	ldr	r3, [pc, #432]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 800376e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003770:	4b6c      	ldr	r3, [pc, #432]	; (8003924 <HAL_RCC_OscConfig+0x750>)
 8003772:	4013      	ands	r3, r2
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800377c:	0112      	lsls	r2, r2, #4
 800377e:	430a      	orrs	r2, r1
 8003780:	4967      	ldr	r1, [pc, #412]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 8003782:	4313      	orrs	r3, r2
 8003784:	628b      	str	r3, [r1, #40]	; 0x28
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	3b01      	subs	r3, #1
 800378c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003794:	3b01      	subs	r3, #1
 8003796:	025b      	lsls	r3, r3, #9
 8003798:	b29b      	uxth	r3, r3
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a0:	3b01      	subs	r3, #1
 80037a2:	041b      	lsls	r3, r3, #16
 80037a4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80037a8:	431a      	orrs	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ae:	3b01      	subs	r3, #1
 80037b0:	061b      	lsls	r3, r3, #24
 80037b2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80037b6:	495a      	ldr	r1, [pc, #360]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80037bc:	4b58      	ldr	r3, [pc, #352]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 80037be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c0:	4a57      	ldr	r2, [pc, #348]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 80037c2:	f023 0301 	bic.w	r3, r3, #1
 80037c6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80037c8:	4b55      	ldr	r3, [pc, #340]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 80037ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037cc:	4b56      	ldr	r3, [pc, #344]	; (8003928 <HAL_RCC_OscConfig+0x754>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80037d4:	00d2      	lsls	r2, r2, #3
 80037d6:	4952      	ldr	r1, [pc, #328]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80037dc:	4b50      	ldr	r3, [pc, #320]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e0:	f023 020c 	bic.w	r2, r3, #12
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	494d      	ldr	r1, [pc, #308]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80037ee:	4b4c      	ldr	r3, [pc, #304]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 80037f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f2:	f023 0202 	bic.w	r2, r3, #2
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fa:	4949      	ldr	r1, [pc, #292]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003800:	4b47      	ldr	r3, [pc, #284]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	4a46      	ldr	r2, [pc, #280]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 8003806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800380a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800380c:	4b44      	ldr	r3, [pc, #272]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	4a43      	ldr	r2, [pc, #268]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 8003812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003816:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003818:	4b41      	ldr	r3, [pc, #260]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	4a40      	ldr	r2, [pc, #256]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 800381e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003822:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003824:	4b3e      	ldr	r3, [pc, #248]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	4a3d      	ldr	r2, [pc, #244]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 800382a:	f043 0301 	orr.w	r3, r3, #1
 800382e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003830:	4b3b      	ldr	r3, [pc, #236]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a3a      	ldr	r2, [pc, #232]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 8003836:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800383a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7fd fb86 	bl	8000f4c <HAL_GetTick>
 8003840:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003844:	f7fd fb82 	bl	8000f4c <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e05f      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003856:	4b32      	ldr	r3, [pc, #200]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f0      	beq.n	8003844 <HAL_RCC_OscConfig+0x670>
 8003862:	e057      	b.n	8003914 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003864:	4b2e      	ldr	r3, [pc, #184]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a2d      	ldr	r2, [pc, #180]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 800386a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800386e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003870:	f7fd fb6c 	bl	8000f4c <HAL_GetTick>
 8003874:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003878:	f7fd fb68 	bl	8000f4c <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e045      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800388a:	4b25      	ldr	r3, [pc, #148]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f0      	bne.n	8003878 <HAL_RCC_OscConfig+0x6a4>
 8003896:	e03d      	b.n	8003914 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003898:	4b21      	ldr	r3, [pc, #132]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 800389a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800389e:	4b20      	ldr	r3, [pc, #128]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d031      	beq.n	8003910 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f003 0203 	and.w	r2, r3, #3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d12a      	bne.n	8003910 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	091b      	lsrs	r3, r3, #4
 80038be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d122      	bne.n	8003910 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d11a      	bne.n	8003910 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	0a5b      	lsrs	r3, r3, #9
 80038de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d111      	bne.n	8003910 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	0c1b      	lsrs	r3, r3, #16
 80038f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d108      	bne.n	8003910 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	0e1b      	lsrs	r3, r3, #24
 8003902:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800390c:	429a      	cmp	r2, r3
 800390e:	d001      	beq.n	8003914 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e000      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3730      	adds	r7, #48	; 0x30
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	58024400 	.word	0x58024400
 8003924:	fffffc0c 	.word	0xfffffc0c
 8003928:	ffff0007 	.word	0xffff0007

0800392c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e19c      	b.n	8003c7a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003940:	4b8a      	ldr	r3, [pc, #552]	; (8003b6c <HAL_RCC_ClockConfig+0x240>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 030f 	and.w	r3, r3, #15
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	429a      	cmp	r2, r3
 800394c:	d910      	bls.n	8003970 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394e:	4b87      	ldr	r3, [pc, #540]	; (8003b6c <HAL_RCC_ClockConfig+0x240>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f023 020f 	bic.w	r2, r3, #15
 8003956:	4985      	ldr	r1, [pc, #532]	; (8003b6c <HAL_RCC_ClockConfig+0x240>)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	4313      	orrs	r3, r2
 800395c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800395e:	4b83      	ldr	r3, [pc, #524]	; (8003b6c <HAL_RCC_ClockConfig+0x240>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d001      	beq.n	8003970 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e184      	b.n	8003c7a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	d010      	beq.n	800399e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	691a      	ldr	r2, [r3, #16]
 8003980:	4b7b      	ldr	r3, [pc, #492]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003988:	429a      	cmp	r2, r3
 800398a:	d908      	bls.n	800399e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800398c:	4b78      	ldr	r3, [pc, #480]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	4975      	ldr	r1, [pc, #468]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 800399a:	4313      	orrs	r3, r2
 800399c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d010      	beq.n	80039cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	695a      	ldr	r2, [r3, #20]
 80039ae:	4b70      	ldr	r3, [pc, #448]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d908      	bls.n	80039cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80039ba:	4b6d      	ldr	r3, [pc, #436]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	496a      	ldr	r1, [pc, #424]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d010      	beq.n	80039fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	699a      	ldr	r2, [r3, #24]
 80039dc:	4b64      	ldr	r3, [pc, #400]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d908      	bls.n	80039fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80039e8:	4b61      	ldr	r3, [pc, #388]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	495e      	ldr	r1, [pc, #376]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0320 	and.w	r3, r3, #32
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d010      	beq.n	8003a28 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69da      	ldr	r2, [r3, #28]
 8003a0a:	4b59      	ldr	r3, [pc, #356]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d908      	bls.n	8003a28 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003a16:	4b56      	ldr	r3, [pc, #344]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	4953      	ldr	r1, [pc, #332]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d010      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	4b4d      	ldr	r3, [pc, #308]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	f003 030f 	and.w	r3, r3, #15
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d908      	bls.n	8003a56 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a44:	4b4a      	ldr	r3, [pc, #296]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f023 020f 	bic.w	r2, r3, #15
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	4947      	ldr	r1, [pc, #284]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d055      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003a62:	4b43      	ldr	r3, [pc, #268]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	4940      	ldr	r1, [pc, #256]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d107      	bne.n	8003a8c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a7c:	4b3c      	ldr	r3, [pc, #240]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d121      	bne.n	8003acc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e0f6      	b.n	8003c7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	2b03      	cmp	r3, #3
 8003a92:	d107      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a94:	4b36      	ldr	r3, [pc, #216]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d115      	bne.n	8003acc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e0ea      	b.n	8003c7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d107      	bne.n	8003abc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003aac:	4b30      	ldr	r3, [pc, #192]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d109      	bne.n	8003acc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0de      	b.n	8003c7a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003abc:	4b2c      	ldr	r3, [pc, #176]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e0d6      	b.n	8003c7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003acc:	4b28      	ldr	r3, [pc, #160]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	f023 0207 	bic.w	r2, r3, #7
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	4925      	ldr	r1, [pc, #148]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ade:	f7fd fa35 	bl	8000f4c <HAL_GetTick>
 8003ae2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae4:	e00a      	b.n	8003afc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae6:	f7fd fa31 	bl	8000f4c <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e0be      	b.n	8003c7a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afc:	4b1c      	ldr	r3, [pc, #112]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d1eb      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d010      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	4b14      	ldr	r3, [pc, #80]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d208      	bcs.n	8003b3c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b2a:	4b11      	ldr	r3, [pc, #68]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	f023 020f 	bic.w	r2, r3, #15
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	490e      	ldr	r1, [pc, #56]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b3c:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <HAL_RCC_ClockConfig+0x240>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 030f 	and.w	r3, r3, #15
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d214      	bcs.n	8003b74 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4a:	4b08      	ldr	r3, [pc, #32]	; (8003b6c <HAL_RCC_ClockConfig+0x240>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f023 020f 	bic.w	r2, r3, #15
 8003b52:	4906      	ldr	r1, [pc, #24]	; (8003b6c <HAL_RCC_ClockConfig+0x240>)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5a:	4b04      	ldr	r3, [pc, #16]	; (8003b6c <HAL_RCC_ClockConfig+0x240>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d005      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e086      	b.n	8003c7a <HAL_RCC_ClockConfig+0x34e>
 8003b6c:	52002000 	.word	0x52002000
 8003b70:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d010      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	4b3f      	ldr	r3, [pc, #252]	; (8003c84 <HAL_RCC_ClockConfig+0x358>)
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d208      	bcs.n	8003ba2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b90:	4b3c      	ldr	r3, [pc, #240]	; (8003c84 <HAL_RCC_ClockConfig+0x358>)
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	4939      	ldr	r1, [pc, #228]	; (8003c84 <HAL_RCC_ClockConfig+0x358>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d010      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	695a      	ldr	r2, [r3, #20]
 8003bb2:	4b34      	ldr	r3, [pc, #208]	; (8003c84 <HAL_RCC_ClockConfig+0x358>)
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d208      	bcs.n	8003bd0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003bbe:	4b31      	ldr	r3, [pc, #196]	; (8003c84 <HAL_RCC_ClockConfig+0x358>)
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	492e      	ldr	r1, [pc, #184]	; (8003c84 <HAL_RCC_ClockConfig+0x358>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0310 	and.w	r3, r3, #16
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d010      	beq.n	8003bfe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699a      	ldr	r2, [r3, #24]
 8003be0:	4b28      	ldr	r3, [pc, #160]	; (8003c84 <HAL_RCC_ClockConfig+0x358>)
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d208      	bcs.n	8003bfe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003bec:	4b25      	ldr	r3, [pc, #148]	; (8003c84 <HAL_RCC_ClockConfig+0x358>)
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	4922      	ldr	r1, [pc, #136]	; (8003c84 <HAL_RCC_ClockConfig+0x358>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0320 	and.w	r3, r3, #32
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d010      	beq.n	8003c2c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69da      	ldr	r2, [r3, #28]
 8003c0e:	4b1d      	ldr	r3, [pc, #116]	; (8003c84 <HAL_RCC_ClockConfig+0x358>)
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d208      	bcs.n	8003c2c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003c1a:	4b1a      	ldr	r3, [pc, #104]	; (8003c84 <HAL_RCC_ClockConfig+0x358>)
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	4917      	ldr	r1, [pc, #92]	; (8003c84 <HAL_RCC_ClockConfig+0x358>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c2c:	f000 f834 	bl	8003c98 <HAL_RCC_GetSysClockFreq>
 8003c30:	4602      	mov	r2, r0
 8003c32:	4b14      	ldr	r3, [pc, #80]	; (8003c84 <HAL_RCC_ClockConfig+0x358>)
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	0a1b      	lsrs	r3, r3, #8
 8003c38:	f003 030f 	and.w	r3, r3, #15
 8003c3c:	4912      	ldr	r1, [pc, #72]	; (8003c88 <HAL_RCC_ClockConfig+0x35c>)
 8003c3e:	5ccb      	ldrb	r3, [r1, r3]
 8003c40:	f003 031f 	and.w	r3, r3, #31
 8003c44:	fa22 f303 	lsr.w	r3, r2, r3
 8003c48:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c4a:	4b0e      	ldr	r3, [pc, #56]	; (8003c84 <HAL_RCC_ClockConfig+0x358>)
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	4a0d      	ldr	r2, [pc, #52]	; (8003c88 <HAL_RCC_ClockConfig+0x35c>)
 8003c54:	5cd3      	ldrb	r3, [r2, r3]
 8003c56:	f003 031f 	and.w	r3, r3, #31
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c60:	4a0a      	ldr	r2, [pc, #40]	; (8003c8c <HAL_RCC_ClockConfig+0x360>)
 8003c62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c64:	4a0a      	ldr	r2, [pc, #40]	; (8003c90 <HAL_RCC_ClockConfig+0x364>)
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003c6a:	4b0a      	ldr	r3, [pc, #40]	; (8003c94 <HAL_RCC_ClockConfig+0x368>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fd f922 	bl	8000eb8 <HAL_InitTick>
 8003c74:	4603      	mov	r3, r0
 8003c76:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	58024400 	.word	0x58024400
 8003c88:	0800a4b8 	.word	0x0800a4b8
 8003c8c:	24000004 	.word	0x24000004
 8003c90:	24000000 	.word	0x24000000
 8003c94:	24000008 	.word	0x24000008

08003c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b089      	sub	sp, #36	; 0x24
 8003c9c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c9e:	4bb3      	ldr	r3, [pc, #716]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ca6:	2b18      	cmp	r3, #24
 8003ca8:	f200 8155 	bhi.w	8003f56 <HAL_RCC_GetSysClockFreq+0x2be>
 8003cac:	a201      	add	r2, pc, #4	; (adr r2, 8003cb4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb2:	bf00      	nop
 8003cb4:	08003d19 	.word	0x08003d19
 8003cb8:	08003f57 	.word	0x08003f57
 8003cbc:	08003f57 	.word	0x08003f57
 8003cc0:	08003f57 	.word	0x08003f57
 8003cc4:	08003f57 	.word	0x08003f57
 8003cc8:	08003f57 	.word	0x08003f57
 8003ccc:	08003f57 	.word	0x08003f57
 8003cd0:	08003f57 	.word	0x08003f57
 8003cd4:	08003d3f 	.word	0x08003d3f
 8003cd8:	08003f57 	.word	0x08003f57
 8003cdc:	08003f57 	.word	0x08003f57
 8003ce0:	08003f57 	.word	0x08003f57
 8003ce4:	08003f57 	.word	0x08003f57
 8003ce8:	08003f57 	.word	0x08003f57
 8003cec:	08003f57 	.word	0x08003f57
 8003cf0:	08003f57 	.word	0x08003f57
 8003cf4:	08003d45 	.word	0x08003d45
 8003cf8:	08003f57 	.word	0x08003f57
 8003cfc:	08003f57 	.word	0x08003f57
 8003d00:	08003f57 	.word	0x08003f57
 8003d04:	08003f57 	.word	0x08003f57
 8003d08:	08003f57 	.word	0x08003f57
 8003d0c:	08003f57 	.word	0x08003f57
 8003d10:	08003f57 	.word	0x08003f57
 8003d14:	08003d4b 	.word	0x08003d4b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d18:	4b94      	ldr	r3, [pc, #592]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0320 	and.w	r3, r3, #32
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d009      	beq.n	8003d38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003d24:	4b91      	ldr	r3, [pc, #580]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	08db      	lsrs	r3, r3, #3
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	4a90      	ldr	r2, [pc, #576]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d30:	fa22 f303 	lsr.w	r3, r2, r3
 8003d34:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003d36:	e111      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003d38:	4b8d      	ldr	r3, [pc, #564]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d3a:	61bb      	str	r3, [r7, #24]
    break;
 8003d3c:	e10e      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003d3e:	4b8d      	ldr	r3, [pc, #564]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003d40:	61bb      	str	r3, [r7, #24]
    break;
 8003d42:	e10b      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003d44:	4b8c      	ldr	r3, [pc, #560]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003d46:	61bb      	str	r3, [r7, #24]
    break;
 8003d48:	e108      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d4a:	4b88      	ldr	r3, [pc, #544]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003d54:	4b85      	ldr	r3, [pc, #532]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d58:	091b      	lsrs	r3, r3, #4
 8003d5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d5e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003d60:	4b82      	ldr	r3, [pc, #520]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003d6a:	4b80      	ldr	r3, [pc, #512]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6e:	08db      	lsrs	r3, r3, #3
 8003d70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	fb02 f303 	mul.w	r3, r2, r3
 8003d7a:	ee07 3a90 	vmov	s15, r3
 8003d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d82:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 80e1 	beq.w	8003f50 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	f000 8083 	beq.w	8003e9c <HAL_RCC_GetSysClockFreq+0x204>
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	f200 80a1 	bhi.w	8003ee0 <HAL_RCC_GetSysClockFreq+0x248>
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <HAL_RCC_GetSysClockFreq+0x114>
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d056      	beq.n	8003e58 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003daa:	e099      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003dac:	4b6f      	ldr	r3, [pc, #444]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0320 	and.w	r3, r3, #32
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d02d      	beq.n	8003e14 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003db8:	4b6c      	ldr	r3, [pc, #432]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	08db      	lsrs	r3, r3, #3
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	4a6b      	ldr	r2, [pc, #428]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	ee07 3a90 	vmov	s15, r3
 8003dd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	ee07 3a90 	vmov	s15, r3
 8003dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003de2:	4b62      	ldr	r3, [pc, #392]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dea:	ee07 3a90 	vmov	s15, r3
 8003dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003df2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003df6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003f7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003e12:	e087      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	ee07 3a90 	vmov	s15, r3
 8003e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e1e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003f80 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e26:	4b51      	ldr	r3, [pc, #324]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e2e:	ee07 3a90 	vmov	s15, r3
 8003e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e36:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e3a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003f7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e56:	e065      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	ee07 3a90 	vmov	s15, r3
 8003e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e62:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003f84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e6a:	4b40      	ldr	r3, [pc, #256]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e72:	ee07 3a90 	vmov	s15, r3
 8003e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e7e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003f7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e9a:	e043      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	ee07 3a90 	vmov	s15, r3
 8003ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ea6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003f88 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eae:	4b2f      	ldr	r3, [pc, #188]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb6:	ee07 3a90 	vmov	s15, r3
 8003eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ebe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ec2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003f7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ede:	e021      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	ee07 3a90 	vmov	s15, r3
 8003ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003f84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ef2:	4b1e      	ldr	r3, [pc, #120]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003efa:	ee07 3a90 	vmov	s15, r3
 8003efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f02:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f06:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003f7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f22:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003f24:	4b11      	ldr	r3, [pc, #68]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f28:	0a5b      	lsrs	r3, r3, #9
 8003f2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f2e:	3301      	adds	r3, #1
 8003f30:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	ee07 3a90 	vmov	s15, r3
 8003f38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f48:	ee17 3a90 	vmov	r3, s15
 8003f4c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003f4e:	e005      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	61bb      	str	r3, [r7, #24]
    break;
 8003f54:	e002      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003f56:	4b07      	ldr	r3, [pc, #28]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003f58:	61bb      	str	r3, [r7, #24]
    break;
 8003f5a:	bf00      	nop
  }

  return sysclockfreq;
 8003f5c:	69bb      	ldr	r3, [r7, #24]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3724      	adds	r7, #36	; 0x24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	58024400 	.word	0x58024400
 8003f70:	03d09000 	.word	0x03d09000
 8003f74:	003d0900 	.word	0x003d0900
 8003f78:	007a1200 	.word	0x007a1200
 8003f7c:	46000000 	.word	0x46000000
 8003f80:	4c742400 	.word	0x4c742400
 8003f84:	4a742400 	.word	0x4a742400
 8003f88:	4af42400 	.word	0x4af42400

08003f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003f92:	f7ff fe81 	bl	8003c98 <HAL_RCC_GetSysClockFreq>
 8003f96:	4602      	mov	r2, r0
 8003f98:	4b10      	ldr	r3, [pc, #64]	; (8003fdc <HAL_RCC_GetHCLKFreq+0x50>)
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	0a1b      	lsrs	r3, r3, #8
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	490f      	ldr	r1, [pc, #60]	; (8003fe0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003fa4:	5ccb      	ldrb	r3, [r1, r3]
 8003fa6:	f003 031f 	and.w	r3, r3, #31
 8003faa:	fa22 f303 	lsr.w	r3, r2, r3
 8003fae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fb0:	4b0a      	ldr	r3, [pc, #40]	; (8003fdc <HAL_RCC_GetHCLKFreq+0x50>)
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	f003 030f 	and.w	r3, r3, #15
 8003fb8:	4a09      	ldr	r2, [pc, #36]	; (8003fe0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003fba:	5cd3      	ldrb	r3, [r2, r3]
 8003fbc:	f003 031f 	and.w	r3, r3, #31
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc6:	4a07      	ldr	r2, [pc, #28]	; (8003fe4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003fc8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003fca:	4a07      	ldr	r2, [pc, #28]	; (8003fe8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003fd0:	4b04      	ldr	r3, [pc, #16]	; (8003fe4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	58024400 	.word	0x58024400
 8003fe0:	0800a4b8 	.word	0x0800a4b8
 8003fe4:	24000004 	.word	0x24000004
 8003fe8:	24000000 	.word	0x24000000

08003fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003ff0:	f7ff ffcc 	bl	8003f8c <HAL_RCC_GetHCLKFreq>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	4b06      	ldr	r3, [pc, #24]	; (8004010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	091b      	lsrs	r3, r3, #4
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	4904      	ldr	r1, [pc, #16]	; (8004014 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004002:	5ccb      	ldrb	r3, [r1, r3]
 8004004:	f003 031f 	and.w	r3, r3, #31
 8004008:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800400c:	4618      	mov	r0, r3
 800400e:	bd80      	pop	{r7, pc}
 8004010:	58024400 	.word	0x58024400
 8004014:	0800a4b8 	.word	0x0800a4b8

08004018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800401c:	f7ff ffb6 	bl	8003f8c <HAL_RCC_GetHCLKFreq>
 8004020:	4602      	mov	r2, r0
 8004022:	4b06      	ldr	r3, [pc, #24]	; (800403c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	0a1b      	lsrs	r3, r3, #8
 8004028:	f003 0307 	and.w	r3, r3, #7
 800402c:	4904      	ldr	r1, [pc, #16]	; (8004040 <HAL_RCC_GetPCLK2Freq+0x28>)
 800402e:	5ccb      	ldrb	r3, [r1, r3]
 8004030:	f003 031f 	and.w	r3, r3, #31
 8004034:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004038:	4618      	mov	r0, r3
 800403a:	bd80      	pop	{r7, pc}
 800403c:	58024400 	.word	0x58024400
 8004040:	0800a4b8 	.word	0x0800a4b8

08004044 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800404c:	2300      	movs	r3, #0
 800404e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004050:	2300      	movs	r3, #0
 8004052:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d03f      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004064:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004068:	d02a      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800406a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800406e:	d824      	bhi.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004070:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004074:	d018      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004076:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800407a:	d81e      	bhi.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004080:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004084:	d007      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004086:	e018      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004088:	4bab      	ldr	r3, [pc, #684]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800408a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408c:	4aaa      	ldr	r2, [pc, #680]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800408e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004092:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004094:	e015      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3304      	adds	r3, #4
 800409a:	2102      	movs	r1, #2
 800409c:	4618      	mov	r0, r3
 800409e:	f001 f989 	bl	80053b4 <RCCEx_PLL2_Config>
 80040a2:	4603      	mov	r3, r0
 80040a4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80040a6:	e00c      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3324      	adds	r3, #36	; 0x24
 80040ac:	2102      	movs	r1, #2
 80040ae:	4618      	mov	r0, r3
 80040b0:	f001 fa32 	bl	8005518 <RCCEx_PLL3_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80040b8:	e003      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	75fb      	strb	r3, [r7, #23]
      break;
 80040be:	e000      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80040c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040c2:	7dfb      	ldrb	r3, [r7, #23]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d109      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80040c8:	4b9b      	ldr	r3, [pc, #620]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d4:	4998      	ldr	r1, [pc, #608]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	650b      	str	r3, [r1, #80]	; 0x50
 80040da:	e001      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040dc:	7dfb      	ldrb	r3, [r7, #23]
 80040de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d03d      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f0:	2b04      	cmp	r3, #4
 80040f2:	d826      	bhi.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80040f4:	a201      	add	r2, pc, #4	; (adr r2, 80040fc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80040f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fa:	bf00      	nop
 80040fc:	08004111 	.word	0x08004111
 8004100:	0800411f 	.word	0x0800411f
 8004104:	08004131 	.word	0x08004131
 8004108:	08004149 	.word	0x08004149
 800410c:	08004149 	.word	0x08004149
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004110:	4b89      	ldr	r3, [pc, #548]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004114:	4a88      	ldr	r2, [pc, #544]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004116:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800411a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800411c:	e015      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3304      	adds	r3, #4
 8004122:	2100      	movs	r1, #0
 8004124:	4618      	mov	r0, r3
 8004126:	f001 f945 	bl	80053b4 <RCCEx_PLL2_Config>
 800412a:	4603      	mov	r3, r0
 800412c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800412e:	e00c      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3324      	adds	r3, #36	; 0x24
 8004134:	2100      	movs	r1, #0
 8004136:	4618      	mov	r0, r3
 8004138:	f001 f9ee 	bl	8005518 <RCCEx_PLL3_Config>
 800413c:	4603      	mov	r3, r0
 800413e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004140:	e003      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	75fb      	strb	r3, [r7, #23]
      break;
 8004146:	e000      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004148:	bf00      	nop
    }

    if(ret == HAL_OK)
 800414a:	7dfb      	ldrb	r3, [r7, #23]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d109      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004150:	4b79      	ldr	r3, [pc, #484]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004154:	f023 0207 	bic.w	r2, r3, #7
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415c:	4976      	ldr	r1, [pc, #472]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800415e:	4313      	orrs	r3, r2
 8004160:	650b      	str	r3, [r1, #80]	; 0x50
 8004162:	e001      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004164:	7dfb      	ldrb	r3, [r7, #23]
 8004166:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004170:	2b00      	cmp	r3, #0
 8004172:	d051      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800417a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800417e:	d036      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004180:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004184:	d830      	bhi.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004186:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800418a:	d032      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800418c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004190:	d82a      	bhi.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004192:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004196:	d02e      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004198:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800419c:	d824      	bhi.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800419e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041a2:	d018      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80041a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041a8:	d81e      	bhi.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80041ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041b2:	d007      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80041b4:	e018      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041b6:	4b60      	ldr	r3, [pc, #384]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ba:	4a5f      	ldr	r2, [pc, #380]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80041c2:	e019      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3304      	adds	r3, #4
 80041c8:	2100      	movs	r1, #0
 80041ca:	4618      	mov	r0, r3
 80041cc:	f001 f8f2 	bl	80053b4 <RCCEx_PLL2_Config>
 80041d0:	4603      	mov	r3, r0
 80041d2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80041d4:	e010      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3324      	adds	r3, #36	; 0x24
 80041da:	2100      	movs	r1, #0
 80041dc:	4618      	mov	r0, r3
 80041de:	f001 f99b 	bl	8005518 <RCCEx_PLL3_Config>
 80041e2:	4603      	mov	r3, r0
 80041e4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80041e6:	e007      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	75fb      	strb	r3, [r7, #23]
      break;
 80041ec:	e004      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80041ee:	bf00      	nop
 80041f0:	e002      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80041f2:	bf00      	nop
 80041f4:	e000      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80041f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041f8:	7dfb      	ldrb	r3, [r7, #23]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10a      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80041fe:	4b4e      	ldr	r3, [pc, #312]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004202:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800420c:	494a      	ldr	r1, [pc, #296]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800420e:	4313      	orrs	r3, r2
 8004210:	658b      	str	r3, [r1, #88]	; 0x58
 8004212:	e001      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004214:	7dfb      	ldrb	r3, [r7, #23]
 8004216:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004220:	2b00      	cmp	r3, #0
 8004222:	d051      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800422a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800422e:	d036      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8004230:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004234:	d830      	bhi.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004236:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800423a:	d032      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800423c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004240:	d82a      	bhi.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004242:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004246:	d02e      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8004248:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800424c:	d824      	bhi.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800424e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004252:	d018      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8004254:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004258:	d81e      	bhi.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800425e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004262:	d007      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004264:	e018      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004266:	4b34      	ldr	r3, [pc, #208]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426a:	4a33      	ldr	r2, [pc, #204]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800426c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004270:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004272:	e019      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3304      	adds	r3, #4
 8004278:	2100      	movs	r1, #0
 800427a:	4618      	mov	r0, r3
 800427c:	f001 f89a 	bl	80053b4 <RCCEx_PLL2_Config>
 8004280:	4603      	mov	r3, r0
 8004282:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004284:	e010      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	3324      	adds	r3, #36	; 0x24
 800428a:	2100      	movs	r1, #0
 800428c:	4618      	mov	r0, r3
 800428e:	f001 f943 	bl	8005518 <RCCEx_PLL3_Config>
 8004292:	4603      	mov	r3, r0
 8004294:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004296:	e007      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	75fb      	strb	r3, [r7, #23]
      break;
 800429c:	e004      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800429e:	bf00      	nop
 80042a0:	e002      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80042a2:	bf00      	nop
 80042a4:	e000      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80042a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042a8:	7dfb      	ldrb	r3, [r7, #23]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10a      	bne.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80042ae:	4b22      	ldr	r3, [pc, #136]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042bc:	491e      	ldr	r1, [pc, #120]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	658b      	str	r3, [r1, #88]	; 0x58
 80042c2:	e001      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c4:	7dfb      	ldrb	r3, [r7, #23]
 80042c6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d035      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d8:	2b30      	cmp	r3, #48	; 0x30
 80042da:	d01c      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80042dc:	2b30      	cmp	r3, #48	; 0x30
 80042de:	d817      	bhi.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80042e0:	2b20      	cmp	r3, #32
 80042e2:	d00c      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80042e4:	2b20      	cmp	r3, #32
 80042e6:	d813      	bhi.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d016      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80042ec:	2b10      	cmp	r3, #16
 80042ee:	d10f      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042f0:	4b11      	ldr	r3, [pc, #68]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f4:	4a10      	ldr	r2, [pc, #64]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80042fc:	e00e      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	3304      	adds	r3, #4
 8004302:	2102      	movs	r1, #2
 8004304:	4618      	mov	r0, r3
 8004306:	f001 f855 	bl	80053b4 <RCCEx_PLL2_Config>
 800430a:	4603      	mov	r3, r0
 800430c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800430e:	e005      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	75fb      	strb	r3, [r7, #23]
      break;
 8004314:	e002      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8004316:	bf00      	nop
 8004318:	e000      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800431a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800431c:	7dfb      	ldrb	r3, [r7, #23]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10c      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004322:	4b05      	ldr	r3, [pc, #20]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004326:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800432e:	4902      	ldr	r1, [pc, #8]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004330:	4313      	orrs	r3, r2
 8004332:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004334:	e004      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004336:	bf00      	nop
 8004338:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800433c:	7dfb      	ldrb	r3, [r7, #23]
 800433e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d047      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004350:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004354:	d030      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8004356:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800435a:	d82a      	bhi.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800435c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004360:	d02c      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x378>
 8004362:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004366:	d824      	bhi.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004368:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800436c:	d018      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800436e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004372:	d81e      	bhi.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800437c:	d007      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800437e:	e018      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004380:	4bac      	ldr	r3, [pc, #688]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004384:	4aab      	ldr	r2, [pc, #684]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800438a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800438c:	e017      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3304      	adds	r3, #4
 8004392:	2100      	movs	r1, #0
 8004394:	4618      	mov	r0, r3
 8004396:	f001 f80d 	bl	80053b4 <RCCEx_PLL2_Config>
 800439a:	4603      	mov	r3, r0
 800439c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800439e:	e00e      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3324      	adds	r3, #36	; 0x24
 80043a4:	2100      	movs	r1, #0
 80043a6:	4618      	mov	r0, r3
 80043a8:	f001 f8b6 	bl	8005518 <RCCEx_PLL3_Config>
 80043ac:	4603      	mov	r3, r0
 80043ae:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80043b0:	e005      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	75fb      	strb	r3, [r7, #23]
      break;
 80043b6:	e002      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80043b8:	bf00      	nop
 80043ba:	e000      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80043bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043be:	7dfb      	ldrb	r3, [r7, #23]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d109      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80043c4:	4b9b      	ldr	r3, [pc, #620]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80043c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d0:	4998      	ldr	r1, [pc, #608]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	650b      	str	r3, [r1, #80]	; 0x50
 80043d6:	e001      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d8:	7dfb      	ldrb	r3, [r7, #23]
 80043da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d049      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043f0:	d02e      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80043f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043f6:	d828      	bhi.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80043f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043fc:	d02a      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80043fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004402:	d822      	bhi.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004404:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004408:	d026      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800440a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800440e:	d81c      	bhi.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004410:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004414:	d010      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8004416:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800441a:	d816      	bhi.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800441c:	2b00      	cmp	r3, #0
 800441e:	d01d      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004424:	d111      	bne.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	3304      	adds	r3, #4
 800442a:	2101      	movs	r1, #1
 800442c:	4618      	mov	r0, r3
 800442e:	f000 ffc1 	bl	80053b4 <RCCEx_PLL2_Config>
 8004432:	4603      	mov	r3, r0
 8004434:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004436:	e012      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3324      	adds	r3, #36	; 0x24
 800443c:	2101      	movs	r1, #1
 800443e:	4618      	mov	r0, r3
 8004440:	f001 f86a 	bl	8005518 <RCCEx_PLL3_Config>
 8004444:	4603      	mov	r3, r0
 8004446:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004448:	e009      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	75fb      	strb	r3, [r7, #23]
      break;
 800444e:	e006      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004450:	bf00      	nop
 8004452:	e004      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004454:	bf00      	nop
 8004456:	e002      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004458:	bf00      	nop
 800445a:	e000      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800445c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800445e:	7dfb      	ldrb	r3, [r7, #23]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d109      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004464:	4b73      	ldr	r3, [pc, #460]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004468:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004470:	4970      	ldr	r1, [pc, #448]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004472:	4313      	orrs	r3, r2
 8004474:	650b      	str	r3, [r1, #80]	; 0x50
 8004476:	e001      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004478:	7dfb      	ldrb	r3, [r7, #23]
 800447a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d04b      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800448e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004492:	d02e      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004494:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004498:	d828      	bhi.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800449a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800449e:	d02a      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80044a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a4:	d822      	bhi.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80044a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044aa:	d026      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80044ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044b0:	d81c      	bhi.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80044b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044b6:	d010      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x496>
 80044b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044bc:	d816      	bhi.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d01d      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80044c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044c6:	d111      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	3304      	adds	r3, #4
 80044cc:	2101      	movs	r1, #1
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 ff70 	bl	80053b4 <RCCEx_PLL2_Config>
 80044d4:	4603      	mov	r3, r0
 80044d6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80044d8:	e012      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	3324      	adds	r3, #36	; 0x24
 80044de:	2101      	movs	r1, #1
 80044e0:	4618      	mov	r0, r3
 80044e2:	f001 f819 	bl	8005518 <RCCEx_PLL3_Config>
 80044e6:	4603      	mov	r3, r0
 80044e8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80044ea:	e009      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	75fb      	strb	r3, [r7, #23]
      break;
 80044f0:	e006      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80044f2:	bf00      	nop
 80044f4:	e004      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80044f6:	bf00      	nop
 80044f8:	e002      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80044fa:	bf00      	nop
 80044fc:	e000      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80044fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004500:	7dfb      	ldrb	r3, [r7, #23]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10a      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004506:	4b4b      	ldr	r3, [pc, #300]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004514:	4947      	ldr	r1, [pc, #284]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004516:	4313      	orrs	r3, r2
 8004518:	658b      	str	r3, [r1, #88]	; 0x58
 800451a:	e001      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800451c:	7dfb      	ldrb	r3, [r7, #23]
 800451e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d02f      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004530:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004534:	d00e      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8004536:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800453a:	d814      	bhi.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800453c:	2b00      	cmp	r3, #0
 800453e:	d015      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004540:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004544:	d10f      	bne.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004546:	4b3b      	ldr	r3, [pc, #236]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454a:	4a3a      	ldr	r2, [pc, #232]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800454c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004550:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004552:	e00c      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3304      	adds	r3, #4
 8004558:	2101      	movs	r1, #1
 800455a:	4618      	mov	r0, r3
 800455c:	f000 ff2a 	bl	80053b4 <RCCEx_PLL2_Config>
 8004560:	4603      	mov	r3, r0
 8004562:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004564:	e003      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	75fb      	strb	r3, [r7, #23]
      break;
 800456a:	e000      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800456c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800456e:	7dfb      	ldrb	r3, [r7, #23]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d109      	bne.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004574:	4b2f      	ldr	r3, [pc, #188]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004578:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004580:	492c      	ldr	r1, [pc, #176]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004582:	4313      	orrs	r3, r2
 8004584:	650b      	str	r3, [r1, #80]	; 0x50
 8004586:	e001      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004588:	7dfb      	ldrb	r3, [r7, #23]
 800458a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d032      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459c:	2b03      	cmp	r3, #3
 800459e:	d81b      	bhi.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80045a0:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80045a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a6:	bf00      	nop
 80045a8:	080045df 	.word	0x080045df
 80045ac:	080045b9 	.word	0x080045b9
 80045b0:	080045c7 	.word	0x080045c7
 80045b4:	080045df 	.word	0x080045df
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045b8:	4b1e      	ldr	r3, [pc, #120]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	4a1d      	ldr	r2, [pc, #116]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80045be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80045c4:	e00c      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	3304      	adds	r3, #4
 80045ca:	2102      	movs	r1, #2
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 fef1 	bl	80053b4 <RCCEx_PLL2_Config>
 80045d2:	4603      	mov	r3, r0
 80045d4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80045d6:	e003      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	75fb      	strb	r3, [r7, #23]
      break;
 80045dc:	e000      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80045de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045e0:	7dfb      	ldrb	r3, [r7, #23]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d109      	bne.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80045e6:	4b13      	ldr	r3, [pc, #76]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80045e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ea:	f023 0203 	bic.w	r2, r3, #3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f2:	4910      	ldr	r1, [pc, #64]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80045f8:	e001      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045fa:	7dfb      	ldrb	r3, [r7, #23]
 80045fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 808a 	beq.w	8004720 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800460c:	4b0a      	ldr	r3, [pc, #40]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a09      	ldr	r2, [pc, #36]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004616:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004618:	f7fc fc98 	bl	8000f4c <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800461e:	e00d      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004620:	f7fc fc94 	bl	8000f4c <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b64      	cmp	r3, #100	; 0x64
 800462c:	d906      	bls.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	75fb      	strb	r3, [r7, #23]
        break;
 8004632:	e009      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004634:	58024400 	.word	0x58024400
 8004638:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800463c:	4bb9      	ldr	r3, [pc, #740]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004644:	2b00      	cmp	r3, #0
 8004646:	d0eb      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8004648:	7dfb      	ldrb	r3, [r7, #23]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d166      	bne.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800464e:	4bb6      	ldr	r3, [pc, #728]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004650:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004658:	4053      	eors	r3, r2
 800465a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800465e:	2b00      	cmp	r3, #0
 8004660:	d013      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004662:	4bb1      	ldr	r3, [pc, #708]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800466a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800466c:	4bae      	ldr	r3, [pc, #696]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800466e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004670:	4aad      	ldr	r2, [pc, #692]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004676:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004678:	4bab      	ldr	r3, [pc, #684]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800467a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467c:	4aaa      	ldr	r2, [pc, #680]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800467e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004682:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004684:	4aa8      	ldr	r2, [pc, #672]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004694:	d115      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004696:	f7fc fc59 	bl	8000f4c <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800469c:	e00b      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800469e:	f7fc fc55 	bl	8000f4c <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d902      	bls.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	75fb      	strb	r3, [r7, #23]
            break;
 80046b4:	e005      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046b6:	4b9c      	ldr	r3, [pc, #624]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0ed      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 80046c2:	7dfb      	ldrb	r3, [r7, #23]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d126      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046d6:	d10d      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80046d8:	4b93      	ldr	r3, [pc, #588]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046e6:	0919      	lsrs	r1, r3, #4
 80046e8:	4b90      	ldr	r3, [pc, #576]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80046ea:	400b      	ands	r3, r1
 80046ec:	498e      	ldr	r1, [pc, #568]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	610b      	str	r3, [r1, #16]
 80046f2:	e005      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 80046f4:	4b8c      	ldr	r3, [pc, #560]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	4a8b      	ldr	r2, [pc, #556]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80046fe:	6113      	str	r3, [r2, #16]
 8004700:	4b89      	ldr	r3, [pc, #548]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004702:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800470a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800470e:	4986      	ldr	r1, [pc, #536]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004710:	4313      	orrs	r3, r2
 8004712:	670b      	str	r3, [r1, #112]	; 0x70
 8004714:	e004      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004716:	7dfb      	ldrb	r3, [r7, #23]
 8004718:	75bb      	strb	r3, [r7, #22]
 800471a:	e001      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800471c:	7dfb      	ldrb	r3, [r7, #23]
 800471e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	d07e      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004730:	2b28      	cmp	r3, #40	; 0x28
 8004732:	d867      	bhi.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8004734:	a201      	add	r2, pc, #4	; (adr r2, 800473c <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8004736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473a:	bf00      	nop
 800473c:	0800480b 	.word	0x0800480b
 8004740:	08004805 	.word	0x08004805
 8004744:	08004805 	.word	0x08004805
 8004748:	08004805 	.word	0x08004805
 800474c:	08004805 	.word	0x08004805
 8004750:	08004805 	.word	0x08004805
 8004754:	08004805 	.word	0x08004805
 8004758:	08004805 	.word	0x08004805
 800475c:	080047e1 	.word	0x080047e1
 8004760:	08004805 	.word	0x08004805
 8004764:	08004805 	.word	0x08004805
 8004768:	08004805 	.word	0x08004805
 800476c:	08004805 	.word	0x08004805
 8004770:	08004805 	.word	0x08004805
 8004774:	08004805 	.word	0x08004805
 8004778:	08004805 	.word	0x08004805
 800477c:	080047f3 	.word	0x080047f3
 8004780:	08004805 	.word	0x08004805
 8004784:	08004805 	.word	0x08004805
 8004788:	08004805 	.word	0x08004805
 800478c:	08004805 	.word	0x08004805
 8004790:	08004805 	.word	0x08004805
 8004794:	08004805 	.word	0x08004805
 8004798:	08004805 	.word	0x08004805
 800479c:	0800480b 	.word	0x0800480b
 80047a0:	08004805 	.word	0x08004805
 80047a4:	08004805 	.word	0x08004805
 80047a8:	08004805 	.word	0x08004805
 80047ac:	08004805 	.word	0x08004805
 80047b0:	08004805 	.word	0x08004805
 80047b4:	08004805 	.word	0x08004805
 80047b8:	08004805 	.word	0x08004805
 80047bc:	0800480b 	.word	0x0800480b
 80047c0:	08004805 	.word	0x08004805
 80047c4:	08004805 	.word	0x08004805
 80047c8:	08004805 	.word	0x08004805
 80047cc:	08004805 	.word	0x08004805
 80047d0:	08004805 	.word	0x08004805
 80047d4:	08004805 	.word	0x08004805
 80047d8:	08004805 	.word	0x08004805
 80047dc:	0800480b 	.word	0x0800480b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3304      	adds	r3, #4
 80047e4:	2101      	movs	r1, #1
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fde4 	bl	80053b4 <RCCEx_PLL2_Config>
 80047ec:	4603      	mov	r3, r0
 80047ee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80047f0:	e00c      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	3324      	adds	r3, #36	; 0x24
 80047f6:	2101      	movs	r1, #1
 80047f8:	4618      	mov	r0, r3
 80047fa:	f000 fe8d 	bl	8005518 <RCCEx_PLL3_Config>
 80047fe:	4603      	mov	r3, r0
 8004800:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004802:	e003      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	75fb      	strb	r3, [r7, #23]
      break;
 8004808:	e000      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800480a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800480c:	7dfb      	ldrb	r3, [r7, #23]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d109      	bne.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004812:	4b45      	ldr	r3, [pc, #276]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004816:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800481e:	4942      	ldr	r1, [pc, #264]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004820:	4313      	orrs	r3, r2
 8004822:	654b      	str	r3, [r1, #84]	; 0x54
 8004824:	e001      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004826:	7dfb      	ldrb	r3, [r7, #23]
 8004828:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d037      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483a:	2b05      	cmp	r3, #5
 800483c:	d820      	bhi.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800483e:	a201      	add	r2, pc, #4	; (adr r2, 8004844 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8004840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004844:	08004887 	.word	0x08004887
 8004848:	0800485d 	.word	0x0800485d
 800484c:	0800486f 	.word	0x0800486f
 8004850:	08004887 	.word	0x08004887
 8004854:	08004887 	.word	0x08004887
 8004858:	08004887 	.word	0x08004887
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	3304      	adds	r3, #4
 8004860:	2101      	movs	r1, #1
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fda6 	bl	80053b4 <RCCEx_PLL2_Config>
 8004868:	4603      	mov	r3, r0
 800486a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800486c:	e00c      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	3324      	adds	r3, #36	; 0x24
 8004872:	2101      	movs	r1, #1
 8004874:	4618      	mov	r0, r3
 8004876:	f000 fe4f 	bl	8005518 <RCCEx_PLL3_Config>
 800487a:	4603      	mov	r3, r0
 800487c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800487e:	e003      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	75fb      	strb	r3, [r7, #23]
      break;
 8004884:	e000      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8004886:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004888:	7dfb      	ldrb	r3, [r7, #23]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d109      	bne.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800488e:	4b26      	ldr	r3, [pc, #152]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004892:	f023 0207 	bic.w	r2, r3, #7
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489a:	4923      	ldr	r1, [pc, #140]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800489c:	4313      	orrs	r3, r2
 800489e:	654b      	str	r3, [r1, #84]	; 0x54
 80048a0:	e001      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a2:	7dfb      	ldrb	r3, [r7, #23]
 80048a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d040      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048b8:	2b05      	cmp	r3, #5
 80048ba:	d821      	bhi.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80048bc:	a201      	add	r2, pc, #4	; (adr r2, 80048c4 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80048be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c2:	bf00      	nop
 80048c4:	08004907 	.word	0x08004907
 80048c8:	080048dd 	.word	0x080048dd
 80048cc:	080048ef 	.word	0x080048ef
 80048d0:	08004907 	.word	0x08004907
 80048d4:	08004907 	.word	0x08004907
 80048d8:	08004907 	.word	0x08004907
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3304      	adds	r3, #4
 80048e0:	2101      	movs	r1, #1
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fd66 	bl	80053b4 <RCCEx_PLL2_Config>
 80048e8:	4603      	mov	r3, r0
 80048ea:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80048ec:	e00c      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	3324      	adds	r3, #36	; 0x24
 80048f2:	2101      	movs	r1, #1
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 fe0f 	bl	8005518 <RCCEx_PLL3_Config>
 80048fa:	4603      	mov	r3, r0
 80048fc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80048fe:	e003      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	75fb      	strb	r3, [r7, #23]
      break;
 8004904:	e000      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8004906:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004908:	7dfb      	ldrb	r3, [r7, #23]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d110      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800490e:	4b06      	ldr	r3, [pc, #24]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004912:	f023 0207 	bic.w	r2, r3, #7
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800491c:	4902      	ldr	r1, [pc, #8]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800491e:	4313      	orrs	r3, r2
 8004920:	658b      	str	r3, [r1, #88]	; 0x58
 8004922:	e007      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8004924:	58024800 	.word	0x58024800
 8004928:	58024400 	.word	0x58024400
 800492c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004930:	7dfb      	ldrb	r3, [r7, #23]
 8004932:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0320 	and.w	r3, r3, #32
 800493c:	2b00      	cmp	r3, #0
 800493e:	d04b      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004946:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800494a:	d02e      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x966>
 800494c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004950:	d828      	bhi.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004956:	d02a      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800495c:	d822      	bhi.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800495e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004962:	d026      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004964:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004968:	d81c      	bhi.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800496a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800496e:	d010      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8004970:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004974:	d816      	bhi.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004976:	2b00      	cmp	r3, #0
 8004978:	d01d      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800497a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800497e:	d111      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3304      	adds	r3, #4
 8004984:	2100      	movs	r1, #0
 8004986:	4618      	mov	r0, r3
 8004988:	f000 fd14 	bl	80053b4 <RCCEx_PLL2_Config>
 800498c:	4603      	mov	r3, r0
 800498e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004990:	e012      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	3324      	adds	r3, #36	; 0x24
 8004996:	2102      	movs	r1, #2
 8004998:	4618      	mov	r0, r3
 800499a:	f000 fdbd 	bl	8005518 <RCCEx_PLL3_Config>
 800499e:	4603      	mov	r3, r0
 80049a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80049a2:	e009      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	75fb      	strb	r3, [r7, #23]
      break;
 80049a8:	e006      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80049aa:	bf00      	nop
 80049ac:	e004      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80049ae:	bf00      	nop
 80049b0:	e002      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80049b2:	bf00      	nop
 80049b4:	e000      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80049b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049b8:	7dfb      	ldrb	r3, [r7, #23]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10a      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049be:	4bb2      	ldr	r3, [pc, #712]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80049c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049cc:	49ae      	ldr	r1, [pc, #696]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	654b      	str	r3, [r1, #84]	; 0x54
 80049d2:	e001      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d4:	7dfb      	ldrb	r3, [r7, #23]
 80049d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d04b      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80049ee:	d02e      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80049f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80049f4:	d828      	bhi.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80049f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049fa:	d02a      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80049fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a00:	d822      	bhi.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004a02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a06:	d026      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004a08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a0c:	d81c      	bhi.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004a0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a12:	d010      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8004a14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a18:	d816      	bhi.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d01d      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a22:	d111      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	3304      	adds	r3, #4
 8004a28:	2100      	movs	r1, #0
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 fcc2 	bl	80053b4 <RCCEx_PLL2_Config>
 8004a30:	4603      	mov	r3, r0
 8004a32:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004a34:	e012      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	3324      	adds	r3, #36	; 0x24
 8004a3a:	2102      	movs	r1, #2
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 fd6b 	bl	8005518 <RCCEx_PLL3_Config>
 8004a42:	4603      	mov	r3, r0
 8004a44:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004a46:	e009      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a4c:	e006      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004a4e:	bf00      	nop
 8004a50:	e004      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004a52:	bf00      	nop
 8004a54:	e002      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004a56:	bf00      	nop
 8004a58:	e000      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004a5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a5c:	7dfb      	ldrb	r3, [r7, #23]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10a      	bne.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a62:	4b89      	ldr	r3, [pc, #548]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a66:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a70:	4985      	ldr	r1, [pc, #532]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	658b      	str	r3, [r1, #88]	; 0x58
 8004a76:	e001      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a78:	7dfb      	ldrb	r3, [r7, #23]
 8004a7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d04b      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a8e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004a92:	d02e      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004a94:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004a98:	d828      	bhi.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a9e:	d02a      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004aa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aa4:	d822      	bhi.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004aa6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004aaa:	d026      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004aac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004ab0:	d81c      	bhi.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004ab2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ab6:	d010      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8004ab8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004abc:	d816      	bhi.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d01d      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8004ac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ac6:	d111      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	3304      	adds	r3, #4
 8004acc:	2100      	movs	r1, #0
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fc70 	bl	80053b4 <RCCEx_PLL2_Config>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004ad8:	e012      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	3324      	adds	r3, #36	; 0x24
 8004ade:	2102      	movs	r1, #2
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 fd19 	bl	8005518 <RCCEx_PLL3_Config>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004aea:	e009      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	75fb      	strb	r3, [r7, #23]
      break;
 8004af0:	e006      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004af2:	bf00      	nop
 8004af4:	e004      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004af6:	bf00      	nop
 8004af8:	e002      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004afa:	bf00      	nop
 8004afc:	e000      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004afe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b00:	7dfb      	ldrb	r3, [r7, #23]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10a      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004b06:	4b60      	ldr	r3, [pc, #384]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b14:	495c      	ldr	r1, [pc, #368]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	658b      	str	r3, [r1, #88]	; 0x58
 8004b1a:	e001      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b1c:	7dfb      	ldrb	r3, [r7, #23]
 8004b1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0308 	and.w	r3, r3, #8
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d018      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b34:	d10a      	bne.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	3324      	adds	r3, #36	; 0x24
 8004b3a:	2102      	movs	r1, #2
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 fceb 	bl	8005518 <RCCEx_PLL3_Config>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004b4c:	4b4e      	ldr	r3, [pc, #312]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b50:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b58:	494b      	ldr	r1, [pc, #300]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0310 	and.w	r3, r3, #16
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d01a      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b74:	d10a      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	3324      	adds	r3, #36	; 0x24
 8004b7a:	2102      	movs	r1, #2
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 fccb 	bl	8005518 <RCCEx_PLL3_Config>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d001      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b8c:	4b3e      	ldr	r3, [pc, #248]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9a:	493b      	ldr	r1, [pc, #236]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d034      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bb6:	d01d      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004bb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bbc:	d817      	bhi.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc6:	d009      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004bc8:	e011      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3304      	adds	r3, #4
 8004bce:	2100      	movs	r1, #0
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 fbef 	bl	80053b4 <RCCEx_PLL2_Config>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004bda:	e00c      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	3324      	adds	r3, #36	; 0x24
 8004be0:	2102      	movs	r1, #2
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 fc98 	bl	8005518 <RCCEx_PLL3_Config>
 8004be8:	4603      	mov	r3, r0
 8004bea:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004bec:	e003      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	75fb      	strb	r3, [r7, #23]
      break;
 8004bf2:	e000      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8004bf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bf6:	7dfb      	ldrb	r3, [r7, #23]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10a      	bne.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bfc:	4b22      	ldr	r3, [pc, #136]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c0a:	491f      	ldr	r1, [pc, #124]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	658b      	str	r3, [r1, #88]	; 0x58
 8004c10:	e001      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c12:	7dfb      	ldrb	r3, [r7, #23]
 8004c14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d036      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c2c:	d01c      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004c2e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c32:	d816      	bhi.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004c34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c38:	d003      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004c3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c3e:	d007      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8004c40:	e00f      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c42:	4b11      	ldr	r3, [pc, #68]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c46:	4a10      	ldr	r2, [pc, #64]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004c4e:	e00c      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	3324      	adds	r3, #36	; 0x24
 8004c54:	2101      	movs	r1, #1
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 fc5e 	bl	8005518 <RCCEx_PLL3_Config>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004c60:	e003      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	75fb      	strb	r3, [r7, #23]
      break;
 8004c66:	e000      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8004c68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c6a:	7dfb      	ldrb	r3, [r7, #23]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10d      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c70:	4b05      	ldr	r3, [pc, #20]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c7e:	4902      	ldr	r1, [pc, #8]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	654b      	str	r3, [r1, #84]	; 0x54
 8004c84:	e004      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8004c86:	bf00      	nop
 8004c88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c8c:	7dfb      	ldrb	r3, [r7, #23]
 8004c8e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d029      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d003      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca8:	d007      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004caa:	e00f      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cac:	4b61      	ldr	r3, [pc, #388]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb0:	4a60      	ldr	r2, [pc, #384]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004cb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cb6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004cb8:	e00b      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	2102      	movs	r1, #2
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 fb77 	bl	80053b4 <RCCEx_PLL2_Config>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004cca:	e002      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	75fb      	strb	r3, [r7, #23]
      break;
 8004cd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cd2:	7dfb      	ldrb	r3, [r7, #23]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d109      	bne.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004cd8:	4b56      	ldr	r3, [pc, #344]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cdc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce4:	4953      	ldr	r1, [pc, #332]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004cea:	e001      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cec:	7dfb      	ldrb	r3, [r7, #23]
 8004cee:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00a      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3324      	adds	r3, #36	; 0x24
 8004d00:	2102      	movs	r1, #2
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 fc08 	bl	8005518 <RCCEx_PLL3_Config>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d030      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d26:	d017      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004d28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d2c:	d811      	bhi.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004d2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d32:	d013      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8004d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d38:	d80b      	bhi.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d010      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8004d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d42:	d106      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d44:	4b3b      	ldr	r3, [pc, #236]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d48:	4a3a      	ldr	r2, [pc, #232]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004d50:	e007      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	75fb      	strb	r3, [r7, #23]
      break;
 8004d56:	e004      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004d58:	bf00      	nop
 8004d5a:	e002      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004d5c:	bf00      	nop
 8004d5e:	e000      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004d60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d62:	7dfb      	ldrb	r3, [r7, #23]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d109      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d68:	4b32      	ldr	r3, [pc, #200]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d74:	492f      	ldr	r1, [pc, #188]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	654b      	str	r3, [r1, #84]	; 0x54
 8004d7a:	e001      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d7c:	7dfb      	ldrb	r3, [r7, #23]
 8004d7e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d008      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d8c:	4b29      	ldr	r3, [pc, #164]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d98:	4926      	ldr	r1, [pc, #152]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d008      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004daa:	4b22      	ldr	r3, [pc, #136]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dae:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004db6:	491f      	ldr	r1, [pc, #124]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00d      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004dc8:	4b1a      	ldr	r3, [pc, #104]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	4a19      	ldr	r2, [pc, #100]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004dd2:	6113      	str	r3, [r2, #16]
 8004dd4:	4b17      	ldr	r3, [pc, #92]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dd6:	691a      	ldr	r2, [r3, #16]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004dde:	4915      	ldr	r1, [pc, #84]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	da08      	bge.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004dec:	4b11      	ldr	r3, [pc, #68]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df8:	490e      	ldr	r1, [pc, #56]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d009      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e0a:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e18:	4906      	ldr	r1, [pc, #24]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004e1e:	7dbb      	ldrb	r3, [r7, #22]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8004e24:	2300      	movs	r3, #0
 8004e26:	e000      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3718      	adds	r7, #24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	58024400 	.word	0x58024400

08004e38 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004e3c:	f7ff f8a6 	bl	8003f8c <HAL_RCC_GetHCLKFreq>
 8004e40:	4602      	mov	r2, r0
 8004e42:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	091b      	lsrs	r3, r3, #4
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	4904      	ldr	r1, [pc, #16]	; (8004e60 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004e4e:	5ccb      	ldrb	r3, [r1, r3]
 8004e50:	f003 031f 	and.w	r3, r3, #31
 8004e54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	58024400 	.word	0x58024400
 8004e60:	0800a4b8 	.word	0x0800a4b8

08004e64 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b089      	sub	sp, #36	; 0x24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e6c:	4ba1      	ldr	r3, [pc, #644]	; (80050f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e70:	f003 0303 	and.w	r3, r3, #3
 8004e74:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004e76:	4b9f      	ldr	r3, [pc, #636]	; (80050f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7a:	0b1b      	lsrs	r3, r3, #12
 8004e7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e80:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004e82:	4b9c      	ldr	r3, [pc, #624]	; (80050f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e86:	091b      	lsrs	r3, r3, #4
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004e8e:	4b99      	ldr	r3, [pc, #612]	; (80050f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e92:	08db      	lsrs	r3, r3, #3
 8004e94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	fb02 f303 	mul.w	r3, r2, r3
 8004e9e:	ee07 3a90 	vmov	s15, r3
 8004ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ea6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 8111 	beq.w	80050d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	f000 8083 	beq.w	8004fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	f200 80a1 	bhi.w	8005004 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d003      	beq.n	8004ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d056      	beq.n	8004f7c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004ece:	e099      	b.n	8005004 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ed0:	4b88      	ldr	r3, [pc, #544]	; (80050f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0320 	and.w	r3, r3, #32
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d02d      	beq.n	8004f38 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004edc:	4b85      	ldr	r3, [pc, #532]	; (80050f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	08db      	lsrs	r3, r3, #3
 8004ee2:	f003 0303 	and.w	r3, r3, #3
 8004ee6:	4a84      	ldr	r2, [pc, #528]	; (80050f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8004eec:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	ee07 3a90 	vmov	s15, r3
 8004ef4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	ee07 3a90 	vmov	s15, r3
 8004efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f06:	4b7b      	ldr	r3, [pc, #492]	; (80050f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f0e:	ee07 3a90 	vmov	s15, r3
 8004f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f16:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f1a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80050fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f32:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004f36:	e087      	b.n	8005048 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	ee07 3a90 	vmov	s15, r3
 8004f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f42:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005100 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f4a:	4b6a      	ldr	r3, [pc, #424]	; (80050f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f52:	ee07 3a90 	vmov	s15, r3
 8004f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f5e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80050fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f7a:	e065      	b.n	8005048 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	ee07 3a90 	vmov	s15, r3
 8004f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f86:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005104 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f8e:	4b59      	ldr	r3, [pc, #356]	; (80050f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f96:	ee07 3a90 	vmov	s15, r3
 8004f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fa2:	eddf 5a56 	vldr	s11, [pc, #344]	; 80050fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fbe:	e043      	b.n	8005048 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	ee07 3a90 	vmov	s15, r3
 8004fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005108 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fd2:	4b48      	ldr	r3, [pc, #288]	; (80050f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fda:	ee07 3a90 	vmov	s15, r3
 8004fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fe2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fe6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80050fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ff2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ffe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005002:	e021      	b.n	8005048 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	ee07 3a90 	vmov	s15, r3
 800500a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005104 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005016:	4b37      	ldr	r3, [pc, #220]	; (80050f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800501e:	ee07 3a90 	vmov	s15, r3
 8005022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005026:	ed97 6a03 	vldr	s12, [r7, #12]
 800502a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80050fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800502e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005036:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800503a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800503e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005042:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005046:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005048:	4b2a      	ldr	r3, [pc, #168]	; (80050f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800504a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504c:	0a5b      	lsrs	r3, r3, #9
 800504e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005052:	ee07 3a90 	vmov	s15, r3
 8005056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800505a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800505e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005062:	edd7 6a07 	vldr	s13, [r7, #28]
 8005066:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800506a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800506e:	ee17 2a90 	vmov	r2, s15
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005076:	4b1f      	ldr	r3, [pc, #124]	; (80050f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507a:	0c1b      	lsrs	r3, r3, #16
 800507c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005080:	ee07 3a90 	vmov	s15, r3
 8005084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005088:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800508c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005090:	edd7 6a07 	vldr	s13, [r7, #28]
 8005094:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005098:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800509c:	ee17 2a90 	vmov	r2, s15
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80050a4:	4b13      	ldr	r3, [pc, #76]	; (80050f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a8:	0e1b      	lsrs	r3, r3, #24
 80050aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050ae:	ee07 3a90 	vmov	s15, r3
 80050b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050be:	edd7 6a07 	vldr	s13, [r7, #28]
 80050c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050ca:	ee17 2a90 	vmov	r2, s15
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80050d2:	e008      	b.n	80050e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	609a      	str	r2, [r3, #8]
}
 80050e6:	bf00      	nop
 80050e8:	3724      	adds	r7, #36	; 0x24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	58024400 	.word	0x58024400
 80050f8:	03d09000 	.word	0x03d09000
 80050fc:	46000000 	.word	0x46000000
 8005100:	4c742400 	.word	0x4c742400
 8005104:	4a742400 	.word	0x4a742400
 8005108:	4af42400 	.word	0x4af42400

0800510c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800510c:	b480      	push	{r7}
 800510e:	b089      	sub	sp, #36	; 0x24
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005114:	4ba1      	ldr	r3, [pc, #644]	; (800539c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005118:	f003 0303 	and.w	r3, r3, #3
 800511c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800511e:	4b9f      	ldr	r3, [pc, #636]	; (800539c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005122:	0d1b      	lsrs	r3, r3, #20
 8005124:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005128:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800512a:	4b9c      	ldr	r3, [pc, #624]	; (800539c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800512c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512e:	0a1b      	lsrs	r3, r3, #8
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005136:	4b99      	ldr	r3, [pc, #612]	; (800539c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513a:	08db      	lsrs	r3, r3, #3
 800513c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	fb02 f303 	mul.w	r3, r2, r3
 8005146:	ee07 3a90 	vmov	s15, r3
 800514a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800514e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	2b00      	cmp	r3, #0
 8005156:	f000 8111 	beq.w	800537c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	2b02      	cmp	r3, #2
 800515e:	f000 8083 	beq.w	8005268 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	2b02      	cmp	r3, #2
 8005166:	f200 80a1 	bhi.w	80052ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d003      	beq.n	8005178 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d056      	beq.n	8005224 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005176:	e099      	b.n	80052ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005178:	4b88      	ldr	r3, [pc, #544]	; (800539c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0320 	and.w	r3, r3, #32
 8005180:	2b00      	cmp	r3, #0
 8005182:	d02d      	beq.n	80051e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005184:	4b85      	ldr	r3, [pc, #532]	; (800539c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	08db      	lsrs	r3, r3, #3
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	4a84      	ldr	r2, [pc, #528]	; (80053a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005190:	fa22 f303 	lsr.w	r3, r2, r3
 8005194:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	ee07 3a90 	vmov	s15, r3
 800519c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	ee07 3a90 	vmov	s15, r3
 80051a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ae:	4b7b      	ldr	r3, [pc, #492]	; (800539c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051b6:	ee07 3a90 	vmov	s15, r3
 80051ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051be:	ed97 6a03 	vldr	s12, [r7, #12]
 80051c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80053a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051da:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80051de:	e087      	b.n	80052f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	ee07 3a90 	vmov	s15, r3
 80051e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80053a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80051ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051f2:	4b6a      	ldr	r3, [pc, #424]	; (800539c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051fa:	ee07 3a90 	vmov	s15, r3
 80051fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005202:	ed97 6a03 	vldr	s12, [r7, #12]
 8005206:	eddf 5a67 	vldr	s11, [pc, #412]	; 80053a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800520a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800520e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005212:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800521a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800521e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005222:	e065      	b.n	80052f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	ee07 3a90 	vmov	s15, r3
 800522a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800522e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80053ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005236:	4b59      	ldr	r3, [pc, #356]	; (800539c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800523e:	ee07 3a90 	vmov	s15, r3
 8005242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005246:	ed97 6a03 	vldr	s12, [r7, #12]
 800524a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80053a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800524e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800525a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800525e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005262:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005266:	e043      	b.n	80052f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	ee07 3a90 	vmov	s15, r3
 800526e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005272:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80053b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800527a:	4b48      	ldr	r3, [pc, #288]	; (800539c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005282:	ee07 3a90 	vmov	s15, r3
 8005286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800528a:	ed97 6a03 	vldr	s12, [r7, #12]
 800528e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80053a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800529a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800529e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80052aa:	e021      	b.n	80052f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	ee07 3a90 	vmov	s15, r3
 80052b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80053ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80052ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052be:	4b37      	ldr	r3, [pc, #220]	; (800539c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c6:	ee07 3a90 	vmov	s15, r3
 80052ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80052d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80053a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80052ee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80052f0:	4b2a      	ldr	r3, [pc, #168]	; (800539c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f4:	0a5b      	lsrs	r3, r3, #9
 80052f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052fa:	ee07 3a90 	vmov	s15, r3
 80052fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005302:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005306:	ee37 7a87 	vadd.f32	s14, s15, s14
 800530a:	edd7 6a07 	vldr	s13, [r7, #28]
 800530e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005316:	ee17 2a90 	vmov	r2, s15
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800531e:	4b1f      	ldr	r3, [pc, #124]	; (800539c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005322:	0c1b      	lsrs	r3, r3, #16
 8005324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005328:	ee07 3a90 	vmov	s15, r3
 800532c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005330:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005334:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005338:	edd7 6a07 	vldr	s13, [r7, #28]
 800533c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005340:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005344:	ee17 2a90 	vmov	r2, s15
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800534c:	4b13      	ldr	r3, [pc, #76]	; (800539c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800534e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005350:	0e1b      	lsrs	r3, r3, #24
 8005352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005356:	ee07 3a90 	vmov	s15, r3
 800535a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800535e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005362:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005366:	edd7 6a07 	vldr	s13, [r7, #28]
 800536a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800536e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005372:	ee17 2a90 	vmov	r2, s15
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800537a:	e008      	b.n	800538e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	609a      	str	r2, [r3, #8]
}
 800538e:	bf00      	nop
 8005390:	3724      	adds	r7, #36	; 0x24
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	58024400 	.word	0x58024400
 80053a0:	03d09000 	.word	0x03d09000
 80053a4:	46000000 	.word	0x46000000
 80053a8:	4c742400 	.word	0x4c742400
 80053ac:	4a742400 	.word	0x4a742400
 80053b0:	4af42400 	.word	0x4af42400

080053b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053be:	2300      	movs	r3, #0
 80053c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80053c2:	4b53      	ldr	r3, [pc, #332]	; (8005510 <RCCEx_PLL2_Config+0x15c>)
 80053c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c6:	f003 0303 	and.w	r3, r3, #3
 80053ca:	2b03      	cmp	r3, #3
 80053cc:	d101      	bne.n	80053d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e099      	b.n	8005506 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80053d2:	4b4f      	ldr	r3, [pc, #316]	; (8005510 <RCCEx_PLL2_Config+0x15c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a4e      	ldr	r2, [pc, #312]	; (8005510 <RCCEx_PLL2_Config+0x15c>)
 80053d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053de:	f7fb fdb5 	bl	8000f4c <HAL_GetTick>
 80053e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80053e4:	e008      	b.n	80053f8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80053e6:	f7fb fdb1 	bl	8000f4c <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d901      	bls.n	80053f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e086      	b.n	8005506 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80053f8:	4b45      	ldr	r3, [pc, #276]	; (8005510 <RCCEx_PLL2_Config+0x15c>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1f0      	bne.n	80053e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005404:	4b42      	ldr	r3, [pc, #264]	; (8005510 <RCCEx_PLL2_Config+0x15c>)
 8005406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005408:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	031b      	lsls	r3, r3, #12
 8005412:	493f      	ldr	r1, [pc, #252]	; (8005510 <RCCEx_PLL2_Config+0x15c>)
 8005414:	4313      	orrs	r3, r2
 8005416:	628b      	str	r3, [r1, #40]	; 0x28
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	3b01      	subs	r3, #1
 800541e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	3b01      	subs	r3, #1
 8005428:	025b      	lsls	r3, r3, #9
 800542a:	b29b      	uxth	r3, r3
 800542c:	431a      	orrs	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	3b01      	subs	r3, #1
 8005434:	041b      	lsls	r3, r3, #16
 8005436:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	3b01      	subs	r3, #1
 8005442:	061b      	lsls	r3, r3, #24
 8005444:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005448:	4931      	ldr	r1, [pc, #196]	; (8005510 <RCCEx_PLL2_Config+0x15c>)
 800544a:	4313      	orrs	r3, r2
 800544c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800544e:	4b30      	ldr	r3, [pc, #192]	; (8005510 <RCCEx_PLL2_Config+0x15c>)
 8005450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005452:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	492d      	ldr	r1, [pc, #180]	; (8005510 <RCCEx_PLL2_Config+0x15c>)
 800545c:	4313      	orrs	r3, r2
 800545e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005460:	4b2b      	ldr	r3, [pc, #172]	; (8005510 <RCCEx_PLL2_Config+0x15c>)
 8005462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005464:	f023 0220 	bic.w	r2, r3, #32
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	4928      	ldr	r1, [pc, #160]	; (8005510 <RCCEx_PLL2_Config+0x15c>)
 800546e:	4313      	orrs	r3, r2
 8005470:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005472:	4b27      	ldr	r3, [pc, #156]	; (8005510 <RCCEx_PLL2_Config+0x15c>)
 8005474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005476:	4a26      	ldr	r2, [pc, #152]	; (8005510 <RCCEx_PLL2_Config+0x15c>)
 8005478:	f023 0310 	bic.w	r3, r3, #16
 800547c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800547e:	4b24      	ldr	r3, [pc, #144]	; (8005510 <RCCEx_PLL2_Config+0x15c>)
 8005480:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005482:	4b24      	ldr	r3, [pc, #144]	; (8005514 <RCCEx_PLL2_Config+0x160>)
 8005484:	4013      	ands	r3, r2
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	69d2      	ldr	r2, [r2, #28]
 800548a:	00d2      	lsls	r2, r2, #3
 800548c:	4920      	ldr	r1, [pc, #128]	; (8005510 <RCCEx_PLL2_Config+0x15c>)
 800548e:	4313      	orrs	r3, r2
 8005490:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005492:	4b1f      	ldr	r3, [pc, #124]	; (8005510 <RCCEx_PLL2_Config+0x15c>)
 8005494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005496:	4a1e      	ldr	r2, [pc, #120]	; (8005510 <RCCEx_PLL2_Config+0x15c>)
 8005498:	f043 0310 	orr.w	r3, r3, #16
 800549c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d106      	bne.n	80054b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80054a4:	4b1a      	ldr	r3, [pc, #104]	; (8005510 <RCCEx_PLL2_Config+0x15c>)
 80054a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a8:	4a19      	ldr	r2, [pc, #100]	; (8005510 <RCCEx_PLL2_Config+0x15c>)
 80054aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80054b0:	e00f      	b.n	80054d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d106      	bne.n	80054c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80054b8:	4b15      	ldr	r3, [pc, #84]	; (8005510 <RCCEx_PLL2_Config+0x15c>)
 80054ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054bc:	4a14      	ldr	r2, [pc, #80]	; (8005510 <RCCEx_PLL2_Config+0x15c>)
 80054be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80054c4:	e005      	b.n	80054d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80054c6:	4b12      	ldr	r3, [pc, #72]	; (8005510 <RCCEx_PLL2_Config+0x15c>)
 80054c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ca:	4a11      	ldr	r2, [pc, #68]	; (8005510 <RCCEx_PLL2_Config+0x15c>)
 80054cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80054d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80054d2:	4b0f      	ldr	r3, [pc, #60]	; (8005510 <RCCEx_PLL2_Config+0x15c>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a0e      	ldr	r2, [pc, #56]	; (8005510 <RCCEx_PLL2_Config+0x15c>)
 80054d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054de:	f7fb fd35 	bl	8000f4c <HAL_GetTick>
 80054e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80054e4:	e008      	b.n	80054f8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80054e6:	f7fb fd31 	bl	8000f4c <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d901      	bls.n	80054f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e006      	b.n	8005506 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80054f8:	4b05      	ldr	r3, [pc, #20]	; (8005510 <RCCEx_PLL2_Config+0x15c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0f0      	beq.n	80054e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005504:	7bfb      	ldrb	r3, [r7, #15]
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	58024400 	.word	0x58024400
 8005514:	ffff0007 	.word	0xffff0007

08005518 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005526:	4b53      	ldr	r3, [pc, #332]	; (8005674 <RCCEx_PLL3_Config+0x15c>)
 8005528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552a:	f003 0303 	and.w	r3, r3, #3
 800552e:	2b03      	cmp	r3, #3
 8005530:	d101      	bne.n	8005536 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e099      	b.n	800566a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005536:	4b4f      	ldr	r3, [pc, #316]	; (8005674 <RCCEx_PLL3_Config+0x15c>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a4e      	ldr	r2, [pc, #312]	; (8005674 <RCCEx_PLL3_Config+0x15c>)
 800553c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005540:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005542:	f7fb fd03 	bl	8000f4c <HAL_GetTick>
 8005546:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005548:	e008      	b.n	800555c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800554a:	f7fb fcff 	bl	8000f4c <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d901      	bls.n	800555c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e086      	b.n	800566a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800555c:	4b45      	ldr	r3, [pc, #276]	; (8005674 <RCCEx_PLL3_Config+0x15c>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1f0      	bne.n	800554a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005568:	4b42      	ldr	r3, [pc, #264]	; (8005674 <RCCEx_PLL3_Config+0x15c>)
 800556a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	051b      	lsls	r3, r3, #20
 8005576:	493f      	ldr	r1, [pc, #252]	; (8005674 <RCCEx_PLL3_Config+0x15c>)
 8005578:	4313      	orrs	r3, r2
 800557a:	628b      	str	r3, [r1, #40]	; 0x28
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	3b01      	subs	r3, #1
 8005582:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	3b01      	subs	r3, #1
 800558c:	025b      	lsls	r3, r3, #9
 800558e:	b29b      	uxth	r3, r3
 8005590:	431a      	orrs	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	3b01      	subs	r3, #1
 8005598:	041b      	lsls	r3, r3, #16
 800559a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800559e:	431a      	orrs	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	3b01      	subs	r3, #1
 80055a6:	061b      	lsls	r3, r3, #24
 80055a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80055ac:	4931      	ldr	r1, [pc, #196]	; (8005674 <RCCEx_PLL3_Config+0x15c>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80055b2:	4b30      	ldr	r3, [pc, #192]	; (8005674 <RCCEx_PLL3_Config+0x15c>)
 80055b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	492d      	ldr	r1, [pc, #180]	; (8005674 <RCCEx_PLL3_Config+0x15c>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80055c4:	4b2b      	ldr	r3, [pc, #172]	; (8005674 <RCCEx_PLL3_Config+0x15c>)
 80055c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	4928      	ldr	r1, [pc, #160]	; (8005674 <RCCEx_PLL3_Config+0x15c>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80055d6:	4b27      	ldr	r3, [pc, #156]	; (8005674 <RCCEx_PLL3_Config+0x15c>)
 80055d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055da:	4a26      	ldr	r2, [pc, #152]	; (8005674 <RCCEx_PLL3_Config+0x15c>)
 80055dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80055e2:	4b24      	ldr	r3, [pc, #144]	; (8005674 <RCCEx_PLL3_Config+0x15c>)
 80055e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055e6:	4b24      	ldr	r3, [pc, #144]	; (8005678 <RCCEx_PLL3_Config+0x160>)
 80055e8:	4013      	ands	r3, r2
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	69d2      	ldr	r2, [r2, #28]
 80055ee:	00d2      	lsls	r2, r2, #3
 80055f0:	4920      	ldr	r1, [pc, #128]	; (8005674 <RCCEx_PLL3_Config+0x15c>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80055f6:	4b1f      	ldr	r3, [pc, #124]	; (8005674 <RCCEx_PLL3_Config+0x15c>)
 80055f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fa:	4a1e      	ldr	r2, [pc, #120]	; (8005674 <RCCEx_PLL3_Config+0x15c>)
 80055fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005600:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d106      	bne.n	8005616 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005608:	4b1a      	ldr	r3, [pc, #104]	; (8005674 <RCCEx_PLL3_Config+0x15c>)
 800560a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560c:	4a19      	ldr	r2, [pc, #100]	; (8005674 <RCCEx_PLL3_Config+0x15c>)
 800560e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005612:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005614:	e00f      	b.n	8005636 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d106      	bne.n	800562a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800561c:	4b15      	ldr	r3, [pc, #84]	; (8005674 <RCCEx_PLL3_Config+0x15c>)
 800561e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005620:	4a14      	ldr	r2, [pc, #80]	; (8005674 <RCCEx_PLL3_Config+0x15c>)
 8005622:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005626:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005628:	e005      	b.n	8005636 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800562a:	4b12      	ldr	r3, [pc, #72]	; (8005674 <RCCEx_PLL3_Config+0x15c>)
 800562c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562e:	4a11      	ldr	r2, [pc, #68]	; (8005674 <RCCEx_PLL3_Config+0x15c>)
 8005630:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005634:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005636:	4b0f      	ldr	r3, [pc, #60]	; (8005674 <RCCEx_PLL3_Config+0x15c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a0e      	ldr	r2, [pc, #56]	; (8005674 <RCCEx_PLL3_Config+0x15c>)
 800563c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005640:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005642:	f7fb fc83 	bl	8000f4c <HAL_GetTick>
 8005646:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005648:	e008      	b.n	800565c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800564a:	f7fb fc7f 	bl	8000f4c <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b02      	cmp	r3, #2
 8005656:	d901      	bls.n	800565c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e006      	b.n	800566a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800565c:	4b05      	ldr	r3, [pc, #20]	; (8005674 <RCCEx_PLL3_Config+0x15c>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d0f0      	beq.n	800564a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005668:	7bfb      	ldrb	r3, [r7, #15]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	58024400 	.word	0x58024400
 8005678:	ffff0007 	.word	0xffff0007

0800567c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e042      	b.n	8005714 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005694:	2b00      	cmp	r3, #0
 8005696:	d106      	bne.n	80056a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7fb fa91 	bl	8000bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2224      	movs	r2, #36	; 0x24
 80056aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 0201 	bic.w	r2, r2, #1
 80056bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f82c 	bl	800571c <UART_SetConfig>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d101      	bne.n	80056ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e022      	b.n	8005714 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d002      	beq.n	80056dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 fe7e 	bl	80063d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689a      	ldr	r2, [r3, #8]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f042 0201 	orr.w	r2, r2, #1
 800570a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 ff05 	bl	800651c <UART_CheckIdleState>
 8005712:	4603      	mov	r3, r0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3708      	adds	r7, #8
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800571c:	b5b0      	push	{r4, r5, r7, lr}
 800571e:	b08e      	sub	sp, #56	; 0x38
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005724:	2300      	movs	r3, #0
 8005726:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	689a      	ldr	r2, [r3, #8]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	431a      	orrs	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	431a      	orrs	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	69db      	ldr	r3, [r3, #28]
 800573e:	4313      	orrs	r3, r2
 8005740:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	4bbf      	ldr	r3, [pc, #764]	; (8005a48 <UART_SetConfig+0x32c>)
 800574a:	4013      	ands	r3, r2
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	6812      	ldr	r2, [r2, #0]
 8005750:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005752:	430b      	orrs	r3, r1
 8005754:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68da      	ldr	r2, [r3, #12]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	430a      	orrs	r2, r1
 800576a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4ab5      	ldr	r2, [pc, #724]	; (8005a4c <UART_SetConfig+0x330>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d004      	beq.n	8005786 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005782:	4313      	orrs	r3, r2
 8005784:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	4bb0      	ldr	r3, [pc, #704]	; (8005a50 <UART_SetConfig+0x334>)
 800578e:	4013      	ands	r3, r2
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6812      	ldr	r2, [r2, #0]
 8005794:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005796:	430b      	orrs	r3, r1
 8005798:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a0:	f023 010f 	bic.w	r1, r3, #15
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4aa7      	ldr	r2, [pc, #668]	; (8005a54 <UART_SetConfig+0x338>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d176      	bne.n	80058a8 <UART_SetConfig+0x18c>
 80057ba:	4ba7      	ldr	r3, [pc, #668]	; (8005a58 <UART_SetConfig+0x33c>)
 80057bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057c2:	2b28      	cmp	r3, #40	; 0x28
 80057c4:	d86c      	bhi.n	80058a0 <UART_SetConfig+0x184>
 80057c6:	a201      	add	r2, pc, #4	; (adr r2, 80057cc <UART_SetConfig+0xb0>)
 80057c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057cc:	08005871 	.word	0x08005871
 80057d0:	080058a1 	.word	0x080058a1
 80057d4:	080058a1 	.word	0x080058a1
 80057d8:	080058a1 	.word	0x080058a1
 80057dc:	080058a1 	.word	0x080058a1
 80057e0:	080058a1 	.word	0x080058a1
 80057e4:	080058a1 	.word	0x080058a1
 80057e8:	080058a1 	.word	0x080058a1
 80057ec:	08005879 	.word	0x08005879
 80057f0:	080058a1 	.word	0x080058a1
 80057f4:	080058a1 	.word	0x080058a1
 80057f8:	080058a1 	.word	0x080058a1
 80057fc:	080058a1 	.word	0x080058a1
 8005800:	080058a1 	.word	0x080058a1
 8005804:	080058a1 	.word	0x080058a1
 8005808:	080058a1 	.word	0x080058a1
 800580c:	08005881 	.word	0x08005881
 8005810:	080058a1 	.word	0x080058a1
 8005814:	080058a1 	.word	0x080058a1
 8005818:	080058a1 	.word	0x080058a1
 800581c:	080058a1 	.word	0x080058a1
 8005820:	080058a1 	.word	0x080058a1
 8005824:	080058a1 	.word	0x080058a1
 8005828:	080058a1 	.word	0x080058a1
 800582c:	08005889 	.word	0x08005889
 8005830:	080058a1 	.word	0x080058a1
 8005834:	080058a1 	.word	0x080058a1
 8005838:	080058a1 	.word	0x080058a1
 800583c:	080058a1 	.word	0x080058a1
 8005840:	080058a1 	.word	0x080058a1
 8005844:	080058a1 	.word	0x080058a1
 8005848:	080058a1 	.word	0x080058a1
 800584c:	08005891 	.word	0x08005891
 8005850:	080058a1 	.word	0x080058a1
 8005854:	080058a1 	.word	0x080058a1
 8005858:	080058a1 	.word	0x080058a1
 800585c:	080058a1 	.word	0x080058a1
 8005860:	080058a1 	.word	0x080058a1
 8005864:	080058a1 	.word	0x080058a1
 8005868:	080058a1 	.word	0x080058a1
 800586c:	08005899 	.word	0x08005899
 8005870:	2301      	movs	r3, #1
 8005872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005876:	e326      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005878:	2304      	movs	r3, #4
 800587a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800587e:	e322      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005880:	2308      	movs	r3, #8
 8005882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005886:	e31e      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005888:	2310      	movs	r3, #16
 800588a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800588e:	e31a      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005890:	2320      	movs	r3, #32
 8005892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005896:	e316      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005898:	2340      	movs	r3, #64	; 0x40
 800589a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800589e:	e312      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 80058a0:	2380      	movs	r3, #128	; 0x80
 80058a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058a6:	e30e      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a6b      	ldr	r2, [pc, #428]	; (8005a5c <UART_SetConfig+0x340>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d130      	bne.n	8005914 <UART_SetConfig+0x1f8>
 80058b2:	4b69      	ldr	r3, [pc, #420]	; (8005a58 <UART_SetConfig+0x33c>)
 80058b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b6:	f003 0307 	and.w	r3, r3, #7
 80058ba:	2b05      	cmp	r3, #5
 80058bc:	d826      	bhi.n	800590c <UART_SetConfig+0x1f0>
 80058be:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <UART_SetConfig+0x1a8>)
 80058c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c4:	080058dd 	.word	0x080058dd
 80058c8:	080058e5 	.word	0x080058e5
 80058cc:	080058ed 	.word	0x080058ed
 80058d0:	080058f5 	.word	0x080058f5
 80058d4:	080058fd 	.word	0x080058fd
 80058d8:	08005905 	.word	0x08005905
 80058dc:	2300      	movs	r3, #0
 80058de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058e2:	e2f0      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 80058e4:	2304      	movs	r3, #4
 80058e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ea:	e2ec      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 80058ec:	2308      	movs	r3, #8
 80058ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058f2:	e2e8      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 80058f4:	2310      	movs	r3, #16
 80058f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058fa:	e2e4      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 80058fc:	2320      	movs	r3, #32
 80058fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005902:	e2e0      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005904:	2340      	movs	r3, #64	; 0x40
 8005906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800590a:	e2dc      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 800590c:	2380      	movs	r3, #128	; 0x80
 800590e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005912:	e2d8      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a51      	ldr	r2, [pc, #324]	; (8005a60 <UART_SetConfig+0x344>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d130      	bne.n	8005980 <UART_SetConfig+0x264>
 800591e:	4b4e      	ldr	r3, [pc, #312]	; (8005a58 <UART_SetConfig+0x33c>)
 8005920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005922:	f003 0307 	and.w	r3, r3, #7
 8005926:	2b05      	cmp	r3, #5
 8005928:	d826      	bhi.n	8005978 <UART_SetConfig+0x25c>
 800592a:	a201      	add	r2, pc, #4	; (adr r2, 8005930 <UART_SetConfig+0x214>)
 800592c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005930:	08005949 	.word	0x08005949
 8005934:	08005951 	.word	0x08005951
 8005938:	08005959 	.word	0x08005959
 800593c:	08005961 	.word	0x08005961
 8005940:	08005969 	.word	0x08005969
 8005944:	08005971 	.word	0x08005971
 8005948:	2300      	movs	r3, #0
 800594a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800594e:	e2ba      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005950:	2304      	movs	r3, #4
 8005952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005956:	e2b6      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005958:	2308      	movs	r3, #8
 800595a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800595e:	e2b2      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005960:	2310      	movs	r3, #16
 8005962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005966:	e2ae      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005968:	2320      	movs	r3, #32
 800596a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800596e:	e2aa      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005970:	2340      	movs	r3, #64	; 0x40
 8005972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005976:	e2a6      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005978:	2380      	movs	r3, #128	; 0x80
 800597a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800597e:	e2a2      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a37      	ldr	r2, [pc, #220]	; (8005a64 <UART_SetConfig+0x348>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d130      	bne.n	80059ec <UART_SetConfig+0x2d0>
 800598a:	4b33      	ldr	r3, [pc, #204]	; (8005a58 <UART_SetConfig+0x33c>)
 800598c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800598e:	f003 0307 	and.w	r3, r3, #7
 8005992:	2b05      	cmp	r3, #5
 8005994:	d826      	bhi.n	80059e4 <UART_SetConfig+0x2c8>
 8005996:	a201      	add	r2, pc, #4	; (adr r2, 800599c <UART_SetConfig+0x280>)
 8005998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599c:	080059b5 	.word	0x080059b5
 80059a0:	080059bd 	.word	0x080059bd
 80059a4:	080059c5 	.word	0x080059c5
 80059a8:	080059cd 	.word	0x080059cd
 80059ac:	080059d5 	.word	0x080059d5
 80059b0:	080059dd 	.word	0x080059dd
 80059b4:	2300      	movs	r3, #0
 80059b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059ba:	e284      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 80059bc:	2304      	movs	r3, #4
 80059be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059c2:	e280      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 80059c4:	2308      	movs	r3, #8
 80059c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059ca:	e27c      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 80059cc:	2310      	movs	r3, #16
 80059ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059d2:	e278      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 80059d4:	2320      	movs	r3, #32
 80059d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059da:	e274      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 80059dc:	2340      	movs	r3, #64	; 0x40
 80059de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059e2:	e270      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 80059e4:	2380      	movs	r3, #128	; 0x80
 80059e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059ea:	e26c      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a1d      	ldr	r2, [pc, #116]	; (8005a68 <UART_SetConfig+0x34c>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d142      	bne.n	8005a7c <UART_SetConfig+0x360>
 80059f6:	4b18      	ldr	r3, [pc, #96]	; (8005a58 <UART_SetConfig+0x33c>)
 80059f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059fa:	f003 0307 	and.w	r3, r3, #7
 80059fe:	2b05      	cmp	r3, #5
 8005a00:	d838      	bhi.n	8005a74 <UART_SetConfig+0x358>
 8005a02:	a201      	add	r2, pc, #4	; (adr r2, 8005a08 <UART_SetConfig+0x2ec>)
 8005a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a08:	08005a21 	.word	0x08005a21
 8005a0c:	08005a29 	.word	0x08005a29
 8005a10:	08005a31 	.word	0x08005a31
 8005a14:	08005a39 	.word	0x08005a39
 8005a18:	08005a41 	.word	0x08005a41
 8005a1c:	08005a6d 	.word	0x08005a6d
 8005a20:	2300      	movs	r3, #0
 8005a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a26:	e24e      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005a28:	2304      	movs	r3, #4
 8005a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a2e:	e24a      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005a30:	2308      	movs	r3, #8
 8005a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a36:	e246      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005a38:	2310      	movs	r3, #16
 8005a3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a3e:	e242      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005a40:	2320      	movs	r3, #32
 8005a42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a46:	e23e      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005a48:	cfff69f3 	.word	0xcfff69f3
 8005a4c:	58000c00 	.word	0x58000c00
 8005a50:	11fff4ff 	.word	0x11fff4ff
 8005a54:	40011000 	.word	0x40011000
 8005a58:	58024400 	.word	0x58024400
 8005a5c:	40004400 	.word	0x40004400
 8005a60:	40004800 	.word	0x40004800
 8005a64:	40004c00 	.word	0x40004c00
 8005a68:	40005000 	.word	0x40005000
 8005a6c:	2340      	movs	r3, #64	; 0x40
 8005a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a72:	e228      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005a74:	2380      	movs	r3, #128	; 0x80
 8005a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a7a:	e224      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4ab1      	ldr	r2, [pc, #708]	; (8005d48 <UART_SetConfig+0x62c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d176      	bne.n	8005b74 <UART_SetConfig+0x458>
 8005a86:	4bb1      	ldr	r3, [pc, #708]	; (8005d4c <UART_SetConfig+0x630>)
 8005a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a8e:	2b28      	cmp	r3, #40	; 0x28
 8005a90:	d86c      	bhi.n	8005b6c <UART_SetConfig+0x450>
 8005a92:	a201      	add	r2, pc, #4	; (adr r2, 8005a98 <UART_SetConfig+0x37c>)
 8005a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a98:	08005b3d 	.word	0x08005b3d
 8005a9c:	08005b6d 	.word	0x08005b6d
 8005aa0:	08005b6d 	.word	0x08005b6d
 8005aa4:	08005b6d 	.word	0x08005b6d
 8005aa8:	08005b6d 	.word	0x08005b6d
 8005aac:	08005b6d 	.word	0x08005b6d
 8005ab0:	08005b6d 	.word	0x08005b6d
 8005ab4:	08005b6d 	.word	0x08005b6d
 8005ab8:	08005b45 	.word	0x08005b45
 8005abc:	08005b6d 	.word	0x08005b6d
 8005ac0:	08005b6d 	.word	0x08005b6d
 8005ac4:	08005b6d 	.word	0x08005b6d
 8005ac8:	08005b6d 	.word	0x08005b6d
 8005acc:	08005b6d 	.word	0x08005b6d
 8005ad0:	08005b6d 	.word	0x08005b6d
 8005ad4:	08005b6d 	.word	0x08005b6d
 8005ad8:	08005b4d 	.word	0x08005b4d
 8005adc:	08005b6d 	.word	0x08005b6d
 8005ae0:	08005b6d 	.word	0x08005b6d
 8005ae4:	08005b6d 	.word	0x08005b6d
 8005ae8:	08005b6d 	.word	0x08005b6d
 8005aec:	08005b6d 	.word	0x08005b6d
 8005af0:	08005b6d 	.word	0x08005b6d
 8005af4:	08005b6d 	.word	0x08005b6d
 8005af8:	08005b55 	.word	0x08005b55
 8005afc:	08005b6d 	.word	0x08005b6d
 8005b00:	08005b6d 	.word	0x08005b6d
 8005b04:	08005b6d 	.word	0x08005b6d
 8005b08:	08005b6d 	.word	0x08005b6d
 8005b0c:	08005b6d 	.word	0x08005b6d
 8005b10:	08005b6d 	.word	0x08005b6d
 8005b14:	08005b6d 	.word	0x08005b6d
 8005b18:	08005b5d 	.word	0x08005b5d
 8005b1c:	08005b6d 	.word	0x08005b6d
 8005b20:	08005b6d 	.word	0x08005b6d
 8005b24:	08005b6d 	.word	0x08005b6d
 8005b28:	08005b6d 	.word	0x08005b6d
 8005b2c:	08005b6d 	.word	0x08005b6d
 8005b30:	08005b6d 	.word	0x08005b6d
 8005b34:	08005b6d 	.word	0x08005b6d
 8005b38:	08005b65 	.word	0x08005b65
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b42:	e1c0      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005b44:	2304      	movs	r3, #4
 8005b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b4a:	e1bc      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005b4c:	2308      	movs	r3, #8
 8005b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b52:	e1b8      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005b54:	2310      	movs	r3, #16
 8005b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b5a:	e1b4      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005b5c:	2320      	movs	r3, #32
 8005b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b62:	e1b0      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005b64:	2340      	movs	r3, #64	; 0x40
 8005b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b6a:	e1ac      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005b6c:	2380      	movs	r3, #128	; 0x80
 8005b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b72:	e1a8      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a75      	ldr	r2, [pc, #468]	; (8005d50 <UART_SetConfig+0x634>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d130      	bne.n	8005be0 <UART_SetConfig+0x4c4>
 8005b7e:	4b73      	ldr	r3, [pc, #460]	; (8005d4c <UART_SetConfig+0x630>)
 8005b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b82:	f003 0307 	and.w	r3, r3, #7
 8005b86:	2b05      	cmp	r3, #5
 8005b88:	d826      	bhi.n	8005bd8 <UART_SetConfig+0x4bc>
 8005b8a:	a201      	add	r2, pc, #4	; (adr r2, 8005b90 <UART_SetConfig+0x474>)
 8005b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b90:	08005ba9 	.word	0x08005ba9
 8005b94:	08005bb1 	.word	0x08005bb1
 8005b98:	08005bb9 	.word	0x08005bb9
 8005b9c:	08005bc1 	.word	0x08005bc1
 8005ba0:	08005bc9 	.word	0x08005bc9
 8005ba4:	08005bd1 	.word	0x08005bd1
 8005ba8:	2300      	movs	r3, #0
 8005baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bae:	e18a      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005bb0:	2304      	movs	r3, #4
 8005bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bb6:	e186      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005bb8:	2308      	movs	r3, #8
 8005bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bbe:	e182      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005bc0:	2310      	movs	r3, #16
 8005bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bc6:	e17e      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005bc8:	2320      	movs	r3, #32
 8005bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bce:	e17a      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005bd0:	2340      	movs	r3, #64	; 0x40
 8005bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bd6:	e176      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005bd8:	2380      	movs	r3, #128	; 0x80
 8005bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bde:	e172      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a5b      	ldr	r2, [pc, #364]	; (8005d54 <UART_SetConfig+0x638>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d130      	bne.n	8005c4c <UART_SetConfig+0x530>
 8005bea:	4b58      	ldr	r3, [pc, #352]	; (8005d4c <UART_SetConfig+0x630>)
 8005bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bee:	f003 0307 	and.w	r3, r3, #7
 8005bf2:	2b05      	cmp	r3, #5
 8005bf4:	d826      	bhi.n	8005c44 <UART_SetConfig+0x528>
 8005bf6:	a201      	add	r2, pc, #4	; (adr r2, 8005bfc <UART_SetConfig+0x4e0>)
 8005bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfc:	08005c15 	.word	0x08005c15
 8005c00:	08005c1d 	.word	0x08005c1d
 8005c04:	08005c25 	.word	0x08005c25
 8005c08:	08005c2d 	.word	0x08005c2d
 8005c0c:	08005c35 	.word	0x08005c35
 8005c10:	08005c3d 	.word	0x08005c3d
 8005c14:	2300      	movs	r3, #0
 8005c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c1a:	e154      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005c1c:	2304      	movs	r3, #4
 8005c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c22:	e150      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005c24:	2308      	movs	r3, #8
 8005c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c2a:	e14c      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005c2c:	2310      	movs	r3, #16
 8005c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c32:	e148      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005c34:	2320      	movs	r3, #32
 8005c36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c3a:	e144      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005c3c:	2340      	movs	r3, #64	; 0x40
 8005c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c42:	e140      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005c44:	2380      	movs	r3, #128	; 0x80
 8005c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c4a:	e13c      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a41      	ldr	r2, [pc, #260]	; (8005d58 <UART_SetConfig+0x63c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	f040 8082 	bne.w	8005d5c <UART_SetConfig+0x640>
 8005c58:	4b3c      	ldr	r3, [pc, #240]	; (8005d4c <UART_SetConfig+0x630>)
 8005c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c60:	2b28      	cmp	r3, #40	; 0x28
 8005c62:	d86d      	bhi.n	8005d40 <UART_SetConfig+0x624>
 8005c64:	a201      	add	r2, pc, #4	; (adr r2, 8005c6c <UART_SetConfig+0x550>)
 8005c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6a:	bf00      	nop
 8005c6c:	08005d11 	.word	0x08005d11
 8005c70:	08005d41 	.word	0x08005d41
 8005c74:	08005d41 	.word	0x08005d41
 8005c78:	08005d41 	.word	0x08005d41
 8005c7c:	08005d41 	.word	0x08005d41
 8005c80:	08005d41 	.word	0x08005d41
 8005c84:	08005d41 	.word	0x08005d41
 8005c88:	08005d41 	.word	0x08005d41
 8005c8c:	08005d19 	.word	0x08005d19
 8005c90:	08005d41 	.word	0x08005d41
 8005c94:	08005d41 	.word	0x08005d41
 8005c98:	08005d41 	.word	0x08005d41
 8005c9c:	08005d41 	.word	0x08005d41
 8005ca0:	08005d41 	.word	0x08005d41
 8005ca4:	08005d41 	.word	0x08005d41
 8005ca8:	08005d41 	.word	0x08005d41
 8005cac:	08005d21 	.word	0x08005d21
 8005cb0:	08005d41 	.word	0x08005d41
 8005cb4:	08005d41 	.word	0x08005d41
 8005cb8:	08005d41 	.word	0x08005d41
 8005cbc:	08005d41 	.word	0x08005d41
 8005cc0:	08005d41 	.word	0x08005d41
 8005cc4:	08005d41 	.word	0x08005d41
 8005cc8:	08005d41 	.word	0x08005d41
 8005ccc:	08005d29 	.word	0x08005d29
 8005cd0:	08005d41 	.word	0x08005d41
 8005cd4:	08005d41 	.word	0x08005d41
 8005cd8:	08005d41 	.word	0x08005d41
 8005cdc:	08005d41 	.word	0x08005d41
 8005ce0:	08005d41 	.word	0x08005d41
 8005ce4:	08005d41 	.word	0x08005d41
 8005ce8:	08005d41 	.word	0x08005d41
 8005cec:	08005d31 	.word	0x08005d31
 8005cf0:	08005d41 	.word	0x08005d41
 8005cf4:	08005d41 	.word	0x08005d41
 8005cf8:	08005d41 	.word	0x08005d41
 8005cfc:	08005d41 	.word	0x08005d41
 8005d00:	08005d41 	.word	0x08005d41
 8005d04:	08005d41 	.word	0x08005d41
 8005d08:	08005d41 	.word	0x08005d41
 8005d0c:	08005d39 	.word	0x08005d39
 8005d10:	2301      	movs	r3, #1
 8005d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d16:	e0d6      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005d18:	2304      	movs	r3, #4
 8005d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d1e:	e0d2      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005d20:	2308      	movs	r3, #8
 8005d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d26:	e0ce      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005d28:	2310      	movs	r3, #16
 8005d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d2e:	e0ca      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005d30:	2320      	movs	r3, #32
 8005d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d36:	e0c6      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005d38:	2340      	movs	r3, #64	; 0x40
 8005d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d3e:	e0c2      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005d40:	2380      	movs	r3, #128	; 0x80
 8005d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d46:	e0be      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005d48:	40011400 	.word	0x40011400
 8005d4c:	58024400 	.word	0x58024400
 8005d50:	40007800 	.word	0x40007800
 8005d54:	40007c00 	.word	0x40007c00
 8005d58:	40011800 	.word	0x40011800
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4aad      	ldr	r2, [pc, #692]	; (8006018 <UART_SetConfig+0x8fc>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d176      	bne.n	8005e54 <UART_SetConfig+0x738>
 8005d66:	4bad      	ldr	r3, [pc, #692]	; (800601c <UART_SetConfig+0x900>)
 8005d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d6e:	2b28      	cmp	r3, #40	; 0x28
 8005d70:	d86c      	bhi.n	8005e4c <UART_SetConfig+0x730>
 8005d72:	a201      	add	r2, pc, #4	; (adr r2, 8005d78 <UART_SetConfig+0x65c>)
 8005d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d78:	08005e1d 	.word	0x08005e1d
 8005d7c:	08005e4d 	.word	0x08005e4d
 8005d80:	08005e4d 	.word	0x08005e4d
 8005d84:	08005e4d 	.word	0x08005e4d
 8005d88:	08005e4d 	.word	0x08005e4d
 8005d8c:	08005e4d 	.word	0x08005e4d
 8005d90:	08005e4d 	.word	0x08005e4d
 8005d94:	08005e4d 	.word	0x08005e4d
 8005d98:	08005e25 	.word	0x08005e25
 8005d9c:	08005e4d 	.word	0x08005e4d
 8005da0:	08005e4d 	.word	0x08005e4d
 8005da4:	08005e4d 	.word	0x08005e4d
 8005da8:	08005e4d 	.word	0x08005e4d
 8005dac:	08005e4d 	.word	0x08005e4d
 8005db0:	08005e4d 	.word	0x08005e4d
 8005db4:	08005e4d 	.word	0x08005e4d
 8005db8:	08005e2d 	.word	0x08005e2d
 8005dbc:	08005e4d 	.word	0x08005e4d
 8005dc0:	08005e4d 	.word	0x08005e4d
 8005dc4:	08005e4d 	.word	0x08005e4d
 8005dc8:	08005e4d 	.word	0x08005e4d
 8005dcc:	08005e4d 	.word	0x08005e4d
 8005dd0:	08005e4d 	.word	0x08005e4d
 8005dd4:	08005e4d 	.word	0x08005e4d
 8005dd8:	08005e35 	.word	0x08005e35
 8005ddc:	08005e4d 	.word	0x08005e4d
 8005de0:	08005e4d 	.word	0x08005e4d
 8005de4:	08005e4d 	.word	0x08005e4d
 8005de8:	08005e4d 	.word	0x08005e4d
 8005dec:	08005e4d 	.word	0x08005e4d
 8005df0:	08005e4d 	.word	0x08005e4d
 8005df4:	08005e4d 	.word	0x08005e4d
 8005df8:	08005e3d 	.word	0x08005e3d
 8005dfc:	08005e4d 	.word	0x08005e4d
 8005e00:	08005e4d 	.word	0x08005e4d
 8005e04:	08005e4d 	.word	0x08005e4d
 8005e08:	08005e4d 	.word	0x08005e4d
 8005e0c:	08005e4d 	.word	0x08005e4d
 8005e10:	08005e4d 	.word	0x08005e4d
 8005e14:	08005e4d 	.word	0x08005e4d
 8005e18:	08005e45 	.word	0x08005e45
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e22:	e050      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005e24:	2304      	movs	r3, #4
 8005e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e2a:	e04c      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005e2c:	2308      	movs	r3, #8
 8005e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e32:	e048      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005e34:	2310      	movs	r3, #16
 8005e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e3a:	e044      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005e3c:	2320      	movs	r3, #32
 8005e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e42:	e040      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005e44:	2340      	movs	r3, #64	; 0x40
 8005e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e4a:	e03c      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005e4c:	2380      	movs	r3, #128	; 0x80
 8005e4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e52:	e038      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a71      	ldr	r2, [pc, #452]	; (8006020 <UART_SetConfig+0x904>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d130      	bne.n	8005ec0 <UART_SetConfig+0x7a4>
 8005e5e:	4b6f      	ldr	r3, [pc, #444]	; (800601c <UART_SetConfig+0x900>)
 8005e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e62:	f003 0307 	and.w	r3, r3, #7
 8005e66:	2b05      	cmp	r3, #5
 8005e68:	d826      	bhi.n	8005eb8 <UART_SetConfig+0x79c>
 8005e6a:	a201      	add	r2, pc, #4	; (adr r2, 8005e70 <UART_SetConfig+0x754>)
 8005e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e70:	08005e89 	.word	0x08005e89
 8005e74:	08005e91 	.word	0x08005e91
 8005e78:	08005e99 	.word	0x08005e99
 8005e7c:	08005ea1 	.word	0x08005ea1
 8005e80:	08005ea9 	.word	0x08005ea9
 8005e84:	08005eb1 	.word	0x08005eb1
 8005e88:	2302      	movs	r3, #2
 8005e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e8e:	e01a      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005e90:	2304      	movs	r3, #4
 8005e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e96:	e016      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005e98:	2308      	movs	r3, #8
 8005e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e9e:	e012      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005ea0:	2310      	movs	r3, #16
 8005ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ea6:	e00e      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005ea8:	2320      	movs	r3, #32
 8005eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eae:	e00a      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005eb0:	2340      	movs	r3, #64	; 0x40
 8005eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eb6:	e006      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005eb8:	2380      	movs	r3, #128	; 0x80
 8005eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ebe:	e002      	b.n	8005ec6 <UART_SetConfig+0x7aa>
 8005ec0:	2380      	movs	r3, #128	; 0x80
 8005ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a55      	ldr	r2, [pc, #340]	; (8006020 <UART_SetConfig+0x904>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	f040 80f0 	bne.w	80060b2 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ed2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005ed6:	2b20      	cmp	r3, #32
 8005ed8:	dc46      	bgt.n	8005f68 <UART_SetConfig+0x84c>
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	db75      	blt.n	8005fca <UART_SetConfig+0x8ae>
 8005ede:	3b02      	subs	r3, #2
 8005ee0:	2b1e      	cmp	r3, #30
 8005ee2:	d872      	bhi.n	8005fca <UART_SetConfig+0x8ae>
 8005ee4:	a201      	add	r2, pc, #4	; (adr r2, 8005eec <UART_SetConfig+0x7d0>)
 8005ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eea:	bf00      	nop
 8005eec:	08005f6f 	.word	0x08005f6f
 8005ef0:	08005fcb 	.word	0x08005fcb
 8005ef4:	08005f77 	.word	0x08005f77
 8005ef8:	08005fcb 	.word	0x08005fcb
 8005efc:	08005fcb 	.word	0x08005fcb
 8005f00:	08005fcb 	.word	0x08005fcb
 8005f04:	08005f87 	.word	0x08005f87
 8005f08:	08005fcb 	.word	0x08005fcb
 8005f0c:	08005fcb 	.word	0x08005fcb
 8005f10:	08005fcb 	.word	0x08005fcb
 8005f14:	08005fcb 	.word	0x08005fcb
 8005f18:	08005fcb 	.word	0x08005fcb
 8005f1c:	08005fcb 	.word	0x08005fcb
 8005f20:	08005fcb 	.word	0x08005fcb
 8005f24:	08005f97 	.word	0x08005f97
 8005f28:	08005fcb 	.word	0x08005fcb
 8005f2c:	08005fcb 	.word	0x08005fcb
 8005f30:	08005fcb 	.word	0x08005fcb
 8005f34:	08005fcb 	.word	0x08005fcb
 8005f38:	08005fcb 	.word	0x08005fcb
 8005f3c:	08005fcb 	.word	0x08005fcb
 8005f40:	08005fcb 	.word	0x08005fcb
 8005f44:	08005fcb 	.word	0x08005fcb
 8005f48:	08005fcb 	.word	0x08005fcb
 8005f4c:	08005fcb 	.word	0x08005fcb
 8005f50:	08005fcb 	.word	0x08005fcb
 8005f54:	08005fcb 	.word	0x08005fcb
 8005f58:	08005fcb 	.word	0x08005fcb
 8005f5c:	08005fcb 	.word	0x08005fcb
 8005f60:	08005fcb 	.word	0x08005fcb
 8005f64:	08005fbd 	.word	0x08005fbd
 8005f68:	2b40      	cmp	r3, #64	; 0x40
 8005f6a:	d02a      	beq.n	8005fc2 <UART_SetConfig+0x8a6>
 8005f6c:	e02d      	b.n	8005fca <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005f6e:	f7fe ff63 	bl	8004e38 <HAL_RCCEx_GetD3PCLK1Freq>
 8005f72:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005f74:	e02f      	b.n	8005fd6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f76:	f107 0314 	add.w	r3, r7, #20
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fe ff72 	bl	8004e64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f84:	e027      	b.n	8005fd6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f86:	f107 0308 	add.w	r3, r7, #8
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7ff f8be 	bl	800510c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f94:	e01f      	b.n	8005fd6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f96:	4b21      	ldr	r3, [pc, #132]	; (800601c <UART_SetConfig+0x900>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0320 	and.w	r3, r3, #32
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d009      	beq.n	8005fb6 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005fa2:	4b1e      	ldr	r3, [pc, #120]	; (800601c <UART_SetConfig+0x900>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	08db      	lsrs	r3, r3, #3
 8005fa8:	f003 0303 	and.w	r3, r3, #3
 8005fac:	4a1d      	ldr	r2, [pc, #116]	; (8006024 <UART_SetConfig+0x908>)
 8005fae:	fa22 f303 	lsr.w	r3, r2, r3
 8005fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005fb4:	e00f      	b.n	8005fd6 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8005fb6:	4b1b      	ldr	r3, [pc, #108]	; (8006024 <UART_SetConfig+0x908>)
 8005fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fba:	e00c      	b.n	8005fd6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005fbc:	4b1a      	ldr	r3, [pc, #104]	; (8006028 <UART_SetConfig+0x90c>)
 8005fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fc0:	e009      	b.n	8005fd6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fc8:	e005      	b.n	8005fd6 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005fd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f000 81e6 	beq.w	80063aa <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe2:	4a12      	ldr	r2, [pc, #72]	; (800602c <UART_SetConfig+0x910>)
 8005fe4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fe8:	461a      	mov	r2, r3
 8005fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fec:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ff0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	005b      	lsls	r3, r3, #1
 8005ffa:	4413      	add	r3, r2
 8005ffc:	6a3a      	ldr	r2, [r7, #32]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d305      	bcc.n	800600e <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006008:	6a3a      	ldr	r2, [r7, #32]
 800600a:	429a      	cmp	r2, r3
 800600c:	d910      	bls.n	8006030 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006014:	e1c9      	b.n	80063aa <UART_SetConfig+0xc8e>
 8006016:	bf00      	nop
 8006018:	40011c00 	.word	0x40011c00
 800601c:	58024400 	.word	0x58024400
 8006020:	58000c00 	.word	0x58000c00
 8006024:	03d09000 	.word	0x03d09000
 8006028:	003d0900 	.word	0x003d0900
 800602c:	0800a4c8 	.word	0x0800a4c8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006032:	4618      	mov	r0, r3
 8006034:	f04f 0100 	mov.w	r1, #0
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603c:	4ac1      	ldr	r2, [pc, #772]	; (8006344 <UART_SetConfig+0xc28>)
 800603e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006042:	b29a      	uxth	r2, r3
 8006044:	f04f 0300 	mov.w	r3, #0
 8006048:	f7fa f960 	bl	800030c <__aeabi_uldivmod>
 800604c:	4602      	mov	r2, r0
 800604e:	460b      	mov	r3, r1
 8006050:	4610      	mov	r0, r2
 8006052:	4619      	mov	r1, r3
 8006054:	f04f 0200 	mov.w	r2, #0
 8006058:	f04f 0300 	mov.w	r3, #0
 800605c:	020b      	lsls	r3, r1, #8
 800605e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006062:	0202      	lsls	r2, r0, #8
 8006064:	6879      	ldr	r1, [r7, #4]
 8006066:	6849      	ldr	r1, [r1, #4]
 8006068:	0849      	lsrs	r1, r1, #1
 800606a:	4608      	mov	r0, r1
 800606c:	f04f 0100 	mov.w	r1, #0
 8006070:	1814      	adds	r4, r2, r0
 8006072:	eb43 0501 	adc.w	r5, r3, r1
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	461a      	mov	r2, r3
 800607c:	f04f 0300 	mov.w	r3, #0
 8006080:	4620      	mov	r0, r4
 8006082:	4629      	mov	r1, r5
 8006084:	f7fa f942 	bl	800030c <__aeabi_uldivmod>
 8006088:	4602      	mov	r2, r0
 800608a:	460b      	mov	r3, r1
 800608c:	4613      	mov	r3, r2
 800608e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006092:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006096:	d308      	bcc.n	80060aa <UART_SetConfig+0x98e>
 8006098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800609e:	d204      	bcs.n	80060aa <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060a6:	60da      	str	r2, [r3, #12]
 80060a8:	e17f      	b.n	80063aa <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80060b0:	e17b      	b.n	80063aa <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ba:	f040 80bd 	bne.w	8006238 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 80060be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80060c2:	2b20      	cmp	r3, #32
 80060c4:	dc48      	bgt.n	8006158 <UART_SetConfig+0xa3c>
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	db7b      	blt.n	80061c2 <UART_SetConfig+0xaa6>
 80060ca:	2b20      	cmp	r3, #32
 80060cc:	d879      	bhi.n	80061c2 <UART_SetConfig+0xaa6>
 80060ce:	a201      	add	r2, pc, #4	; (adr r2, 80060d4 <UART_SetConfig+0x9b8>)
 80060d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d4:	0800615f 	.word	0x0800615f
 80060d8:	08006167 	.word	0x08006167
 80060dc:	080061c3 	.word	0x080061c3
 80060e0:	080061c3 	.word	0x080061c3
 80060e4:	0800616f 	.word	0x0800616f
 80060e8:	080061c3 	.word	0x080061c3
 80060ec:	080061c3 	.word	0x080061c3
 80060f0:	080061c3 	.word	0x080061c3
 80060f4:	0800617f 	.word	0x0800617f
 80060f8:	080061c3 	.word	0x080061c3
 80060fc:	080061c3 	.word	0x080061c3
 8006100:	080061c3 	.word	0x080061c3
 8006104:	080061c3 	.word	0x080061c3
 8006108:	080061c3 	.word	0x080061c3
 800610c:	080061c3 	.word	0x080061c3
 8006110:	080061c3 	.word	0x080061c3
 8006114:	0800618f 	.word	0x0800618f
 8006118:	080061c3 	.word	0x080061c3
 800611c:	080061c3 	.word	0x080061c3
 8006120:	080061c3 	.word	0x080061c3
 8006124:	080061c3 	.word	0x080061c3
 8006128:	080061c3 	.word	0x080061c3
 800612c:	080061c3 	.word	0x080061c3
 8006130:	080061c3 	.word	0x080061c3
 8006134:	080061c3 	.word	0x080061c3
 8006138:	080061c3 	.word	0x080061c3
 800613c:	080061c3 	.word	0x080061c3
 8006140:	080061c3 	.word	0x080061c3
 8006144:	080061c3 	.word	0x080061c3
 8006148:	080061c3 	.word	0x080061c3
 800614c:	080061c3 	.word	0x080061c3
 8006150:	080061c3 	.word	0x080061c3
 8006154:	080061b5 	.word	0x080061b5
 8006158:	2b40      	cmp	r3, #64	; 0x40
 800615a:	d02e      	beq.n	80061ba <UART_SetConfig+0xa9e>
 800615c:	e031      	b.n	80061c2 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800615e:	f7fd ff45 	bl	8003fec <HAL_RCC_GetPCLK1Freq>
 8006162:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006164:	e033      	b.n	80061ce <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006166:	f7fd ff57 	bl	8004018 <HAL_RCC_GetPCLK2Freq>
 800616a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800616c:	e02f      	b.n	80061ce <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800616e:	f107 0314 	add.w	r3, r7, #20
 8006172:	4618      	mov	r0, r3
 8006174:	f7fe fe76 	bl	8004e64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800617c:	e027      	b.n	80061ce <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800617e:	f107 0308 	add.w	r3, r7, #8
 8006182:	4618      	mov	r0, r3
 8006184:	f7fe ffc2 	bl	800510c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800618c:	e01f      	b.n	80061ce <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800618e:	4b6e      	ldr	r3, [pc, #440]	; (8006348 <UART_SetConfig+0xc2c>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0320 	and.w	r3, r3, #32
 8006196:	2b00      	cmp	r3, #0
 8006198:	d009      	beq.n	80061ae <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800619a:	4b6b      	ldr	r3, [pc, #428]	; (8006348 <UART_SetConfig+0xc2c>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	08db      	lsrs	r3, r3, #3
 80061a0:	f003 0303 	and.w	r3, r3, #3
 80061a4:	4a69      	ldr	r2, [pc, #420]	; (800634c <UART_SetConfig+0xc30>)
 80061a6:	fa22 f303 	lsr.w	r3, r2, r3
 80061aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061ac:	e00f      	b.n	80061ce <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 80061ae:	4b67      	ldr	r3, [pc, #412]	; (800634c <UART_SetConfig+0xc30>)
 80061b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061b2:	e00c      	b.n	80061ce <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80061b4:	4b66      	ldr	r3, [pc, #408]	; (8006350 <UART_SetConfig+0xc34>)
 80061b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061b8:	e009      	b.n	80061ce <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061c0:	e005      	b.n	80061ce <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 80061c2:	2300      	movs	r3, #0
 80061c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80061cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 80ea 	beq.w	80063aa <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061da:	4a5a      	ldr	r2, [pc, #360]	; (8006344 <UART_SetConfig+0xc28>)
 80061dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061e0:	461a      	mov	r2, r3
 80061e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80061e8:	005a      	lsls	r2, r3, #1
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	085b      	lsrs	r3, r3, #1
 80061f0:	441a      	add	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061fa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fe:	2b0f      	cmp	r3, #15
 8006200:	d916      	bls.n	8006230 <UART_SetConfig+0xb14>
 8006202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006208:	d212      	bcs.n	8006230 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800620a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620c:	b29b      	uxth	r3, r3
 800620e:	f023 030f 	bic.w	r3, r3, #15
 8006212:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006216:	085b      	lsrs	r3, r3, #1
 8006218:	b29b      	uxth	r3, r3
 800621a:	f003 0307 	and.w	r3, r3, #7
 800621e:	b29a      	uxth	r2, r3
 8006220:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006222:	4313      	orrs	r3, r2
 8006224:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800622c:	60da      	str	r2, [r3, #12]
 800622e:	e0bc      	b.n	80063aa <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006236:	e0b8      	b.n	80063aa <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006238:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800623c:	2b20      	cmp	r3, #32
 800623e:	dc4b      	bgt.n	80062d8 <UART_SetConfig+0xbbc>
 8006240:	2b00      	cmp	r3, #0
 8006242:	f2c0 8087 	blt.w	8006354 <UART_SetConfig+0xc38>
 8006246:	2b20      	cmp	r3, #32
 8006248:	f200 8084 	bhi.w	8006354 <UART_SetConfig+0xc38>
 800624c:	a201      	add	r2, pc, #4	; (adr r2, 8006254 <UART_SetConfig+0xb38>)
 800624e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006252:	bf00      	nop
 8006254:	080062df 	.word	0x080062df
 8006258:	080062e7 	.word	0x080062e7
 800625c:	08006355 	.word	0x08006355
 8006260:	08006355 	.word	0x08006355
 8006264:	080062ef 	.word	0x080062ef
 8006268:	08006355 	.word	0x08006355
 800626c:	08006355 	.word	0x08006355
 8006270:	08006355 	.word	0x08006355
 8006274:	080062ff 	.word	0x080062ff
 8006278:	08006355 	.word	0x08006355
 800627c:	08006355 	.word	0x08006355
 8006280:	08006355 	.word	0x08006355
 8006284:	08006355 	.word	0x08006355
 8006288:	08006355 	.word	0x08006355
 800628c:	08006355 	.word	0x08006355
 8006290:	08006355 	.word	0x08006355
 8006294:	0800630f 	.word	0x0800630f
 8006298:	08006355 	.word	0x08006355
 800629c:	08006355 	.word	0x08006355
 80062a0:	08006355 	.word	0x08006355
 80062a4:	08006355 	.word	0x08006355
 80062a8:	08006355 	.word	0x08006355
 80062ac:	08006355 	.word	0x08006355
 80062b0:	08006355 	.word	0x08006355
 80062b4:	08006355 	.word	0x08006355
 80062b8:	08006355 	.word	0x08006355
 80062bc:	08006355 	.word	0x08006355
 80062c0:	08006355 	.word	0x08006355
 80062c4:	08006355 	.word	0x08006355
 80062c8:	08006355 	.word	0x08006355
 80062cc:	08006355 	.word	0x08006355
 80062d0:	08006355 	.word	0x08006355
 80062d4:	08006335 	.word	0x08006335
 80062d8:	2b40      	cmp	r3, #64	; 0x40
 80062da:	d02e      	beq.n	800633a <UART_SetConfig+0xc1e>
 80062dc:	e03a      	b.n	8006354 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062de:	f7fd fe85 	bl	8003fec <HAL_RCC_GetPCLK1Freq>
 80062e2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80062e4:	e03c      	b.n	8006360 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062e6:	f7fd fe97 	bl	8004018 <HAL_RCC_GetPCLK2Freq>
 80062ea:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80062ec:	e038      	b.n	8006360 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062ee:	f107 0314 	add.w	r3, r7, #20
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7fe fdb6 	bl	8004e64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062fc:	e030      	b.n	8006360 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062fe:	f107 0308 	add.w	r3, r7, #8
 8006302:	4618      	mov	r0, r3
 8006304:	f7fe ff02 	bl	800510c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800630c:	e028      	b.n	8006360 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800630e:	4b0e      	ldr	r3, [pc, #56]	; (8006348 <UART_SetConfig+0xc2c>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0320 	and.w	r3, r3, #32
 8006316:	2b00      	cmp	r3, #0
 8006318:	d009      	beq.n	800632e <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800631a:	4b0b      	ldr	r3, [pc, #44]	; (8006348 <UART_SetConfig+0xc2c>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	08db      	lsrs	r3, r3, #3
 8006320:	f003 0303 	and.w	r3, r3, #3
 8006324:	4a09      	ldr	r2, [pc, #36]	; (800634c <UART_SetConfig+0xc30>)
 8006326:	fa22 f303 	lsr.w	r3, r2, r3
 800632a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800632c:	e018      	b.n	8006360 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800632e:	4b07      	ldr	r3, [pc, #28]	; (800634c <UART_SetConfig+0xc30>)
 8006330:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006332:	e015      	b.n	8006360 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006334:	4b06      	ldr	r3, [pc, #24]	; (8006350 <UART_SetConfig+0xc34>)
 8006336:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006338:	e012      	b.n	8006360 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800633a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800633e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006340:	e00e      	b.n	8006360 <UART_SetConfig+0xc44>
 8006342:	bf00      	nop
 8006344:	0800a4c8 	.word	0x0800a4c8
 8006348:	58024400 	.word	0x58024400
 800634c:	03d09000 	.word	0x03d09000
 8006350:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8006354:	2300      	movs	r3, #0
 8006356:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800635e:	bf00      	nop
    }

    if (pclk != 0U)
 8006360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006362:	2b00      	cmp	r3, #0
 8006364:	d021      	beq.n	80063aa <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	4a1a      	ldr	r2, [pc, #104]	; (80063d4 <UART_SetConfig+0xcb8>)
 800636c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006370:	461a      	mov	r2, r3
 8006372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006374:	fbb3 f2f2 	udiv	r2, r3, r2
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	085b      	lsrs	r3, r3, #1
 800637e:	441a      	add	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	fbb2 f3f3 	udiv	r3, r2, r3
 8006388:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800638a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638c:	2b0f      	cmp	r3, #15
 800638e:	d909      	bls.n	80063a4 <UART_SetConfig+0xc88>
 8006390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006396:	d205      	bcs.n	80063a4 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639a:	b29a      	uxth	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	60da      	str	r2, [r3, #12]
 80063a2:	e002      	b.n	80063aa <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80063c6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3738      	adds	r7, #56	; 0x38
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bdb0      	pop	{r4, r5, r7, pc}
 80063d2:	bf00      	nop
 80063d4:	0800a4c8 	.word	0x0800a4c8

080063d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e4:	f003 0301 	and.w	r3, r3, #1
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00a      	beq.n	8006402 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	430a      	orrs	r2, r1
 8006400:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00a      	beq.n	8006424 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	430a      	orrs	r2, r1
 8006422:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006428:	f003 0304 	and.w	r3, r3, #4
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00a      	beq.n	8006446 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644a:	f003 0308 	and.w	r3, r3, #8
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00a      	beq.n	8006468 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	430a      	orrs	r2, r1
 8006466:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646c:	f003 0310 	and.w	r3, r3, #16
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00a      	beq.n	800648a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	430a      	orrs	r2, r1
 8006488:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648e:	f003 0320 	and.w	r3, r3, #32
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00a      	beq.n	80064ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	430a      	orrs	r2, r1
 80064aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d01a      	beq.n	80064ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	430a      	orrs	r2, r1
 80064cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064d6:	d10a      	bne.n	80064ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	430a      	orrs	r2, r1
 80064ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00a      	beq.n	8006510 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	430a      	orrs	r2, r1
 800650e:	605a      	str	r2, [r3, #4]
  }
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b086      	sub	sp, #24
 8006520:	af02      	add	r7, sp, #8
 8006522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800652c:	f7fa fd0e 	bl	8000f4c <HAL_GetTick>
 8006530:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0308 	and.w	r3, r3, #8
 800653c:	2b08      	cmp	r3, #8
 800653e:	d10e      	bne.n	800655e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006540:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f82f 	bl	80065b2 <UART_WaitOnFlagUntilTimeout>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e025      	b.n	80065aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	2b04      	cmp	r3, #4
 800656a:	d10e      	bne.n	800658a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800656c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f819 	bl	80065b2 <UART_WaitOnFlagUntilTimeout>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d001      	beq.n	800658a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e00f      	b.n	80065aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2220      	movs	r2, #32
 800658e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2220      	movs	r2, #32
 8006596:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b09c      	sub	sp, #112	; 0x70
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	60f8      	str	r0, [r7, #12]
 80065ba:	60b9      	str	r1, [r7, #8]
 80065bc:	603b      	str	r3, [r7, #0]
 80065be:	4613      	mov	r3, r2
 80065c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065c2:	e0a9      	b.n	8006718 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ca:	f000 80a5 	beq.w	8006718 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065ce:	f7fa fcbd 	bl	8000f4c <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80065da:	429a      	cmp	r2, r3
 80065dc:	d302      	bcc.n	80065e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80065de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d140      	bne.n	8006666 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065ec:	e853 3f00 	ldrex	r3, [r3]
 80065f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80065f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065f8:	667b      	str	r3, [r7, #100]	; 0x64
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	461a      	mov	r2, r3
 8006600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006602:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006604:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006606:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006608:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800660a:	e841 2300 	strex	r3, r2, [r1]
 800660e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1e6      	bne.n	80065e4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	3308      	adds	r3, #8
 800661c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006620:	e853 3f00 	ldrex	r3, [r3]
 8006624:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006628:	f023 0301 	bic.w	r3, r3, #1
 800662c:	663b      	str	r3, [r7, #96]	; 0x60
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	3308      	adds	r3, #8
 8006634:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006636:	64ba      	str	r2, [r7, #72]	; 0x48
 8006638:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800663c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800663e:	e841 2300 	strex	r3, r2, [r1]
 8006642:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1e5      	bne.n	8006616 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2220      	movs	r2, #32
 800664e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2220      	movs	r2, #32
 8006656:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e069      	b.n	800673a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0304 	and.w	r3, r3, #4
 8006670:	2b00      	cmp	r3, #0
 8006672:	d051      	beq.n	8006718 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800667e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006682:	d149      	bne.n	8006718 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800668c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006696:	e853 3f00 	ldrex	r3, [r3]
 800669a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	461a      	mov	r2, r3
 80066aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ac:	637b      	str	r3, [r7, #52]	; 0x34
 80066ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066b4:	e841 2300 	strex	r3, r2, [r1]
 80066b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80066ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1e6      	bne.n	800668e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3308      	adds	r3, #8
 80066c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	e853 3f00 	ldrex	r3, [r3]
 80066ce:	613b      	str	r3, [r7, #16]
   return(result);
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	f023 0301 	bic.w	r3, r3, #1
 80066d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3308      	adds	r3, #8
 80066de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80066e0:	623a      	str	r2, [r7, #32]
 80066e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e4:	69f9      	ldr	r1, [r7, #28]
 80066e6:	6a3a      	ldr	r2, [r7, #32]
 80066e8:	e841 2300 	strex	r3, r2, [r1]
 80066ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1e5      	bne.n	80066c0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2220      	movs	r2, #32
 80066f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2220      	movs	r2, #32
 8006700:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2220      	movs	r2, #32
 8006708:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e010      	b.n	800673a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	69da      	ldr	r2, [r3, #28]
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	4013      	ands	r3, r2
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	429a      	cmp	r2, r3
 8006726:	bf0c      	ite	eq
 8006728:	2301      	moveq	r3, #1
 800672a:	2300      	movne	r3, #0
 800672c:	b2db      	uxtb	r3, r3
 800672e:	461a      	mov	r2, r3
 8006730:	79fb      	ldrb	r3, [r7, #7]
 8006732:	429a      	cmp	r2, r3
 8006734:	f43f af46 	beq.w	80065c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3770      	adds	r7, #112	; 0x70
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006742:	b480      	push	{r7}
 8006744:	b085      	sub	sp, #20
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006750:	2b01      	cmp	r3, #1
 8006752:	d101      	bne.n	8006758 <HAL_UARTEx_DisableFifoMode+0x16>
 8006754:	2302      	movs	r3, #2
 8006756:	e027      	b.n	80067a8 <HAL_UARTEx_DisableFifoMode+0x66>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2224      	movs	r2, #36	; 0x24
 8006764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f022 0201 	bic.w	r2, r2, #1
 800677e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006786:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2220      	movs	r2, #32
 800679a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3714      	adds	r7, #20
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d101      	bne.n	80067cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80067c8:	2302      	movs	r3, #2
 80067ca:	e02d      	b.n	8006828 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2224      	movs	r2, #36	; 0x24
 80067d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f022 0201 	bic.w	r2, r2, #1
 80067f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	430a      	orrs	r2, r1
 8006806:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 f84f 	bl	80068ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2220      	movs	r2, #32
 800681a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006840:	2b01      	cmp	r3, #1
 8006842:	d101      	bne.n	8006848 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006844:	2302      	movs	r3, #2
 8006846:	e02d      	b.n	80068a4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2224      	movs	r2, #36	; 0x24
 8006854:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 0201 	bic.w	r2, r2, #1
 800686e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	683a      	ldr	r2, [r7, #0]
 8006880:	430a      	orrs	r2, r1
 8006882:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 f811 	bl	80068ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2220      	movs	r2, #32
 8006896:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d108      	bne.n	80068ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80068cc:	e031      	b.n	8006932 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80068ce:	2310      	movs	r3, #16
 80068d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80068d2:	2310      	movs	r3, #16
 80068d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	0e5b      	lsrs	r3, r3, #25
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	f003 0307 	and.w	r3, r3, #7
 80068e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	0f5b      	lsrs	r3, r3, #29
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	f003 0307 	and.w	r3, r3, #7
 80068f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068f6:	7bbb      	ldrb	r3, [r7, #14]
 80068f8:	7b3a      	ldrb	r2, [r7, #12]
 80068fa:	4911      	ldr	r1, [pc, #68]	; (8006940 <UARTEx_SetNbDataToProcess+0x94>)
 80068fc:	5c8a      	ldrb	r2, [r1, r2]
 80068fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006902:	7b3a      	ldrb	r2, [r7, #12]
 8006904:	490f      	ldr	r1, [pc, #60]	; (8006944 <UARTEx_SetNbDataToProcess+0x98>)
 8006906:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006908:	fb93 f3f2 	sdiv	r3, r3, r2
 800690c:	b29a      	uxth	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006914:	7bfb      	ldrb	r3, [r7, #15]
 8006916:	7b7a      	ldrb	r2, [r7, #13]
 8006918:	4909      	ldr	r1, [pc, #36]	; (8006940 <UARTEx_SetNbDataToProcess+0x94>)
 800691a:	5c8a      	ldrb	r2, [r1, r2]
 800691c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006920:	7b7a      	ldrb	r2, [r7, #13]
 8006922:	4908      	ldr	r1, [pc, #32]	; (8006944 <UARTEx_SetNbDataToProcess+0x98>)
 8006924:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006926:	fb93 f3f2 	sdiv	r3, r3, r2
 800692a:	b29a      	uxth	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006932:	bf00      	nop
 8006934:	3714      	adds	r7, #20
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	0800a4e0 	.word	0x0800a4e0
 8006944:	0800a4e8 	.word	0x0800a4e8

08006948 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006948:	b084      	sub	sp, #16
 800694a:	b580      	push	{r7, lr}
 800694c:	b084      	sub	sp, #16
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	f107 001c 	add.w	r0, r7, #28
 8006956:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800695a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695c:	2b01      	cmp	r3, #1
 800695e:	d120      	bne.n	80069a2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006964:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68da      	ldr	r2, [r3, #12]
 8006970:	4b2a      	ldr	r3, [pc, #168]	; (8006a1c <USB_CoreInit+0xd4>)
 8006972:	4013      	ands	r3, r2
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006986:	2b01      	cmp	r3, #1
 8006988:	d105      	bne.n	8006996 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f001 fb4e 	bl	8008038 <USB_CoreReset>
 800699c:	4603      	mov	r3, r0
 800699e:	73fb      	strb	r3, [r7, #15]
 80069a0:	e01a      	b.n	80069d8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f001 fb42 	bl	8008038 <USB_CoreReset>
 80069b4:	4603      	mov	r3, r0
 80069b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80069b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d106      	bne.n	80069cc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	639a      	str	r2, [r3, #56]	; 0x38
 80069ca:	e005      	b.n	80069d8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80069d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d116      	bne.n	8006a0c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80069ec:	4b0c      	ldr	r3, [pc, #48]	; (8006a20 <USB_CoreInit+0xd8>)
 80069ee:	4313      	orrs	r3, r2
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f043 0206 	orr.w	r2, r3, #6
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f043 0220 	orr.w	r2, r3, #32
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a18:	b004      	add	sp, #16
 8006a1a:	4770      	bx	lr
 8006a1c:	ffbdffbf 	.word	0xffbdffbf
 8006a20:	03ee0000 	.word	0x03ee0000

08006a24 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b087      	sub	sp, #28
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006a32:	79fb      	ldrb	r3, [r7, #7]
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d165      	bne.n	8006b04 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	4a41      	ldr	r2, [pc, #260]	; (8006b40 <USB_SetTurnaroundTime+0x11c>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d906      	bls.n	8006a4e <USB_SetTurnaroundTime+0x2a>
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	4a40      	ldr	r2, [pc, #256]	; (8006b44 <USB_SetTurnaroundTime+0x120>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d202      	bcs.n	8006a4e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006a48:	230f      	movs	r3, #15
 8006a4a:	617b      	str	r3, [r7, #20]
 8006a4c:	e062      	b.n	8006b14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	4a3c      	ldr	r2, [pc, #240]	; (8006b44 <USB_SetTurnaroundTime+0x120>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d306      	bcc.n	8006a64 <USB_SetTurnaroundTime+0x40>
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	4a3b      	ldr	r2, [pc, #236]	; (8006b48 <USB_SetTurnaroundTime+0x124>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d202      	bcs.n	8006a64 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006a5e:	230e      	movs	r3, #14
 8006a60:	617b      	str	r3, [r7, #20]
 8006a62:	e057      	b.n	8006b14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	4a38      	ldr	r2, [pc, #224]	; (8006b48 <USB_SetTurnaroundTime+0x124>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d306      	bcc.n	8006a7a <USB_SetTurnaroundTime+0x56>
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	4a37      	ldr	r2, [pc, #220]	; (8006b4c <USB_SetTurnaroundTime+0x128>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d202      	bcs.n	8006a7a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006a74:	230d      	movs	r3, #13
 8006a76:	617b      	str	r3, [r7, #20]
 8006a78:	e04c      	b.n	8006b14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	4a33      	ldr	r2, [pc, #204]	; (8006b4c <USB_SetTurnaroundTime+0x128>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d306      	bcc.n	8006a90 <USB_SetTurnaroundTime+0x6c>
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	4a32      	ldr	r2, [pc, #200]	; (8006b50 <USB_SetTurnaroundTime+0x12c>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d802      	bhi.n	8006a90 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006a8a:	230c      	movs	r3, #12
 8006a8c:	617b      	str	r3, [r7, #20]
 8006a8e:	e041      	b.n	8006b14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	4a2f      	ldr	r2, [pc, #188]	; (8006b50 <USB_SetTurnaroundTime+0x12c>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d906      	bls.n	8006aa6 <USB_SetTurnaroundTime+0x82>
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	4a2e      	ldr	r2, [pc, #184]	; (8006b54 <USB_SetTurnaroundTime+0x130>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d802      	bhi.n	8006aa6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006aa0:	230b      	movs	r3, #11
 8006aa2:	617b      	str	r3, [r7, #20]
 8006aa4:	e036      	b.n	8006b14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	4a2a      	ldr	r2, [pc, #168]	; (8006b54 <USB_SetTurnaroundTime+0x130>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d906      	bls.n	8006abc <USB_SetTurnaroundTime+0x98>
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	4a29      	ldr	r2, [pc, #164]	; (8006b58 <USB_SetTurnaroundTime+0x134>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d802      	bhi.n	8006abc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006ab6:	230a      	movs	r3, #10
 8006ab8:	617b      	str	r3, [r7, #20]
 8006aba:	e02b      	b.n	8006b14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	4a26      	ldr	r2, [pc, #152]	; (8006b58 <USB_SetTurnaroundTime+0x134>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d906      	bls.n	8006ad2 <USB_SetTurnaroundTime+0xae>
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	4a25      	ldr	r2, [pc, #148]	; (8006b5c <USB_SetTurnaroundTime+0x138>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d202      	bcs.n	8006ad2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006acc:	2309      	movs	r3, #9
 8006ace:	617b      	str	r3, [r7, #20]
 8006ad0:	e020      	b.n	8006b14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	4a21      	ldr	r2, [pc, #132]	; (8006b5c <USB_SetTurnaroundTime+0x138>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d306      	bcc.n	8006ae8 <USB_SetTurnaroundTime+0xc4>
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	4a20      	ldr	r2, [pc, #128]	; (8006b60 <USB_SetTurnaroundTime+0x13c>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d802      	bhi.n	8006ae8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006ae2:	2308      	movs	r3, #8
 8006ae4:	617b      	str	r3, [r7, #20]
 8006ae6:	e015      	b.n	8006b14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	4a1d      	ldr	r2, [pc, #116]	; (8006b60 <USB_SetTurnaroundTime+0x13c>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d906      	bls.n	8006afe <USB_SetTurnaroundTime+0xda>
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	4a1c      	ldr	r2, [pc, #112]	; (8006b64 <USB_SetTurnaroundTime+0x140>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d202      	bcs.n	8006afe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006af8:	2307      	movs	r3, #7
 8006afa:	617b      	str	r3, [r7, #20]
 8006afc:	e00a      	b.n	8006b14 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006afe:	2306      	movs	r3, #6
 8006b00:	617b      	str	r3, [r7, #20]
 8006b02:	e007      	b.n	8006b14 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006b04:	79fb      	ldrb	r3, [r7, #7]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d102      	bne.n	8006b10 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006b0a:	2309      	movs	r3, #9
 8006b0c:	617b      	str	r3, [r7, #20]
 8006b0e:	e001      	b.n	8006b14 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006b10:	2309      	movs	r3, #9
 8006b12:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	68da      	ldr	r2, [r3, #12]
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	029b      	lsls	r3, r3, #10
 8006b28:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006b2c:	431a      	orrs	r2, r3
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	371c      	adds	r7, #28
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr
 8006b40:	00d8acbf 	.word	0x00d8acbf
 8006b44:	00e4e1c0 	.word	0x00e4e1c0
 8006b48:	00f42400 	.word	0x00f42400
 8006b4c:	01067380 	.word	0x01067380
 8006b50:	011a499f 	.word	0x011a499f
 8006b54:	01312cff 	.word	0x01312cff
 8006b58:	014ca43f 	.word	0x014ca43f
 8006b5c:	016e3600 	.word	0x016e3600
 8006b60:	01a6ab1f 	.word	0x01a6ab1f
 8006b64:	01e84800 	.word	0x01e84800

08006b68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f043 0201 	orr.w	r2, r3, #1
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	370c      	adds	r7, #12
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr

08006b8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b8a:	b480      	push	{r7}
 8006b8c:	b083      	sub	sp, #12
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f023 0201 	bic.w	r2, r3, #1
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006bc8:	78fb      	ldrb	r3, [r7, #3]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d115      	bne.n	8006bfa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006bda:	2001      	movs	r0, #1
 8006bdc:	f7fa f9c2 	bl	8000f64 <HAL_Delay>
      ms++;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	3301      	adds	r3, #1
 8006be4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f001 f995 	bl	8007f16 <USB_GetMode>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d01e      	beq.n	8006c30 <USB_SetCurrentMode+0x84>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2b31      	cmp	r3, #49	; 0x31
 8006bf6:	d9f0      	bls.n	8006bda <USB_SetCurrentMode+0x2e>
 8006bf8:	e01a      	b.n	8006c30 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006bfa:	78fb      	ldrb	r3, [r7, #3]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d115      	bne.n	8006c2c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006c0c:	2001      	movs	r0, #1
 8006c0e:	f7fa f9a9 	bl	8000f64 <HAL_Delay>
      ms++;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	3301      	adds	r3, #1
 8006c16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f001 f97c 	bl	8007f16 <USB_GetMode>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d005      	beq.n	8006c30 <USB_SetCurrentMode+0x84>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2b31      	cmp	r3, #49	; 0x31
 8006c28:	d9f0      	bls.n	8006c0c <USB_SetCurrentMode+0x60>
 8006c2a:	e001      	b.n	8006c30 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e005      	b.n	8006c3c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2b32      	cmp	r3, #50	; 0x32
 8006c34:	d101      	bne.n	8006c3a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e000      	b.n	8006c3c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c44:	b084      	sub	sp, #16
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b086      	sub	sp, #24
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
 8006c4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006c52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c56:	2300      	movs	r3, #0
 8006c58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c5e:	2300      	movs	r3, #0
 8006c60:	613b      	str	r3, [r7, #16]
 8006c62:	e009      	b.n	8006c78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	3340      	adds	r3, #64	; 0x40
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4413      	add	r3, r2
 8006c6e:	2200      	movs	r2, #0
 8006c70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	3301      	adds	r3, #1
 8006c76:	613b      	str	r3, [r7, #16]
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	2b0e      	cmp	r3, #14
 8006c7c:	d9f2      	bls.n	8006c64 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d11c      	bne.n	8006cbe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c92:	f043 0302 	orr.w	r3, r3, #2
 8006c96:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	601a      	str	r2, [r3, #0]
 8006cbc:	e005      	b.n	8006cca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cdc:	4619      	mov	r1, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	680b      	ldr	r3, [r1, #0]
 8006ce8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d10c      	bne.n	8006d0a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d104      	bne.n	8006d00 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 f961 	bl	8006fc0 <USB_SetDevSpeed>
 8006cfe:	e008      	b.n	8006d12 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006d00:	2101      	movs	r1, #1
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f95c 	bl	8006fc0 <USB_SetDevSpeed>
 8006d08:	e003      	b.n	8006d12 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006d0a:	2103      	movs	r1, #3
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f957 	bl	8006fc0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d12:	2110      	movs	r1, #16
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f8f3 	bl	8006f00 <USB_FlushTxFifo>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d001      	beq.n	8006d24 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 f91d 	bl	8006f64 <USB_FlushRxFifo>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d001      	beq.n	8006d34 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d46:	461a      	mov	r2, r3
 8006d48:	2300      	movs	r3, #0
 8006d4a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d52:	461a      	mov	r2, r3
 8006d54:	2300      	movs	r3, #0
 8006d56:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d58:	2300      	movs	r3, #0
 8006d5a:	613b      	str	r3, [r7, #16]
 8006d5c:	e043      	b.n	8006de6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d74:	d118      	bne.n	8006da8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10a      	bne.n	8006d92 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	015a      	lsls	r2, r3, #5
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d88:	461a      	mov	r2, r3
 8006d8a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d8e:	6013      	str	r3, [r2, #0]
 8006d90:	e013      	b.n	8006dba <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	015a      	lsls	r2, r3, #5
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	4413      	add	r3, r2
 8006d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d9e:	461a      	mov	r2, r3
 8006da0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006da4:	6013      	str	r3, [r2, #0]
 8006da6:	e008      	b.n	8006dba <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	015a      	lsls	r2, r3, #5
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	4413      	add	r3, r2
 8006db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db4:	461a      	mov	r2, r3
 8006db6:	2300      	movs	r3, #0
 8006db8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	015a      	lsls	r2, r3, #5
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	2300      	movs	r3, #0
 8006dca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd8:	461a      	mov	r2, r3
 8006dda:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006dde:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	3301      	adds	r3, #1
 8006de4:	613b      	str	r3, [r7, #16]
 8006de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d3b7      	bcc.n	8006d5e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dee:	2300      	movs	r3, #0
 8006df0:	613b      	str	r3, [r7, #16]
 8006df2:	e043      	b.n	8006e7c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	015a      	lsls	r2, r3, #5
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e0a:	d118      	bne.n	8006e3e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10a      	bne.n	8006e28 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	015a      	lsls	r2, r3, #5
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	4413      	add	r3, r2
 8006e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e1e:	461a      	mov	r2, r3
 8006e20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e24:	6013      	str	r3, [r2, #0]
 8006e26:	e013      	b.n	8006e50 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	015a      	lsls	r2, r3, #5
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	4413      	add	r3, r2
 8006e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e34:	461a      	mov	r2, r3
 8006e36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e3a:	6013      	str	r3, [r2, #0]
 8006e3c:	e008      	b.n	8006e50 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	015a      	lsls	r2, r3, #5
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	4413      	add	r3, r2
 8006e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	015a      	lsls	r2, r3, #5
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	4413      	add	r3, r2
 8006e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	2300      	movs	r3, #0
 8006e60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	015a      	lsls	r2, r3, #5
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	4413      	add	r3, r2
 8006e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e6e:	461a      	mov	r2, r3
 8006e70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	613b      	str	r3, [r7, #16]
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7e:	693a      	ldr	r2, [r7, #16]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d3b7      	bcc.n	8006df4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e96:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006ea4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d105      	bne.n	8006eb8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	f043 0210 	orr.w	r2, r3, #16
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	699a      	ldr	r2, [r3, #24]
 8006ebc:	4b0e      	ldr	r3, [pc, #56]	; (8006ef8 <USB_DevInit+0x2b4>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d005      	beq.n	8006ed6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	f043 0208 	orr.w	r2, r3, #8
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d105      	bne.n	8006ee8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	699a      	ldr	r2, [r3, #24]
 8006ee0:	4b06      	ldr	r3, [pc, #24]	; (8006efc <USB_DevInit+0x2b8>)
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3718      	adds	r7, #24
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ef4:	b004      	add	sp, #16
 8006ef6:	4770      	bx	lr
 8006ef8:	803c3800 	.word	0x803c3800
 8006efc:	40000004 	.word	0x40000004

08006f00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	3301      	adds	r3, #1
 8006f12:	60fb      	str	r3, [r7, #12]
 8006f14:	4a12      	ldr	r2, [pc, #72]	; (8006f60 <USB_FlushTxFifo+0x60>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d901      	bls.n	8006f1e <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e01a      	b.n	8006f54 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	daf3      	bge.n	8006f0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f26:	2300      	movs	r3, #0
 8006f28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	019b      	lsls	r3, r3, #6
 8006f2e:	f043 0220 	orr.w	r2, r3, #32
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	60fb      	str	r3, [r7, #12]
 8006f3c:	4a08      	ldr	r2, [pc, #32]	; (8006f60 <USB_FlushTxFifo+0x60>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d901      	bls.n	8006f46 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e006      	b.n	8006f54 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	f003 0320 	and.w	r3, r3, #32
 8006f4e:	2b20      	cmp	r3, #32
 8006f50:	d0f1      	beq.n	8006f36 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3714      	adds	r7, #20
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr
 8006f60:	00030d40 	.word	0x00030d40

08006f64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	3301      	adds	r3, #1
 8006f74:	60fb      	str	r3, [r7, #12]
 8006f76:	4a11      	ldr	r2, [pc, #68]	; (8006fbc <USB_FlushRxFifo+0x58>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d901      	bls.n	8006f80 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e017      	b.n	8006fb0 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	daf3      	bge.n	8006f70 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2210      	movs	r2, #16
 8006f90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	3301      	adds	r3, #1
 8006f96:	60fb      	str	r3, [r7, #12]
 8006f98:	4a08      	ldr	r2, [pc, #32]	; (8006fbc <USB_FlushRxFifo+0x58>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d901      	bls.n	8006fa2 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e006      	b.n	8006fb0 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	f003 0310 	and.w	r3, r3, #16
 8006faa:	2b10      	cmp	r3, #16
 8006fac:	d0f1      	beq.n	8006f92 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3714      	adds	r7, #20
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr
 8006fbc:	00030d40 	.word	0x00030d40

08006fc0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	460b      	mov	r3, r1
 8006fca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	78fb      	ldrb	r3, [r7, #3]
 8006fda:	68f9      	ldr	r1, [r7, #12]
 8006fdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3714      	adds	r7, #20
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr

08006ff2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006ff2:	b480      	push	{r7}
 8006ff4:	b087      	sub	sp, #28
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f003 0306 	and.w	r3, r3, #6
 800700a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d102      	bne.n	8007018 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007012:	2300      	movs	r3, #0
 8007014:	75fb      	strb	r3, [r7, #23]
 8007016:	e00a      	b.n	800702e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2b02      	cmp	r3, #2
 800701c:	d002      	beq.n	8007024 <USB_GetDevSpeed+0x32>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2b06      	cmp	r3, #6
 8007022:	d102      	bne.n	800702a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007024:	2302      	movs	r3, #2
 8007026:	75fb      	strb	r3, [r7, #23]
 8007028:	e001      	b.n	800702e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800702a:	230f      	movs	r3, #15
 800702c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800702e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007030:	4618      	mov	r0, r3
 8007032:	371c      	adds	r7, #28
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	785b      	ldrb	r3, [r3, #1]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d139      	bne.n	80070cc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800705e:	69da      	ldr	r2, [r3, #28]
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	f003 030f 	and.w	r3, r3, #15
 8007068:	2101      	movs	r1, #1
 800706a:	fa01 f303 	lsl.w	r3, r1, r3
 800706e:	b29b      	uxth	r3, r3
 8007070:	68f9      	ldr	r1, [r7, #12]
 8007072:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007076:	4313      	orrs	r3, r2
 8007078:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	015a      	lsls	r2, r3, #5
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	4413      	add	r3, r2
 8007082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d153      	bne.n	8007138 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	015a      	lsls	r2, r3, #5
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	4413      	add	r3, r2
 8007098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	78db      	ldrb	r3, [r3, #3]
 80070aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	059b      	lsls	r3, r3, #22
 80070b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070b4:	431a      	orrs	r2, r3
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	0159      	lsls	r1, r3, #5
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	440b      	add	r3, r1
 80070be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c2:	4619      	mov	r1, r3
 80070c4:	4b20      	ldr	r3, [pc, #128]	; (8007148 <USB_ActivateEndpoint+0x10c>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	600b      	str	r3, [r1, #0]
 80070ca:	e035      	b.n	8007138 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d2:	69da      	ldr	r2, [r3, #28]
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	f003 030f 	and.w	r3, r3, #15
 80070dc:	2101      	movs	r1, #1
 80070de:	fa01 f303 	lsl.w	r3, r1, r3
 80070e2:	041b      	lsls	r3, r3, #16
 80070e4:	68f9      	ldr	r1, [r7, #12]
 80070e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070ea:	4313      	orrs	r3, r2
 80070ec:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	015a      	lsls	r2, r3, #5
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	4413      	add	r3, r2
 80070f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d119      	bne.n	8007138 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	015a      	lsls	r2, r3, #5
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	4413      	add	r3, r2
 800710c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	78db      	ldrb	r3, [r3, #3]
 800711e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007120:	430b      	orrs	r3, r1
 8007122:	431a      	orrs	r2, r3
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	0159      	lsls	r1, r3, #5
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	440b      	add	r3, r1
 800712c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007130:	4619      	mov	r1, r3
 8007132:	4b05      	ldr	r3, [pc, #20]	; (8007148 <USB_ActivateEndpoint+0x10c>)
 8007134:	4313      	orrs	r3, r2
 8007136:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	10008000 	.word	0x10008000

0800714c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	785b      	ldrb	r3, [r3, #1]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d161      	bne.n	800722c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4413      	add	r3, r2
 8007170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800717a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800717e:	d11f      	bne.n	80071c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	015a      	lsls	r2, r3, #5
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	4413      	add	r3, r2
 8007188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	0151      	lsls	r1, r2, #5
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	440a      	add	r2, r1
 8007196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800719a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800719e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	0151      	lsls	r1, r2, #5
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	440a      	add	r2, r1
 80071b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	f003 030f 	and.w	r3, r3, #15
 80071d0:	2101      	movs	r1, #1
 80071d2:	fa01 f303 	lsl.w	r3, r1, r3
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	43db      	mvns	r3, r3
 80071da:	68f9      	ldr	r1, [r7, #12]
 80071dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071e0:	4013      	ands	r3, r2
 80071e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ea:	69da      	ldr	r2, [r3, #28]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	f003 030f 	and.w	r3, r3, #15
 80071f4:	2101      	movs	r1, #1
 80071f6:	fa01 f303 	lsl.w	r3, r1, r3
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	43db      	mvns	r3, r3
 80071fe:	68f9      	ldr	r1, [r7, #12]
 8007200:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007204:	4013      	ands	r3, r2
 8007206:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	015a      	lsls	r2, r3, #5
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	4413      	add	r3, r2
 8007210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	0159      	lsls	r1, r3, #5
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	440b      	add	r3, r1
 800721e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007222:	4619      	mov	r1, r3
 8007224:	4b35      	ldr	r3, [pc, #212]	; (80072fc <USB_DeactivateEndpoint+0x1b0>)
 8007226:	4013      	ands	r3, r2
 8007228:	600b      	str	r3, [r1, #0]
 800722a:	e060      	b.n	80072ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	015a      	lsls	r2, r3, #5
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	4413      	add	r3, r2
 8007234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800723e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007242:	d11f      	bne.n	8007284 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	4413      	add	r3, r2
 800724c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	0151      	lsls	r1, r2, #5
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	440a      	add	r2, r1
 800725a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800725e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007262:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	015a      	lsls	r2, r3, #5
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	4413      	add	r3, r2
 800726c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	0151      	lsls	r1, r2, #5
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	440a      	add	r2, r1
 800727a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800727e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007282:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800728a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	f003 030f 	and.w	r3, r3, #15
 8007294:	2101      	movs	r1, #1
 8007296:	fa01 f303 	lsl.w	r3, r1, r3
 800729a:	041b      	lsls	r3, r3, #16
 800729c:	43db      	mvns	r3, r3
 800729e:	68f9      	ldr	r1, [r7, #12]
 80072a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072a4:	4013      	ands	r3, r2
 80072a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ae:	69da      	ldr	r2, [r3, #28]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	f003 030f 	and.w	r3, r3, #15
 80072b8:	2101      	movs	r1, #1
 80072ba:	fa01 f303 	lsl.w	r3, r1, r3
 80072be:	041b      	lsls	r3, r3, #16
 80072c0:	43db      	mvns	r3, r3
 80072c2:	68f9      	ldr	r1, [r7, #12]
 80072c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072c8:	4013      	ands	r3, r2
 80072ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	015a      	lsls	r2, r3, #5
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	4413      	add	r3, r2
 80072d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	0159      	lsls	r1, r3, #5
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	440b      	add	r3, r1
 80072e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e6:	4619      	mov	r1, r3
 80072e8:	4b05      	ldr	r3, [pc, #20]	; (8007300 <USB_DeactivateEndpoint+0x1b4>)
 80072ea:	4013      	ands	r3, r2
 80072ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3714      	adds	r7, #20
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr
 80072fc:	ec337800 	.word	0xec337800
 8007300:	eff37800 	.word	0xeff37800

08007304 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b08a      	sub	sp, #40	; 0x28
 8007308:	af02      	add	r7, sp, #8
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	4613      	mov	r3, r2
 8007310:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	785b      	ldrb	r3, [r3, #1]
 8007320:	2b01      	cmp	r3, #1
 8007322:	f040 8163 	bne.w	80075ec <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d132      	bne.n	8007394 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	015a      	lsls	r2, r3, #5
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	4413      	add	r3, r2
 8007336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800733a:	691a      	ldr	r2, [r3, #16]
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	0159      	lsls	r1, r3, #5
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	440b      	add	r3, r1
 8007344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007348:	4619      	mov	r1, r3
 800734a:	4ba5      	ldr	r3, [pc, #660]	; (80075e0 <USB_EPStartXfer+0x2dc>)
 800734c:	4013      	ands	r3, r2
 800734e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	4413      	add	r3, r2
 8007358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	69ba      	ldr	r2, [r7, #24]
 8007360:	0151      	lsls	r1, r2, #5
 8007362:	69fa      	ldr	r2, [r7, #28]
 8007364:	440a      	add	r2, r1
 8007366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800736a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800736e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	015a      	lsls	r2, r3, #5
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	4413      	add	r3, r2
 8007378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800737c:	691a      	ldr	r2, [r3, #16]
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	0159      	lsls	r1, r3, #5
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	440b      	add	r3, r1
 8007386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800738a:	4619      	mov	r1, r3
 800738c:	4b95      	ldr	r3, [pc, #596]	; (80075e4 <USB_EPStartXfer+0x2e0>)
 800738e:	4013      	ands	r3, r2
 8007390:	610b      	str	r3, [r1, #16]
 8007392:	e074      	b.n	800747e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	015a      	lsls	r2, r3, #5
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	4413      	add	r3, r2
 800739c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a0:	691a      	ldr	r2, [r3, #16]
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	0159      	lsls	r1, r3, #5
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	440b      	add	r3, r1
 80073aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ae:	4619      	mov	r1, r3
 80073b0:	4b8c      	ldr	r3, [pc, #560]	; (80075e4 <USB_EPStartXfer+0x2e0>)
 80073b2:	4013      	ands	r3, r2
 80073b4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	015a      	lsls	r2, r3, #5
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	4413      	add	r3, r2
 80073be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c2:	691a      	ldr	r2, [r3, #16]
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	0159      	lsls	r1, r3, #5
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	440b      	add	r3, r1
 80073cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d0:	4619      	mov	r1, r3
 80073d2:	4b83      	ldr	r3, [pc, #524]	; (80075e0 <USB_EPStartXfer+0x2dc>)
 80073d4:	4013      	ands	r3, r2
 80073d6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	015a      	lsls	r2, r3, #5
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	4413      	add	r3, r2
 80073e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	6959      	ldr	r1, [r3, #20]
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	440b      	add	r3, r1
 80073f0:	1e59      	subs	r1, r3, #1
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80073fa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80073fc:	4b7a      	ldr	r3, [pc, #488]	; (80075e8 <USB_EPStartXfer+0x2e4>)
 80073fe:	400b      	ands	r3, r1
 8007400:	69b9      	ldr	r1, [r7, #24]
 8007402:	0148      	lsls	r0, r1, #5
 8007404:	69f9      	ldr	r1, [r7, #28]
 8007406:	4401      	add	r1, r0
 8007408:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800740c:	4313      	orrs	r3, r2
 800740e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	015a      	lsls	r2, r3, #5
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	4413      	add	r3, r2
 8007418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800741c:	691a      	ldr	r2, [r3, #16]
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007426:	69b9      	ldr	r1, [r7, #24]
 8007428:	0148      	lsls	r0, r1, #5
 800742a:	69f9      	ldr	r1, [r7, #28]
 800742c:	4401      	add	r1, r0
 800742e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007432:	4313      	orrs	r3, r2
 8007434:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	78db      	ldrb	r3, [r3, #3]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d11f      	bne.n	800747e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	015a      	lsls	r2, r3, #5
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	4413      	add	r3, r2
 8007446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	69ba      	ldr	r2, [r7, #24]
 800744e:	0151      	lsls	r1, r2, #5
 8007450:	69fa      	ldr	r2, [r7, #28]
 8007452:	440a      	add	r2, r1
 8007454:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007458:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800745c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	015a      	lsls	r2, r3, #5
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	4413      	add	r3, r2
 8007466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	69ba      	ldr	r2, [r7, #24]
 800746e:	0151      	lsls	r1, r2, #5
 8007470:	69fa      	ldr	r2, [r7, #28]
 8007472:	440a      	add	r2, r1
 8007474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007478:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800747c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800747e:	79fb      	ldrb	r3, [r7, #7]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d14b      	bne.n	800751c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d009      	beq.n	80074a0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	015a      	lsls	r2, r3, #5
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	4413      	add	r3, r2
 8007494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007498:	461a      	mov	r2, r3
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	78db      	ldrb	r3, [r3, #3]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d128      	bne.n	80074fa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d110      	bne.n	80074da <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	015a      	lsls	r2, r3, #5
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	69ba      	ldr	r2, [r7, #24]
 80074c8:	0151      	lsls	r1, r2, #5
 80074ca:	69fa      	ldr	r2, [r7, #28]
 80074cc:	440a      	add	r2, r1
 80074ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074d6:	6013      	str	r3, [r2, #0]
 80074d8:	e00f      	b.n	80074fa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	015a      	lsls	r2, r3, #5
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	4413      	add	r3, r2
 80074e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	69ba      	ldr	r2, [r7, #24]
 80074ea:	0151      	lsls	r1, r2, #5
 80074ec:	69fa      	ldr	r2, [r7, #28]
 80074ee:	440a      	add	r2, r1
 80074f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074f8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	015a      	lsls	r2, r3, #5
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	4413      	add	r3, r2
 8007502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	69ba      	ldr	r2, [r7, #24]
 800750a:	0151      	lsls	r1, r2, #5
 800750c:	69fa      	ldr	r2, [r7, #28]
 800750e:	440a      	add	r2, r1
 8007510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007514:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007518:	6013      	str	r3, [r2, #0]
 800751a:	e133      	b.n	8007784 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	015a      	lsls	r2, r3, #5
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	4413      	add	r3, r2
 8007524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	69ba      	ldr	r2, [r7, #24]
 800752c:	0151      	lsls	r1, r2, #5
 800752e:	69fa      	ldr	r2, [r7, #28]
 8007530:	440a      	add	r2, r1
 8007532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007536:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800753a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	78db      	ldrb	r3, [r3, #3]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d015      	beq.n	8007570 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	695b      	ldr	r3, [r3, #20]
 8007548:	2b00      	cmp	r3, #0
 800754a:	f000 811b 	beq.w	8007784 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	f003 030f 	and.w	r3, r3, #15
 800755e:	2101      	movs	r1, #1
 8007560:	fa01 f303 	lsl.w	r3, r1, r3
 8007564:	69f9      	ldr	r1, [r7, #28]
 8007566:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800756a:	4313      	orrs	r3, r2
 800756c:	634b      	str	r3, [r1, #52]	; 0x34
 800756e:	e109      	b.n	8007784 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800757c:	2b00      	cmp	r3, #0
 800757e:	d110      	bne.n	80075a2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	015a      	lsls	r2, r3, #5
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	4413      	add	r3, r2
 8007588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	69ba      	ldr	r2, [r7, #24]
 8007590:	0151      	lsls	r1, r2, #5
 8007592:	69fa      	ldr	r2, [r7, #28]
 8007594:	440a      	add	r2, r1
 8007596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800759a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800759e:	6013      	str	r3, [r2, #0]
 80075a0:	e00f      	b.n	80075c2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	015a      	lsls	r2, r3, #5
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	4413      	add	r3, r2
 80075aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	69ba      	ldr	r2, [r7, #24]
 80075b2:	0151      	lsls	r1, r2, #5
 80075b4:	69fa      	ldr	r2, [r7, #28]
 80075b6:	440a      	add	r2, r1
 80075b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075c0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	68d9      	ldr	r1, [r3, #12]
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	781a      	ldrb	r2, [r3, #0]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	695b      	ldr	r3, [r3, #20]
 80075ce:	b298      	uxth	r0, r3
 80075d0:	79fb      	ldrb	r3, [r7, #7]
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	4603      	mov	r3, r0
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f000 fa38 	bl	8007a4c <USB_WritePacket>
 80075dc:	e0d2      	b.n	8007784 <USB_EPStartXfer+0x480>
 80075de:	bf00      	nop
 80075e0:	e007ffff 	.word	0xe007ffff
 80075e4:	fff80000 	.word	0xfff80000
 80075e8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	015a      	lsls	r2, r3, #5
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	4413      	add	r3, r2
 80075f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f8:	691a      	ldr	r2, [r3, #16]
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	0159      	lsls	r1, r3, #5
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	440b      	add	r3, r1
 8007602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007606:	4619      	mov	r1, r3
 8007608:	4b61      	ldr	r3, [pc, #388]	; (8007790 <USB_EPStartXfer+0x48c>)
 800760a:	4013      	ands	r3, r2
 800760c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	015a      	lsls	r2, r3, #5
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	4413      	add	r3, r2
 8007616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800761a:	691a      	ldr	r2, [r3, #16]
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	0159      	lsls	r1, r3, #5
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	440b      	add	r3, r1
 8007624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007628:	4619      	mov	r1, r3
 800762a:	4b5a      	ldr	r3, [pc, #360]	; (8007794 <USB_EPStartXfer+0x490>)
 800762c:	4013      	ands	r3, r2
 800762e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	695b      	ldr	r3, [r3, #20]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d123      	bne.n	8007680 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	015a      	lsls	r2, r3, #5
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	4413      	add	r3, r2
 8007640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007644:	691a      	ldr	r2, [r3, #16]
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800764e:	69b9      	ldr	r1, [r7, #24]
 8007650:	0148      	lsls	r0, r1, #5
 8007652:	69f9      	ldr	r1, [r7, #28]
 8007654:	4401      	add	r1, r0
 8007656:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800765a:	4313      	orrs	r3, r2
 800765c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	015a      	lsls	r2, r3, #5
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	4413      	add	r3, r2
 8007666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	69ba      	ldr	r2, [r7, #24]
 800766e:	0151      	lsls	r1, r2, #5
 8007670:	69fa      	ldr	r2, [r7, #28]
 8007672:	440a      	add	r2, r1
 8007674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007678:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800767c:	6113      	str	r3, [r2, #16]
 800767e:	e033      	b.n	80076e8 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	695a      	ldr	r2, [r3, #20]
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	4413      	add	r3, r2
 800768a:	1e5a      	subs	r2, r3, #1
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	fbb2 f3f3 	udiv	r3, r2, r3
 8007694:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	015a      	lsls	r2, r3, #5
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	4413      	add	r3, r2
 800769e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a2:	691a      	ldr	r2, [r3, #16]
 80076a4:	8afb      	ldrh	r3, [r7, #22]
 80076a6:	04d9      	lsls	r1, r3, #19
 80076a8:	4b3b      	ldr	r3, [pc, #236]	; (8007798 <USB_EPStartXfer+0x494>)
 80076aa:	400b      	ands	r3, r1
 80076ac:	69b9      	ldr	r1, [r7, #24]
 80076ae:	0148      	lsls	r0, r1, #5
 80076b0:	69f9      	ldr	r1, [r7, #28]
 80076b2:	4401      	add	r1, r0
 80076b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076b8:	4313      	orrs	r3, r2
 80076ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	015a      	lsls	r2, r3, #5
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c8:	691a      	ldr	r2, [r3, #16]
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	8af9      	ldrh	r1, [r7, #22]
 80076d0:	fb01 f303 	mul.w	r3, r1, r3
 80076d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076d8:	69b9      	ldr	r1, [r7, #24]
 80076da:	0148      	lsls	r0, r1, #5
 80076dc:	69f9      	ldr	r1, [r7, #28]
 80076de:	4401      	add	r1, r0
 80076e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076e4:	4313      	orrs	r3, r2
 80076e6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80076e8:	79fb      	ldrb	r3, [r7, #7]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d10d      	bne.n	800770a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d009      	beq.n	800770a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	68d9      	ldr	r1, [r3, #12]
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	015a      	lsls	r2, r3, #5
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	4413      	add	r3, r2
 8007702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007706:	460a      	mov	r2, r1
 8007708:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	78db      	ldrb	r3, [r3, #3]
 800770e:	2b01      	cmp	r3, #1
 8007710:	d128      	bne.n	8007764 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800771e:	2b00      	cmp	r3, #0
 8007720:	d110      	bne.n	8007744 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	015a      	lsls	r2, r3, #5
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	4413      	add	r3, r2
 800772a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	69ba      	ldr	r2, [r7, #24]
 8007732:	0151      	lsls	r1, r2, #5
 8007734:	69fa      	ldr	r2, [r7, #28]
 8007736:	440a      	add	r2, r1
 8007738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800773c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007740:	6013      	str	r3, [r2, #0]
 8007742:	e00f      	b.n	8007764 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	015a      	lsls	r2, r3, #5
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	4413      	add	r3, r2
 800774c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	69ba      	ldr	r2, [r7, #24]
 8007754:	0151      	lsls	r1, r2, #5
 8007756:	69fa      	ldr	r2, [r7, #28]
 8007758:	440a      	add	r2, r1
 800775a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800775e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007762:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	015a      	lsls	r2, r3, #5
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	4413      	add	r3, r2
 800776c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	69ba      	ldr	r2, [r7, #24]
 8007774:	0151      	lsls	r1, r2, #5
 8007776:	69fa      	ldr	r2, [r7, #28]
 8007778:	440a      	add	r2, r1
 800777a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800777e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007782:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3720      	adds	r7, #32
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	fff80000 	.word	0xfff80000
 8007794:	e007ffff 	.word	0xe007ffff
 8007798:	1ff80000 	.word	0x1ff80000

0800779c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800779c:	b480      	push	{r7}
 800779e:	b087      	sub	sp, #28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	4613      	mov	r3, r2
 80077a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	785b      	ldrb	r3, [r3, #1]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	f040 80cd 	bne.w	8007958 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	695b      	ldr	r3, [r3, #20]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d132      	bne.n	800782c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	015a      	lsls	r2, r3, #5
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	4413      	add	r3, r2
 80077ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077d2:	691a      	ldr	r2, [r3, #16]
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	0159      	lsls	r1, r3, #5
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	440b      	add	r3, r1
 80077dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e0:	4619      	mov	r1, r3
 80077e2:	4b98      	ldr	r3, [pc, #608]	; (8007a44 <USB_EP0StartXfer+0x2a8>)
 80077e4:	4013      	ands	r3, r2
 80077e6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	015a      	lsls	r2, r3, #5
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	693a      	ldr	r2, [r7, #16]
 80077f8:	0151      	lsls	r1, r2, #5
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	440a      	add	r2, r1
 80077fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007802:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007806:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	015a      	lsls	r2, r3, #5
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	4413      	add	r3, r2
 8007810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007814:	691a      	ldr	r2, [r3, #16]
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	0159      	lsls	r1, r3, #5
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	440b      	add	r3, r1
 800781e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007822:	4619      	mov	r1, r3
 8007824:	4b88      	ldr	r3, [pc, #544]	; (8007a48 <USB_EP0StartXfer+0x2ac>)
 8007826:	4013      	ands	r3, r2
 8007828:	610b      	str	r3, [r1, #16]
 800782a:	e04e      	b.n	80078ca <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	015a      	lsls	r2, r3, #5
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	4413      	add	r3, r2
 8007834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007838:	691a      	ldr	r2, [r3, #16]
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	0159      	lsls	r1, r3, #5
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	440b      	add	r3, r1
 8007842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007846:	4619      	mov	r1, r3
 8007848:	4b7f      	ldr	r3, [pc, #508]	; (8007a48 <USB_EP0StartXfer+0x2ac>)
 800784a:	4013      	ands	r3, r2
 800784c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	015a      	lsls	r2, r3, #5
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	4413      	add	r3, r2
 8007856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800785a:	691a      	ldr	r2, [r3, #16]
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	0159      	lsls	r1, r3, #5
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	440b      	add	r3, r1
 8007864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007868:	4619      	mov	r1, r3
 800786a:	4b76      	ldr	r3, [pc, #472]	; (8007a44 <USB_EP0StartXfer+0x2a8>)
 800786c:	4013      	ands	r3, r2
 800786e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	695a      	ldr	r2, [r3, #20]
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	429a      	cmp	r2, r3
 800787a:	d903      	bls.n	8007884 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	689a      	ldr	r2, [r3, #8]
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	015a      	lsls	r2, r3, #5
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	4413      	add	r3, r2
 800788c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	693a      	ldr	r2, [r7, #16]
 8007894:	0151      	lsls	r1, r2, #5
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	440a      	add	r2, r1
 800789a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800789e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	015a      	lsls	r2, r3, #5
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	4413      	add	r3, r2
 80078ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b0:	691a      	ldr	r2, [r3, #16]
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	695b      	ldr	r3, [r3, #20]
 80078b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078ba:	6939      	ldr	r1, [r7, #16]
 80078bc:	0148      	lsls	r0, r1, #5
 80078be:	6979      	ldr	r1, [r7, #20]
 80078c0:	4401      	add	r1, r0
 80078c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80078c6:	4313      	orrs	r3, r2
 80078c8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80078ca:	79fb      	ldrb	r3, [r7, #7]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d11e      	bne.n	800790e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d009      	beq.n	80078ec <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e4:	461a      	mov	r2, r3
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	015a      	lsls	r2, r3, #5
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	4413      	add	r3, r2
 80078f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	693a      	ldr	r2, [r7, #16]
 80078fc:	0151      	lsls	r1, r2, #5
 80078fe:	697a      	ldr	r2, [r7, #20]
 8007900:	440a      	add	r2, r1
 8007902:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007906:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800790a:	6013      	str	r3, [r2, #0]
 800790c:	e092      	b.n	8007a34 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	015a      	lsls	r2, r3, #5
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	4413      	add	r3, r2
 8007916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	693a      	ldr	r2, [r7, #16]
 800791e:	0151      	lsls	r1, r2, #5
 8007920:	697a      	ldr	r2, [r7, #20]
 8007922:	440a      	add	r2, r1
 8007924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007928:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800792c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d07e      	beq.n	8007a34 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800793c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	f003 030f 	and.w	r3, r3, #15
 8007946:	2101      	movs	r1, #1
 8007948:	fa01 f303 	lsl.w	r3, r1, r3
 800794c:	6979      	ldr	r1, [r7, #20]
 800794e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007952:	4313      	orrs	r3, r2
 8007954:	634b      	str	r3, [r1, #52]	; 0x34
 8007956:	e06d      	b.n	8007a34 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	015a      	lsls	r2, r3, #5
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	4413      	add	r3, r2
 8007960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007964:	691a      	ldr	r2, [r3, #16]
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	0159      	lsls	r1, r3, #5
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	440b      	add	r3, r1
 800796e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007972:	4619      	mov	r1, r3
 8007974:	4b34      	ldr	r3, [pc, #208]	; (8007a48 <USB_EP0StartXfer+0x2ac>)
 8007976:	4013      	ands	r3, r2
 8007978:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	015a      	lsls	r2, r3, #5
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	4413      	add	r3, r2
 8007982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007986:	691a      	ldr	r2, [r3, #16]
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	0159      	lsls	r1, r3, #5
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	440b      	add	r3, r1
 8007990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007994:	4619      	mov	r1, r3
 8007996:	4b2b      	ldr	r3, [pc, #172]	; (8007a44 <USB_EP0StartXfer+0x2a8>)
 8007998:	4013      	ands	r3, r2
 800799a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	695b      	ldr	r3, [r3, #20]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d003      	beq.n	80079ac <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	689a      	ldr	r2, [r3, #8]
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	015a      	lsls	r2, r3, #5
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	4413      	add	r3, r2
 80079b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	693a      	ldr	r2, [r7, #16]
 80079bc:	0151      	lsls	r1, r2, #5
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	440a      	add	r2, r1
 80079c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	015a      	lsls	r2, r3, #5
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	4413      	add	r3, r2
 80079d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079d8:	691a      	ldr	r2, [r3, #16]
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079e2:	6939      	ldr	r1, [r7, #16]
 80079e4:	0148      	lsls	r0, r1, #5
 80079e6:	6979      	ldr	r1, [r7, #20]
 80079e8:	4401      	add	r1, r0
 80079ea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80079ee:	4313      	orrs	r3, r2
 80079f0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80079f2:	79fb      	ldrb	r3, [r7, #7]
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d10d      	bne.n	8007a14 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d009      	beq.n	8007a14 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	68d9      	ldr	r1, [r3, #12]
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	015a      	lsls	r2, r3, #5
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a10:	460a      	mov	r2, r1
 8007a12:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	015a      	lsls	r2, r3, #5
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	693a      	ldr	r2, [r7, #16]
 8007a24:	0151      	lsls	r1, r2, #5
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	440a      	add	r2, r1
 8007a2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	371c      	adds	r7, #28
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	e007ffff 	.word	0xe007ffff
 8007a48:	fff80000 	.word	0xfff80000

08007a4c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b089      	sub	sp, #36	; 0x24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	4611      	mov	r1, r2
 8007a58:	461a      	mov	r2, r3
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	71fb      	strb	r3, [r7, #7]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007a6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d123      	bne.n	8007aba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007a72:	88bb      	ldrh	r3, [r7, #4]
 8007a74:	3303      	adds	r3, #3
 8007a76:	089b      	lsrs	r3, r3, #2
 8007a78:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	61bb      	str	r3, [r7, #24]
 8007a7e:	e018      	b.n	8007ab2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007a80:	79fb      	ldrb	r3, [r7, #7]
 8007a82:	031a      	lsls	r2, r3, #12
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	4413      	add	r3, r2
 8007a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	3301      	adds	r3, #1
 8007a98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	61bb      	str	r3, [r7, #24]
 8007ab2:	69ba      	ldr	r2, [r7, #24]
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d3e2      	bcc.n	8007a80 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3724      	adds	r7, #36	; 0x24
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b08b      	sub	sp, #44	; 0x2c
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007ade:	88fb      	ldrh	r3, [r7, #6]
 8007ae0:	089b      	lsrs	r3, r3, #2
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007ae6:	88fb      	ldrh	r3, [r7, #6]
 8007ae8:	f003 0303 	and.w	r3, r3, #3
 8007aec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007aee:	2300      	movs	r3, #0
 8007af0:	623b      	str	r3, [r7, #32]
 8007af2:	e014      	b.n	8007b1e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afe:	601a      	str	r2, [r3, #0]
    pDest++;
 8007b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b02:	3301      	adds	r3, #1
 8007b04:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b08:	3301      	adds	r3, #1
 8007b0a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	3301      	adds	r3, #1
 8007b10:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b14:	3301      	adds	r3, #1
 8007b16:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007b18:	6a3b      	ldr	r3, [r7, #32]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	623b      	str	r3, [r7, #32]
 8007b1e:	6a3a      	ldr	r2, [r7, #32]
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d3e6      	bcc.n	8007af4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007b26:	8bfb      	ldrh	r3, [r7, #30]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d01e      	beq.n	8007b6a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b36:	461a      	mov	r2, r3
 8007b38:	f107 0310 	add.w	r3, r7, #16
 8007b3c:	6812      	ldr	r2, [r2, #0]
 8007b3e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	6a3b      	ldr	r3, [r7, #32]
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	00db      	lsls	r3, r3, #3
 8007b48:	fa22 f303 	lsr.w	r3, r2, r3
 8007b4c:	b2da      	uxtb	r2, r3
 8007b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b50:	701a      	strb	r2, [r3, #0]
      i++;
 8007b52:	6a3b      	ldr	r3, [r7, #32]
 8007b54:	3301      	adds	r3, #1
 8007b56:	623b      	str	r3, [r7, #32]
      pDest++;
 8007b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007b5e:	8bfb      	ldrh	r3, [r7, #30]
 8007b60:	3b01      	subs	r3, #1
 8007b62:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007b64:	8bfb      	ldrh	r3, [r7, #30]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1ea      	bne.n	8007b40 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	372c      	adds	r7, #44	; 0x2c
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	785b      	ldrb	r3, [r3, #1]
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d12c      	bne.n	8007bee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	015a      	lsls	r2, r3, #5
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	db12      	blt.n	8007bcc <USB_EPSetStall+0x54>
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00f      	beq.n	8007bcc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	015a      	lsls	r2, r3, #5
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68ba      	ldr	r2, [r7, #8]
 8007bbc:	0151      	lsls	r1, r2, #5
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	440a      	add	r2, r1
 8007bc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007bca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	015a      	lsls	r2, r3, #5
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	0151      	lsls	r1, r2, #5
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	440a      	add	r2, r1
 8007be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007be6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bea:	6013      	str	r3, [r2, #0]
 8007bec:	e02b      	b.n	8007c46 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	015a      	lsls	r2, r3, #5
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	db12      	blt.n	8007c26 <USB_EPSetStall+0xae>
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00f      	beq.n	8007c26 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	015a      	lsls	r2, r3, #5
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68ba      	ldr	r2, [r7, #8]
 8007c16:	0151      	lsls	r1, r2, #5
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	440a      	add	r2, r1
 8007c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c20:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c24:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	015a      	lsls	r2, r3, #5
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68ba      	ldr	r2, [r7, #8]
 8007c36:	0151      	lsls	r1, r2, #5
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	440a      	add	r2, r1
 8007c3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c44:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3714      	adds	r7, #20
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	785b      	ldrb	r3, [r3, #1]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d128      	bne.n	8007cc2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	015a      	lsls	r2, r3, #5
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	4413      	add	r3, r2
 8007c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68ba      	ldr	r2, [r7, #8]
 8007c80:	0151      	lsls	r1, r2, #5
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	440a      	add	r2, r1
 8007c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c8e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	78db      	ldrb	r3, [r3, #3]
 8007c94:	2b03      	cmp	r3, #3
 8007c96:	d003      	beq.n	8007ca0 <USB_EPClearStall+0x4c>
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	78db      	ldrb	r3, [r3, #3]
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d138      	bne.n	8007d12 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	015a      	lsls	r2, r3, #5
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68ba      	ldr	r2, [r7, #8]
 8007cb0:	0151      	lsls	r1, r2, #5
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	440a      	add	r2, r1
 8007cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cbe:	6013      	str	r3, [r2, #0]
 8007cc0:	e027      	b.n	8007d12 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	015a      	lsls	r2, r3, #5
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	4413      	add	r3, r2
 8007cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	0151      	lsls	r1, r2, #5
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	440a      	add	r2, r1
 8007cd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cdc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ce0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	78db      	ldrb	r3, [r3, #3]
 8007ce6:	2b03      	cmp	r3, #3
 8007ce8:	d003      	beq.n	8007cf2 <USB_EPClearStall+0x9e>
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	78db      	ldrb	r3, [r3, #3]
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	d10f      	bne.n	8007d12 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	015a      	lsls	r2, r3, #5
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	0151      	lsls	r1, r2, #5
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	440a      	add	r2, r1
 8007d08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d10:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3714      	adds	r7, #20
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	460b      	mov	r3, r1
 8007d2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d3e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007d42:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	78fb      	ldrb	r3, [r7, #3]
 8007d4e:	011b      	lsls	r3, r3, #4
 8007d50:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007d54:	68f9      	ldr	r1, [r7, #12]
 8007d56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3714      	adds	r7, #20
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d86:	f023 0303 	bic.w	r3, r3, #3
 8007d8a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d9a:	f023 0302 	bic.w	r3, r3, #2
 8007d9e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3714      	adds	r7, #20
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007dae:	b480      	push	{r7}
 8007db0:	b085      	sub	sp, #20
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007dc8:	f023 0303 	bic.w	r3, r3, #3
 8007dcc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ddc:	f043 0302 	orr.w	r3, r3, #2
 8007de0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3714      	adds	r7, #20
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	695b      	ldr	r3, [r3, #20]
 8007dfc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	699b      	ldr	r3, [r3, #24]
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	4013      	ands	r3, r2
 8007e06:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007e08:	68fb      	ldr	r3, [r7, #12]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3714      	adds	r7, #20
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr

08007e16 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e16:	b480      	push	{r7}
 8007e18:	b085      	sub	sp, #20
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e28:	699b      	ldr	r3, [r3, #24]
 8007e2a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e32:	69db      	ldr	r3, [r3, #28]
 8007e34:	68ba      	ldr	r2, [r7, #8]
 8007e36:	4013      	ands	r3, r2
 8007e38:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	0c1b      	lsrs	r3, r3, #16
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3714      	adds	r7, #20
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b085      	sub	sp, #20
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e66:	69db      	ldr	r3, [r3, #28]
 8007e68:	68ba      	ldr	r2, [r7, #8]
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	b29b      	uxth	r3, r3
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e7e:	b480      	push	{r7}
 8007e80:	b085      	sub	sp, #20
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
 8007e86:	460b      	mov	r3, r1
 8007e88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007e8e:	78fb      	ldrb	r3, [r7, #3]
 8007e90:	015a      	lsls	r2, r3, #5
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	4413      	add	r3, r2
 8007e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ea4:	695b      	ldr	r3, [r3, #20]
 8007ea6:	68ba      	ldr	r2, [r7, #8]
 8007ea8:	4013      	ands	r3, r2
 8007eaa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007eac:	68bb      	ldr	r3, [r7, #8]
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3714      	adds	r7, #20
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007eba:	b480      	push	{r7}
 8007ebc:	b087      	sub	sp, #28
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007edc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007ede:	78fb      	ldrb	r3, [r7, #3]
 8007ee0:	f003 030f 	and.w	r3, r3, #15
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8007eea:	01db      	lsls	r3, r3, #7
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007ef4:	78fb      	ldrb	r3, [r7, #3]
 8007ef6:	015a      	lsls	r2, r3, #5
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	4413      	add	r3, r2
 8007efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	693a      	ldr	r2, [r7, #16]
 8007f04:	4013      	ands	r3, r2
 8007f06:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f08:	68bb      	ldr	r3, [r7, #8]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	371c      	adds	r7, #28
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr

08007f16 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007f16:	b480      	push	{r7}
 8007f18:	b083      	sub	sp, #12
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	695b      	ldr	r3, [r3, #20]
 8007f22:	f003 0301 	and.w	r3, r3, #1
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
	...

08007f34 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f4e:	4619      	mov	r1, r3
 8007f50:	4b09      	ldr	r3, [pc, #36]	; (8007f78 <USB_ActivateSetup+0x44>)
 8007f52:	4013      	ands	r3, r2
 8007f54:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3714      	adds	r7, #20
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr
 8007f78:	fffff800 	.word	0xfffff800

08007f7c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b087      	sub	sp, #28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	460b      	mov	r3, r1
 8007f86:	607a      	str	r2, [r7, #4]
 8007f88:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	333c      	adds	r3, #60	; 0x3c
 8007f92:	3304      	adds	r3, #4
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	4a26      	ldr	r2, [pc, #152]	; (8008034 <USB_EP0_OutStart+0xb8>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d90a      	bls.n	8007fb6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fb0:	d101      	bne.n	8007fb6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	e037      	b.n	8008026 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	697a      	ldr	r2, [r7, #20]
 8007fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007fd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	697a      	ldr	r2, [r7, #20]
 8007fe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fe4:	f043 0318 	orr.w	r3, r3, #24
 8007fe8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ff8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007ffc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007ffe:	7afb      	ldrb	r3, [r7, #11]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d10f      	bne.n	8008024 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800800a:	461a      	mov	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	697a      	ldr	r2, [r7, #20]
 800801a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800801e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008022:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	371c      	adds	r7, #28
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	4f54300a 	.word	0x4f54300a

08008038 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008040:	2300      	movs	r3, #0
 8008042:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	3301      	adds	r3, #1
 8008048:	60fb      	str	r3, [r7, #12]
 800804a:	4a13      	ldr	r2, [pc, #76]	; (8008098 <USB_CoreReset+0x60>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d901      	bls.n	8008054 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008050:	2303      	movs	r3, #3
 8008052:	e01a      	b.n	800808a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	2b00      	cmp	r3, #0
 800805a:	daf3      	bge.n	8008044 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800805c:	2300      	movs	r3, #0
 800805e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	f043 0201 	orr.w	r2, r3, #1
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	3301      	adds	r3, #1
 8008070:	60fb      	str	r3, [r7, #12]
 8008072:	4a09      	ldr	r2, [pc, #36]	; (8008098 <USB_CoreReset+0x60>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d901      	bls.n	800807c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008078:	2303      	movs	r3, #3
 800807a:	e006      	b.n	800808a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	f003 0301 	and.w	r3, r3, #1
 8008084:	2b01      	cmp	r3, #1
 8008086:	d0f1      	beq.n	800806c <USB_CoreReset+0x34>

  return HAL_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3714      	adds	r7, #20
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	00030d40 	.word	0x00030d40

0800809c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	460b      	mov	r3, r1
 80080a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80080a8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80080ac:	f002 f956 	bl	800a35c <USBD_static_malloc>
 80080b0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d105      	bne.n	80080c4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80080c0:	2302      	movs	r3, #2
 80080c2:	e066      	b.n	8008192 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	7c1b      	ldrb	r3, [r3, #16]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d119      	bne.n	8008108 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80080d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080d8:	2202      	movs	r2, #2
 80080da:	2181      	movs	r1, #129	; 0x81
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f002 f81a 	bl	800a116 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2201      	movs	r2, #1
 80080e6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80080e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080ec:	2202      	movs	r2, #2
 80080ee:	2101      	movs	r1, #1
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f002 f810 	bl	800a116 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2201      	movs	r2, #1
 80080fa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2210      	movs	r2, #16
 8008102:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008106:	e016      	b.n	8008136 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008108:	2340      	movs	r3, #64	; 0x40
 800810a:	2202      	movs	r2, #2
 800810c:	2181      	movs	r1, #129	; 0x81
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f002 f801 	bl	800a116 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800811a:	2340      	movs	r3, #64	; 0x40
 800811c:	2202      	movs	r2, #2
 800811e:	2101      	movs	r1, #1
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f001 fff8 	bl	800a116 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2201      	movs	r2, #1
 800812a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2210      	movs	r2, #16
 8008132:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008136:	2308      	movs	r3, #8
 8008138:	2203      	movs	r2, #3
 800813a:	2182      	movs	r1, #130	; 0x82
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f001 ffea 	bl	800a116 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2201      	movs	r2, #1
 8008146:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2200      	movs	r2, #0
 8008158:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	7c1b      	ldrb	r3, [r3, #16]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d109      	bne.n	8008180 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008172:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008176:	2101      	movs	r1, #1
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f002 f8bb 	bl	800a2f4 <USBD_LL_PrepareReceive>
 800817e:	e007      	b.n	8008190 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008186:	2340      	movs	r3, #64	; 0x40
 8008188:	2101      	movs	r1, #1
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f002 f8b2 	bl	800a2f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b082      	sub	sp, #8
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	460b      	mov	r3, r1
 80081a4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80081a6:	2181      	movs	r1, #129	; 0x81
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f001 ffda 	bl	800a162 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80081b4:	2101      	movs	r1, #1
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f001 ffd3 	bl	800a162 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80081c4:	2182      	movs	r1, #130	; 0x82
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f001 ffcb 	bl	800a162 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d00e      	beq.n	8008204 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081f6:	4618      	mov	r0, r3
 80081f8:	f002 f8be 	bl	800a378 <USBD_static_free>
    pdev->pClassData = NULL;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
	...

08008210 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008220:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008222:	2300      	movs	r3, #0
 8008224:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008226:	2300      	movs	r3, #0
 8008228:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800822a:	2300      	movs	r3, #0
 800822c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d101      	bne.n	8008238 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008234:	2303      	movs	r3, #3
 8008236:	e0af      	b.n	8008398 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008240:	2b00      	cmp	r3, #0
 8008242:	d03f      	beq.n	80082c4 <USBD_CDC_Setup+0xb4>
 8008244:	2b20      	cmp	r3, #32
 8008246:	f040 809f 	bne.w	8008388 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	88db      	ldrh	r3, [r3, #6]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d02e      	beq.n	80082b0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	b25b      	sxtb	r3, r3
 8008258:	2b00      	cmp	r3, #0
 800825a:	da16      	bge.n	800828a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	683a      	ldr	r2, [r7, #0]
 8008266:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008268:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800826a:	683a      	ldr	r2, [r7, #0]
 800826c:	88d2      	ldrh	r2, [r2, #6]
 800826e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	88db      	ldrh	r3, [r3, #6]
 8008274:	2b07      	cmp	r3, #7
 8008276:	bf28      	it	cs
 8008278:	2307      	movcs	r3, #7
 800827a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	89fa      	ldrh	r2, [r7, #14]
 8008280:	4619      	mov	r1, r3
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f001 fae9 	bl	800985a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008288:	e085      	b.n	8008396 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	785a      	ldrb	r2, [r3, #1]
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	88db      	ldrh	r3, [r3, #6]
 8008298:	b2da      	uxtb	r2, r3
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80082a0:	6939      	ldr	r1, [r7, #16]
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	88db      	ldrh	r3, [r3, #6]
 80082a6:	461a      	mov	r2, r3
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f001 fb02 	bl	80098b2 <USBD_CtlPrepareRx>
      break;
 80082ae:	e072      	b.n	8008396 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	683a      	ldr	r2, [r7, #0]
 80082ba:	7850      	ldrb	r0, [r2, #1]
 80082bc:	2200      	movs	r2, #0
 80082be:	6839      	ldr	r1, [r7, #0]
 80082c0:	4798      	blx	r3
      break;
 80082c2:	e068      	b.n	8008396 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	785b      	ldrb	r3, [r3, #1]
 80082c8:	2b0b      	cmp	r3, #11
 80082ca:	d852      	bhi.n	8008372 <USBD_CDC_Setup+0x162>
 80082cc:	a201      	add	r2, pc, #4	; (adr r2, 80082d4 <USBD_CDC_Setup+0xc4>)
 80082ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d2:	bf00      	nop
 80082d4:	08008305 	.word	0x08008305
 80082d8:	08008381 	.word	0x08008381
 80082dc:	08008373 	.word	0x08008373
 80082e0:	08008373 	.word	0x08008373
 80082e4:	08008373 	.word	0x08008373
 80082e8:	08008373 	.word	0x08008373
 80082ec:	08008373 	.word	0x08008373
 80082f0:	08008373 	.word	0x08008373
 80082f4:	08008373 	.word	0x08008373
 80082f8:	08008373 	.word	0x08008373
 80082fc:	0800832f 	.word	0x0800832f
 8008300:	08008359 	.word	0x08008359
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800830a:	b2db      	uxtb	r3, r3
 800830c:	2b03      	cmp	r3, #3
 800830e:	d107      	bne.n	8008320 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008310:	f107 030a 	add.w	r3, r7, #10
 8008314:	2202      	movs	r2, #2
 8008316:	4619      	mov	r1, r3
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f001 fa9e 	bl	800985a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800831e:	e032      	b.n	8008386 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008320:	6839      	ldr	r1, [r7, #0]
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f001 fa28 	bl	8009778 <USBD_CtlError>
            ret = USBD_FAIL;
 8008328:	2303      	movs	r3, #3
 800832a:	75fb      	strb	r3, [r7, #23]
          break;
 800832c:	e02b      	b.n	8008386 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008334:	b2db      	uxtb	r3, r3
 8008336:	2b03      	cmp	r3, #3
 8008338:	d107      	bne.n	800834a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800833a:	f107 030d 	add.w	r3, r7, #13
 800833e:	2201      	movs	r2, #1
 8008340:	4619      	mov	r1, r3
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f001 fa89 	bl	800985a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008348:	e01d      	b.n	8008386 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800834a:	6839      	ldr	r1, [r7, #0]
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f001 fa13 	bl	8009778 <USBD_CtlError>
            ret = USBD_FAIL;
 8008352:	2303      	movs	r3, #3
 8008354:	75fb      	strb	r3, [r7, #23]
          break;
 8008356:	e016      	b.n	8008386 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800835e:	b2db      	uxtb	r3, r3
 8008360:	2b03      	cmp	r3, #3
 8008362:	d00f      	beq.n	8008384 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f001 fa06 	bl	8009778 <USBD_CtlError>
            ret = USBD_FAIL;
 800836c:	2303      	movs	r3, #3
 800836e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008370:	e008      	b.n	8008384 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008372:	6839      	ldr	r1, [r7, #0]
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f001 f9ff 	bl	8009778 <USBD_CtlError>
          ret = USBD_FAIL;
 800837a:	2303      	movs	r3, #3
 800837c:	75fb      	strb	r3, [r7, #23]
          break;
 800837e:	e002      	b.n	8008386 <USBD_CDC_Setup+0x176>
          break;
 8008380:	bf00      	nop
 8008382:	e008      	b.n	8008396 <USBD_CDC_Setup+0x186>
          break;
 8008384:	bf00      	nop
      }
      break;
 8008386:	e006      	b.n	8008396 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008388:	6839      	ldr	r1, [r7, #0]
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f001 f9f4 	bl	8009778 <USBD_CtlError>
      ret = USBD_FAIL;
 8008390:	2303      	movs	r3, #3
 8008392:	75fb      	strb	r3, [r7, #23]
      break;
 8008394:	bf00      	nop
  }

  return (uint8_t)ret;
 8008396:	7dfb      	ldrb	r3, [r7, #23]
}
 8008398:	4618      	mov	r0, r3
 800839a:	3718      	adds	r7, #24
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	460b      	mov	r3, r1
 80083aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80083b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d101      	bne.n	80083c2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80083be:	2303      	movs	r3, #3
 80083c0:	e04f      	b.n	8008462 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083c8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80083ca:	78fa      	ldrb	r2, [r7, #3]
 80083cc:	6879      	ldr	r1, [r7, #4]
 80083ce:	4613      	mov	r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4413      	add	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	440b      	add	r3, r1
 80083d8:	3318      	adds	r3, #24
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d029      	beq.n	8008434 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80083e0:	78fa      	ldrb	r2, [r7, #3]
 80083e2:	6879      	ldr	r1, [r7, #4]
 80083e4:	4613      	mov	r3, r2
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	4413      	add	r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	440b      	add	r3, r1
 80083ee:	3318      	adds	r3, #24
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	78f9      	ldrb	r1, [r7, #3]
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	460b      	mov	r3, r1
 80083f8:	00db      	lsls	r3, r3, #3
 80083fa:	1a5b      	subs	r3, r3, r1
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	4403      	add	r3, r0
 8008400:	3344      	adds	r3, #68	; 0x44
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	fbb2 f1f3 	udiv	r1, r2, r3
 8008408:	fb03 f301 	mul.w	r3, r3, r1
 800840c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800840e:	2b00      	cmp	r3, #0
 8008410:	d110      	bne.n	8008434 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008412:	78fa      	ldrb	r2, [r7, #3]
 8008414:	6879      	ldr	r1, [r7, #4]
 8008416:	4613      	mov	r3, r2
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	4413      	add	r3, r2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	440b      	add	r3, r1
 8008420:	3318      	adds	r3, #24
 8008422:	2200      	movs	r2, #0
 8008424:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008426:	78f9      	ldrb	r1, [r7, #3]
 8008428:	2300      	movs	r3, #0
 800842a:	2200      	movs	r2, #0
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f001 ff40 	bl	800a2b2 <USBD_LL_Transmit>
 8008432:	e015      	b.n	8008460 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	2200      	movs	r2, #0
 8008438:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00b      	beq.n	8008460 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	68ba      	ldr	r2, [r7, #8]
 8008452:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008456:	68ba      	ldr	r2, [r7, #8]
 8008458:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800845c:	78fa      	ldrb	r2, [r7, #3]
 800845e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b084      	sub	sp, #16
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	460b      	mov	r3, r1
 8008474:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800847c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008484:	2b00      	cmp	r3, #0
 8008486:	d101      	bne.n	800848c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008488:	2303      	movs	r3, #3
 800848a:	e015      	b.n	80084b8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800848c:	78fb      	ldrb	r3, [r7, #3]
 800848e:	4619      	mov	r1, r3
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f001 ff50 	bl	800a336 <USBD_LL_GetRxDataSize>
 8008496:	4602      	mov	r2, r0
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	68fa      	ldr	r2, [r7, #12]
 80084a8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80084b2:	4611      	mov	r1, r2
 80084b4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084ce:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d101      	bne.n	80084da <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80084d6:	2303      	movs	r3, #3
 80084d8:	e01b      	b.n	8008512 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d015      	beq.n	8008510 <USBD_CDC_EP0_RxReady+0x50>
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80084ea:	2bff      	cmp	r3, #255	; 0xff
 80084ec:	d010      	beq.n	8008510 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80084fc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008504:	b292      	uxth	r2, r2
 8008506:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	22ff      	movs	r2, #255	; 0xff
 800850c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
	...

0800851c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2243      	movs	r2, #67	; 0x43
 8008528:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800852a:	4b03      	ldr	r3, [pc, #12]	; (8008538 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800852c:	4618      	mov	r0, r3
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr
 8008538:	24000098 	.word	0x24000098

0800853c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2243      	movs	r2, #67	; 0x43
 8008548:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800854a:	4b03      	ldr	r3, [pc, #12]	; (8008558 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800854c:	4618      	mov	r0, r3
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr
 8008558:	24000054 	.word	0x24000054

0800855c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2243      	movs	r2, #67	; 0x43
 8008568:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800856a:	4b03      	ldr	r3, [pc, #12]	; (8008578 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800856c:	4618      	mov	r0, r3
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr
 8008578:	240000dc 	.word	0x240000dc

0800857c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	220a      	movs	r2, #10
 8008588:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800858a:	4b03      	ldr	r3, [pc, #12]	; (8008598 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800858c:	4618      	mov	r0, r3
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr
 8008598:	24000010 	.word	0x24000010

0800859c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d101      	bne.n	80085b0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e004      	b.n	80085ba <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	370c      	adds	r7, #12
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr

080085c6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80085c6:	b480      	push	{r7}
 80085c8:	b087      	sub	sp, #28
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	60f8      	str	r0, [r7, #12]
 80085ce:	60b9      	str	r1, [r7, #8]
 80085d0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085d8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d101      	bne.n	80085e4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80085e0:	2303      	movs	r3, #3
 80085e2:	e008      	b.n	80085f6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	371c      	adds	r7, #28
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr

08008602 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008602:	b480      	push	{r7}
 8008604:	b085      	sub	sp, #20
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
 800860a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008612:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d101      	bne.n	800861e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800861a:	2303      	movs	r3, #3
 800861c:	e004      	b.n	8008628 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	683a      	ldr	r2, [r7, #0]
 8008622:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3714      	adds	r7, #20
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008642:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800864a:	2b00      	cmp	r3, #0
 800864c:	d101      	bne.n	8008652 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800864e:	2303      	movs	r3, #3
 8008650:	e016      	b.n	8008680 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	7c1b      	ldrb	r3, [r3, #16]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d109      	bne.n	800866e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008660:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008664:	2101      	movs	r1, #1
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f001 fe44 	bl	800a2f4 <USBD_LL_PrepareReceive>
 800866c:	e007      	b.n	800867e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008674:	2340      	movs	r3, #64	; 0x40
 8008676:	2101      	movs	r1, #1
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f001 fe3b 	bl	800a2f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b086      	sub	sp, #24
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	4613      	mov	r3, r2
 8008694:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d101      	bne.n	80086a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800869c:	2303      	movs	r3, #3
 800869e:	e01f      	b.n	80086e0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d003      	beq.n	80086c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	68ba      	ldr	r2, [r7, #8]
 80086c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	79fa      	ldrb	r2, [r7, #7]
 80086d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80086d4:	68f8      	ldr	r0, [r7, #12]
 80086d6:	f001 fcad 	bl	800a034 <USBD_LL_Init>
 80086da:	4603      	mov	r3, r0
 80086dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80086de:	7dfb      	ldrb	r3, [r7, #23]
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3718      	adds	r7, #24
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80086f2:	2300      	movs	r3, #0
 80086f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d101      	bne.n	8008700 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80086fc:	2303      	movs	r3, #3
 80086fe:	e016      	b.n	800872e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	683a      	ldr	r2, [r7, #0]
 8008704:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800870e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00b      	beq.n	800872c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800871a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800871c:	f107 020e 	add.w	r2, r7, #14
 8008720:	4610      	mov	r0, r2
 8008722:	4798      	blx	r3
 8008724:	4602      	mov	r2, r0
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b082      	sub	sp, #8
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f001 fcce 	bl	800a0e0 <USBD_LL_Start>
 8008744:	4603      	mov	r3, r0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3708      	adds	r7, #8
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800874e:	b480      	push	{r7}
 8008750:	b083      	sub	sp, #12
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	460b      	mov	r3, r1
 800876e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008770:	2303      	movs	r3, #3
 8008772:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800877a:	2b00      	cmp	r3, #0
 800877c:	d009      	beq.n	8008792 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	78fa      	ldrb	r2, [r7, #3]
 8008788:	4611      	mov	r1, r2
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	4798      	blx	r3
 800878e:	4603      	mov	r3, r0
 8008790:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008792:	7bfb      	ldrb	r3, [r7, #15]
}
 8008794:	4618      	mov	r0, r3
 8008796:	3710      	adds	r7, #16
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	460b      	mov	r3, r1
 80087a6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d007      	beq.n	80087c2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	78fa      	ldrb	r2, [r7, #3]
 80087bc:	4611      	mov	r1, r2
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	4798      	blx	r3
  }

  return USBD_OK;
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3708      	adds	r7, #8
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80087dc:	6839      	ldr	r1, [r7, #0]
 80087de:	4618      	mov	r0, r3
 80087e0:	f000 ff90 	bl	8009704 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80087f2:	461a      	mov	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008800:	f003 031f 	and.w	r3, r3, #31
 8008804:	2b02      	cmp	r3, #2
 8008806:	d01a      	beq.n	800883e <USBD_LL_SetupStage+0x72>
 8008808:	2b02      	cmp	r3, #2
 800880a:	d822      	bhi.n	8008852 <USBD_LL_SetupStage+0x86>
 800880c:	2b00      	cmp	r3, #0
 800880e:	d002      	beq.n	8008816 <USBD_LL_SetupStage+0x4a>
 8008810:	2b01      	cmp	r3, #1
 8008812:	d00a      	beq.n	800882a <USBD_LL_SetupStage+0x5e>
 8008814:	e01d      	b.n	8008852 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800881c:	4619      	mov	r1, r3
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 fa62 	bl	8008ce8 <USBD_StdDevReq>
 8008824:	4603      	mov	r3, r0
 8008826:	73fb      	strb	r3, [r7, #15]
      break;
 8008828:	e020      	b.n	800886c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008830:	4619      	mov	r1, r3
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 fac6 	bl	8008dc4 <USBD_StdItfReq>
 8008838:	4603      	mov	r3, r0
 800883a:	73fb      	strb	r3, [r7, #15]
      break;
 800883c:	e016      	b.n	800886c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008844:	4619      	mov	r1, r3
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fb05 	bl	8008e56 <USBD_StdEPReq>
 800884c:	4603      	mov	r3, r0
 800884e:	73fb      	strb	r3, [r7, #15]
      break;
 8008850:	e00c      	b.n	800886c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008858:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800885c:	b2db      	uxtb	r3, r3
 800885e:	4619      	mov	r1, r3
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f001 fc9d 	bl	800a1a0 <USBD_LL_StallEP>
 8008866:	4603      	mov	r3, r0
 8008868:	73fb      	strb	r3, [r7, #15]
      break;
 800886a:	bf00      	nop
  }

  return ret;
 800886c:	7bfb      	ldrb	r3, [r7, #15]
}
 800886e:	4618      	mov	r0, r3
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b086      	sub	sp, #24
 800887a:	af00      	add	r7, sp, #0
 800887c:	60f8      	str	r0, [r7, #12]
 800887e:	460b      	mov	r3, r1
 8008880:	607a      	str	r2, [r7, #4]
 8008882:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008884:	7afb      	ldrb	r3, [r7, #11]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d138      	bne.n	80088fc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008890:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008898:	2b03      	cmp	r3, #3
 800889a:	d14a      	bne.n	8008932 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	689a      	ldr	r2, [r3, #8]
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d913      	bls.n	80088d0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	689a      	ldr	r2, [r3, #8]
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	1ad2      	subs	r2, r2, r3
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	68da      	ldr	r2, [r3, #12]
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	4293      	cmp	r3, r2
 80088c0:	bf28      	it	cs
 80088c2:	4613      	movcs	r3, r2
 80088c4:	461a      	mov	r2, r3
 80088c6:	6879      	ldr	r1, [r7, #4]
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f001 f80f 	bl	80098ec <USBD_CtlContinueRx>
 80088ce:	e030      	b.n	8008932 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	2b03      	cmp	r3, #3
 80088da:	d10b      	bne.n	80088f4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d005      	beq.n	80088f4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80088f4:	68f8      	ldr	r0, [r7, #12]
 80088f6:	f001 f80a 	bl	800990e <USBD_CtlSendStatus>
 80088fa:	e01a      	b.n	8008932 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008902:	b2db      	uxtb	r3, r3
 8008904:	2b03      	cmp	r3, #3
 8008906:	d114      	bne.n	8008932 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800890e:	699b      	ldr	r3, [r3, #24]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00e      	beq.n	8008932 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800891a:	699b      	ldr	r3, [r3, #24]
 800891c:	7afa      	ldrb	r2, [r7, #11]
 800891e:	4611      	mov	r1, r2
 8008920:	68f8      	ldr	r0, [r7, #12]
 8008922:	4798      	blx	r3
 8008924:	4603      	mov	r3, r0
 8008926:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008928:	7dfb      	ldrb	r3, [r7, #23]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d001      	beq.n	8008932 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800892e:	7dfb      	ldrb	r3, [r7, #23]
 8008930:	e000      	b.n	8008934 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3718      	adds	r7, #24
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b086      	sub	sp, #24
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	460b      	mov	r3, r1
 8008946:	607a      	str	r2, [r7, #4]
 8008948:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800894a:	7afb      	ldrb	r3, [r7, #11]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d16b      	bne.n	8008a28 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	3314      	adds	r3, #20
 8008954:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800895c:	2b02      	cmp	r3, #2
 800895e:	d156      	bne.n	8008a0e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	689a      	ldr	r2, [r3, #8]
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	429a      	cmp	r2, r3
 800896a:	d914      	bls.n	8008996 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	689a      	ldr	r2, [r3, #8]
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	1ad2      	subs	r2, r2, r3
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	461a      	mov	r2, r3
 8008980:	6879      	ldr	r1, [r7, #4]
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	f000 ff84 	bl	8009890 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008988:	2300      	movs	r3, #0
 800898a:	2200      	movs	r2, #0
 800898c:	2100      	movs	r1, #0
 800898e:	68f8      	ldr	r0, [r7, #12]
 8008990:	f001 fcb0 	bl	800a2f4 <USBD_LL_PrepareReceive>
 8008994:	e03b      	b.n	8008a0e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	68da      	ldr	r2, [r3, #12]
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	429a      	cmp	r2, r3
 80089a0:	d11c      	bne.n	80089dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	685a      	ldr	r2, [r3, #4]
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d316      	bcc.n	80089dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	685a      	ldr	r2, [r3, #4]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d20f      	bcs.n	80089dc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80089bc:	2200      	movs	r2, #0
 80089be:	2100      	movs	r1, #0
 80089c0:	68f8      	ldr	r0, [r7, #12]
 80089c2:	f000 ff65 	bl	8009890 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089ce:	2300      	movs	r3, #0
 80089d0:	2200      	movs	r2, #0
 80089d2:	2100      	movs	r1, #0
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	f001 fc8d 	bl	800a2f4 <USBD_LL_PrepareReceive>
 80089da:	e018      	b.n	8008a0e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	2b03      	cmp	r3, #3
 80089e6:	d10b      	bne.n	8008a00 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d005      	beq.n	8008a00 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a00:	2180      	movs	r1, #128	; 0x80
 8008a02:	68f8      	ldr	r0, [r7, #12]
 8008a04:	f001 fbcc 	bl	800a1a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f000 ff93 	bl	8009934 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d122      	bne.n	8008a5e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f7ff fe98 	bl	800874e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008a26:	e01a      	b.n	8008a5e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	2b03      	cmp	r3, #3
 8008a32:	d114      	bne.n	8008a5e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a3a:	695b      	ldr	r3, [r3, #20]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00e      	beq.n	8008a5e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a46:	695b      	ldr	r3, [r3, #20]
 8008a48:	7afa      	ldrb	r2, [r7, #11]
 8008a4a:	4611      	mov	r1, r2
 8008a4c:	68f8      	ldr	r0, [r7, #12]
 8008a4e:	4798      	blx	r3
 8008a50:	4603      	mov	r3, r0
 8008a52:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008a54:	7dfb      	ldrb	r3, [r7, #23]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d001      	beq.n	8008a5e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008a5a:	7dfb      	ldrb	r3, [r7, #23]
 8008a5c:	e000      	b.n	8008a60 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3718      	adds	r7, #24
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d101      	bne.n	8008a9c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008a98:	2303      	movs	r3, #3
 8008a9a:	e02f      	b.n	8008afc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00f      	beq.n	8008ac6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d009      	beq.n	8008ac6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	6852      	ldr	r2, [r2, #4]
 8008abe:	b2d2      	uxtb	r2, r2
 8008ac0:	4611      	mov	r1, r2
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ac6:	2340      	movs	r3, #64	; 0x40
 8008ac8:	2200      	movs	r2, #0
 8008aca:	2100      	movs	r1, #0
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f001 fb22 	bl	800a116 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2240      	movs	r2, #64	; 0x40
 8008ade:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ae2:	2340      	movs	r3, #64	; 0x40
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	2180      	movs	r1, #128	; 0x80
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f001 fb14 	bl	800a116 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2201      	movs	r2, #1
 8008af2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2240      	movs	r2, #64	; 0x40
 8008af8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3708      	adds	r7, #8
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	78fa      	ldrb	r2, [r7, #3]
 8008b14:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	370c      	adds	r7, #12
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b32:	b2da      	uxtb	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2204      	movs	r2, #4
 8008b3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	2b04      	cmp	r3, #4
 8008b62:	d106      	bne.n	8008b72 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008b6a:	b2da      	uxtb	r2, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d101      	bne.n	8008b96 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008b92:	2303      	movs	r3, #3
 8008b94:	e012      	b.n	8008bbc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	2b03      	cmp	r3, #3
 8008ba0:	d10b      	bne.n	8008bba <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ba8:	69db      	ldr	r3, [r3, #28]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d005      	beq.n	8008bba <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bb4:	69db      	ldr	r3, [r3, #28]
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008bba:	2300      	movs	r3, #0
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3708      	adds	r7, #8
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	460b      	mov	r3, r1
 8008bce:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d101      	bne.n	8008bde <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008bda:	2303      	movs	r3, #3
 8008bdc:	e014      	b.n	8008c08 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	2b03      	cmp	r3, #3
 8008be8:	d10d      	bne.n	8008c06 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bf0:	6a1b      	ldr	r3, [r3, #32]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d007      	beq.n	8008c06 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bfc:	6a1b      	ldr	r3, [r3, #32]
 8008bfe:	78fa      	ldrb	r2, [r7, #3]
 8008c00:	4611      	mov	r1, r2
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3708      	adds	r7, #8
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	460b      	mov	r3, r1
 8008c1a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d101      	bne.n	8008c2a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008c26:	2303      	movs	r3, #3
 8008c28:	e014      	b.n	8008c54 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	2b03      	cmp	r3, #3
 8008c34:	d10d      	bne.n	8008c52 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d007      	beq.n	8008c52 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4a:	78fa      	ldrb	r2, [r7, #3]
 8008c4c:	4611      	mov	r1, r2
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3708      	adds	r7, #8
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	370c      	adds	r7, #12
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr

08008c72 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b082      	sub	sp, #8
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d009      	beq.n	8008ca0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	6852      	ldr	r2, [r2, #4]
 8008c98:	b2d2      	uxtb	r2, r2
 8008c9a:	4611      	mov	r1, r2
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	4798      	blx	r3
  }

  return USBD_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3708      	adds	r7, #8
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008caa:	b480      	push	{r7}
 8008cac:	b087      	sub	sp, #28
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008cc8:	8a3b      	ldrh	r3, [r7, #16]
 8008cca:	021b      	lsls	r3, r3, #8
 8008ccc:	b21a      	sxth	r2, r3
 8008cce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	b21b      	sxth	r3, r3
 8008cd6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008cd8:	89fb      	ldrh	r3, [r7, #14]
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	371c      	adds	r7, #28
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr
	...

08008ce8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cfe:	2b40      	cmp	r3, #64	; 0x40
 8008d00:	d005      	beq.n	8008d0e <USBD_StdDevReq+0x26>
 8008d02:	2b40      	cmp	r3, #64	; 0x40
 8008d04:	d853      	bhi.n	8008dae <USBD_StdDevReq+0xc6>
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00b      	beq.n	8008d22 <USBD_StdDevReq+0x3a>
 8008d0a:	2b20      	cmp	r3, #32
 8008d0c:	d14f      	bne.n	8008dae <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	6839      	ldr	r1, [r7, #0]
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	4798      	blx	r3
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d20:	e04a      	b.n	8008db8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	785b      	ldrb	r3, [r3, #1]
 8008d26:	2b09      	cmp	r3, #9
 8008d28:	d83b      	bhi.n	8008da2 <USBD_StdDevReq+0xba>
 8008d2a:	a201      	add	r2, pc, #4	; (adr r2, 8008d30 <USBD_StdDevReq+0x48>)
 8008d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d30:	08008d85 	.word	0x08008d85
 8008d34:	08008d99 	.word	0x08008d99
 8008d38:	08008da3 	.word	0x08008da3
 8008d3c:	08008d8f 	.word	0x08008d8f
 8008d40:	08008da3 	.word	0x08008da3
 8008d44:	08008d63 	.word	0x08008d63
 8008d48:	08008d59 	.word	0x08008d59
 8008d4c:	08008da3 	.word	0x08008da3
 8008d50:	08008d7b 	.word	0x08008d7b
 8008d54:	08008d6d 	.word	0x08008d6d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008d58:	6839      	ldr	r1, [r7, #0]
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 f9de 	bl	800911c <USBD_GetDescriptor>
          break;
 8008d60:	e024      	b.n	8008dac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008d62:	6839      	ldr	r1, [r7, #0]
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fb43 	bl	80093f0 <USBD_SetAddress>
          break;
 8008d6a:	e01f      	b.n	8008dac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008d6c:	6839      	ldr	r1, [r7, #0]
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 fb82 	bl	8009478 <USBD_SetConfig>
 8008d74:	4603      	mov	r3, r0
 8008d76:	73fb      	strb	r3, [r7, #15]
          break;
 8008d78:	e018      	b.n	8008dac <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008d7a:	6839      	ldr	r1, [r7, #0]
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 fc21 	bl	80095c4 <USBD_GetConfig>
          break;
 8008d82:	e013      	b.n	8008dac <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008d84:	6839      	ldr	r1, [r7, #0]
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fc52 	bl	8009630 <USBD_GetStatus>
          break;
 8008d8c:	e00e      	b.n	8008dac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008d8e:	6839      	ldr	r1, [r7, #0]
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 fc81 	bl	8009698 <USBD_SetFeature>
          break;
 8008d96:	e009      	b.n	8008dac <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008d98:	6839      	ldr	r1, [r7, #0]
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 fc90 	bl	80096c0 <USBD_ClrFeature>
          break;
 8008da0:	e004      	b.n	8008dac <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008da2:	6839      	ldr	r1, [r7, #0]
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 fce7 	bl	8009778 <USBD_CtlError>
          break;
 8008daa:	bf00      	nop
      }
      break;
 8008dac:	e004      	b.n	8008db8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008dae:	6839      	ldr	r1, [r7, #0]
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 fce1 	bl	8009778 <USBD_CtlError>
      break;
 8008db6:	bf00      	nop
  }

  return ret;
 8008db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop

08008dc4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008dda:	2b40      	cmp	r3, #64	; 0x40
 8008ddc:	d005      	beq.n	8008dea <USBD_StdItfReq+0x26>
 8008dde:	2b40      	cmp	r3, #64	; 0x40
 8008de0:	d82f      	bhi.n	8008e42 <USBD_StdItfReq+0x7e>
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d001      	beq.n	8008dea <USBD_StdItfReq+0x26>
 8008de6:	2b20      	cmp	r3, #32
 8008de8:	d12b      	bne.n	8008e42 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	3b01      	subs	r3, #1
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	d81d      	bhi.n	8008e34 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	889b      	ldrh	r3, [r3, #4]
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d813      	bhi.n	8008e2a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	6839      	ldr	r1, [r7, #0]
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	4798      	blx	r3
 8008e10:	4603      	mov	r3, r0
 8008e12:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	88db      	ldrh	r3, [r3, #6]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d110      	bne.n	8008e3e <USBD_StdItfReq+0x7a>
 8008e1c:	7bfb      	ldrb	r3, [r7, #15]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d10d      	bne.n	8008e3e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 fd73 	bl	800990e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008e28:	e009      	b.n	8008e3e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008e2a:	6839      	ldr	r1, [r7, #0]
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 fca3 	bl	8009778 <USBD_CtlError>
          break;
 8008e32:	e004      	b.n	8008e3e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008e34:	6839      	ldr	r1, [r7, #0]
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 fc9e 	bl	8009778 <USBD_CtlError>
          break;
 8008e3c:	e000      	b.n	8008e40 <USBD_StdItfReq+0x7c>
          break;
 8008e3e:	bf00      	nop
      }
      break;
 8008e40:	e004      	b.n	8008e4c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008e42:	6839      	ldr	r1, [r7, #0]
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 fc97 	bl	8009778 <USBD_CtlError>
      break;
 8008e4a:	bf00      	nop
  }

  return ret;
 8008e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b084      	sub	sp, #16
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
 8008e5e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008e60:	2300      	movs	r3, #0
 8008e62:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	889b      	ldrh	r3, [r3, #4]
 8008e68:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e72:	2b40      	cmp	r3, #64	; 0x40
 8008e74:	d007      	beq.n	8008e86 <USBD_StdEPReq+0x30>
 8008e76:	2b40      	cmp	r3, #64	; 0x40
 8008e78:	f200 8145 	bhi.w	8009106 <USBD_StdEPReq+0x2b0>
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00c      	beq.n	8008e9a <USBD_StdEPReq+0x44>
 8008e80:	2b20      	cmp	r3, #32
 8008e82:	f040 8140 	bne.w	8009106 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	6839      	ldr	r1, [r7, #0]
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	4798      	blx	r3
 8008e94:	4603      	mov	r3, r0
 8008e96:	73fb      	strb	r3, [r7, #15]
      break;
 8008e98:	e13a      	b.n	8009110 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	785b      	ldrb	r3, [r3, #1]
 8008e9e:	2b03      	cmp	r3, #3
 8008ea0:	d007      	beq.n	8008eb2 <USBD_StdEPReq+0x5c>
 8008ea2:	2b03      	cmp	r3, #3
 8008ea4:	f300 8129 	bgt.w	80090fa <USBD_StdEPReq+0x2a4>
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d07f      	beq.n	8008fac <USBD_StdEPReq+0x156>
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d03c      	beq.n	8008f2a <USBD_StdEPReq+0xd4>
 8008eb0:	e123      	b.n	80090fa <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	d002      	beq.n	8008ec4 <USBD_StdEPReq+0x6e>
 8008ebe:	2b03      	cmp	r3, #3
 8008ec0:	d016      	beq.n	8008ef0 <USBD_StdEPReq+0x9a>
 8008ec2:	e02c      	b.n	8008f1e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ec4:	7bbb      	ldrb	r3, [r7, #14]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00d      	beq.n	8008ee6 <USBD_StdEPReq+0x90>
 8008eca:	7bbb      	ldrb	r3, [r7, #14]
 8008ecc:	2b80      	cmp	r3, #128	; 0x80
 8008ece:	d00a      	beq.n	8008ee6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ed0:	7bbb      	ldrb	r3, [r7, #14]
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f001 f963 	bl	800a1a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008eda:	2180      	movs	r1, #128	; 0x80
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f001 f95f 	bl	800a1a0 <USBD_LL_StallEP>
 8008ee2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ee4:	e020      	b.n	8008f28 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008ee6:	6839      	ldr	r1, [r7, #0]
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 fc45 	bl	8009778 <USBD_CtlError>
              break;
 8008eee:	e01b      	b.n	8008f28 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	885b      	ldrh	r3, [r3, #2]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d10e      	bne.n	8008f16 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008ef8:	7bbb      	ldrb	r3, [r7, #14]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00b      	beq.n	8008f16 <USBD_StdEPReq+0xc0>
 8008efe:	7bbb      	ldrb	r3, [r7, #14]
 8008f00:	2b80      	cmp	r3, #128	; 0x80
 8008f02:	d008      	beq.n	8008f16 <USBD_StdEPReq+0xc0>
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	88db      	ldrh	r3, [r3, #6]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d104      	bne.n	8008f16 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f0c:	7bbb      	ldrb	r3, [r7, #14]
 8008f0e:	4619      	mov	r1, r3
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f001 f945 	bl	800a1a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 fcf9 	bl	800990e <USBD_CtlSendStatus>

              break;
 8008f1c:	e004      	b.n	8008f28 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008f1e:	6839      	ldr	r1, [r7, #0]
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 fc29 	bl	8009778 <USBD_CtlError>
              break;
 8008f26:	bf00      	nop
          }
          break;
 8008f28:	e0ec      	b.n	8009104 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	2b02      	cmp	r3, #2
 8008f34:	d002      	beq.n	8008f3c <USBD_StdEPReq+0xe6>
 8008f36:	2b03      	cmp	r3, #3
 8008f38:	d016      	beq.n	8008f68 <USBD_StdEPReq+0x112>
 8008f3a:	e030      	b.n	8008f9e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f3c:	7bbb      	ldrb	r3, [r7, #14]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00d      	beq.n	8008f5e <USBD_StdEPReq+0x108>
 8008f42:	7bbb      	ldrb	r3, [r7, #14]
 8008f44:	2b80      	cmp	r3, #128	; 0x80
 8008f46:	d00a      	beq.n	8008f5e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f48:	7bbb      	ldrb	r3, [r7, #14]
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f001 f927 	bl	800a1a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f52:	2180      	movs	r1, #128	; 0x80
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f001 f923 	bl	800a1a0 <USBD_LL_StallEP>
 8008f5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f5c:	e025      	b.n	8008faa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008f5e:	6839      	ldr	r1, [r7, #0]
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 fc09 	bl	8009778 <USBD_CtlError>
              break;
 8008f66:	e020      	b.n	8008faa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	885b      	ldrh	r3, [r3, #2]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d11b      	bne.n	8008fa8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008f70:	7bbb      	ldrb	r3, [r7, #14]
 8008f72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d004      	beq.n	8008f84 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008f7a:	7bbb      	ldrb	r3, [r7, #14]
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f001 f92d 	bl	800a1de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 fcc2 	bl	800990e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	6839      	ldr	r1, [r7, #0]
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	4798      	blx	r3
 8008f98:	4603      	mov	r3, r0
 8008f9a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008f9c:	e004      	b.n	8008fa8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008f9e:	6839      	ldr	r1, [r7, #0]
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 fbe9 	bl	8009778 <USBD_CtlError>
              break;
 8008fa6:	e000      	b.n	8008faa <USBD_StdEPReq+0x154>
              break;
 8008fa8:	bf00      	nop
          }
          break;
 8008faa:	e0ab      	b.n	8009104 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	d002      	beq.n	8008fbe <USBD_StdEPReq+0x168>
 8008fb8:	2b03      	cmp	r3, #3
 8008fba:	d032      	beq.n	8009022 <USBD_StdEPReq+0x1cc>
 8008fbc:	e097      	b.n	80090ee <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fbe:	7bbb      	ldrb	r3, [r7, #14]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d007      	beq.n	8008fd4 <USBD_StdEPReq+0x17e>
 8008fc4:	7bbb      	ldrb	r3, [r7, #14]
 8008fc6:	2b80      	cmp	r3, #128	; 0x80
 8008fc8:	d004      	beq.n	8008fd4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008fca:	6839      	ldr	r1, [r7, #0]
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 fbd3 	bl	8009778 <USBD_CtlError>
                break;
 8008fd2:	e091      	b.n	80090f8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	da0b      	bge.n	8008ff4 <USBD_StdEPReq+0x19e>
 8008fdc:	7bbb      	ldrb	r3, [r7, #14]
 8008fde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	4413      	add	r3, r2
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	3310      	adds	r3, #16
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	4413      	add	r3, r2
 8008ff0:	3304      	adds	r3, #4
 8008ff2:	e00b      	b.n	800900c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ff4:	7bbb      	ldrb	r3, [r7, #14]
 8008ff6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	4413      	add	r3, r2
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	4413      	add	r3, r2
 800900a:	3304      	adds	r3, #4
 800900c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	2200      	movs	r2, #0
 8009012:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	2202      	movs	r2, #2
 8009018:	4619      	mov	r1, r3
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 fc1d 	bl	800985a <USBD_CtlSendData>
              break;
 8009020:	e06a      	b.n	80090f8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009022:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009026:	2b00      	cmp	r3, #0
 8009028:	da11      	bge.n	800904e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800902a:	7bbb      	ldrb	r3, [r7, #14]
 800902c:	f003 020f 	and.w	r2, r3, #15
 8009030:	6879      	ldr	r1, [r7, #4]
 8009032:	4613      	mov	r3, r2
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	4413      	add	r3, r2
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	440b      	add	r3, r1
 800903c:	3324      	adds	r3, #36	; 0x24
 800903e:	881b      	ldrh	r3, [r3, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d117      	bne.n	8009074 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009044:	6839      	ldr	r1, [r7, #0]
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 fb96 	bl	8009778 <USBD_CtlError>
                  break;
 800904c:	e054      	b.n	80090f8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800904e:	7bbb      	ldrb	r3, [r7, #14]
 8009050:	f003 020f 	and.w	r2, r3, #15
 8009054:	6879      	ldr	r1, [r7, #4]
 8009056:	4613      	mov	r3, r2
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	4413      	add	r3, r2
 800905c:	009b      	lsls	r3, r3, #2
 800905e:	440b      	add	r3, r1
 8009060:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009064:	881b      	ldrh	r3, [r3, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d104      	bne.n	8009074 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800906a:	6839      	ldr	r1, [r7, #0]
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 fb83 	bl	8009778 <USBD_CtlError>
                  break;
 8009072:	e041      	b.n	80090f8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009074:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009078:	2b00      	cmp	r3, #0
 800907a:	da0b      	bge.n	8009094 <USBD_StdEPReq+0x23e>
 800907c:	7bbb      	ldrb	r3, [r7, #14]
 800907e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009082:	4613      	mov	r3, r2
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	4413      	add	r3, r2
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	3310      	adds	r3, #16
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	4413      	add	r3, r2
 8009090:	3304      	adds	r3, #4
 8009092:	e00b      	b.n	80090ac <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009094:	7bbb      	ldrb	r3, [r7, #14]
 8009096:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800909a:	4613      	mov	r3, r2
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	4413      	add	r3, r2
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	4413      	add	r3, r2
 80090aa:	3304      	adds	r3, #4
 80090ac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80090ae:	7bbb      	ldrb	r3, [r7, #14]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d002      	beq.n	80090ba <USBD_StdEPReq+0x264>
 80090b4:	7bbb      	ldrb	r3, [r7, #14]
 80090b6:	2b80      	cmp	r3, #128	; 0x80
 80090b8:	d103      	bne.n	80090c2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	2200      	movs	r2, #0
 80090be:	601a      	str	r2, [r3, #0]
 80090c0:	e00e      	b.n	80090e0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80090c2:	7bbb      	ldrb	r3, [r7, #14]
 80090c4:	4619      	mov	r1, r3
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f001 f8a8 	bl	800a21c <USBD_LL_IsStallEP>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d003      	beq.n	80090da <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	2201      	movs	r2, #1
 80090d6:	601a      	str	r2, [r3, #0]
 80090d8:	e002      	b.n	80090e0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	2200      	movs	r2, #0
 80090de:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	2202      	movs	r2, #2
 80090e4:	4619      	mov	r1, r3
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 fbb7 	bl	800985a <USBD_CtlSendData>
              break;
 80090ec:	e004      	b.n	80090f8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80090ee:	6839      	ldr	r1, [r7, #0]
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 fb41 	bl	8009778 <USBD_CtlError>
              break;
 80090f6:	bf00      	nop
          }
          break;
 80090f8:	e004      	b.n	8009104 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80090fa:	6839      	ldr	r1, [r7, #0]
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 fb3b 	bl	8009778 <USBD_CtlError>
          break;
 8009102:	bf00      	nop
      }
      break;
 8009104:	e004      	b.n	8009110 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009106:	6839      	ldr	r1, [r7, #0]
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 fb35 	bl	8009778 <USBD_CtlError>
      break;
 800910e:	bf00      	nop
  }

  return ret;
 8009110:	7bfb      	ldrb	r3, [r7, #15]
}
 8009112:	4618      	mov	r0, r3
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
	...

0800911c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009126:	2300      	movs	r3, #0
 8009128:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800912a:	2300      	movs	r3, #0
 800912c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800912e:	2300      	movs	r3, #0
 8009130:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	885b      	ldrh	r3, [r3, #2]
 8009136:	0a1b      	lsrs	r3, r3, #8
 8009138:	b29b      	uxth	r3, r3
 800913a:	3b01      	subs	r3, #1
 800913c:	2b06      	cmp	r3, #6
 800913e:	f200 8128 	bhi.w	8009392 <USBD_GetDescriptor+0x276>
 8009142:	a201      	add	r2, pc, #4	; (adr r2, 8009148 <USBD_GetDescriptor+0x2c>)
 8009144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009148:	08009165 	.word	0x08009165
 800914c:	0800917d 	.word	0x0800917d
 8009150:	080091bd 	.word	0x080091bd
 8009154:	08009393 	.word	0x08009393
 8009158:	08009393 	.word	0x08009393
 800915c:	08009333 	.word	0x08009333
 8009160:	0800935f 	.word	0x0800935f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	7c12      	ldrb	r2, [r2, #16]
 8009170:	f107 0108 	add.w	r1, r7, #8
 8009174:	4610      	mov	r0, r2
 8009176:	4798      	blx	r3
 8009178:	60f8      	str	r0, [r7, #12]
      break;
 800917a:	e112      	b.n	80093a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	7c1b      	ldrb	r3, [r3, #16]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d10d      	bne.n	80091a0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800918a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800918c:	f107 0208 	add.w	r2, r7, #8
 8009190:	4610      	mov	r0, r2
 8009192:	4798      	blx	r3
 8009194:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	3301      	adds	r3, #1
 800919a:	2202      	movs	r2, #2
 800919c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800919e:	e100      	b.n	80093a2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a8:	f107 0208 	add.w	r2, r7, #8
 80091ac:	4610      	mov	r0, r2
 80091ae:	4798      	blx	r3
 80091b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	3301      	adds	r3, #1
 80091b6:	2202      	movs	r2, #2
 80091b8:	701a      	strb	r2, [r3, #0]
      break;
 80091ba:	e0f2      	b.n	80093a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	885b      	ldrh	r3, [r3, #2]
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b05      	cmp	r3, #5
 80091c4:	f200 80ac 	bhi.w	8009320 <USBD_GetDescriptor+0x204>
 80091c8:	a201      	add	r2, pc, #4	; (adr r2, 80091d0 <USBD_GetDescriptor+0xb4>)
 80091ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ce:	bf00      	nop
 80091d0:	080091e9 	.word	0x080091e9
 80091d4:	0800921d 	.word	0x0800921d
 80091d8:	08009251 	.word	0x08009251
 80091dc:	08009285 	.word	0x08009285
 80091e0:	080092b9 	.word	0x080092b9
 80091e4:	080092ed 	.word	0x080092ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00b      	beq.n	800920c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	7c12      	ldrb	r2, [r2, #16]
 8009200:	f107 0108 	add.w	r1, r7, #8
 8009204:	4610      	mov	r0, r2
 8009206:	4798      	blx	r3
 8009208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800920a:	e091      	b.n	8009330 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800920c:	6839      	ldr	r1, [r7, #0]
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 fab2 	bl	8009778 <USBD_CtlError>
            err++;
 8009214:	7afb      	ldrb	r3, [r7, #11]
 8009216:	3301      	adds	r3, #1
 8009218:	72fb      	strb	r3, [r7, #11]
          break;
 800921a:	e089      	b.n	8009330 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d00b      	beq.n	8009240 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	7c12      	ldrb	r2, [r2, #16]
 8009234:	f107 0108 	add.w	r1, r7, #8
 8009238:	4610      	mov	r0, r2
 800923a:	4798      	blx	r3
 800923c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800923e:	e077      	b.n	8009330 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009240:	6839      	ldr	r1, [r7, #0]
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 fa98 	bl	8009778 <USBD_CtlError>
            err++;
 8009248:	7afb      	ldrb	r3, [r7, #11]
 800924a:	3301      	adds	r3, #1
 800924c:	72fb      	strb	r3, [r7, #11]
          break;
 800924e:	e06f      	b.n	8009330 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d00b      	beq.n	8009274 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	7c12      	ldrb	r2, [r2, #16]
 8009268:	f107 0108 	add.w	r1, r7, #8
 800926c:	4610      	mov	r0, r2
 800926e:	4798      	blx	r3
 8009270:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009272:	e05d      	b.n	8009330 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009274:	6839      	ldr	r1, [r7, #0]
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 fa7e 	bl	8009778 <USBD_CtlError>
            err++;
 800927c:	7afb      	ldrb	r3, [r7, #11]
 800927e:	3301      	adds	r3, #1
 8009280:	72fb      	strb	r3, [r7, #11]
          break;
 8009282:	e055      	b.n	8009330 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00b      	beq.n	80092a8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009296:	691b      	ldr	r3, [r3, #16]
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	7c12      	ldrb	r2, [r2, #16]
 800929c:	f107 0108 	add.w	r1, r7, #8
 80092a0:	4610      	mov	r0, r2
 80092a2:	4798      	blx	r3
 80092a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092a6:	e043      	b.n	8009330 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092a8:	6839      	ldr	r1, [r7, #0]
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 fa64 	bl	8009778 <USBD_CtlError>
            err++;
 80092b0:	7afb      	ldrb	r3, [r7, #11]
 80092b2:	3301      	adds	r3, #1
 80092b4:	72fb      	strb	r3, [r7, #11]
          break;
 80092b6:	e03b      	b.n	8009330 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092be:	695b      	ldr	r3, [r3, #20]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d00b      	beq.n	80092dc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ca:	695b      	ldr	r3, [r3, #20]
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	7c12      	ldrb	r2, [r2, #16]
 80092d0:	f107 0108 	add.w	r1, r7, #8
 80092d4:	4610      	mov	r0, r2
 80092d6:	4798      	blx	r3
 80092d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092da:	e029      	b.n	8009330 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092dc:	6839      	ldr	r1, [r7, #0]
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 fa4a 	bl	8009778 <USBD_CtlError>
            err++;
 80092e4:	7afb      	ldrb	r3, [r7, #11]
 80092e6:	3301      	adds	r3, #1
 80092e8:	72fb      	strb	r3, [r7, #11]
          break;
 80092ea:	e021      	b.n	8009330 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092f2:	699b      	ldr	r3, [r3, #24]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00b      	beq.n	8009310 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092fe:	699b      	ldr	r3, [r3, #24]
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	7c12      	ldrb	r2, [r2, #16]
 8009304:	f107 0108 	add.w	r1, r7, #8
 8009308:	4610      	mov	r0, r2
 800930a:	4798      	blx	r3
 800930c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800930e:	e00f      	b.n	8009330 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009310:	6839      	ldr	r1, [r7, #0]
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 fa30 	bl	8009778 <USBD_CtlError>
            err++;
 8009318:	7afb      	ldrb	r3, [r7, #11]
 800931a:	3301      	adds	r3, #1
 800931c:	72fb      	strb	r3, [r7, #11]
          break;
 800931e:	e007      	b.n	8009330 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009320:	6839      	ldr	r1, [r7, #0]
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 fa28 	bl	8009778 <USBD_CtlError>
          err++;
 8009328:	7afb      	ldrb	r3, [r7, #11]
 800932a:	3301      	adds	r3, #1
 800932c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800932e:	bf00      	nop
      }
      break;
 8009330:	e037      	b.n	80093a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	7c1b      	ldrb	r3, [r3, #16]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d109      	bne.n	800934e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009342:	f107 0208 	add.w	r2, r7, #8
 8009346:	4610      	mov	r0, r2
 8009348:	4798      	blx	r3
 800934a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800934c:	e029      	b.n	80093a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800934e:	6839      	ldr	r1, [r7, #0]
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 fa11 	bl	8009778 <USBD_CtlError>
        err++;
 8009356:	7afb      	ldrb	r3, [r7, #11]
 8009358:	3301      	adds	r3, #1
 800935a:	72fb      	strb	r3, [r7, #11]
      break;
 800935c:	e021      	b.n	80093a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	7c1b      	ldrb	r3, [r3, #16]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d10d      	bne.n	8009382 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800936c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800936e:	f107 0208 	add.w	r2, r7, #8
 8009372:	4610      	mov	r0, r2
 8009374:	4798      	blx	r3
 8009376:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	3301      	adds	r3, #1
 800937c:	2207      	movs	r2, #7
 800937e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009380:	e00f      	b.n	80093a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009382:	6839      	ldr	r1, [r7, #0]
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 f9f7 	bl	8009778 <USBD_CtlError>
        err++;
 800938a:	7afb      	ldrb	r3, [r7, #11]
 800938c:	3301      	adds	r3, #1
 800938e:	72fb      	strb	r3, [r7, #11]
      break;
 8009390:	e007      	b.n	80093a2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009392:	6839      	ldr	r1, [r7, #0]
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 f9ef 	bl	8009778 <USBD_CtlError>
      err++;
 800939a:	7afb      	ldrb	r3, [r7, #11]
 800939c:	3301      	adds	r3, #1
 800939e:	72fb      	strb	r3, [r7, #11]
      break;
 80093a0:	bf00      	nop
  }

  if (err != 0U)
 80093a2:	7afb      	ldrb	r3, [r7, #11]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d11e      	bne.n	80093e6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	88db      	ldrh	r3, [r3, #6]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d016      	beq.n	80093de <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80093b0:	893b      	ldrh	r3, [r7, #8]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00e      	beq.n	80093d4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	88da      	ldrh	r2, [r3, #6]
 80093ba:	893b      	ldrh	r3, [r7, #8]
 80093bc:	4293      	cmp	r3, r2
 80093be:	bf28      	it	cs
 80093c0:	4613      	movcs	r3, r2
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80093c6:	893b      	ldrh	r3, [r7, #8]
 80093c8:	461a      	mov	r2, r3
 80093ca:	68f9      	ldr	r1, [r7, #12]
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 fa44 	bl	800985a <USBD_CtlSendData>
 80093d2:	e009      	b.n	80093e8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80093d4:	6839      	ldr	r1, [r7, #0]
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 f9ce 	bl	8009778 <USBD_CtlError>
 80093dc:	e004      	b.n	80093e8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 fa95 	bl	800990e <USBD_CtlSendStatus>
 80093e4:	e000      	b.n	80093e8 <USBD_GetDescriptor+0x2cc>
    return;
 80093e6:	bf00      	nop
  }
}
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop

080093f0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	889b      	ldrh	r3, [r3, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d131      	bne.n	8009466 <USBD_SetAddress+0x76>
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	88db      	ldrh	r3, [r3, #6]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d12d      	bne.n	8009466 <USBD_SetAddress+0x76>
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	885b      	ldrh	r3, [r3, #2]
 800940e:	2b7f      	cmp	r3, #127	; 0x7f
 8009410:	d829      	bhi.n	8009466 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	885b      	ldrh	r3, [r3, #2]
 8009416:	b2db      	uxtb	r3, r3
 8009418:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800941c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009424:	b2db      	uxtb	r3, r3
 8009426:	2b03      	cmp	r3, #3
 8009428:	d104      	bne.n	8009434 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800942a:	6839      	ldr	r1, [r7, #0]
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 f9a3 	bl	8009778 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009432:	e01d      	b.n	8009470 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	7bfa      	ldrb	r2, [r7, #15]
 8009438:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800943c:	7bfb      	ldrb	r3, [r7, #15]
 800943e:	4619      	mov	r1, r3
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 ff17 	bl	800a274 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 fa61 	bl	800990e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800944c:	7bfb      	ldrb	r3, [r7, #15]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d004      	beq.n	800945c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2202      	movs	r2, #2
 8009456:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800945a:	e009      	b.n	8009470 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2201      	movs	r2, #1
 8009460:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009464:	e004      	b.n	8009470 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009466:	6839      	ldr	r1, [r7, #0]
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 f985 	bl	8009778 <USBD_CtlError>
  }
}
 800946e:	bf00      	nop
 8009470:	bf00      	nop
 8009472:	3710      	adds	r7, #16
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009482:	2300      	movs	r3, #0
 8009484:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	885b      	ldrh	r3, [r3, #2]
 800948a:	b2da      	uxtb	r2, r3
 800948c:	4b4c      	ldr	r3, [pc, #304]	; (80095c0 <USBD_SetConfig+0x148>)
 800948e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009490:	4b4b      	ldr	r3, [pc, #300]	; (80095c0 <USBD_SetConfig+0x148>)
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	2b01      	cmp	r3, #1
 8009496:	d905      	bls.n	80094a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009498:	6839      	ldr	r1, [r7, #0]
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 f96c 	bl	8009778 <USBD_CtlError>
    return USBD_FAIL;
 80094a0:	2303      	movs	r3, #3
 80094a2:	e088      	b.n	80095b6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	2b02      	cmp	r3, #2
 80094ae:	d002      	beq.n	80094b6 <USBD_SetConfig+0x3e>
 80094b0:	2b03      	cmp	r3, #3
 80094b2:	d025      	beq.n	8009500 <USBD_SetConfig+0x88>
 80094b4:	e071      	b.n	800959a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80094b6:	4b42      	ldr	r3, [pc, #264]	; (80095c0 <USBD_SetConfig+0x148>)
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d01c      	beq.n	80094f8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80094be:	4b40      	ldr	r3, [pc, #256]	; (80095c0 <USBD_SetConfig+0x148>)
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	461a      	mov	r2, r3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80094c8:	4b3d      	ldr	r3, [pc, #244]	; (80095c0 <USBD_SetConfig+0x148>)
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	4619      	mov	r1, r3
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f7ff f948 	bl	8008764 <USBD_SetClassConfig>
 80094d4:	4603      	mov	r3, r0
 80094d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80094d8:	7bfb      	ldrb	r3, [r7, #15]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d004      	beq.n	80094e8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80094de:	6839      	ldr	r1, [r7, #0]
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 f949 	bl	8009778 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80094e6:	e065      	b.n	80095b4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 fa10 	bl	800990e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2203      	movs	r2, #3
 80094f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80094f6:	e05d      	b.n	80095b4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 fa08 	bl	800990e <USBD_CtlSendStatus>
      break;
 80094fe:	e059      	b.n	80095b4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009500:	4b2f      	ldr	r3, [pc, #188]	; (80095c0 <USBD_SetConfig+0x148>)
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d112      	bne.n	800952e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2202      	movs	r2, #2
 800950c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009510:	4b2b      	ldr	r3, [pc, #172]	; (80095c0 <USBD_SetConfig+0x148>)
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	461a      	mov	r2, r3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800951a:	4b29      	ldr	r3, [pc, #164]	; (80095c0 <USBD_SetConfig+0x148>)
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	4619      	mov	r1, r3
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f7ff f93b 	bl	800879c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 f9f1 	bl	800990e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800952c:	e042      	b.n	80095b4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800952e:	4b24      	ldr	r3, [pc, #144]	; (80095c0 <USBD_SetConfig+0x148>)
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	461a      	mov	r2, r3
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	429a      	cmp	r2, r3
 800953a:	d02a      	beq.n	8009592 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	b2db      	uxtb	r3, r3
 8009542:	4619      	mov	r1, r3
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f7ff f929 	bl	800879c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800954a:	4b1d      	ldr	r3, [pc, #116]	; (80095c0 <USBD_SetConfig+0x148>)
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	461a      	mov	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009554:	4b1a      	ldr	r3, [pc, #104]	; (80095c0 <USBD_SetConfig+0x148>)
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	4619      	mov	r1, r3
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f7ff f902 	bl	8008764 <USBD_SetClassConfig>
 8009560:	4603      	mov	r3, r0
 8009562:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009564:	7bfb      	ldrb	r3, [r7, #15]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d00f      	beq.n	800958a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800956a:	6839      	ldr	r1, [r7, #0]
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 f903 	bl	8009778 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	b2db      	uxtb	r3, r3
 8009578:	4619      	mov	r1, r3
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f7ff f90e 	bl	800879c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2202      	movs	r2, #2
 8009584:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009588:	e014      	b.n	80095b4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 f9bf 	bl	800990e <USBD_CtlSendStatus>
      break;
 8009590:	e010      	b.n	80095b4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 f9bb 	bl	800990e <USBD_CtlSendStatus>
      break;
 8009598:	e00c      	b.n	80095b4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800959a:	6839      	ldr	r1, [r7, #0]
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 f8eb 	bl	8009778 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80095a2:	4b07      	ldr	r3, [pc, #28]	; (80095c0 <USBD_SetConfig+0x148>)
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	4619      	mov	r1, r3
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f7ff f8f7 	bl	800879c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80095ae:	2303      	movs	r3, #3
 80095b0:	73fb      	strb	r3, [r7, #15]
      break;
 80095b2:	bf00      	nop
  }

  return ret;
 80095b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	24000266 	.word	0x24000266

080095c4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	88db      	ldrh	r3, [r3, #6]
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d004      	beq.n	80095e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80095d6:	6839      	ldr	r1, [r7, #0]
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 f8cd 	bl	8009778 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80095de:	e023      	b.n	8009628 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	2b02      	cmp	r3, #2
 80095ea:	dc02      	bgt.n	80095f2 <USBD_GetConfig+0x2e>
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	dc03      	bgt.n	80095f8 <USBD_GetConfig+0x34>
 80095f0:	e015      	b.n	800961e <USBD_GetConfig+0x5a>
 80095f2:	2b03      	cmp	r3, #3
 80095f4:	d00b      	beq.n	800960e <USBD_GetConfig+0x4a>
 80095f6:	e012      	b.n	800961e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	3308      	adds	r3, #8
 8009602:	2201      	movs	r2, #1
 8009604:	4619      	mov	r1, r3
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 f927 	bl	800985a <USBD_CtlSendData>
        break;
 800960c:	e00c      	b.n	8009628 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	3304      	adds	r3, #4
 8009612:	2201      	movs	r2, #1
 8009614:	4619      	mov	r1, r3
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 f91f 	bl	800985a <USBD_CtlSendData>
        break;
 800961c:	e004      	b.n	8009628 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800961e:	6839      	ldr	r1, [r7, #0]
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 f8a9 	bl	8009778 <USBD_CtlError>
        break;
 8009626:	bf00      	nop
}
 8009628:	bf00      	nop
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009640:	b2db      	uxtb	r3, r3
 8009642:	3b01      	subs	r3, #1
 8009644:	2b02      	cmp	r3, #2
 8009646:	d81e      	bhi.n	8009686 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	88db      	ldrh	r3, [r3, #6]
 800964c:	2b02      	cmp	r3, #2
 800964e:	d004      	beq.n	800965a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009650:	6839      	ldr	r1, [r7, #0]
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f890 	bl	8009778 <USBD_CtlError>
        break;
 8009658:	e01a      	b.n	8009690 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2201      	movs	r2, #1
 800965e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009666:	2b00      	cmp	r3, #0
 8009668:	d005      	beq.n	8009676 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	68db      	ldr	r3, [r3, #12]
 800966e:	f043 0202 	orr.w	r2, r3, #2
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	330c      	adds	r3, #12
 800967a:	2202      	movs	r2, #2
 800967c:	4619      	mov	r1, r3
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 f8eb 	bl	800985a <USBD_CtlSendData>
      break;
 8009684:	e004      	b.n	8009690 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009686:	6839      	ldr	r1, [r7, #0]
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 f875 	bl	8009778 <USBD_CtlError>
      break;
 800968e:	bf00      	nop
  }
}
 8009690:	bf00      	nop
 8009692:	3708      	adds	r7, #8
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	885b      	ldrh	r3, [r3, #2]
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d106      	bne.n	80096b8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2201      	movs	r2, #1
 80096ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 f92b 	bl	800990e <USBD_CtlSendStatus>
  }
}
 80096b8:	bf00      	nop
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	3b01      	subs	r3, #1
 80096d4:	2b02      	cmp	r3, #2
 80096d6:	d80b      	bhi.n	80096f0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	885b      	ldrh	r3, [r3, #2]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d10c      	bne.n	80096fa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 f910 	bl	800990e <USBD_CtlSendStatus>
      }
      break;
 80096ee:	e004      	b.n	80096fa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80096f0:	6839      	ldr	r1, [r7, #0]
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f840 	bl	8009778 <USBD_CtlError>
      break;
 80096f8:	e000      	b.n	80096fc <USBD_ClrFeature+0x3c>
      break;
 80096fa:	bf00      	nop
  }
}
 80096fc:	bf00      	nop
 80096fe:	3708      	adds	r7, #8
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b084      	sub	sp, #16
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	781a      	ldrb	r2, [r3, #0]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	3301      	adds	r3, #1
 800971e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	781a      	ldrb	r2, [r3, #0]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	3301      	adds	r3, #1
 800972c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800972e:	68f8      	ldr	r0, [r7, #12]
 8009730:	f7ff fabb 	bl	8008caa <SWAPBYTE>
 8009734:	4603      	mov	r3, r0
 8009736:	461a      	mov	r2, r3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	3301      	adds	r3, #1
 8009740:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	3301      	adds	r3, #1
 8009746:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009748:	68f8      	ldr	r0, [r7, #12]
 800974a:	f7ff faae 	bl	8008caa <SWAPBYTE>
 800974e:	4603      	mov	r3, r0
 8009750:	461a      	mov	r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	3301      	adds	r3, #1
 800975a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	3301      	adds	r3, #1
 8009760:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	f7ff faa1 	bl	8008caa <SWAPBYTE>
 8009768:	4603      	mov	r3, r0
 800976a:	461a      	mov	r2, r3
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	80da      	strh	r2, [r3, #6]
}
 8009770:	bf00      	nop
 8009772:	3710      	adds	r7, #16
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009782:	2180      	movs	r1, #128	; 0x80
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fd0b 	bl	800a1a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800978a:	2100      	movs	r1, #0
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 fd07 	bl	800a1a0 <USBD_LL_StallEP>
}
 8009792:	bf00      	nop
 8009794:	3708      	adds	r7, #8
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b086      	sub	sp, #24
 800979e:	af00      	add	r7, sp, #0
 80097a0:	60f8      	str	r0, [r7, #12]
 80097a2:	60b9      	str	r1, [r7, #8]
 80097a4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80097a6:	2300      	movs	r3, #0
 80097a8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d036      	beq.n	800981e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80097b4:	6938      	ldr	r0, [r7, #16]
 80097b6:	f000 f836 	bl	8009826 <USBD_GetLen>
 80097ba:	4603      	mov	r3, r0
 80097bc:	3301      	adds	r3, #1
 80097be:	b29b      	uxth	r3, r3
 80097c0:	005b      	lsls	r3, r3, #1
 80097c2:	b29a      	uxth	r2, r3
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80097c8:	7dfb      	ldrb	r3, [r7, #23]
 80097ca:	68ba      	ldr	r2, [r7, #8]
 80097cc:	4413      	add	r3, r2
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	7812      	ldrb	r2, [r2, #0]
 80097d2:	701a      	strb	r2, [r3, #0]
  idx++;
 80097d4:	7dfb      	ldrb	r3, [r7, #23]
 80097d6:	3301      	adds	r3, #1
 80097d8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80097da:	7dfb      	ldrb	r3, [r7, #23]
 80097dc:	68ba      	ldr	r2, [r7, #8]
 80097de:	4413      	add	r3, r2
 80097e0:	2203      	movs	r2, #3
 80097e2:	701a      	strb	r2, [r3, #0]
  idx++;
 80097e4:	7dfb      	ldrb	r3, [r7, #23]
 80097e6:	3301      	adds	r3, #1
 80097e8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80097ea:	e013      	b.n	8009814 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80097ec:	7dfb      	ldrb	r3, [r7, #23]
 80097ee:	68ba      	ldr	r2, [r7, #8]
 80097f0:	4413      	add	r3, r2
 80097f2:	693a      	ldr	r2, [r7, #16]
 80097f4:	7812      	ldrb	r2, [r2, #0]
 80097f6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	3301      	adds	r3, #1
 80097fc:	613b      	str	r3, [r7, #16]
    idx++;
 80097fe:	7dfb      	ldrb	r3, [r7, #23]
 8009800:	3301      	adds	r3, #1
 8009802:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009804:	7dfb      	ldrb	r3, [r7, #23]
 8009806:	68ba      	ldr	r2, [r7, #8]
 8009808:	4413      	add	r3, r2
 800980a:	2200      	movs	r2, #0
 800980c:	701a      	strb	r2, [r3, #0]
    idx++;
 800980e:	7dfb      	ldrb	r3, [r7, #23]
 8009810:	3301      	adds	r3, #1
 8009812:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d1e7      	bne.n	80097ec <USBD_GetString+0x52>
 800981c:	e000      	b.n	8009820 <USBD_GetString+0x86>
    return;
 800981e:	bf00      	nop
  }
}
 8009820:	3718      	adds	r7, #24
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009826:	b480      	push	{r7}
 8009828:	b085      	sub	sp, #20
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800982e:	2300      	movs	r3, #0
 8009830:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009836:	e005      	b.n	8009844 <USBD_GetLen+0x1e>
  {
    len++;
 8009838:	7bfb      	ldrb	r3, [r7, #15]
 800983a:	3301      	adds	r3, #1
 800983c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	3301      	adds	r3, #1
 8009842:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d1f5      	bne.n	8009838 <USBD_GetLen+0x12>
  }

  return len;
 800984c:	7bfb      	ldrb	r3, [r7, #15]
}
 800984e:	4618      	mov	r0, r3
 8009850:	3714      	adds	r7, #20
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr

0800985a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b084      	sub	sp, #16
 800985e:	af00      	add	r7, sp, #0
 8009860:	60f8      	str	r0, [r7, #12]
 8009862:	60b9      	str	r1, [r7, #8]
 8009864:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2202      	movs	r2, #2
 800986a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	687a      	ldr	r2, [r7, #4]
 8009872:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	68ba      	ldr	r2, [r7, #8]
 800987e:	2100      	movs	r1, #0
 8009880:	68f8      	ldr	r0, [r7, #12]
 8009882:	f000 fd16 	bl	800a2b2 <USBD_LL_Transmit>

  return USBD_OK;
 8009886:	2300      	movs	r3, #0
}
 8009888:	4618      	mov	r0, r3
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	68ba      	ldr	r2, [r7, #8]
 80098a0:	2100      	movs	r1, #0
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f000 fd05 	bl	800a2b2 <USBD_LL_Transmit>

  return USBD_OK;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b084      	sub	sp, #16
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	60f8      	str	r0, [r7, #12]
 80098ba:	60b9      	str	r1, [r7, #8]
 80098bc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2203      	movs	r2, #3
 80098c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	2100      	movs	r1, #0
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	f000 fd09 	bl	800a2f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	68ba      	ldr	r2, [r7, #8]
 80098fc:	2100      	movs	r1, #0
 80098fe:	68f8      	ldr	r0, [r7, #12]
 8009900:	f000 fcf8 	bl	800a2f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b082      	sub	sp, #8
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2204      	movs	r2, #4
 800991a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800991e:	2300      	movs	r3, #0
 8009920:	2200      	movs	r2, #0
 8009922:	2100      	movs	r1, #0
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 fcc4 	bl	800a2b2 <USBD_LL_Transmit>

  return USBD_OK;
 800992a:	2300      	movs	r3, #0
}
 800992c:	4618      	mov	r0, r3
 800992e:	3708      	adds	r7, #8
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2205      	movs	r2, #5
 8009940:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009944:	2300      	movs	r3, #0
 8009946:	2200      	movs	r2, #0
 8009948:	2100      	movs	r1, #0
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 fcd2 	bl	800a2f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009950:	2300      	movs	r3, #0
}
 8009952:	4618      	mov	r0, r3
 8009954:	3708      	adds	r7, #8
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
	...

0800995c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8009960:	2201      	movs	r2, #1
 8009962:	4913      	ldr	r1, [pc, #76]	; (80099b0 <MX_USB_DEVICE_Init+0x54>)
 8009964:	4813      	ldr	r0, [pc, #76]	; (80099b4 <MX_USB_DEVICE_Init+0x58>)
 8009966:	f7fe fe8f 	bl	8008688 <USBD_Init>
 800996a:	4603      	mov	r3, r0
 800996c:	2b00      	cmp	r3, #0
 800996e:	d001      	beq.n	8009974 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009970:	f7f7 f83c 	bl	80009ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8009974:	4910      	ldr	r1, [pc, #64]	; (80099b8 <MX_USB_DEVICE_Init+0x5c>)
 8009976:	480f      	ldr	r0, [pc, #60]	; (80099b4 <MX_USB_DEVICE_Init+0x58>)
 8009978:	f7fe feb6 	bl	80086e8 <USBD_RegisterClass>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d001      	beq.n	8009986 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009982:	f7f7 f833 	bl	80009ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8009986:	490d      	ldr	r1, [pc, #52]	; (80099bc <MX_USB_DEVICE_Init+0x60>)
 8009988:	480a      	ldr	r0, [pc, #40]	; (80099b4 <MX_USB_DEVICE_Init+0x58>)
 800998a:	f7fe fe07 	bl	800859c <USBD_CDC_RegisterInterface>
 800998e:	4603      	mov	r3, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	d001      	beq.n	8009998 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009994:	f7f7 f82a 	bl	80009ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8009998:	4806      	ldr	r0, [pc, #24]	; (80099b4 <MX_USB_DEVICE_Init+0x58>)
 800999a:	f7fe fecc 	bl	8008736 <USBD_Start>
 800999e:	4603      	mov	r3, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d001      	beq.n	80099a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80099a4:	f7f7 f822 	bl	80009ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80099a8:	f7f9 fc04 	bl	80031b4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80099ac:	bf00      	nop
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	24000134 	.word	0x24000134
 80099b4:	24000618 	.word	0x24000618
 80099b8:	2400001c 	.word	0x2400001c
 80099bc:	24000120 	.word	0x24000120

080099c0 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80099c4:	2200      	movs	r2, #0
 80099c6:	4905      	ldr	r1, [pc, #20]	; (80099dc <CDC_Init_HS+0x1c>)
 80099c8:	4805      	ldr	r0, [pc, #20]	; (80099e0 <CDC_Init_HS+0x20>)
 80099ca:	f7fe fdfc 	bl	80085c6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80099ce:	4905      	ldr	r1, [pc, #20]	; (80099e4 <CDC_Init_HS+0x24>)
 80099d0:	4803      	ldr	r0, [pc, #12]	; (80099e0 <CDC_Init_HS+0x20>)
 80099d2:	f7fe fe16 	bl	8008602 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80099d6:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80099d8:	4618      	mov	r0, r3
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	240010e8 	.word	0x240010e8
 80099e0:	24000618 	.word	0x24000618
 80099e4:	240008e8 	.word	0x240008e8

080099e8 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80099e8:	b480      	push	{r7}
 80099ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80099ec:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr

080099f8 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b083      	sub	sp, #12
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	4603      	mov	r3, r0
 8009a00:	6039      	str	r1, [r7, #0]
 8009a02:	71fb      	strb	r3, [r7, #7]
 8009a04:	4613      	mov	r3, r2
 8009a06:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8009a08:	79fb      	ldrb	r3, [r7, #7]
 8009a0a:	2b23      	cmp	r3, #35	; 0x23
 8009a0c:	d84a      	bhi.n	8009aa4 <CDC_Control_HS+0xac>
 8009a0e:	a201      	add	r2, pc, #4	; (adr r2, 8009a14 <CDC_Control_HS+0x1c>)
 8009a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a14:	08009aa5 	.word	0x08009aa5
 8009a18:	08009aa5 	.word	0x08009aa5
 8009a1c:	08009aa5 	.word	0x08009aa5
 8009a20:	08009aa5 	.word	0x08009aa5
 8009a24:	08009aa5 	.word	0x08009aa5
 8009a28:	08009aa5 	.word	0x08009aa5
 8009a2c:	08009aa5 	.word	0x08009aa5
 8009a30:	08009aa5 	.word	0x08009aa5
 8009a34:	08009aa5 	.word	0x08009aa5
 8009a38:	08009aa5 	.word	0x08009aa5
 8009a3c:	08009aa5 	.word	0x08009aa5
 8009a40:	08009aa5 	.word	0x08009aa5
 8009a44:	08009aa5 	.word	0x08009aa5
 8009a48:	08009aa5 	.word	0x08009aa5
 8009a4c:	08009aa5 	.word	0x08009aa5
 8009a50:	08009aa5 	.word	0x08009aa5
 8009a54:	08009aa5 	.word	0x08009aa5
 8009a58:	08009aa5 	.word	0x08009aa5
 8009a5c:	08009aa5 	.word	0x08009aa5
 8009a60:	08009aa5 	.word	0x08009aa5
 8009a64:	08009aa5 	.word	0x08009aa5
 8009a68:	08009aa5 	.word	0x08009aa5
 8009a6c:	08009aa5 	.word	0x08009aa5
 8009a70:	08009aa5 	.word	0x08009aa5
 8009a74:	08009aa5 	.word	0x08009aa5
 8009a78:	08009aa5 	.word	0x08009aa5
 8009a7c:	08009aa5 	.word	0x08009aa5
 8009a80:	08009aa5 	.word	0x08009aa5
 8009a84:	08009aa5 	.word	0x08009aa5
 8009a88:	08009aa5 	.word	0x08009aa5
 8009a8c:	08009aa5 	.word	0x08009aa5
 8009a90:	08009aa5 	.word	0x08009aa5
 8009a94:	08009aa5 	.word	0x08009aa5
 8009a98:	08009aa5 	.word	0x08009aa5
 8009a9c:	08009aa5 	.word	0x08009aa5
 8009aa0:	08009aa5 	.word	0x08009aa5
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009aa4:	bf00      	nop
  }

  return (USBD_OK);
 8009aa6:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	370c      	adds	r7, #12
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8009abe:	6879      	ldr	r1, [r7, #4]
 8009ac0:	480f      	ldr	r0, [pc, #60]	; (8009b00 <CDC_Receive_HS+0x4c>)
 8009ac2:	f7fe fd9e 	bl	8008602 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8009ac6:	480e      	ldr	r0, [pc, #56]	; (8009b00 <CDC_Receive_HS+0x4c>)
 8009ac8:	f7fe fdb4 	bl	8008634 <USBD_CDC_ReceivePacket>

  uint8_t len = (uint8_t) *Len;
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	73fb      	strb	r3, [r7, #15]
  memset (buffer, '\0', 64);
 8009ad2:	2240      	movs	r2, #64	; 0x40
 8009ad4:	2100      	movs	r1, #0
 8009ad6:	480b      	ldr	r0, [pc, #44]	; (8009b04 <CDC_Receive_HS+0x50>)
 8009ad8:	f000 fcb6 	bl	800a448 <memset>
  memcpy (buffer, Buf, len);
 8009adc:	7bfb      	ldrb	r3, [r7, #15]
 8009ade:	461a      	mov	r2, r3
 8009ae0:	6879      	ldr	r1, [r7, #4]
 8009ae2:	4808      	ldr	r0, [pc, #32]	; (8009b04 <CDC_Receive_HS+0x50>)
 8009ae4:	f000 fca2 	bl	800a42c <memcpy>
  memset (Buf, '\0', len);
 8009ae8:	7bfb      	ldrb	r3, [r7, #15]
 8009aea:	461a      	mov	r2, r3
 8009aec:	2100      	movs	r1, #0
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 fcaa 	bl	800a448 <memset>
  return (USBD_OK);
 8009af4:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	24000618 	.word	0x24000618
 8009b04:	24000518 	.word	0x24000518

08009b08 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b087      	sub	sp, #28
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	4613      	mov	r3, r2
 8009b14:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009b16:	2300      	movs	r3, #0
 8009b18:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8009b1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	371c      	adds	r7, #28
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr
	...

08009b2c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	4603      	mov	r3, r0
 8009b34:	6039      	str	r1, [r7, #0]
 8009b36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	2212      	movs	r2, #18
 8009b3c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8009b3e:	4b03      	ldr	r3, [pc, #12]	; (8009b4c <USBD_HS_DeviceDescriptor+0x20>)
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr
 8009b4c:	24000150 	.word	0x24000150

08009b50 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	4603      	mov	r3, r0
 8009b58:	6039      	str	r1, [r7, #0]
 8009b5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	2204      	movs	r2, #4
 8009b60:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009b62:	4b03      	ldr	r3, [pc, #12]	; (8009b70 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	370c      	adds	r7, #12
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr
 8009b70:	24000164 	.word	0x24000164

08009b74 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	6039      	str	r1, [r7, #0]
 8009b7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b80:	79fb      	ldrb	r3, [r7, #7]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d105      	bne.n	8009b92 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009b86:	683a      	ldr	r2, [r7, #0]
 8009b88:	4907      	ldr	r1, [pc, #28]	; (8009ba8 <USBD_HS_ProductStrDescriptor+0x34>)
 8009b8a:	4808      	ldr	r0, [pc, #32]	; (8009bac <USBD_HS_ProductStrDescriptor+0x38>)
 8009b8c:	f7ff fe05 	bl	800979a <USBD_GetString>
 8009b90:	e004      	b.n	8009b9c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009b92:	683a      	ldr	r2, [r7, #0]
 8009b94:	4904      	ldr	r1, [pc, #16]	; (8009ba8 <USBD_HS_ProductStrDescriptor+0x34>)
 8009b96:	4805      	ldr	r0, [pc, #20]	; (8009bac <USBD_HS_ProductStrDescriptor+0x38>)
 8009b98:	f7ff fdff 	bl	800979a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b9c:	4b02      	ldr	r3, [pc, #8]	; (8009ba8 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3708      	adds	r7, #8
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	240018e8 	.word	0x240018e8
 8009bac:	0800a470 	.word	0x0800a470

08009bb0 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	6039      	str	r1, [r7, #0]
 8009bba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009bbc:	683a      	ldr	r2, [r7, #0]
 8009bbe:	4904      	ldr	r1, [pc, #16]	; (8009bd0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8009bc0:	4804      	ldr	r0, [pc, #16]	; (8009bd4 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8009bc2:	f7ff fdea 	bl	800979a <USBD_GetString>
  return USBD_StrDesc;
 8009bc6:	4b02      	ldr	r3, [pc, #8]	; (8009bd0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3708      	adds	r7, #8
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	240018e8 	.word	0x240018e8
 8009bd4:	0800a488 	.word	0x0800a488

08009bd8 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	4603      	mov	r3, r0
 8009be0:	6039      	str	r1, [r7, #0]
 8009be2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	221a      	movs	r2, #26
 8009be8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009bea:	f000 f843 	bl	8009c74 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009bee:	4b02      	ldr	r3, [pc, #8]	; (8009bf8 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3708      	adds	r7, #8
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}
 8009bf8:	24000168 	.word	0x24000168

08009bfc <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	4603      	mov	r3, r0
 8009c04:	6039      	str	r1, [r7, #0]
 8009c06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009c08:	79fb      	ldrb	r3, [r7, #7]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d105      	bne.n	8009c1a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009c0e:	683a      	ldr	r2, [r7, #0]
 8009c10:	4907      	ldr	r1, [pc, #28]	; (8009c30 <USBD_HS_ConfigStrDescriptor+0x34>)
 8009c12:	4808      	ldr	r0, [pc, #32]	; (8009c34 <USBD_HS_ConfigStrDescriptor+0x38>)
 8009c14:	f7ff fdc1 	bl	800979a <USBD_GetString>
 8009c18:	e004      	b.n	8009c24 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009c1a:	683a      	ldr	r2, [r7, #0]
 8009c1c:	4904      	ldr	r1, [pc, #16]	; (8009c30 <USBD_HS_ConfigStrDescriptor+0x34>)
 8009c1e:	4805      	ldr	r0, [pc, #20]	; (8009c34 <USBD_HS_ConfigStrDescriptor+0x38>)
 8009c20:	f7ff fdbb 	bl	800979a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c24:	4b02      	ldr	r3, [pc, #8]	; (8009c30 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3708      	adds	r7, #8
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	240018e8 	.word	0x240018e8
 8009c34:	0800a49c 	.word	0x0800a49c

08009c38 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	4603      	mov	r3, r0
 8009c40:	6039      	str	r1, [r7, #0]
 8009c42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c44:	79fb      	ldrb	r3, [r7, #7]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d105      	bne.n	8009c56 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8009c4a:	683a      	ldr	r2, [r7, #0]
 8009c4c:	4907      	ldr	r1, [pc, #28]	; (8009c6c <USBD_HS_InterfaceStrDescriptor+0x34>)
 8009c4e:	4808      	ldr	r0, [pc, #32]	; (8009c70 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8009c50:	f7ff fda3 	bl	800979a <USBD_GetString>
 8009c54:	e004      	b.n	8009c60 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8009c56:	683a      	ldr	r2, [r7, #0]
 8009c58:	4904      	ldr	r1, [pc, #16]	; (8009c6c <USBD_HS_InterfaceStrDescriptor+0x34>)
 8009c5a:	4805      	ldr	r0, [pc, #20]	; (8009c70 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8009c5c:	f7ff fd9d 	bl	800979a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c60:	4b02      	ldr	r3, [pc, #8]	; (8009c6c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3708      	adds	r7, #8
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	240018e8 	.word	0x240018e8
 8009c70:	0800a4a8 	.word	0x0800a4a8

08009c74 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009c7a:	4b0f      	ldr	r3, [pc, #60]	; (8009cb8 <Get_SerialNum+0x44>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009c80:	4b0e      	ldr	r3, [pc, #56]	; (8009cbc <Get_SerialNum+0x48>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009c86:	4b0e      	ldr	r3, [pc, #56]	; (8009cc0 <Get_SerialNum+0x4c>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	4413      	add	r3, r2
 8009c92:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d009      	beq.n	8009cae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009c9a:	2208      	movs	r2, #8
 8009c9c:	4909      	ldr	r1, [pc, #36]	; (8009cc4 <Get_SerialNum+0x50>)
 8009c9e:	68f8      	ldr	r0, [r7, #12]
 8009ca0:	f000 f814 	bl	8009ccc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009ca4:	2204      	movs	r2, #4
 8009ca6:	4908      	ldr	r1, [pc, #32]	; (8009cc8 <Get_SerialNum+0x54>)
 8009ca8:	68b8      	ldr	r0, [r7, #8]
 8009caa:	f000 f80f 	bl	8009ccc <IntToUnicode>
  }
}
 8009cae:	bf00      	nop
 8009cb0:	3710      	adds	r7, #16
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	1ff1e800 	.word	0x1ff1e800
 8009cbc:	1ff1e804 	.word	0x1ff1e804
 8009cc0:	1ff1e808 	.word	0x1ff1e808
 8009cc4:	2400016a 	.word	0x2400016a
 8009cc8:	2400017a 	.word	0x2400017a

08009ccc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b087      	sub	sp, #28
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	60b9      	str	r1, [r7, #8]
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009cde:	2300      	movs	r3, #0
 8009ce0:	75fb      	strb	r3, [r7, #23]
 8009ce2:	e027      	b.n	8009d34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	0f1b      	lsrs	r3, r3, #28
 8009ce8:	2b09      	cmp	r3, #9
 8009cea:	d80b      	bhi.n	8009d04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	0f1b      	lsrs	r3, r3, #28
 8009cf0:	b2da      	uxtb	r2, r3
 8009cf2:	7dfb      	ldrb	r3, [r7, #23]
 8009cf4:	005b      	lsls	r3, r3, #1
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	440b      	add	r3, r1
 8009cfc:	3230      	adds	r2, #48	; 0x30
 8009cfe:	b2d2      	uxtb	r2, r2
 8009d00:	701a      	strb	r2, [r3, #0]
 8009d02:	e00a      	b.n	8009d1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	0f1b      	lsrs	r3, r3, #28
 8009d08:	b2da      	uxtb	r2, r3
 8009d0a:	7dfb      	ldrb	r3, [r7, #23]
 8009d0c:	005b      	lsls	r3, r3, #1
 8009d0e:	4619      	mov	r1, r3
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	440b      	add	r3, r1
 8009d14:	3237      	adds	r2, #55	; 0x37
 8009d16:	b2d2      	uxtb	r2, r2
 8009d18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	011b      	lsls	r3, r3, #4
 8009d1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009d20:	7dfb      	ldrb	r3, [r7, #23]
 8009d22:	005b      	lsls	r3, r3, #1
 8009d24:	3301      	adds	r3, #1
 8009d26:	68ba      	ldr	r2, [r7, #8]
 8009d28:	4413      	add	r3, r2
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009d2e:	7dfb      	ldrb	r3, [r7, #23]
 8009d30:	3301      	adds	r3, #1
 8009d32:	75fb      	strb	r3, [r7, #23]
 8009d34:	7dfa      	ldrb	r2, [r7, #23]
 8009d36:	79fb      	ldrb	r3, [r7, #7]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d3d3      	bcc.n	8009ce4 <IntToUnicode+0x18>
  }
}
 8009d3c:	bf00      	nop
 8009d3e:	bf00      	nop
 8009d40:	371c      	adds	r7, #28
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr
	...

08009d4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b0b6      	sub	sp, #216	; 0xd8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d54:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009d58:	2200      	movs	r2, #0
 8009d5a:	601a      	str	r2, [r3, #0]
 8009d5c:	605a      	str	r2, [r3, #4]
 8009d5e:	609a      	str	r2, [r3, #8]
 8009d60:	60da      	str	r2, [r3, #12]
 8009d62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009d64:	f107 0310 	add.w	r3, r7, #16
 8009d68:	22b4      	movs	r2, #180	; 0xb4
 8009d6a:	2100      	movs	r1, #0
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f000 fb6b 	bl	800a448 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a33      	ldr	r2, [pc, #204]	; (8009e44 <HAL_PCD_MspInit+0xf8>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d15e      	bne.n	8009e3a <HAL_PCD_MspInit+0xee>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009d7c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009d80:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009d82:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8009d86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009d8a:	f107 0310 	add.w	r3, r7, #16
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7fa f958 	bl	8004044 <HAL_RCCEx_PeriphCLKConfig>
 8009d94:	4603      	mov	r3, r0
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d001      	beq.n	8009d9e <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8009d9a:	f7f6 fe27 	bl	80009ec <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8009d9e:	f7f9 fa09 	bl	80031b4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009da2:	4b29      	ldr	r3, [pc, #164]	; (8009e48 <HAL_PCD_MspInit+0xfc>)
 8009da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009da8:	4a27      	ldr	r2, [pc, #156]	; (8009e48 <HAL_PCD_MspInit+0xfc>)
 8009daa:	f043 0301 	orr.w	r3, r3, #1
 8009dae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009db2:	4b25      	ldr	r3, [pc, #148]	; (8009e48 <HAL_PCD_MspInit+0xfc>)
 8009db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009db8:	f003 0301 	and.w	r3, r3, #1
 8009dbc:	60fb      	str	r3, [r7, #12]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    PA10     ------> USB_OTG_HS_ID
    */
    GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8009dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009dc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8009dd4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009dd8:	4619      	mov	r1, r3
 8009dda:	481c      	ldr	r0, [pc, #112]	; (8009e4c <HAL_PCD_MspInit+0x100>)
 8009ddc:	f7f7 fe20 	bl	8001a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8009de0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009de4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009de8:	2302      	movs	r3, #2
 8009dea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dee:	2300      	movs	r3, #0
 8009df0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009df4:	2300      	movs	r3, #0
 8009df6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8009dfa:	230a      	movs	r3, #10
 8009dfc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8009e00:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009e04:	4619      	mov	r1, r3
 8009e06:	4811      	ldr	r0, [pc, #68]	; (8009e4c <HAL_PCD_MspInit+0x100>)
 8009e08:	f7f7 fe0a 	bl	8001a20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8009e0c:	4b0e      	ldr	r3, [pc, #56]	; (8009e48 <HAL_PCD_MspInit+0xfc>)
 8009e0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009e12:	4a0d      	ldr	r2, [pc, #52]	; (8009e48 <HAL_PCD_MspInit+0xfc>)
 8009e14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009e18:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009e1c:	4b0a      	ldr	r3, [pc, #40]	; (8009e48 <HAL_PCD_MspInit+0xfc>)
 8009e1e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e26:	60bb      	str	r3, [r7, #8]
 8009e28:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	204d      	movs	r0, #77	; 0x4d
 8009e30:	f7f7 f9ab 	bl	800118a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8009e34:	204d      	movs	r0, #77	; 0x4d
 8009e36:	f7f7 f9c2 	bl	80011be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8009e3a:	bf00      	nop
 8009e3c:	37d8      	adds	r7, #216	; 0xd8
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	40040000 	.word	0x40040000
 8009e48:	58024400 	.word	0x58024400
 8009e4c:	58020000 	.word	0x58020000

08009e50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009e64:	4619      	mov	r1, r3
 8009e66:	4610      	mov	r0, r2
 8009e68:	f7fe fcb0 	bl	80087cc <USBD_LL_SetupStage>
}
 8009e6c:	bf00      	nop
 8009e6e:	3708      	adds	r7, #8
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b082      	sub	sp, #8
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009e86:	78fa      	ldrb	r2, [r7, #3]
 8009e88:	6879      	ldr	r1, [r7, #4]
 8009e8a:	4613      	mov	r3, r2
 8009e8c:	00db      	lsls	r3, r3, #3
 8009e8e:	1a9b      	subs	r3, r3, r2
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	440b      	add	r3, r1
 8009e94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	78fb      	ldrb	r3, [r7, #3]
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	f7fe fcea 	bl	8008876 <USBD_LL_DataOutStage>
}
 8009ea2:	bf00      	nop
 8009ea4:	3708      	adds	r7, #8
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}

08009eaa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b082      	sub	sp, #8
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009ebc:	78fa      	ldrb	r2, [r7, #3]
 8009ebe:	6879      	ldr	r1, [r7, #4]
 8009ec0:	4613      	mov	r3, r2
 8009ec2:	00db      	lsls	r3, r3, #3
 8009ec4:	1a9b      	subs	r3, r3, r2
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	440b      	add	r3, r1
 8009eca:	3348      	adds	r3, #72	; 0x48
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	78fb      	ldrb	r3, [r7, #3]
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	f7fe fd33 	bl	800893c <USBD_LL_DataInStage>
}
 8009ed6:	bf00      	nop
 8009ed8:	3708      	adds	r7, #8
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b082      	sub	sp, #8
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009eec:	4618      	mov	r0, r3
 8009eee:	f7fe fe47 	bl	8008b80 <USBD_LL_SOF>
}
 8009ef2:	bf00      	nop
 8009ef4:	3708      	adds	r7, #8
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b084      	sub	sp, #16
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009f02:	2301      	movs	r3, #1
 8009f04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d102      	bne.n	8009f14 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	73fb      	strb	r3, [r7, #15]
 8009f12:	e008      	b.n	8009f26 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	2b02      	cmp	r3, #2
 8009f1a:	d102      	bne.n	8009f22 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	73fb      	strb	r3, [r7, #15]
 8009f20:	e001      	b.n	8009f26 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009f22:	f7f6 fd63 	bl	80009ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009f2c:	7bfa      	ldrb	r2, [r7, #15]
 8009f2e:	4611      	mov	r1, r2
 8009f30:	4618      	mov	r0, r3
 8009f32:	f7fe fde7 	bl	8008b04 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7fe fd93 	bl	8008a68 <USBD_LL_Reset>
}
 8009f42:	bf00      	nop
 8009f44:	3710      	adds	r7, #16
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
	...

08009f4c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7fe fde2 	bl	8008b24 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	6812      	ldr	r2, [r2, #0]
 8009f6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009f72:	f043 0301 	orr.w	r3, r3, #1
 8009f76:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6a1b      	ldr	r3, [r3, #32]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d005      	beq.n	8009f8c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f80:	4b04      	ldr	r3, [pc, #16]	; (8009f94 <HAL_PCD_SuspendCallback+0x48>)
 8009f82:	691b      	ldr	r3, [r3, #16]
 8009f84:	4a03      	ldr	r2, [pc, #12]	; (8009f94 <HAL_PCD_SuspendCallback+0x48>)
 8009f86:	f043 0306 	orr.w	r3, r3, #6
 8009f8a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009f8c:	bf00      	nop
 8009f8e:	3708      	adds	r7, #8
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	e000ed00 	.word	0xe000ed00

08009f98 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7fe fdd2 	bl	8008b50 <USBD_LL_Resume>
}
 8009fac:	bf00      	nop
 8009fae:	3708      	adds	r7, #8
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b082      	sub	sp, #8
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009fc6:	78fa      	ldrb	r2, [r7, #3]
 8009fc8:	4611      	mov	r1, r2
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7fe fe20 	bl	8008c10 <USBD_LL_IsoOUTIncomplete>
}
 8009fd0:	bf00      	nop
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009fea:	78fa      	ldrb	r2, [r7, #3]
 8009fec:	4611      	mov	r1, r2
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7fe fde8 	bl	8008bc4 <USBD_LL_IsoINIncomplete>
}
 8009ff4:	bf00      	nop
 8009ff6:	3708      	adds	r7, #8
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b082      	sub	sp, #8
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7fe fe26 	bl	8008c5c <USBD_LL_DevConnected>
}
 800a010:	bf00      	nop
 800a012:	3708      	adds	r7, #8
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a026:	4618      	mov	r0, r3
 800a028:	f7fe fe23 	bl	8008c72 <USBD_LL_DevDisconnected>
}
 800a02c:	bf00      	nop
 800a02e:	3708      	adds	r7, #8
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	2b01      	cmp	r3, #1
 800a042:	d143      	bne.n	800a0cc <USBD_LL_Init+0x98>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800a044:	4a24      	ldr	r2, [pc, #144]	; (800a0d8 <USBD_LL_Init+0xa4>)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_HS;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	4a22      	ldr	r2, [pc, #136]	; (800a0d8 <USBD_LL_Init+0xa4>)
 800a050:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800a054:	4b20      	ldr	r3, [pc, #128]	; (800a0d8 <USBD_LL_Init+0xa4>)
 800a056:	4a21      	ldr	r2, [pc, #132]	; (800a0dc <USBD_LL_Init+0xa8>)
 800a058:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800a05a:	4b1f      	ldr	r3, [pc, #124]	; (800a0d8 <USBD_LL_Init+0xa4>)
 800a05c:	2209      	movs	r2, #9
 800a05e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800a060:	4b1d      	ldr	r3, [pc, #116]	; (800a0d8 <USBD_LL_Init+0xa4>)
 800a062:	2202      	movs	r2, #2
 800a064:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800a066:	4b1c      	ldr	r3, [pc, #112]	; (800a0d8 <USBD_LL_Init+0xa4>)
 800a068:	2200      	movs	r2, #0
 800a06a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800a06c:	4b1a      	ldr	r3, [pc, #104]	; (800a0d8 <USBD_LL_Init+0xa4>)
 800a06e:	2202      	movs	r2, #2
 800a070:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800a072:	4b19      	ldr	r3, [pc, #100]	; (800a0d8 <USBD_LL_Init+0xa4>)
 800a074:	2200      	movs	r2, #0
 800a076:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800a078:	4b17      	ldr	r3, [pc, #92]	; (800a0d8 <USBD_LL_Init+0xa4>)
 800a07a:	2200      	movs	r2, #0
 800a07c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800a07e:	4b16      	ldr	r3, [pc, #88]	; (800a0d8 <USBD_LL_Init+0xa4>)
 800a080:	2200      	movs	r2, #0
 800a082:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.battery_charging_enable = ENABLE;
 800a084:	4b14      	ldr	r3, [pc, #80]	; (800a0d8 <USBD_LL_Init+0xa4>)
 800a086:	2201      	movs	r2, #1
 800a088:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 800a08a:	4b13      	ldr	r3, [pc, #76]	; (800a0d8 <USBD_LL_Init+0xa4>)
 800a08c:	2201      	movs	r2, #1
 800a08e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800a090:	4b11      	ldr	r3, [pc, #68]	; (800a0d8 <USBD_LL_Init+0xa4>)
 800a092:	2200      	movs	r2, #0
 800a094:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800a096:	4b10      	ldr	r3, [pc, #64]	; (800a0d8 <USBD_LL_Init+0xa4>)
 800a098:	2200      	movs	r2, #0
 800a09a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800a09c:	480e      	ldr	r0, [pc, #56]	; (800a0d8 <USBD_LL_Init+0xa4>)
 800a09e:	f7f7 fe80 	bl	8001da2 <HAL_PCD_Init>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d001      	beq.n	800a0ac <USBD_LL_Init+0x78>
  {
    Error_Handler( );
 800a0a8:	f7f6 fca0 	bl	80009ec <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800a0ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a0b0:	4809      	ldr	r0, [pc, #36]	; (800a0d8 <USBD_LL_Init+0xa4>)
 800a0b2:	f7f9 f804 	bl	80030be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800a0b6:	2280      	movs	r2, #128	; 0x80
 800a0b8:	2100      	movs	r1, #0
 800a0ba:	4807      	ldr	r0, [pc, #28]	; (800a0d8 <USBD_LL_Init+0xa4>)
 800a0bc:	f7f8 ffb8 	bl	8003030 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800a0c0:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800a0c4:	2101      	movs	r1, #1
 800a0c6:	4804      	ldr	r0, [pc, #16]	; (800a0d8 <USBD_LL_Init+0xa4>)
 800a0c8:	f7f8 ffb2 	bl	8003030 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3708      	adds	r7, #8
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	24001ae8 	.word	0x24001ae8
 800a0dc:	40040000 	.word	0x40040000

0800a0e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b084      	sub	sp, #16
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7f7 ff77 	bl	8001fea <HAL_PCD_Start>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a100:	7bfb      	ldrb	r3, [r7, #15]
 800a102:	4618      	mov	r0, r3
 800a104:	f000 f942 	bl	800a38c <USBD_Get_USB_Status>
 800a108:	4603      	mov	r3, r0
 800a10a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a10c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b084      	sub	sp, #16
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
 800a11e:	4608      	mov	r0, r1
 800a120:	4611      	mov	r1, r2
 800a122:	461a      	mov	r2, r3
 800a124:	4603      	mov	r3, r0
 800a126:	70fb      	strb	r3, [r7, #3]
 800a128:	460b      	mov	r3, r1
 800a12a:	70bb      	strb	r3, [r7, #2]
 800a12c:	4613      	mov	r3, r2
 800a12e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a130:	2300      	movs	r3, #0
 800a132:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a134:	2300      	movs	r3, #0
 800a136:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a13e:	78bb      	ldrb	r3, [r7, #2]
 800a140:	883a      	ldrh	r2, [r7, #0]
 800a142:	78f9      	ldrb	r1, [r7, #3]
 800a144:	f7f8 fb7c 	bl	8002840 <HAL_PCD_EP_Open>
 800a148:	4603      	mov	r3, r0
 800a14a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a14c:	7bfb      	ldrb	r3, [r7, #15]
 800a14e:	4618      	mov	r0, r3
 800a150:	f000 f91c 	bl	800a38c <USBD_Get_USB_Status>
 800a154:	4603      	mov	r3, r0
 800a156:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a158:	7bbb      	ldrb	r3, [r7, #14]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3710      	adds	r7, #16
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b084      	sub	sp, #16
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
 800a16a:	460b      	mov	r3, r1
 800a16c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a16e:	2300      	movs	r3, #0
 800a170:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a172:	2300      	movs	r3, #0
 800a174:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a17c:	78fa      	ldrb	r2, [r7, #3]
 800a17e:	4611      	mov	r1, r2
 800a180:	4618      	mov	r0, r3
 800a182:	f7f8 fbc5 	bl	8002910 <HAL_PCD_EP_Close>
 800a186:	4603      	mov	r3, r0
 800a188:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a18a:	7bfb      	ldrb	r3, [r7, #15]
 800a18c:	4618      	mov	r0, r3
 800a18e:	f000 f8fd 	bl	800a38c <USBD_Get_USB_Status>
 800a192:	4603      	mov	r3, r0
 800a194:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a196:	7bbb      	ldrb	r3, [r7, #14]
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3710      	adds	r7, #16
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a1ba:	78fa      	ldrb	r2, [r7, #3]
 800a1bc:	4611      	mov	r1, r2
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7f8 fc9d 	bl	8002afe <HAL_PCD_EP_SetStall>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1c8:	7bfb      	ldrb	r3, [r7, #15]
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f000 f8de 	bl	800a38c <USBD_Get_USB_Status>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3710      	adds	r7, #16
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b084      	sub	sp, #16
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a1f8:	78fa      	ldrb	r2, [r7, #3]
 800a1fa:	4611      	mov	r1, r2
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7f8 fce2 	bl	8002bc6 <HAL_PCD_EP_ClrStall>
 800a202:	4603      	mov	r3, r0
 800a204:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a206:	7bfb      	ldrb	r3, [r7, #15]
 800a208:	4618      	mov	r0, r3
 800a20a:	f000 f8bf 	bl	800a38c <USBD_Get_USB_Status>
 800a20e:	4603      	mov	r3, r0
 800a210:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a212:	7bbb      	ldrb	r3, [r7, #14]
}
 800a214:	4618      	mov	r0, r3
 800a216:	3710      	adds	r7, #16
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b085      	sub	sp, #20
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	460b      	mov	r3, r1
 800a226:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a22e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a230:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a234:	2b00      	cmp	r3, #0
 800a236:	da0b      	bge.n	800a250 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a238:	78fb      	ldrb	r3, [r7, #3]
 800a23a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a23e:	68f9      	ldr	r1, [r7, #12]
 800a240:	4613      	mov	r3, r2
 800a242:	00db      	lsls	r3, r3, #3
 800a244:	1a9b      	subs	r3, r3, r2
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	440b      	add	r3, r1
 800a24a:	333e      	adds	r3, #62	; 0x3e
 800a24c:	781b      	ldrb	r3, [r3, #0]
 800a24e:	e00b      	b.n	800a268 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a250:	78fb      	ldrb	r3, [r7, #3]
 800a252:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a256:	68f9      	ldr	r1, [r7, #12]
 800a258:	4613      	mov	r3, r2
 800a25a:	00db      	lsls	r3, r3, #3
 800a25c:	1a9b      	subs	r3, r3, r2
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	440b      	add	r3, r1
 800a262:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a266:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3714      	adds	r7, #20
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	460b      	mov	r3, r1
 800a27e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a280:	2300      	movs	r3, #0
 800a282:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a284:	2300      	movs	r3, #0
 800a286:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a28e:	78fa      	ldrb	r2, [r7, #3]
 800a290:	4611      	mov	r1, r2
 800a292:	4618      	mov	r0, r3
 800a294:	f7f8 faaf 	bl	80027f6 <HAL_PCD_SetAddress>
 800a298:	4603      	mov	r3, r0
 800a29a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a29c:	7bfb      	ldrb	r3, [r7, #15]
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f000 f874 	bl	800a38c <USBD_Get_USB_Status>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b086      	sub	sp, #24
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	60f8      	str	r0, [r7, #12]
 800a2ba:	607a      	str	r2, [r7, #4]
 800a2bc:	603b      	str	r3, [r7, #0]
 800a2be:	460b      	mov	r3, r1
 800a2c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a2d0:	7af9      	ldrb	r1, [r7, #11]
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	f7f8 fbc8 	bl	8002a6a <HAL_PCD_EP_Transmit>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2de:	7dfb      	ldrb	r3, [r7, #23]
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f000 f853 	bl	800a38c <USBD_Get_USB_Status>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a2ea:	7dbb      	ldrb	r3, [r7, #22]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3718      	adds	r7, #24
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b086      	sub	sp, #24
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	60f8      	str	r0, [r7, #12]
 800a2fc:	607a      	str	r2, [r7, #4]
 800a2fe:	603b      	str	r3, [r7, #0]
 800a300:	460b      	mov	r3, r1
 800a302:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a304:	2300      	movs	r3, #0
 800a306:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a308:	2300      	movs	r3, #0
 800a30a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a312:	7af9      	ldrb	r1, [r7, #11]
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	f7f8 fb44 	bl	80029a4 <HAL_PCD_EP_Receive>
 800a31c:	4603      	mov	r3, r0
 800a31e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a320:	7dfb      	ldrb	r3, [r7, #23]
 800a322:	4618      	mov	r0, r3
 800a324:	f000 f832 	bl	800a38c <USBD_Get_USB_Status>
 800a328:	4603      	mov	r3, r0
 800a32a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a32c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3718      	adds	r7, #24
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b082      	sub	sp, #8
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
 800a33e:	460b      	mov	r3, r1
 800a340:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a348:	78fa      	ldrb	r2, [r7, #3]
 800a34a:	4611      	mov	r1, r2
 800a34c:	4618      	mov	r0, r3
 800a34e:	f7f8 fb74 	bl	8002a3a <HAL_PCD_EP_GetRxCount>
 800a352:	4603      	mov	r3, r0
}
 800a354:	4618      	mov	r0, r3
 800a356:	3708      	adds	r7, #8
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a364:	4b03      	ldr	r3, [pc, #12]	; (800a374 <USBD_static_malloc+0x18>)
}
 800a366:	4618      	mov	r0, r3
 800a368:	370c      	adds	r7, #12
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr
 800a372:	bf00      	nop
 800a374:	24000268 	.word	0x24000268

0800a378 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]

}
 800a380:	bf00      	nop
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b085      	sub	sp, #20
 800a390:	af00      	add	r7, sp, #0
 800a392:	4603      	mov	r3, r0
 800a394:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a396:	2300      	movs	r3, #0
 800a398:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a39a:	79fb      	ldrb	r3, [r7, #7]
 800a39c:	2b03      	cmp	r3, #3
 800a39e:	d817      	bhi.n	800a3d0 <USBD_Get_USB_Status+0x44>
 800a3a0:	a201      	add	r2, pc, #4	; (adr r2, 800a3a8 <USBD_Get_USB_Status+0x1c>)
 800a3a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a6:	bf00      	nop
 800a3a8:	0800a3b9 	.word	0x0800a3b9
 800a3ac:	0800a3bf 	.word	0x0800a3bf
 800a3b0:	0800a3c5 	.word	0x0800a3c5
 800a3b4:	0800a3cb 	.word	0x0800a3cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	73fb      	strb	r3, [r7, #15]
    break;
 800a3bc:	e00b      	b.n	800a3d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a3be:	2303      	movs	r3, #3
 800a3c0:	73fb      	strb	r3, [r7, #15]
    break;
 800a3c2:	e008      	b.n	800a3d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	73fb      	strb	r3, [r7, #15]
    break;
 800a3c8:	e005      	b.n	800a3d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a3ca:	2303      	movs	r3, #3
 800a3cc:	73fb      	strb	r3, [r7, #15]
    break;
 800a3ce:	e002      	b.n	800a3d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a3d0:	2303      	movs	r3, #3
 800a3d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a3d4:	bf00      	nop
  }
  return usb_status;
 800a3d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3714      	adds	r7, #20
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <__libc_init_array>:
 800a3e4:	b570      	push	{r4, r5, r6, lr}
 800a3e6:	4d0d      	ldr	r5, [pc, #52]	; (800a41c <__libc_init_array+0x38>)
 800a3e8:	4c0d      	ldr	r4, [pc, #52]	; (800a420 <__libc_init_array+0x3c>)
 800a3ea:	1b64      	subs	r4, r4, r5
 800a3ec:	10a4      	asrs	r4, r4, #2
 800a3ee:	2600      	movs	r6, #0
 800a3f0:	42a6      	cmp	r6, r4
 800a3f2:	d109      	bne.n	800a408 <__libc_init_array+0x24>
 800a3f4:	4d0b      	ldr	r5, [pc, #44]	; (800a424 <__libc_init_array+0x40>)
 800a3f6:	4c0c      	ldr	r4, [pc, #48]	; (800a428 <__libc_init_array+0x44>)
 800a3f8:	f000 f82e 	bl	800a458 <_init>
 800a3fc:	1b64      	subs	r4, r4, r5
 800a3fe:	10a4      	asrs	r4, r4, #2
 800a400:	2600      	movs	r6, #0
 800a402:	42a6      	cmp	r6, r4
 800a404:	d105      	bne.n	800a412 <__libc_init_array+0x2e>
 800a406:	bd70      	pop	{r4, r5, r6, pc}
 800a408:	f855 3b04 	ldr.w	r3, [r5], #4
 800a40c:	4798      	blx	r3
 800a40e:	3601      	adds	r6, #1
 800a410:	e7ee      	b.n	800a3f0 <__libc_init_array+0xc>
 800a412:	f855 3b04 	ldr.w	r3, [r5], #4
 800a416:	4798      	blx	r3
 800a418:	3601      	adds	r6, #1
 800a41a:	e7f2      	b.n	800a402 <__libc_init_array+0x1e>
 800a41c:	0800a4f8 	.word	0x0800a4f8
 800a420:	0800a4f8 	.word	0x0800a4f8
 800a424:	0800a4f8 	.word	0x0800a4f8
 800a428:	0800a4fc 	.word	0x0800a4fc

0800a42c <memcpy>:
 800a42c:	440a      	add	r2, r1
 800a42e:	4291      	cmp	r1, r2
 800a430:	f100 33ff 	add.w	r3, r0, #4294967295
 800a434:	d100      	bne.n	800a438 <memcpy+0xc>
 800a436:	4770      	bx	lr
 800a438:	b510      	push	{r4, lr}
 800a43a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a43e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a442:	4291      	cmp	r1, r2
 800a444:	d1f9      	bne.n	800a43a <memcpy+0xe>
 800a446:	bd10      	pop	{r4, pc}

0800a448 <memset>:
 800a448:	4402      	add	r2, r0
 800a44a:	4603      	mov	r3, r0
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d100      	bne.n	800a452 <memset+0xa>
 800a450:	4770      	bx	lr
 800a452:	f803 1b01 	strb.w	r1, [r3], #1
 800a456:	e7f9      	b.n	800a44c <memset+0x4>

0800a458 <_init>:
 800a458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a45a:	bf00      	nop
 800a45c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a45e:	bc08      	pop	{r3}
 800a460:	469e      	mov	lr, r3
 800a462:	4770      	bx	lr

0800a464 <_fini>:
 800a464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a466:	bf00      	nop
 800a468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a46a:	bc08      	pop	{r3}
 800a46c:	469e      	mov	lr, r3
 800a46e:	4770      	bx	lr
