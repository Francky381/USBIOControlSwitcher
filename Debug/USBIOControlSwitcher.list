
USBIOControlSwitcher.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f7f8  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800fac4  0800fac4  0001fac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fb74  0800fb74  0001fb74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fb7c  0800fb7c  0001fb7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fb80  0800fb80  0001fb80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000184  24000000  0800fb84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000184  0800fd08  00020184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240001e4  0800fd68  000201e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001db8  24000244  0800fdc8  00020244  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24001ffc  0800fdc8  00021ffc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037422  00000000  00000000  00020272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005408  00000000  00000000  00057694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001910  00000000  00000000  0005caa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001778  00000000  00000000  0005e3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038e9f  00000000  00000000  0005fb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022eea  00000000  00000000  000989c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016346d  00000000  00000000  000bb8b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0021ed1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b74  00000000  00000000  0021ed74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000244 	.word	0x24000244
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800faac 	.word	0x0800faac

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000248 	.word	0x24000248
 8000308:	0800faac 	.word	0x0800faac

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96e 	b.w	8000600 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	4604      	mov	r4, r0
 8000344:	468c      	mov	ip, r1
 8000346:	2b00      	cmp	r3, #0
 8000348:	f040 8083 	bne.w	8000452 <__udivmoddi4+0x116>
 800034c:	428a      	cmp	r2, r1
 800034e:	4617      	mov	r7, r2
 8000350:	d947      	bls.n	80003e2 <__udivmoddi4+0xa6>
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	b142      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000358:	f1c2 0020 	rsb	r0, r2, #32
 800035c:	fa24 f000 	lsr.w	r0, r4, r0
 8000360:	4091      	lsls	r1, r2
 8000362:	4097      	lsls	r7, r2
 8000364:	ea40 0c01 	orr.w	ip, r0, r1
 8000368:	4094      	lsls	r4, r2
 800036a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800036e:	0c23      	lsrs	r3, r4, #16
 8000370:	fbbc f6f8 	udiv	r6, ip, r8
 8000374:	fa1f fe87 	uxth.w	lr, r7
 8000378:	fb08 c116 	mls	r1, r8, r6, ip
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f10e 	mul.w	r1, r6, lr
 8000384:	4299      	cmp	r1, r3
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x60>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 30ff 	add.w	r0, r6, #4294967295
 800038e:	f080 8119 	bcs.w	80005c4 <__udivmoddi4+0x288>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 8116 	bls.w	80005c4 <__udivmoddi4+0x288>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a4:	fb08 3310 	mls	r3, r8, r0, r3
 80003a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003ac:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x8c>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	f080 8105 	bcs.w	80005c8 <__udivmoddi4+0x28c>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f240 8102 	bls.w	80005c8 <__udivmoddi4+0x28c>
 80003c4:	3802      	subs	r0, #2
 80003c6:	443c      	add	r4, r7
 80003c8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	2600      	movs	r6, #0
 80003d2:	b11d      	cbz	r5, 80003dc <__udivmoddi4+0xa0>
 80003d4:	40d4      	lsrs	r4, r2
 80003d6:	2300      	movs	r3, #0
 80003d8:	e9c5 4300 	strd	r4, r3, [r5]
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xaa>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f282 	clz	r2, r2
 80003ea:	2a00      	cmp	r2, #0
 80003ec:	d150      	bne.n	8000490 <__udivmoddi4+0x154>
 80003ee:	1bcb      	subs	r3, r1, r7
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f f887 	uxth.w	r8, r7
 80003f8:	2601      	movs	r6, #1
 80003fa:	fbb3 fcfe 	udiv	ip, r3, lr
 80003fe:	0c21      	lsrs	r1, r4, #16
 8000400:	fb0e 331c 	mls	r3, lr, ip, r3
 8000404:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000408:	fb08 f30c 	mul.w	r3, r8, ip
 800040c:	428b      	cmp	r3, r1
 800040e:	d907      	bls.n	8000420 <__udivmoddi4+0xe4>
 8000410:	1879      	adds	r1, r7, r1
 8000412:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0xe2>
 8000418:	428b      	cmp	r3, r1
 800041a:	f200 80e9 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 800041e:	4684      	mov	ip, r0
 8000420:	1ac9      	subs	r1, r1, r3
 8000422:	b2a3      	uxth	r3, r4
 8000424:	fbb1 f0fe 	udiv	r0, r1, lr
 8000428:	fb0e 1110 	mls	r1, lr, r0, r1
 800042c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000430:	fb08 f800 	mul.w	r8, r8, r0
 8000434:	45a0      	cmp	r8, r4
 8000436:	d907      	bls.n	8000448 <__udivmoddi4+0x10c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x10a>
 8000440:	45a0      	cmp	r8, r4
 8000442:	f200 80d9 	bhi.w	80005f8 <__udivmoddi4+0x2bc>
 8000446:	4618      	mov	r0, r3
 8000448:	eba4 0408 	sub.w	r4, r4, r8
 800044c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000450:	e7bf      	b.n	80003d2 <__udivmoddi4+0x96>
 8000452:	428b      	cmp	r3, r1
 8000454:	d909      	bls.n	800046a <__udivmoddi4+0x12e>
 8000456:	2d00      	cmp	r5, #0
 8000458:	f000 80b1 	beq.w	80005be <__udivmoddi4+0x282>
 800045c:	2600      	movs	r6, #0
 800045e:	e9c5 0100 	strd	r0, r1, [r5]
 8000462:	4630      	mov	r0, r6
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	fab3 f683 	clz	r6, r3
 800046e:	2e00      	cmp	r6, #0
 8000470:	d14a      	bne.n	8000508 <__udivmoddi4+0x1cc>
 8000472:	428b      	cmp	r3, r1
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0x140>
 8000476:	4282      	cmp	r2, r0
 8000478:	f200 80b8 	bhi.w	80005ec <__udivmoddi4+0x2b0>
 800047c:	1a84      	subs	r4, r0, r2
 800047e:	eb61 0103 	sbc.w	r1, r1, r3
 8000482:	2001      	movs	r0, #1
 8000484:	468c      	mov	ip, r1
 8000486:	2d00      	cmp	r5, #0
 8000488:	d0a8      	beq.n	80003dc <__udivmoddi4+0xa0>
 800048a:	e9c5 4c00 	strd	r4, ip, [r5]
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0xa0>
 8000490:	f1c2 0320 	rsb	r3, r2, #32
 8000494:	fa20 f603 	lsr.w	r6, r0, r3
 8000498:	4097      	lsls	r7, r2
 800049a:	fa01 f002 	lsl.w	r0, r1, r2
 800049e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a2:	40d9      	lsrs	r1, r3
 80004a4:	4330      	orrs	r0, r6
 80004a6:	0c03      	lsrs	r3, r0, #16
 80004a8:	fbb1 f6fe 	udiv	r6, r1, lr
 80004ac:	fa1f f887 	uxth.w	r8, r7
 80004b0:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004b8:	fb06 f108 	mul.w	r1, r6, r8
 80004bc:	4299      	cmp	r1, r3
 80004be:	fa04 f402 	lsl.w	r4, r4, r2
 80004c2:	d909      	bls.n	80004d8 <__udivmoddi4+0x19c>
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ca:	f080 808d 	bcs.w	80005e8 <__udivmoddi4+0x2ac>
 80004ce:	4299      	cmp	r1, r3
 80004d0:	f240 808a 	bls.w	80005e8 <__udivmoddi4+0x2ac>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	443b      	add	r3, r7
 80004d8:	1a5b      	subs	r3, r3, r1
 80004da:	b281      	uxth	r1, r0
 80004dc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb00 f308 	mul.w	r3, r0, r8
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x1c4>
 80004f0:	1879      	adds	r1, r7, r1
 80004f2:	f100 3cff 	add.w	ip, r0, #4294967295
 80004f6:	d273      	bcs.n	80005e0 <__udivmoddi4+0x2a4>
 80004f8:	428b      	cmp	r3, r1
 80004fa:	d971      	bls.n	80005e0 <__udivmoddi4+0x2a4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4439      	add	r1, r7
 8000500:	1acb      	subs	r3, r1, r3
 8000502:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000506:	e778      	b.n	80003fa <__udivmoddi4+0xbe>
 8000508:	f1c6 0c20 	rsb	ip, r6, #32
 800050c:	fa03 f406 	lsl.w	r4, r3, r6
 8000510:	fa22 f30c 	lsr.w	r3, r2, ip
 8000514:	431c      	orrs	r4, r3
 8000516:	fa20 f70c 	lsr.w	r7, r0, ip
 800051a:	fa01 f306 	lsl.w	r3, r1, r6
 800051e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000522:	fa21 f10c 	lsr.w	r1, r1, ip
 8000526:	431f      	orrs	r7, r3
 8000528:	0c3b      	lsrs	r3, r7, #16
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fa1f f884 	uxth.w	r8, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053a:	fb09 fa08 	mul.w	sl, r9, r8
 800053e:	458a      	cmp	sl, r1
 8000540:	fa02 f206 	lsl.w	r2, r2, r6
 8000544:	fa00 f306 	lsl.w	r3, r0, r6
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x220>
 800054a:	1861      	adds	r1, r4, r1
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	d248      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 8000552:	458a      	cmp	sl, r1
 8000554:	d946      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 8000556:	f1a9 0902 	sub.w	r9, r9, #2
 800055a:	4421      	add	r1, r4
 800055c:	eba1 010a 	sub.w	r1, r1, sl
 8000560:	b2bf      	uxth	r7, r7
 8000562:	fbb1 f0fe 	udiv	r0, r1, lr
 8000566:	fb0e 1110 	mls	r1, lr, r0, r1
 800056a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800056e:	fb00 f808 	mul.w	r8, r0, r8
 8000572:	45b8      	cmp	r8, r7
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x24a>
 8000576:	19e7      	adds	r7, r4, r7
 8000578:	f100 31ff 	add.w	r1, r0, #4294967295
 800057c:	d22e      	bcs.n	80005dc <__udivmoddi4+0x2a0>
 800057e:	45b8      	cmp	r8, r7
 8000580:	d92c      	bls.n	80005dc <__udivmoddi4+0x2a0>
 8000582:	3802      	subs	r0, #2
 8000584:	4427      	add	r7, r4
 8000586:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058a:	eba7 0708 	sub.w	r7, r7, r8
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	454f      	cmp	r7, r9
 8000594:	46c6      	mov	lr, r8
 8000596:	4649      	mov	r1, r9
 8000598:	d31a      	bcc.n	80005d0 <__udivmoddi4+0x294>
 800059a:	d017      	beq.n	80005cc <__udivmoddi4+0x290>
 800059c:	b15d      	cbz	r5, 80005b6 <__udivmoddi4+0x27a>
 800059e:	ebb3 020e 	subs.w	r2, r3, lr
 80005a2:	eb67 0701 	sbc.w	r7, r7, r1
 80005a6:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005aa:	40f2      	lsrs	r2, r6
 80005ac:	ea4c 0202 	orr.w	r2, ip, r2
 80005b0:	40f7      	lsrs	r7, r6
 80005b2:	e9c5 2700 	strd	r2, r7, [r5]
 80005b6:	2600      	movs	r6, #0
 80005b8:	4631      	mov	r1, r6
 80005ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005be:	462e      	mov	r6, r5
 80005c0:	4628      	mov	r0, r5
 80005c2:	e70b      	b.n	80003dc <__udivmoddi4+0xa0>
 80005c4:	4606      	mov	r6, r0
 80005c6:	e6e9      	b.n	800039c <__udivmoddi4+0x60>
 80005c8:	4618      	mov	r0, r3
 80005ca:	e6fd      	b.n	80003c8 <__udivmoddi4+0x8c>
 80005cc:	4543      	cmp	r3, r8
 80005ce:	d2e5      	bcs.n	800059c <__udivmoddi4+0x260>
 80005d0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d4:	eb69 0104 	sbc.w	r1, r9, r4
 80005d8:	3801      	subs	r0, #1
 80005da:	e7df      	b.n	800059c <__udivmoddi4+0x260>
 80005dc:	4608      	mov	r0, r1
 80005de:	e7d2      	b.n	8000586 <__udivmoddi4+0x24a>
 80005e0:	4660      	mov	r0, ip
 80005e2:	e78d      	b.n	8000500 <__udivmoddi4+0x1c4>
 80005e4:	4681      	mov	r9, r0
 80005e6:	e7b9      	b.n	800055c <__udivmoddi4+0x220>
 80005e8:	4666      	mov	r6, ip
 80005ea:	e775      	b.n	80004d8 <__udivmoddi4+0x19c>
 80005ec:	4630      	mov	r0, r6
 80005ee:	e74a      	b.n	8000486 <__udivmoddi4+0x14a>
 80005f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f4:	4439      	add	r1, r7
 80005f6:	e713      	b.n	8000420 <__udivmoddi4+0xe4>
 80005f8:	3802      	subs	r0, #2
 80005fa:	443c      	add	r4, r7
 80005fc:	e724      	b.n	8000448 <__udivmoddi4+0x10c>
 80005fe:	bf00      	nop

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f000 fe70 	bl	80012ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f898 	bl	8000740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 fa72 	bl	8000af8 <MX_GPIO_Init>
  MX_ETH_Init();
 8000614:	f000 f9b8 	bl	8000988 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000618:	f000 fa02 	bl	8000a20 <MX_USART3_UART_Init>
  MX_DMA_Init();
 800061c:	f000 fa4c 	bl	8000ab8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000620:	f000 f908 	bl	8000834 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000624:	f000 f97e 	bl	8000924 <MX_DAC1_Init>
  MX_USB_DEVICE_Init();
 8000628:	f00e fc40 	bl	800eeac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */


  HAL_DAC_Start(&hdac1,DAC_CHANNEL_2);
 800062c:	2110      	movs	r1, #16
 800062e:	483c      	ldr	r0, [pc, #240]	; (8000720 <main+0x11c>)
 8000630:	f003 f84b 	bl	80036ca <HAL_DAC_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 8000634:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000638:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800063c:	4839      	ldr	r0, [pc, #228]	; (8000724 <main+0x120>)
 800063e:	f002 fdcd 	bl	80031dc <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&value_adc,1);
 8000642:	2201      	movs	r2, #1
 8000644:	4938      	ldr	r1, [pc, #224]	; (8000728 <main+0x124>)
 8000646:	4837      	ldr	r0, [pc, #220]	; (8000724 <main+0x120>)
 8000648:	f001 fcde 	bl	8002008 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

	data[0] = 0;
 800064c:	4b37      	ldr	r3, [pc, #220]	; (800072c <main+0x128>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	data[1] = 0;
 8000652:	4b36      	ldr	r3, [pc, #216]	; (800072c <main+0x128>)
 8000654:	2200      	movs	r2, #0
 8000656:	705a      	strb	r2, [r3, #1]
	data[2] = 0;
 8000658:	4b34      	ldr	r3, [pc, #208]	; (800072c <main+0x128>)
 800065a:	2200      	movs	r2, #0
 800065c:	709a      	strb	r2, [r3, #2]
	data[3] = 0;
 800065e:	4b33      	ldr	r3, [pc, #204]	; (800072c <main+0x128>)
 8000660:	2200      	movs	r2, #0
 8000662:	70da      	strb	r2, [r3, #3]
	data[4] = 0;
 8000664:	4b31      	ldr	r3, [pc, #196]	; (800072c <main+0x128>)
 8000666:	2200      	movs	r2, #0
 8000668:	711a      	strb	r2, [r3, #4]
	data[5] = 10;
 800066a:	4b30      	ldr	r3, [pc, #192]	; (800072c <main+0x128>)
 800066c:	220a      	movs	r2, #10
 800066e:	715a      	strb	r2, [r3, #5]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000670:	2101      	movs	r1, #1
 8000672:	482f      	ldr	r0, [pc, #188]	; (8000730 <main+0x12c>)
 8000674:	f006 f87d 	bl	8006772 <HAL_GPIO_TogglePin>

		value_adc+=10;
 8000678:	4b2b      	ldr	r3, [pc, #172]	; (8000728 <main+0x124>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	330a      	adds	r3, #10
 800067e:	4a2a      	ldr	r2, [pc, #168]	; (8000728 <main+0x124>)
 8000680:	6013      	str	r3, [r2, #0]
itoa(value_adc, (char *) &data[0], 10);
 8000682:	4b29      	ldr	r3, [pc, #164]	; (8000728 <main+0x124>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	220a      	movs	r2, #10
 8000688:	4928      	ldr	r1, [pc, #160]	; (800072c <main+0x128>)
 800068a:	4618      	mov	r0, r3
 800068c:	f00f f9b4 	bl	800f9f8 <itoa>
		CDC_Transmit_HS(&data[0], sizeof(data));
 8000690:	2106      	movs	r1, #6
 8000692:	4826      	ldr	r0, [pc, #152]	; (800072c <main+0x128>)
 8000694:	f00e fce0 	bl	800f058 <CDC_Transmit_HS>

		if(buffer[0]==1)
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <main+0x130>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d123      	bne.n	80006e8 <main+0xe4>
		{
			if(buffer[2] & (1u << 0))
 80006a0:	4b24      	ldr	r3, [pc, #144]	; (8000734 <main+0x130>)
 80006a2:	789b      	ldrb	r3, [r3, #2]
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d005      	beq.n	80006b8 <main+0xb4>
			{
				HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	2102      	movs	r1, #2
 80006b0:	4821      	ldr	r0, [pc, #132]	; (8000738 <main+0x134>)
 80006b2:	f006 f845 	bl	8006740 <HAL_GPIO_WritePin>
 80006b6:	e004      	b.n	80006c2 <main+0xbe>
			}
			else
			{
				HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2102      	movs	r1, #2
 80006bc:	481e      	ldr	r0, [pc, #120]	; (8000738 <main+0x134>)
 80006be:	f006 f83f 	bl	8006740 <HAL_GPIO_WritePin>
			}
			if(buffer[1] & (1u << 0))
 80006c2:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <main+0x130>)
 80006c4:	785b      	ldrb	r3, [r3, #1]
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d006      	beq.n	80006dc <main+0xd8>
			{
				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80006ce:	2201      	movs	r2, #1
 80006d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006d4:	4816      	ldr	r0, [pc, #88]	; (8000730 <main+0x12c>)
 80006d6:	f006 f833 	bl	8006740 <HAL_GPIO_WritePin>
 80006da:	e005      	b.n	80006e8 <main+0xe4>
			}
			else
			{
				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006e2:	4813      	ldr	r0, [pc, #76]	; (8000730 <main+0x12c>)
 80006e4:	f006 f82c 	bl	8006740 <HAL_GPIO_WritePin>
			}
//			value_dac = buffer[3]*10;
//			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, value_dac);
		}

		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, value_dac);
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <main+0x138>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2200      	movs	r2, #0
 80006ee:	2110      	movs	r1, #16
 80006f0:	480b      	ldr	r0, [pc, #44]	; (8000720 <main+0x11c>)
 80006f2:	f003 f83c 	bl	800376e <HAL_DAC_SetValue>


	  value_dac+=10;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <main+0x138>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	330a      	adds	r3, #10
 80006fc:	4a0f      	ldr	r2, [pc, #60]	; (800073c <main+0x138>)
 80006fe:	6013      	str	r3, [r2, #0]
	  if(value_dac>4095) {
 8000700:	4b0e      	ldr	r3, [pc, #56]	; (800073c <main+0x138>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000708:	d302      	bcc.n	8000710 <main+0x10c>
		value_dac=0;
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <main+0x138>)
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
	  }

	  HAL_ADC_Start(&hadc1);
 8000710:	4804      	ldr	r0, [pc, #16]	; (8000724 <main+0x120>)
 8000712:	f001 fbaf 	bl	8001e74 <HAL_ADC_Start>
	  HAL_Delay(1000);
 8000716:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800071a:	f000 fe79 	bl	8001410 <HAL_Delay>
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800071e:	e7a7      	b.n	8000670 <main+0x6c>
 8000720:	2400048c 	.word	0x2400048c
 8000724:	24000530 	.word	0x24000530
 8000728:	240005e0 	.word	0x240005e0
 800072c:	2400065c 	.word	0x2400065c
 8000730:	58020400 	.word	0x58020400
 8000734:	240005a0 	.word	0x240005a0
 8000738:	58021000 	.word	0x58021000
 800073c:	24000260 	.word	0x24000260

08000740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b09c      	sub	sp, #112	; 0x70
 8000744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800074a:	224c      	movs	r2, #76	; 0x4c
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f00f f962 	bl	800fa18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2220      	movs	r2, #32
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f00f f95c 	bl	800fa18 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000760:	2002      	movs	r0, #2
 8000762:	f007 f9ef 	bl	8007b44 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000766:	2300      	movs	r3, #0
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	4b30      	ldr	r3, [pc, #192]	; (800082c <SystemClock_Config+0xec>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	4a2f      	ldr	r2, [pc, #188]	; (800082c <SystemClock_Config+0xec>)
 8000770:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000774:	6193      	str	r3, [r2, #24]
 8000776:	4b2d      	ldr	r3, [pc, #180]	; (800082c <SystemClock_Config+0xec>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000782:	bf00      	nop
 8000784:	4b29      	ldr	r3, [pc, #164]	; (800082c <SystemClock_Config+0xec>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800078c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000790:	d1f8      	bne.n	8000784 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000792:	4b27      	ldr	r3, [pc, #156]	; (8000830 <SystemClock_Config+0xf0>)
 8000794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000796:	f023 0303 	bic.w	r3, r3, #3
 800079a:	4a25      	ldr	r2, [pc, #148]	; (8000830 <SystemClock_Config+0xf0>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80007a2:	2321      	movs	r3, #33	; 0x21
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007a6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007ac:	2301      	movs	r3, #1
 80007ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b0:	2302      	movs	r3, #2
 80007b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b4:	2302      	movs	r3, #2
 80007b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007b8:	2304      	movs	r3, #4
 80007ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80007bc:	f240 1313 	movw	r3, #275	; 0x113
 80007c0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80007c2:	2301      	movs	r3, #1
 80007c4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007c6:	2304      	movs	r3, #4
 80007c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007ca:	2302      	movs	r3, #2
 80007cc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80007ce:	2304      	movs	r3, #4
 80007d0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007de:	4618      	mov	r0, r3
 80007e0:	f007 f9fa 	bl	8007bd8 <HAL_RCC_OscConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007ea:	f000 fa61 	bl	8000cb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ee:	233f      	movs	r3, #63	; 0x3f
 80007f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f2:	2303      	movs	r3, #3
 80007f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007fa:	2308      	movs	r3, #8
 80007fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007fe:	2340      	movs	r3, #64	; 0x40
 8000800:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000802:	2340      	movs	r3, #64	; 0x40
 8000804:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800080a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800080c:	2340      	movs	r3, #64	; 0x40
 800080e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2103      	movs	r1, #3
 8000814:	4618      	mov	r0, r3
 8000816:	f007 fd8b 	bl	8008330 <HAL_RCC_ClockConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000820:	f000 fa46 	bl	8000cb0 <Error_Handler>
  }
}
 8000824:	bf00      	nop
 8000826:	3770      	adds	r7, #112	; 0x70
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	58024800 	.word	0x58024800
 8000830:	58024400 	.word	0x58024400

08000834 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08c      	sub	sp, #48	; 0x30
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800083a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000846:	463b      	mov	r3, r7
 8000848:	2224      	movs	r2, #36	; 0x24
 800084a:	2100      	movs	r1, #0
 800084c:	4618      	mov	r0, r3
 800084e:	f00f f8e3 	bl	800fa18 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000852:	4b31      	ldr	r3, [pc, #196]	; (8000918 <MX_ADC1_Init+0xe4>)
 8000854:	4a31      	ldr	r2, [pc, #196]	; (800091c <MX_ADC1_Init+0xe8>)
 8000856:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000858:	4b2f      	ldr	r3, [pc, #188]	; (8000918 <MX_ADC1_Init+0xe4>)
 800085a:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 800085e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000860:	4b2d      	ldr	r3, [pc, #180]	; (8000918 <MX_ADC1_Init+0xe4>)
 8000862:	2208      	movs	r2, #8
 8000864:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000866:	4b2c      	ldr	r3, [pc, #176]	; (8000918 <MX_ADC1_Init+0xe4>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800086c:	4b2a      	ldr	r3, [pc, #168]	; (8000918 <MX_ADC1_Init+0xe4>)
 800086e:	2204      	movs	r2, #4
 8000870:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000872:	4b29      	ldr	r3, [pc, #164]	; (8000918 <MX_ADC1_Init+0xe4>)
 8000874:	2200      	movs	r2, #0
 8000876:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000878:	4b27      	ldr	r3, [pc, #156]	; (8000918 <MX_ADC1_Init+0xe4>)
 800087a:	2201      	movs	r2, #1
 800087c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800087e:	4b26      	ldr	r3, [pc, #152]	; (8000918 <MX_ADC1_Init+0xe4>)
 8000880:	2201      	movs	r2, #1
 8000882:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000884:	4b24      	ldr	r3, [pc, #144]	; (8000918 <MX_ADC1_Init+0xe4>)
 8000886:	2200      	movs	r2, #0
 8000888:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800088c:	4b22      	ldr	r3, [pc, #136]	; (8000918 <MX_ADC1_Init+0xe4>)
 800088e:	2200      	movs	r2, #0
 8000890:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000892:	4b21      	ldr	r3, [pc, #132]	; (8000918 <MX_ADC1_Init+0xe4>)
 8000894:	2200      	movs	r2, #0
 8000896:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000898:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <MX_ADC1_Init+0xe4>)
 800089a:	2200      	movs	r2, #0
 800089c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800089e:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <MX_ADC1_Init+0xe4>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008a4:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <MX_ADC1_Init+0xe4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80008aa:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <MX_ADC1_Init+0xe4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008b2:	4819      	ldr	r0, [pc, #100]	; (8000918 <MX_ADC1_Init+0xe4>)
 80008b4:	f001 f8d6 	bl	8001a64 <HAL_ADC_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80008be:	f000 f9f7 	bl	8000cb0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ca:	4619      	mov	r1, r3
 80008cc:	4812      	ldr	r0, [pc, #72]	; (8000918 <MX_ADC1_Init+0xe4>)
 80008ce:	f002 fce9 	bl	80032a4 <HAL_ADCEx_MultiModeConfigChannel>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80008d8:	f000 f9ea 	bl	8000cb0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008dc:	4b10      	ldr	r3, [pc, #64]	; (8000920 <MX_ADC1_Init+0xec>)
 80008de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008e0:	2306      	movs	r3, #6
 80008e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008e8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008ec:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ee:	2304      	movs	r3, #4
 80008f0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008fc:	463b      	mov	r3, r7
 80008fe:	4619      	mov	r1, r3
 8000900:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_ADC1_Init+0xe4>)
 8000902:	f001 fc7b 	bl	80021fc <HAL_ADC_ConfigChannel>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 800090c:	f000 f9d0 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	3730      	adds	r7, #48	; 0x30
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	24000530 	.word	0x24000530
 800091c:	40022000 	.word	0x40022000
 8000920:	0c900008 	.word	0x0c900008

08000924 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	2224      	movs	r2, #36	; 0x24
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f00f f871 	bl	800fa18 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_DAC1_Init+0x5c>)
 8000938:	4a12      	ldr	r2, [pc, #72]	; (8000984 <MX_DAC1_Init+0x60>)
 800093a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800093c:	4810      	ldr	r0, [pc, #64]	; (8000980 <MX_DAC1_Init+0x5c>)
 800093e:	f002 fea2 	bl	8003686 <HAL_DAC_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000948:	f000 f9b2 	bl	8000cb0 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800094c:	2300      	movs	r3, #0
 800094e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000958:	2301      	movs	r3, #1
 800095a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2210      	movs	r2, #16
 8000964:	4619      	mov	r1, r3
 8000966:	4806      	ldr	r0, [pc, #24]	; (8000980 <MX_DAC1_Init+0x5c>)
 8000968:	f002 ff26 	bl	80037b8 <HAL_DAC_ConfigChannel>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000972:	f000 f99d 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	3728      	adds	r7, #40	; 0x28
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	2400048c 	.word	0x2400048c
 8000984:	40007400 	.word	0x40007400

08000988 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800098c:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <MX_ETH_Init+0x80>)
 800098e:	4a1f      	ldr	r2, [pc, #124]	; (8000a0c <MX_ETH_Init+0x84>)
 8000990:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000992:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <MX_ETH_Init+0x88>)
 8000994:	2200      	movs	r2, #0
 8000996:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000998:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <MX_ETH_Init+0x88>)
 800099a:	2280      	movs	r2, #128	; 0x80
 800099c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800099e:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <MX_ETH_Init+0x88>)
 80009a0:	22e1      	movs	r2, #225	; 0xe1
 80009a2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009a4:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <MX_ETH_Init+0x88>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009aa:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <MX_ETH_Init+0x88>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <MX_ETH_Init+0x88>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009b6:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_ETH_Init+0x80>)
 80009b8:	4a15      	ldr	r2, [pc, #84]	; (8000a10 <MX_ETH_Init+0x88>)
 80009ba:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <MX_ETH_Init+0x80>)
 80009be:	2201      	movs	r2, #1
 80009c0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_ETH_Init+0x80>)
 80009c4:	4a13      	ldr	r2, [pc, #76]	; (8000a14 <MX_ETH_Init+0x8c>)
 80009c6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_ETH_Init+0x80>)
 80009ca:	4a13      	ldr	r2, [pc, #76]	; (8000a18 <MX_ETH_Init+0x90>)
 80009cc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_ETH_Init+0x80>)
 80009d0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80009d4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009d6:	480c      	ldr	r0, [pc, #48]	; (8000a08 <MX_ETH_Init+0x80>)
 80009d8:	f005 f8f4 	bl	8005bc4 <HAL_ETH_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80009e2:	f000 f965 	bl	8000cb0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009e6:	2234      	movs	r2, #52	; 0x34
 80009e8:	2100      	movs	r1, #0
 80009ea:	480c      	ldr	r0, [pc, #48]	; (8000a1c <MX_ETH_Init+0x94>)
 80009ec:	f00f f814 	bl	800fa18 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009f0:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <MX_ETH_Init+0x94>)
 80009f2:	2221      	movs	r2, #33	; 0x21
 80009f4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_ETH_Init+0x94>)
 80009f8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009fc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009fe:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <MX_ETH_Init+0x94>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	24000664 	.word	0x24000664
 8000a0c:	40028000 	.word	0x40028000
 8000a10:	24000264 	.word	0x24000264
 8000a14:	240001e4 	.word	0x240001e4
 8000a18:	24000184 	.word	0x24000184
 8000a1c:	240006ec 	.word	0x240006ec

08000a20 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a24:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <MX_USART3_UART_Init+0x90>)
 8000a26:	4a23      	ldr	r2, [pc, #140]	; (8000ab4 <MX_USART3_UART_Init+0x94>)
 8000a28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a2a:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <MX_USART3_UART_Init+0x90>)
 8000a2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a32:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <MX_USART3_UART_Init+0x90>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a38:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <MX_USART3_UART_Init+0x90>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <MX_USART3_UART_Init+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a44:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <MX_USART3_UART_Init+0x90>)
 8000a46:	220c      	movs	r2, #12
 8000a48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4a:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <MX_USART3_UART_Init+0x90>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a50:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <MX_USART3_UART_Init+0x90>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <MX_USART3_UART_Init+0x90>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_USART3_UART_Init+0x90>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <MX_USART3_UART_Init+0x90>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a68:	4811      	ldr	r0, [pc, #68]	; (8000ab0 <MX_USART3_UART_Init+0x90>)
 8000a6a:	f00a f87f 	bl	800ab6c <HAL_UART_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a74:	f000 f91c 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a78:	2100      	movs	r1, #0
 8000a7a:	480d      	ldr	r0, [pc, #52]	; (8000ab0 <MX_USART3_UART_Init+0x90>)
 8000a7c:	f00b f912 	bl	800bca4 <HAL_UARTEx_SetTxFifoThreshold>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a86:	f000 f913 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4808      	ldr	r0, [pc, #32]	; (8000ab0 <MX_USART3_UART_Init+0x90>)
 8000a8e:	f00b f947 	bl	800bd20 <HAL_UARTEx_SetRxFifoThreshold>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a98:	f000 f90a 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a9c:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <MX_USART3_UART_Init+0x90>)
 8000a9e:	f00b f8c8 	bl	800bc32 <HAL_UARTEx_DisableFifoMode>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000aa8:	f000 f902 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	240004a0 	.word	0x240004a0
 8000ab4:	40004800 	.word	0x40004800

08000ab8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <MX_DMA_Init+0x3c>)
 8000ac0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ac4:	4a0b      	ldr	r2, [pc, #44]	; (8000af4 <MX_DMA_Init+0x3c>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_DMA_Init+0x3c>)
 8000ad0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2100      	movs	r1, #0
 8000ae0:	200b      	movs	r0, #11
 8000ae2:	f002 fd9c 	bl	800361e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ae6:	200b      	movs	r0, #11
 8000ae8:	f002 fdb3 	bl	8003652 <HAL_NVIC_EnableIRQ>

}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	58024400 	.word	0x58024400

08000af8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08c      	sub	sp, #48	; 0x30
 8000afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
 8000b0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0e:	4b62      	ldr	r3, [pc, #392]	; (8000c98 <MX_GPIO_Init+0x1a0>)
 8000b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b14:	4a60      	ldr	r2, [pc, #384]	; (8000c98 <MX_GPIO_Init+0x1a0>)
 8000b16:	f043 0304 	orr.w	r3, r3, #4
 8000b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1e:	4b5e      	ldr	r3, [pc, #376]	; (8000c98 <MX_GPIO_Init+0x1a0>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b24:	f003 0304 	and.w	r3, r3, #4
 8000b28:	61bb      	str	r3, [r7, #24]
 8000b2a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b2c:	4b5a      	ldr	r3, [pc, #360]	; (8000c98 <MX_GPIO_Init+0x1a0>)
 8000b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b32:	4a59      	ldr	r2, [pc, #356]	; (8000c98 <MX_GPIO_Init+0x1a0>)
 8000b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b3c:	4b56      	ldr	r3, [pc, #344]	; (8000c98 <MX_GPIO_Init+0x1a0>)
 8000b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4b53      	ldr	r3, [pc, #332]	; (8000c98 <MX_GPIO_Init+0x1a0>)
 8000b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b50:	4a51      	ldr	r2, [pc, #324]	; (8000c98 <MX_GPIO_Init+0x1a0>)
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b5a:	4b4f      	ldr	r3, [pc, #316]	; (8000c98 <MX_GPIO_Init+0x1a0>)
 8000b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b60:	f003 0301 	and.w	r3, r3, #1
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b68:	4b4b      	ldr	r3, [pc, #300]	; (8000c98 <MX_GPIO_Init+0x1a0>)
 8000b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6e:	4a4a      	ldr	r2, [pc, #296]	; (8000c98 <MX_GPIO_Init+0x1a0>)
 8000b70:	f043 0302 	orr.w	r3, r3, #2
 8000b74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b78:	4b47      	ldr	r3, [pc, #284]	; (8000c98 <MX_GPIO_Init+0x1a0>)
 8000b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b86:	4b44      	ldr	r3, [pc, #272]	; (8000c98 <MX_GPIO_Init+0x1a0>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8c:	4a42      	ldr	r2, [pc, #264]	; (8000c98 <MX_GPIO_Init+0x1a0>)
 8000b8e:	f043 0308 	orr.w	r3, r3, #8
 8000b92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b96:	4b40      	ldr	r3, [pc, #256]	; (8000c98 <MX_GPIO_Init+0x1a0>)
 8000b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9c:	f003 0308 	and.w	r3, r3, #8
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ba4:	4b3c      	ldr	r3, [pc, #240]	; (8000c98 <MX_GPIO_Init+0x1a0>)
 8000ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000baa:	4a3b      	ldr	r2, [pc, #236]	; (8000c98 <MX_GPIO_Init+0x1a0>)
 8000bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb4:	4b38      	ldr	r3, [pc, #224]	; (8000c98 <MX_GPIO_Init+0x1a0>)
 8000bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bc2:	4b35      	ldr	r3, [pc, #212]	; (8000c98 <MX_GPIO_Init+0x1a0>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc8:	4a33      	ldr	r2, [pc, #204]	; (8000c98 <MX_GPIO_Init+0x1a0>)
 8000bca:	f043 0310 	orr.w	r3, r3, #16
 8000bce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd2:	4b31      	ldr	r3, [pc, #196]	; (8000c98 <MX_GPIO_Init+0x1a0>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd8:	f003 0310 	and.w	r3, r3, #16
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	f244 0101 	movw	r1, #16385	; 0x4001
 8000be6:	482d      	ldr	r0, [pc, #180]	; (8000c9c <MX_GPIO_Init+0x1a4>)
 8000be8:	f005 fdaa 	bl	8006740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bf2:	482b      	ldr	r0, [pc, #172]	; (8000ca0 <MX_GPIO_Init+0x1a8>)
 8000bf4:	f005 fda4 	bl	8006740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	4829      	ldr	r0, [pc, #164]	; (8000ca4 <MX_GPIO_Init+0x1ac>)
 8000bfe:	f005 fd9f 	bl	8006740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 031c 	add.w	r3, r7, #28
 8000c14:	4619      	mov	r1, r3
 8000c16:	4824      	ldr	r0, [pc, #144]	; (8000ca8 <MX_GPIO_Init+0x1b0>)
 8000c18:	f005 fbea 	bl	80063f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000c1c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4619      	mov	r1, r3
 8000c34:	4819      	ldr	r0, [pc, #100]	; (8000c9c <MX_GPIO_Init+0x1a4>)
 8000c36:	f005 fbdb 	bl	80063f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4619      	mov	r1, r3
 8000c52:	4813      	ldr	r0, [pc, #76]	; (8000ca0 <MX_GPIO_Init+0x1a8>)
 8000c54:	f005 fbcc 	bl	80063f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000c58:	2380      	movs	r3, #128	; 0x80
 8000c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c5c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480f      	ldr	r0, [pc, #60]	; (8000cac <MX_GPIO_Init+0x1b4>)
 8000c6e:	f005 fbbf 	bl	80063f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000c72:	2302      	movs	r3, #2
 8000c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c76:	2301      	movs	r3, #1
 8000c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4619      	mov	r1, r3
 8000c88:	4806      	ldr	r0, [pc, #24]	; (8000ca4 <MX_GPIO_Init+0x1ac>)
 8000c8a:	f005 fbb1 	bl	80063f0 <HAL_GPIO_Init>

}
 8000c8e:	bf00      	nop
 8000c90:	3730      	adds	r7, #48	; 0x30
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	58024400 	.word	0x58024400
 8000c9c:	58020400 	.word	0x58020400
 8000ca0:	58020c00 	.word	0x58020c00
 8000ca4:	58021000 	.word	0x58021000
 8000ca8:	58020800 	.word	0x58020800
 8000cac:	58021800 	.word	0x58021800

08000cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb4:	b672      	cpsid	i
}
 8000cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <Error_Handler+0x8>
	...

08000cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <HAL_MspInit+0x30>)
 8000cc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cc8:	4a08      	ldr	r2, [pc, #32]	; (8000cec <HAL_MspInit+0x30>)
 8000cca:	f043 0302 	orr.w	r3, r3, #2
 8000cce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_MspInit+0x30>)
 8000cd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cd8:	f003 0302 	and.w	r3, r3, #2
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	58024400 	.word	0x58024400

08000cf0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b0b6      	sub	sp, #216	; 0xd8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d08:	f107 0310 	add.w	r3, r7, #16
 8000d0c:	22b4      	movs	r2, #180	; 0xb4
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4618      	mov	r0, r3
 8000d12:	f00e fe81 	bl	800fa18 <memset>
  if(hadc->Instance==ADC1)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a42      	ldr	r2, [pc, #264]	; (8000e24 <HAL_ADC_MspInit+0x134>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d17c      	bne.n	8000e1a <HAL_ADC_MspInit+0x12a>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d20:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000d24:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000d26:	2301      	movs	r3, #1
 8000d28:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 24;
 8000d2a:	2318      	movs	r3, #24
 8000d2c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d32:	2302      	movs	r3, #2
 8000d34:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d36:	2302      	movs	r3, #2
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d3a:	23c0      	movs	r3, #192	; 0xc0
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000d46:	2300      	movs	r3, #0
 8000d48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d4c:	f107 0310 	add.w	r3, r7, #16
 8000d50:	4618      	mov	r0, r3
 8000d52:	f007 fe79 	bl	8008a48 <HAL_RCCEx_PeriphCLKConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000d5c:	f7ff ffa8 	bl	8000cb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d60:	4b31      	ldr	r3, [pc, #196]	; (8000e28 <HAL_ADC_MspInit+0x138>)
 8000d62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d66:	4a30      	ldr	r2, [pc, #192]	; (8000e28 <HAL_ADC_MspInit+0x138>)
 8000d68:	f043 0320 	orr.w	r3, r3, #32
 8000d6c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d70:	4b2d      	ldr	r3, [pc, #180]	; (8000e28 <HAL_ADC_MspInit+0x138>)
 8000d72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d76:	f003 0320 	and.w	r3, r3, #32
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	4b2a      	ldr	r3, [pc, #168]	; (8000e28 <HAL_ADC_MspInit+0x138>)
 8000d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d84:	4a28      	ldr	r2, [pc, #160]	; (8000e28 <HAL_ADC_MspInit+0x138>)
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d8e:	4b26      	ldr	r3, [pc, #152]	; (8000e28 <HAL_ADC_MspInit+0x138>)
 8000d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = ADC_IN_1_Pin;
 8000d9c:	2340      	movs	r3, #64	; 0x40
 8000d9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da2:	2303      	movs	r3, #3
 8000da4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(ADC_IN_1_GPIO_Port, &GPIO_InitStruct);
 8000dae:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000db2:	4619      	mov	r1, r3
 8000db4:	481d      	ldr	r0, [pc, #116]	; (8000e2c <HAL_ADC_MspInit+0x13c>)
 8000db6:	f005 fb1b 	bl	80063f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000dba:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <HAL_ADC_MspInit+0x140>)
 8000dbc:	4a1d      	ldr	r2, [pc, #116]	; (8000e34 <HAL_ADC_MspInit+0x144>)
 8000dbe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <HAL_ADC_MspInit+0x140>)
 8000dc2:	2209      	movs	r2, #9
 8000dc4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <HAL_ADC_MspInit+0x140>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dcc:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <HAL_ADC_MspInit+0x140>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dd2:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <HAL_ADC_MspInit+0x140>)
 8000dd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dd8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <HAL_ADC_MspInit+0x140>)
 8000ddc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000de0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000de2:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <HAL_ADC_MspInit+0x140>)
 8000de4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000de8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <HAL_ADC_MspInit+0x140>)
 8000dec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000df0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <HAL_ADC_MspInit+0x140>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000df8:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <HAL_ADC_MspInit+0x140>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000dfe:	480c      	ldr	r0, [pc, #48]	; (8000e30 <HAL_ADC_MspInit+0x140>)
 8000e00:	f002 fe0a 	bl	8003a18 <HAL_DMA_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_ADC_MspInit+0x11e>
    {
      Error_Handler();
 8000e0a:	f7ff ff51 	bl	8000cb0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a07      	ldr	r2, [pc, #28]	; (8000e30 <HAL_ADC_MspInit+0x140>)
 8000e12:	659a      	str	r2, [r3, #88]	; 0x58
 8000e14:	4a06      	ldr	r2, [pc, #24]	; (8000e30 <HAL_ADC_MspInit+0x140>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e1a:	bf00      	nop
 8000e1c:	37d8      	adds	r7, #216	; 0xd8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40022000 	.word	0x40022000
 8000e28:	58024400 	.word	0x58024400
 8000e2c:	58020000 	.word	0x58020000
 8000e30:	240005e4 	.word	0x240005e4
 8000e34:	40020010 	.word	0x40020010

08000e38 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a18      	ldr	r2, [pc, #96]	; (8000eb8 <HAL_DAC_MspInit+0x80>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d129      	bne.n	8000eae <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <HAL_DAC_MspInit+0x84>)
 8000e5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e60:	4a16      	ldr	r2, [pc, #88]	; (8000ebc <HAL_DAC_MspInit+0x84>)
 8000e62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000e66:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <HAL_DAC_MspInit+0x84>)
 8000e6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e78:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <HAL_DAC_MspInit+0x84>)
 8000e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7e:	4a0f      	ldr	r2, [pc, #60]	; (8000ebc <HAL_DAC_MspInit+0x84>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <HAL_DAC_MspInit+0x84>)
 8000e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = DAC_OUT_1_Pin;
 8000e96:	2320      	movs	r3, #32
 8000e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC_OUT_1_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <HAL_DAC_MspInit+0x88>)
 8000eaa:	f005 faa1 	bl	80063f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000eae:	bf00      	nop
 8000eb0:	3728      	adds	r7, #40	; 0x28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40007400 	.word	0x40007400
 8000ebc:	58024400 	.word	0x58024400
 8000ec0:	58020000 	.word	0x58020000

08000ec4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08e      	sub	sp, #56	; 0x38
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a59      	ldr	r2, [pc, #356]	; (8001048 <HAL_ETH_MspInit+0x184>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	f040 80ab 	bne.w	800103e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000ee8:	4b58      	ldr	r3, [pc, #352]	; (800104c <HAL_ETH_MspInit+0x188>)
 8000eea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eee:	4a57      	ldr	r2, [pc, #348]	; (800104c <HAL_ETH_MspInit+0x188>)
 8000ef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ef4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ef8:	4b54      	ldr	r3, [pc, #336]	; (800104c <HAL_ETH_MspInit+0x188>)
 8000efa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000efe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f02:	623b      	str	r3, [r7, #32]
 8000f04:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f06:	4b51      	ldr	r3, [pc, #324]	; (800104c <HAL_ETH_MspInit+0x188>)
 8000f08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f0c:	4a4f      	ldr	r2, [pc, #316]	; (800104c <HAL_ETH_MspInit+0x188>)
 8000f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f12:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f16:	4b4d      	ldr	r3, [pc, #308]	; (800104c <HAL_ETH_MspInit+0x188>)
 8000f18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f20:	61fb      	str	r3, [r7, #28]
 8000f22:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000f24:	4b49      	ldr	r3, [pc, #292]	; (800104c <HAL_ETH_MspInit+0x188>)
 8000f26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f2a:	4a48      	ldr	r2, [pc, #288]	; (800104c <HAL_ETH_MspInit+0x188>)
 8000f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f30:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f34:	4b45      	ldr	r3, [pc, #276]	; (800104c <HAL_ETH_MspInit+0x188>)
 8000f36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3e:	61bb      	str	r3, [r7, #24]
 8000f40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f42:	4b42      	ldr	r3, [pc, #264]	; (800104c <HAL_ETH_MspInit+0x188>)
 8000f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f48:	4a40      	ldr	r2, [pc, #256]	; (800104c <HAL_ETH_MspInit+0x188>)
 8000f4a:	f043 0304 	orr.w	r3, r3, #4
 8000f4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f52:	4b3e      	ldr	r3, [pc, #248]	; (800104c <HAL_ETH_MspInit+0x188>)
 8000f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f58:	f003 0304 	and.w	r3, r3, #4
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f60:	4b3a      	ldr	r3, [pc, #232]	; (800104c <HAL_ETH_MspInit+0x188>)
 8000f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f66:	4a39      	ldr	r2, [pc, #228]	; (800104c <HAL_ETH_MspInit+0x188>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f70:	4b36      	ldr	r3, [pc, #216]	; (800104c <HAL_ETH_MspInit+0x188>)
 8000f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	4b33      	ldr	r3, [pc, #204]	; (800104c <HAL_ETH_MspInit+0x188>)
 8000f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f84:	4a31      	ldr	r2, [pc, #196]	; (800104c <HAL_ETH_MspInit+0x188>)
 8000f86:	f043 0302 	orr.w	r3, r3, #2
 8000f8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f8e:	4b2f      	ldr	r3, [pc, #188]	; (800104c <HAL_ETH_MspInit+0x188>)
 8000f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f9c:	4b2b      	ldr	r3, [pc, #172]	; (800104c <HAL_ETH_MspInit+0x188>)
 8000f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa2:	4a2a      	ldr	r2, [pc, #168]	; (800104c <HAL_ETH_MspInit+0x188>)
 8000fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fac:	4b27      	ldr	r3, [pc, #156]	; (800104c <HAL_ETH_MspInit+0x188>)
 8000fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000fba:	2332      	movs	r3, #50	; 0x32
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fca:	230b      	movs	r3, #11
 8000fcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	481e      	ldr	r0, [pc, #120]	; (8001050 <HAL_ETH_MspInit+0x18c>)
 8000fd6:	f005 fa0b 	bl	80063f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000fda:	2386      	movs	r3, #134	; 0x86
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fea:	230b      	movs	r3, #11
 8000fec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4817      	ldr	r0, [pc, #92]	; (8001054 <HAL_ETH_MspInit+0x190>)
 8000ff6:	f005 f9fb 	bl	80063f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ffa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800100c:	230b      	movs	r3, #11
 800100e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001014:	4619      	mov	r1, r3
 8001016:	4810      	ldr	r0, [pc, #64]	; (8001058 <HAL_ETH_MspInit+0x194>)
 8001018:	f005 f9ea 	bl	80063f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800101c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800102e:	230b      	movs	r3, #11
 8001030:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001036:	4619      	mov	r1, r3
 8001038:	4808      	ldr	r0, [pc, #32]	; (800105c <HAL_ETH_MspInit+0x198>)
 800103a:	f005 f9d9 	bl	80063f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800103e:	bf00      	nop
 8001040:	3738      	adds	r7, #56	; 0x38
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40028000 	.word	0x40028000
 800104c:	58024400 	.word	0x58024400
 8001050:	58020800 	.word	0x58020800
 8001054:	58020000 	.word	0x58020000
 8001058:	58020400 	.word	0x58020400
 800105c:	58021800 	.word	0x58021800

08001060 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b0b6      	sub	sp, #216	; 0xd8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	22b4      	movs	r2, #180	; 0xb4
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f00e fcc9 	bl	800fa18 <memset>
  if(huart->Instance==USART3)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a25      	ldr	r2, [pc, #148]	; (8001120 <HAL_UART_MspInit+0xc0>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d142      	bne.n	8001116 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001090:	2302      	movs	r3, #2
 8001092:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001094:	2300      	movs	r3, #0
 8001096:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800109a:	f107 0310 	add.w	r3, r7, #16
 800109e:	4618      	mov	r0, r3
 80010a0:	f007 fcd2 	bl	8008a48 <HAL_RCCEx_PeriphCLKConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010aa:	f7ff fe01 	bl	8000cb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010ae:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <HAL_UART_MspInit+0xc4>)
 80010b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010b4:	4a1b      	ldr	r2, [pc, #108]	; (8001124 <HAL_UART_MspInit+0xc4>)
 80010b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010be:	4b19      	ldr	r3, [pc, #100]	; (8001124 <HAL_UART_MspInit+0xc4>)
 80010c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010cc:	4b15      	ldr	r3, [pc, #84]	; (8001124 <HAL_UART_MspInit+0xc4>)
 80010ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d2:	4a14      	ldr	r2, [pc, #80]	; (8001124 <HAL_UART_MspInit+0xc4>)
 80010d4:	f043 0308 	orr.w	r3, r3, #8
 80010d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <HAL_UART_MspInit+0xc4>)
 80010de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e2:	f003 0308 	and.w	r3, r3, #8
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80010ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	2302      	movs	r3, #2
 80010f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001104:	2307      	movs	r3, #7
 8001106:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800110a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800110e:	4619      	mov	r1, r3
 8001110:	4805      	ldr	r0, [pc, #20]	; (8001128 <HAL_UART_MspInit+0xc8>)
 8001112:	f005 f96d 	bl	80063f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001116:	bf00      	nop
 8001118:	37d8      	adds	r7, #216	; 0xd8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40004800 	.word	0x40004800
 8001124:	58024400 	.word	0x58024400
 8001128:	58020c00 	.word	0x58020c00

0800112c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <NMI_Handler+0x4>

08001132 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001136:	e7fe      	b.n	8001136 <HardFault_Handler+0x4>

08001138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <MemManage_Handler+0x4>

0800113e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001142:	e7fe      	b.n	8001142 <BusFault_Handler+0x4>

08001144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001148:	e7fe      	b.n	8001148 <UsageFault_Handler+0x4>

0800114a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001178:	f000 f92a 	bl	80013d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}

08001180 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <DMA1_Stream0_IRQHandler+0x10>)
 8001186:	f003 fa0b 	bl	80045a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	240005e4 	.word	0x240005e4

08001194 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001198:	4802      	ldr	r0, [pc, #8]	; (80011a4 <OTG_HS_IRQHandler+0x10>)
 800119a:	f005 fc5b 	bl	8006a54 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	24001bf4 	.word	0x24001bf4

080011a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011ac:	4b32      	ldr	r3, [pc, #200]	; (8001278 <SystemInit+0xd0>)
 80011ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011b2:	4a31      	ldr	r2, [pc, #196]	; (8001278 <SystemInit+0xd0>)
 80011b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011bc:	4b2f      	ldr	r3, [pc, #188]	; (800127c <SystemInit+0xd4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 030f 	and.w	r3, r3, #15
 80011c4:	2b06      	cmp	r3, #6
 80011c6:	d807      	bhi.n	80011d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011c8:	4b2c      	ldr	r3, [pc, #176]	; (800127c <SystemInit+0xd4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f023 030f 	bic.w	r3, r3, #15
 80011d0:	4a2a      	ldr	r2, [pc, #168]	; (800127c <SystemInit+0xd4>)
 80011d2:	f043 0307 	orr.w	r3, r3, #7
 80011d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011d8:	4b29      	ldr	r3, [pc, #164]	; (8001280 <SystemInit+0xd8>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a28      	ldr	r2, [pc, #160]	; (8001280 <SystemInit+0xd8>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011e4:	4b26      	ldr	r3, [pc, #152]	; (8001280 <SystemInit+0xd8>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011ea:	4b25      	ldr	r3, [pc, #148]	; (8001280 <SystemInit+0xd8>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	4924      	ldr	r1, [pc, #144]	; (8001280 <SystemInit+0xd8>)
 80011f0:	4b24      	ldr	r3, [pc, #144]	; (8001284 <SystemInit+0xdc>)
 80011f2:	4013      	ands	r3, r2
 80011f4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011f6:	4b21      	ldr	r3, [pc, #132]	; (800127c <SystemInit+0xd4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d007      	beq.n	8001212 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001202:	4b1e      	ldr	r3, [pc, #120]	; (800127c <SystemInit+0xd4>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f023 030f 	bic.w	r3, r3, #15
 800120a:	4a1c      	ldr	r2, [pc, #112]	; (800127c <SystemInit+0xd4>)
 800120c:	f043 0307 	orr.w	r3, r3, #7
 8001210:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001212:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <SystemInit+0xd8>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001218:	4b19      	ldr	r3, [pc, #100]	; (8001280 <SystemInit+0xd8>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800121e:	4b18      	ldr	r3, [pc, #96]	; (8001280 <SystemInit+0xd8>)
 8001220:	2200      	movs	r2, #0
 8001222:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001224:	4b16      	ldr	r3, [pc, #88]	; (8001280 <SystemInit+0xd8>)
 8001226:	4a18      	ldr	r2, [pc, #96]	; (8001288 <SystemInit+0xe0>)
 8001228:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <SystemInit+0xd8>)
 800122c:	4a17      	ldr	r2, [pc, #92]	; (800128c <SystemInit+0xe4>)
 800122e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001230:	4b13      	ldr	r3, [pc, #76]	; (8001280 <SystemInit+0xd8>)
 8001232:	4a17      	ldr	r2, [pc, #92]	; (8001290 <SystemInit+0xe8>)
 8001234:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <SystemInit+0xd8>)
 8001238:	2200      	movs	r2, #0
 800123a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800123c:	4b10      	ldr	r3, [pc, #64]	; (8001280 <SystemInit+0xd8>)
 800123e:	4a14      	ldr	r2, [pc, #80]	; (8001290 <SystemInit+0xe8>)
 8001240:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <SystemInit+0xd8>)
 8001244:	2200      	movs	r2, #0
 8001246:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001248:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <SystemInit+0xd8>)
 800124a:	4a11      	ldr	r2, [pc, #68]	; (8001290 <SystemInit+0xe8>)
 800124c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <SystemInit+0xd8>)
 8001250:	2200      	movs	r2, #0
 8001252:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <SystemInit+0xd8>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a09      	ldr	r2, [pc, #36]	; (8001280 <SystemInit+0xd8>)
 800125a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800125e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <SystemInit+0xd8>)
 8001262:	2200      	movs	r2, #0
 8001264:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <SystemInit+0xec>)
 8001268:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800126c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00
 800127c:	52002000 	.word	0x52002000
 8001280:	58024400 	.word	0x58024400
 8001284:	eaf6ed7f 	.word	0xeaf6ed7f
 8001288:	02020200 	.word	0x02020200
 800128c:	01ff0000 	.word	0x01ff0000
 8001290:	01010280 	.word	0x01010280
 8001294:	52004000 	.word	0x52004000

08001298 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001298:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800129c:	f7ff ff84 	bl	80011a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a0:	480c      	ldr	r0, [pc, #48]	; (80012d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012a2:	490d      	ldr	r1, [pc, #52]	; (80012d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012a4:	4a0d      	ldr	r2, [pc, #52]	; (80012dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a8:	e002      	b.n	80012b0 <LoopCopyDataInit>

080012aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ae:	3304      	adds	r3, #4

080012b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b4:	d3f9      	bcc.n	80012aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012b8:	4c0a      	ldr	r4, [pc, #40]	; (80012e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012bc:	e001      	b.n	80012c2 <LoopFillZerobss>

080012be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c0:	3204      	adds	r2, #4

080012c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c4:	d3fb      	bcc.n	80012be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012c6:	f00e fb5b 	bl	800f980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ca:	f7ff f99b 	bl	8000604 <main>
  bx  lr
 80012ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012d0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80012d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012d8:	24000184 	.word	0x24000184
  ldr r2, =_sidata
 80012dc:	0800fb84 	.word	0x0800fb84
  ldr r2, =_sbss
 80012e0:	24000244 	.word	0x24000244
  ldr r4, =_ebss
 80012e4:	24001ffc 	.word	0x24001ffc

080012e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012e8:	e7fe      	b.n	80012e8 <ADC3_IRQHandler>
	...

080012ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f2:	2003      	movs	r0, #3
 80012f4:	f002 f988 	bl	8003608 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012f8:	f007 f9d0 	bl	800869c <HAL_RCC_GetSysClockFreq>
 80012fc:	4602      	mov	r2, r0
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <HAL_Init+0x68>)
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	0a1b      	lsrs	r3, r3, #8
 8001304:	f003 030f 	and.w	r3, r3, #15
 8001308:	4913      	ldr	r1, [pc, #76]	; (8001358 <HAL_Init+0x6c>)
 800130a:	5ccb      	ldrb	r3, [r1, r3]
 800130c:	f003 031f 	and.w	r3, r3, #31
 8001310:	fa22 f303 	lsr.w	r3, r2, r3
 8001314:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001316:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <HAL_Init+0x68>)
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	4a0e      	ldr	r2, [pc, #56]	; (8001358 <HAL_Init+0x6c>)
 8001320:	5cd3      	ldrb	r3, [r2, r3]
 8001322:	f003 031f 	and.w	r3, r3, #31
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	fa22 f303 	lsr.w	r3, r2, r3
 800132c:	4a0b      	ldr	r2, [pc, #44]	; (800135c <HAL_Init+0x70>)
 800132e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001330:	4a0b      	ldr	r2, [pc, #44]	; (8001360 <HAL_Init+0x74>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001336:	2000      	movs	r0, #0
 8001338:	f000 f814 	bl	8001364 <HAL_InitTick>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e002      	b.n	800134c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001346:	f7ff fcb9 	bl	8000cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	58024400 	.word	0x58024400
 8001358:	0800fb0c 	.word	0x0800fb0c
 800135c:	24000004 	.word	0x24000004
 8001360:	24000000 	.word	0x24000000

08001364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800136c:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <HAL_InitTick+0x60>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d101      	bne.n	8001378 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e021      	b.n	80013bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001378:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <HAL_InitTick+0x64>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <HAL_InitTick+0x60>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	4619      	mov	r1, r3
 8001382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001386:	fbb3 f3f1 	udiv	r3, r3, r1
 800138a:	fbb2 f3f3 	udiv	r3, r2, r3
 800138e:	4618      	mov	r0, r3
 8001390:	f002 f96d 	bl	800366e <HAL_SYSTICK_Config>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e00e      	b.n	80013bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b0f      	cmp	r3, #15
 80013a2:	d80a      	bhi.n	80013ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a4:	2200      	movs	r2, #0
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ac:	f002 f937 	bl	800361e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b0:	4a06      	ldr	r2, [pc, #24]	; (80013cc <HAL_InitTick+0x68>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
 80013b8:	e000      	b.n	80013bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	2400000c 	.word	0x2400000c
 80013c8:	24000000 	.word	0x24000000
 80013cc:	24000008 	.word	0x24000008

080013d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_IncTick+0x20>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	461a      	mov	r2, r3
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_IncTick+0x24>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <HAL_IncTick+0x24>)
 80013e2:	6013      	str	r3, [r2, #0]
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	2400000c 	.word	0x2400000c
 80013f4:	24000720 	.word	0x24000720

080013f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return uwTick;
 80013fc:	4b03      	ldr	r3, [pc, #12]	; (800140c <HAL_GetTick+0x14>)
 80013fe:	681b      	ldr	r3, [r3, #0]
}
 8001400:	4618      	mov	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	24000720 	.word	0x24000720

08001410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001418:	f7ff ffee 	bl	80013f8 <HAL_GetTick>
 800141c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001428:	d005      	beq.n	8001436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <HAL_Delay+0x44>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	461a      	mov	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4413      	add	r3, r2
 8001434:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001436:	bf00      	nop
 8001438:	f7ff ffde 	bl	80013f8 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	429a      	cmp	r2, r3
 8001446:	d8f7      	bhi.n	8001438 <HAL_Delay+0x28>
  {
  }
}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	2400000c 	.word	0x2400000c

08001458 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001468:	4904      	ldr	r1, [pc, #16]	; (800147c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4313      	orrs	r3, r2
 800146e:	604b      	str	r3, [r1, #4]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	58000400 	.word	0x58000400

08001480 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	609a      	str	r2, [r3, #8]
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	609a      	str	r2, [r3, #8]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80014dc:	4618      	mov	r0, r3
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b087      	sub	sp, #28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
 80014f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	3360      	adds	r3, #96	; 0x60
 80014fa:	461a      	mov	r2, r3
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4a10      	ldr	r2, [pc, #64]	; (8001548 <LL_ADC_SetOffset+0x60>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d10b      	bne.n	8001524 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	4313      	orrs	r3, r2
 800151a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001522:	e00b      	b.n	800153c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	430b      	orrs	r3, r1
 8001536:	431a      	orrs	r2, r3
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	601a      	str	r2, [r3, #0]
}
 800153c:	bf00      	nop
 800153e:	371c      	adds	r7, #28
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	58026000 	.word	0x58026000

0800154c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3360      	adds	r3, #96	; 0x60
 800155a:	461a      	mov	r2, r3
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800156c:	4618      	mov	r0, r3
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	f003 031f 	and.w	r3, r3, #31
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	fa01 f303 	lsl.w	r3, r1, r3
 8001598:	431a      	orrs	r2, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	611a      	str	r2, [r3, #16]
}
 800159e:	bf00      	nop
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b087      	sub	sp, #28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4a0c      	ldr	r2, [pc, #48]	; (80015ec <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d00e      	beq.n	80015de <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	3360      	adds	r3, #96	; 0x60
 80015c4:	461a      	mov	r2, r3
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	431a      	orrs	r2, r3
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	601a      	str	r2, [r3, #0]
  }
}
 80015de:	bf00      	nop
 80015e0:	371c      	adds	r7, #28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	58026000 	.word	0x58026000

080015f0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b087      	sub	sp, #28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4a0c      	ldr	r2, [pc, #48]	; (8001630 <LL_ADC_SetOffsetSaturation+0x40>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d10e      	bne.n	8001622 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	3360      	adds	r3, #96	; 0x60
 8001608:	461a      	mov	r2, r3
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	431a      	orrs	r2, r3
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8001622:	bf00      	nop
 8001624:	371c      	adds	r7, #28
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	58026000 	.word	0x58026000

08001634 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001634:	b480      	push	{r7}
 8001636:	b087      	sub	sp, #28
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4a0c      	ldr	r2, [pc, #48]	; (8001674 <LL_ADC_SetOffsetSign+0x40>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d10e      	bne.n	8001666 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	3360      	adds	r3, #96	; 0x60
 800164c:	461a      	mov	r2, r3
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	431a      	orrs	r2, r3
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8001666:	bf00      	nop
 8001668:	371c      	adds	r7, #28
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	58026000 	.word	0x58026000

08001678 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001678:	b480      	push	{r7}
 800167a:	b087      	sub	sp, #28
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	3360      	adds	r3, #96	; 0x60
 8001688:	461a      	mov	r2, r3
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4a0c      	ldr	r2, [pc, #48]	; (80016c8 <LL_ADC_SetOffsetState+0x50>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d108      	bne.n	80016ac <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	431a      	orrs	r2, r3
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80016aa:	e007      	b.n	80016bc <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	431a      	orrs	r2, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	601a      	str	r2, [r3, #0]
}
 80016bc:	bf00      	nop
 80016be:	371c      	adds	r7, #28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	58026000 	.word	0x58026000

080016cc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80016e0:	2301      	movs	r3, #1
 80016e2:	e000      	b.n	80016e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b087      	sub	sp, #28
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	60f8      	str	r0, [r7, #12]
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	3330      	adds	r3, #48	; 0x30
 8001702:	461a      	mov	r2, r3
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	0a1b      	lsrs	r3, r3, #8
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	4413      	add	r3, r2
 8001710:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	f003 031f 	and.w	r3, r3, #31
 800171c:	211f      	movs	r1, #31
 800171e:	fa01 f303 	lsl.w	r3, r1, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	401a      	ands	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	0e9b      	lsrs	r3, r3, #26
 800172a:	f003 011f 	and.w	r1, r3, #31
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	f003 031f 	and.w	r3, r3, #31
 8001734:	fa01 f303 	lsl.w	r3, r1, r3
 8001738:	431a      	orrs	r2, r3
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800173e:	bf00      	nop
 8001740:	371c      	adds	r7, #28
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
 8001752:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	f023 0203 	bic.w	r2, r3, #3
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	60da      	str	r2, [r3, #12]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	f043 0201 	orr.w	r2, r3, #1
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	60da      	str	r2, [r3, #12]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a08      	ldr	r2, [pc, #32]	; (80017c0 <LL_ADC_REG_SetDMATransferMode+0x30>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d107      	bne.n	80017b2 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	f023 0203 	bic.w	r2, r3, #3
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	431a      	orrs	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	60da      	str	r2, [r3, #12]
  }
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	58026000 	.word	0x58026000

080017c4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	3314      	adds	r3, #20
 80017d4:	461a      	mov	r2, r3
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	0e5b      	lsrs	r3, r3, #25
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	4413      	add	r3, r2
 80017e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	0d1b      	lsrs	r3, r3, #20
 80017ec:	f003 031f 	and.w	r3, r3, #31
 80017f0:	2107      	movs	r1, #7
 80017f2:	fa01 f303 	lsl.w	r3, r1, r3
 80017f6:	43db      	mvns	r3, r3
 80017f8:	401a      	ands	r2, r3
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	0d1b      	lsrs	r3, r3, #20
 80017fe:	f003 031f 	and.w	r3, r3, #31
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	fa01 f303 	lsl.w	r3, r1, r3
 8001808:	431a      	orrs	r2, r3
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800180e:	bf00      	nop
 8001810:	371c      	adds	r7, #28
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4a1a      	ldr	r2, [pc, #104]	; (8001894 <LL_ADC_SetChannelSingleDiff+0x78>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d115      	bne.n	800185c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800183c:	43db      	mvns	r3, r3
 800183e:	401a      	ands	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f003 0318 	and.w	r3, r3, #24
 8001846:	4914      	ldr	r1, [pc, #80]	; (8001898 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001848:	40d9      	lsrs	r1, r3
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	400b      	ands	r3, r1
 800184e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001852:	431a      	orrs	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800185a:	e014      	b.n	8001886 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001868:	43db      	mvns	r3, r3
 800186a:	401a      	ands	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f003 0318 	and.w	r3, r3, #24
 8001872:	4909      	ldr	r1, [pc, #36]	; (8001898 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001874:	40d9      	lsrs	r1, r3
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	400b      	ands	r3, r1
 800187a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800187e:	431a      	orrs	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8001886:	bf00      	nop
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	58026000 	.word	0x58026000
 8001898:	000fffff 	.word	0x000fffff

0800189c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 031f 	and.w	r3, r3, #31
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80018c6:	4013      	ands	r3, r2
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6093      	str	r3, [r2, #8]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	5fffffc0 	.word	0x5fffffc0

080018dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018f0:	d101      	bne.n	80018f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <LL_ADC_EnableInternalRegulator+0x24>)
 8001912:	4013      	ands	r3, r2
 8001914:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	6fffffc0 	.word	0x6fffffc0

0800192c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001940:	d101      	bne.n	8001946 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <LL_ADC_Enable+0x24>)
 8001962:	4013      	ands	r3, r2
 8001964:	f043 0201 	orr.w	r2, r3, #1
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	7fffffc0 	.word	0x7fffffc0

0800197c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <LL_ADC_Disable+0x24>)
 800198a:	4013      	ands	r3, r2
 800198c:	f043 0202 	orr.w	r2, r3, #2
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	7fffffc0 	.word	0x7fffffc0

080019a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d101      	bne.n	80019bc <LL_ADC_IsEnabled+0x18>
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <LL_ADC_IsEnabled+0x1a>
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d101      	bne.n	80019e2 <LL_ADC_IsDisableOngoing+0x18>
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <LL_ADC_IsDisableOngoing+0x1a>
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <LL_ADC_REG_StartConversion+0x24>)
 80019fe:	4013      	ands	r3, r2
 8001a00:	f043 0204 	orr.w	r2, r3, #4
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	7fffffc0 	.word	0x7fffffc0

08001a18 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d101      	bne.n	8001a30 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e000      	b.n	8001a32 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	d101      	bne.n	8001a56 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a64:	b590      	push	{r4, r7, lr}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e1ee      	b.n	8001e5c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d109      	bne.n	8001aa0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff f92f 	bl	8000cf0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff19 	bl	80018dc <LL_ADC_IsDeepPowerDownEnabled>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d004      	beq.n	8001aba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff feff 	bl	80018b8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff ff34 	bl	800192c <LL_ADC_IsInternalRegulatorEnabled>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d114      	bne.n	8001af4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff ff18 	bl	8001904 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ad4:	4b8e      	ldr	r3, [pc, #568]	; (8001d10 <HAL_ADC_Init+0x2ac>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	099b      	lsrs	r3, r3, #6
 8001ada:	4a8e      	ldr	r2, [pc, #568]	; (8001d14 <HAL_ADC_Init+0x2b0>)
 8001adc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae0:	099b      	lsrs	r3, r3, #6
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ae6:	e002      	b.n	8001aee <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1f9      	bne.n	8001ae8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ff17 	bl	800192c <LL_ADC_IsInternalRegulatorEnabled>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10d      	bne.n	8001b20 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b08:	f043 0210 	orr.w	r2, r3, #16
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b14:	f043 0201 	orr.w	r2, r3, #1
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff77 	bl	8001a18 <LL_ADC_REG_IsConversionOngoing>
 8001b2a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b30:	f003 0310 	and.w	r3, r3, #16
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f040 8188 	bne.w	8001e4a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f040 8184 	bne.w	8001e4a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b46:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b4a:	f043 0202 	orr.w	r2, r3, #2
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff ff24 	bl	80019a4 <LL_ADC_IsEnabled>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d136      	bne.n	8001bd0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a6c      	ldr	r2, [pc, #432]	; (8001d18 <HAL_ADC_Init+0x2b4>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d004      	beq.n	8001b76 <HAL_ADC_Init+0x112>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a6a      	ldr	r2, [pc, #424]	; (8001d1c <HAL_ADC_Init+0x2b8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d10e      	bne.n	8001b94 <HAL_ADC_Init+0x130>
 8001b76:	4868      	ldr	r0, [pc, #416]	; (8001d18 <HAL_ADC_Init+0x2b4>)
 8001b78:	f7ff ff14 	bl	80019a4 <LL_ADC_IsEnabled>
 8001b7c:	4604      	mov	r4, r0
 8001b7e:	4867      	ldr	r0, [pc, #412]	; (8001d1c <HAL_ADC_Init+0x2b8>)
 8001b80:	f7ff ff10 	bl	80019a4 <LL_ADC_IsEnabled>
 8001b84:	4603      	mov	r3, r0
 8001b86:	4323      	orrs	r3, r4
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	bf0c      	ite	eq
 8001b8c:	2301      	moveq	r3, #1
 8001b8e:	2300      	movne	r3, #0
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	e008      	b.n	8001ba6 <HAL_ADC_Init+0x142>
 8001b94:	4862      	ldr	r0, [pc, #392]	; (8001d20 <HAL_ADC_Init+0x2bc>)
 8001b96:	f7ff ff05 	bl	80019a4 <LL_ADC_IsEnabled>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	bf0c      	ite	eq
 8001ba0:	2301      	moveq	r3, #1
 8001ba2:	2300      	movne	r3, #0
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d012      	beq.n	8001bd0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a5a      	ldr	r2, [pc, #360]	; (8001d18 <HAL_ADC_Init+0x2b4>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d004      	beq.n	8001bbe <HAL_ADC_Init+0x15a>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a58      	ldr	r2, [pc, #352]	; (8001d1c <HAL_ADC_Init+0x2b8>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d101      	bne.n	8001bc2 <HAL_ADC_Init+0x15e>
 8001bbe:	4a59      	ldr	r2, [pc, #356]	; (8001d24 <HAL_ADC_Init+0x2c0>)
 8001bc0:	e000      	b.n	8001bc4 <HAL_ADC_Init+0x160>
 8001bc2:	4a59      	ldr	r2, [pc, #356]	; (8001d28 <HAL_ADC_Init+0x2c4>)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4610      	mov	r0, r2
 8001bcc:	f7ff fc58 	bl	8001480 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a52      	ldr	r2, [pc, #328]	; (8001d20 <HAL_ADC_Init+0x2bc>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d129      	bne.n	8001c2e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	7e5b      	ldrb	r3, [r3, #25]
 8001bde:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001be4:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8001bea:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d013      	beq.n	8001c1c <HAL_ADC_Init+0x1b8>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	2b0c      	cmp	r3, #12
 8001bfa:	d00d      	beq.n	8001c18 <HAL_ADC_Init+0x1b4>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	2b1c      	cmp	r3, #28
 8001c02:	d007      	beq.n	8001c14 <HAL_ADC_Init+0x1b0>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	2b18      	cmp	r3, #24
 8001c0a:	d101      	bne.n	8001c10 <HAL_ADC_Init+0x1ac>
 8001c0c:	2318      	movs	r3, #24
 8001c0e:	e006      	b.n	8001c1e <HAL_ADC_Init+0x1ba>
 8001c10:	2300      	movs	r3, #0
 8001c12:	e004      	b.n	8001c1e <HAL_ADC_Init+0x1ba>
 8001c14:	2310      	movs	r3, #16
 8001c16:	e002      	b.n	8001c1e <HAL_ADC_Init+0x1ba>
 8001c18:	2308      	movs	r3, #8
 8001c1a:	e000      	b.n	8001c1e <HAL_ADC_Init+0x1ba>
 8001c1c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8001c1e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c26:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
 8001c2c:	e00e      	b.n	8001c4c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	7e5b      	ldrb	r3, [r3, #25]
 8001c32:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c38:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001c3e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c46:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d106      	bne.n	8001c64 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	045b      	lsls	r3, r3, #17
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d009      	beq.n	8001c80 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c70:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c78:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a26      	ldr	r2, [pc, #152]	; (8001d20 <HAL_ADC_Init+0x2bc>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d115      	bne.n	8001cb6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68da      	ldr	r2, [r3, #12]
 8001c90:	4b26      	ldr	r3, [pc, #152]	; (8001d2c <HAL_ADC_Init+0x2c8>)
 8001c92:	4013      	ands	r3, r2
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	69b9      	ldr	r1, [r7, #24]
 8001c9a:	430b      	orrs	r3, r1
 8001c9c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	611a      	str	r2, [r3, #16]
 8001cb4:	e009      	b.n	8001cca <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68da      	ldr	r2, [r3, #12]
 8001cbc:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <HAL_ADC_Init+0x2cc>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	69b9      	ldr	r1, [r7, #24]
 8001cc6:	430b      	orrs	r3, r1
 8001cc8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff fea2 	bl	8001a18 <LL_ADC_REG_IsConversionOngoing>
 8001cd4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff feaf 	bl	8001a3e <LL_ADC_INJ_IsConversionOngoing>
 8001ce0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f040 808e 	bne.w	8001e06 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f040 808a 	bne.w	8001e06 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <HAL_ADC_Init+0x2bc>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d11b      	bne.n	8001d34 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	7e1b      	ldrb	r3, [r3, #24]
 8001d00:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d08:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
 8001d0e:	e018      	b.n	8001d42 <HAL_ADC_Init+0x2de>
 8001d10:	24000000 	.word	0x24000000
 8001d14:	053e2d63 	.word	0x053e2d63
 8001d18:	40022000 	.word	0x40022000
 8001d1c:	40022100 	.word	0x40022100
 8001d20:	58026000 	.word	0x58026000
 8001d24:	40022300 	.word	0x40022300
 8001d28:	58026300 	.word	0x58026300
 8001d2c:	fff04007 	.word	0xfff04007
 8001d30:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	7e1b      	ldrb	r3, [r3, #24]
 8001d38:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68da      	ldr	r2, [r3, #12]
 8001d48:	4b46      	ldr	r3, [pc, #280]	; (8001e64 <HAL_ADC_Init+0x400>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	69b9      	ldr	r1, [r7, #24]
 8001d52:	430b      	orrs	r3, r1
 8001d54:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d137      	bne.n	8001dd0 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d64:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a3f      	ldr	r2, [pc, #252]	; (8001e68 <HAL_ADC_Init+0x404>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d116      	bne.n	8001d9e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	691a      	ldr	r2, [r3, #16]
 8001d76:	4b3d      	ldr	r3, [pc, #244]	; (8001e6c <HAL_ADC_Init+0x408>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001d82:	4311      	orrs	r1, r2
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d88:	4311      	orrs	r1, r2
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	431a      	orrs	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0201 	orr.w	r2, r2, #1
 8001d9a:	611a      	str	r2, [r3, #16]
 8001d9c:	e020      	b.n	8001de0 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	691a      	ldr	r2, [r3, #16]
 8001da4:	4b32      	ldr	r3, [pc, #200]	; (8001e70 <HAL_ADC_Init+0x40c>)
 8001da6:	4013      	ands	r3, r2
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001dac:	3a01      	subs	r2, #1
 8001dae:	0411      	lsls	r1, r2, #16
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001db4:	4311      	orrs	r1, r2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001dba:	4311      	orrs	r1, r2
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f042 0201 	orr.w	r2, r2, #1
 8001dcc:	611a      	str	r2, [r3, #16]
 8001dce:	e007      	b.n	8001de0 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691a      	ldr	r2, [r3, #16]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0201 	bic.w	r2, r2, #1
 8001dde:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a1b      	ldr	r2, [pc, #108]	; (8001e68 <HAL_ADC_Init+0x404>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d002      	beq.n	8001e06 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f001 f8a5 	bl	8002f50 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d10c      	bne.n	8001e28 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	f023 010f 	bic.w	r1, r3, #15
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	1e5a      	subs	r2, r3, #1
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	631a      	str	r2, [r3, #48]	; 0x30
 8001e26:	e007      	b.n	8001e38 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 020f 	bic.w	r2, r2, #15
 8001e36:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e3c:	f023 0303 	bic.w	r3, r3, #3
 8001e40:	f043 0201 	orr.w	r2, r3, #1
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	661a      	str	r2, [r3, #96]	; 0x60
 8001e48:	e007      	b.n	8001e5a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e4e:	f043 0210 	orr.w	r2, r3, #16
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3724      	adds	r7, #36	; 0x24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd90      	pop	{r4, r7, pc}
 8001e64:	ffffbffc 	.word	0xffffbffc
 8001e68:	58026000 	.word	0x58026000
 8001e6c:	fc00f81f 	.word	0xfc00f81f
 8001e70:	fc00f81e 	.word	0xfc00f81e

08001e74 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a5c      	ldr	r2, [pc, #368]	; (8001ff4 <HAL_ADC_Start+0x180>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d004      	beq.n	8001e90 <HAL_ADC_Start+0x1c>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a5b      	ldr	r2, [pc, #364]	; (8001ff8 <HAL_ADC_Start+0x184>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d101      	bne.n	8001e94 <HAL_ADC_Start+0x20>
 8001e90:	4b5a      	ldr	r3, [pc, #360]	; (8001ffc <HAL_ADC_Start+0x188>)
 8001e92:	e000      	b.n	8001e96 <HAL_ADC_Start+0x22>
 8001e94:	4b5a      	ldr	r3, [pc, #360]	; (8002000 <HAL_ADC_Start+0x18c>)
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fd00 	bl	800189c <LL_ADC_GetMultimode>
 8001e9c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff fdb8 	bl	8001a18 <LL_ADC_REG_IsConversionOngoing>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f040 809a 	bne.w	8001fe4 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d101      	bne.n	8001ebe <HAL_ADC_Start+0x4a>
 8001eba:	2302      	movs	r3, #2
 8001ebc:	e095      	b.n	8001fea <HAL_ADC_Start+0x176>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 fec4 	bl	8002c54 <ADC_Enable>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ed0:	7dfb      	ldrb	r3, [r7, #23]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f040 8081 	bne.w	8001fda <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001edc:	4b49      	ldr	r3, [pc, #292]	; (8002004 <HAL_ADC_Start+0x190>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a42      	ldr	r2, [pc, #264]	; (8001ff8 <HAL_ADC_Start+0x184>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d002      	beq.n	8001ef8 <HAL_ADC_Start+0x84>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	e000      	b.n	8001efa <HAL_ADC_Start+0x86>
 8001ef8:	4b3e      	ldr	r3, [pc, #248]	; (8001ff4 <HAL_ADC_Start+0x180>)
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6812      	ldr	r2, [r2, #0]
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d002      	beq.n	8001f08 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d105      	bne.n	8001f14 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f0c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f20:	d106      	bne.n	8001f30 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f26:	f023 0206 	bic.w	r2, r3, #6
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	665a      	str	r2, [r3, #100]	; 0x64
 8001f2e:	e002      	b.n	8001f36 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	221c      	movs	r2, #28
 8001f3c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a2b      	ldr	r2, [pc, #172]	; (8001ff8 <HAL_ADC_Start+0x184>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d002      	beq.n	8001f56 <HAL_ADC_Start+0xe2>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	e000      	b.n	8001f58 <HAL_ADC_Start+0xe4>
 8001f56:	4b27      	ldr	r3, [pc, #156]	; (8001ff4 <HAL_ADC_Start+0x180>)
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d008      	beq.n	8001f72 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d005      	beq.n	8001f72 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	2b05      	cmp	r3, #5
 8001f6a:	d002      	beq.n	8001f72 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	2b09      	cmp	r3, #9
 8001f70:	d114      	bne.n	8001f9c <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d007      	beq.n	8001f90 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f84:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f88:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fd2b 	bl	80019f0 <LL_ADC_REG_StartConversion>
 8001f9a:	e025      	b.n	8001fe8 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a12      	ldr	r2, [pc, #72]	; (8001ff8 <HAL_ADC_Start+0x184>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d002      	beq.n	8001fb8 <HAL_ADC_Start+0x144>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	e000      	b.n	8001fba <HAL_ADC_Start+0x146>
 8001fb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <HAL_ADC_Start+0x180>)
 8001fba:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00f      	beq.n	8001fe8 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fcc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fd0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	661a      	str	r2, [r3, #96]	; 0x60
 8001fd8:	e006      	b.n	8001fe8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001fe2:	e001      	b.n	8001fe8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40022000 	.word	0x40022000
 8001ff8:	40022100 	.word	0x40022100
 8001ffc:	40022300 	.word	0x40022300
 8002000:	58026300 	.word	0x58026300
 8002004:	fffff0fe 	.word	0xfffff0fe

08002008 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a60      	ldr	r2, [pc, #384]	; (800219c <HAL_ADC_Start_DMA+0x194>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d004      	beq.n	8002028 <HAL_ADC_Start_DMA+0x20>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a5f      	ldr	r2, [pc, #380]	; (80021a0 <HAL_ADC_Start_DMA+0x198>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d101      	bne.n	800202c <HAL_ADC_Start_DMA+0x24>
 8002028:	4b5e      	ldr	r3, [pc, #376]	; (80021a4 <HAL_ADC_Start_DMA+0x19c>)
 800202a:	e000      	b.n	800202e <HAL_ADC_Start_DMA+0x26>
 800202c:	4b5e      	ldr	r3, [pc, #376]	; (80021a8 <HAL_ADC_Start_DMA+0x1a0>)
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fc34 	bl	800189c <LL_ADC_GetMultimode>
 8002034:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fcec 	bl	8001a18 <LL_ADC_REG_IsConversionOngoing>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	f040 80a2 	bne.w	800218c <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800204e:	2b01      	cmp	r3, #1
 8002050:	d101      	bne.n	8002056 <HAL_ADC_Start_DMA+0x4e>
 8002052:	2302      	movs	r3, #2
 8002054:	e09d      	b.n	8002192 <HAL_ADC_Start_DMA+0x18a>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d006      	beq.n	8002072 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	2b05      	cmp	r3, #5
 8002068:	d003      	beq.n	8002072 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	2b09      	cmp	r3, #9
 800206e:	f040 8086 	bne.w	800217e <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 fdee 	bl	8002c54 <ADC_Enable>
 8002078:	4603      	mov	r3, r0
 800207a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800207c:	7dfb      	ldrb	r3, [r7, #23]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d178      	bne.n	8002174 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002086:	4b49      	ldr	r3, [pc, #292]	; (80021ac <HAL_ADC_Start_DMA+0x1a4>)
 8002088:	4013      	ands	r3, r2
 800208a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a42      	ldr	r2, [pc, #264]	; (80021a0 <HAL_ADC_Start_DMA+0x198>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d002      	beq.n	80020a2 <HAL_ADC_Start_DMA+0x9a>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	e000      	b.n	80020a4 <HAL_ADC_Start_DMA+0x9c>
 80020a2:	4b3e      	ldr	r3, [pc, #248]	; (800219c <HAL_ADC_Start_DMA+0x194>)
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	6812      	ldr	r2, [r2, #0]
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d002      	beq.n	80020b2 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d105      	bne.n	80020be <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d006      	beq.n	80020d8 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020ce:	f023 0206 	bic.w	r2, r3, #6
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	665a      	str	r2, [r3, #100]	; 0x64
 80020d6:	e002      	b.n	80020de <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	665a      	str	r2, [r3, #100]	; 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e2:	4a33      	ldr	r2, [pc, #204]	; (80021b0 <HAL_ADC_Start_DMA+0x1a8>)
 80020e4:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ea:	4a32      	ldr	r2, [pc, #200]	; (80021b4 <HAL_ADC_Start_DMA+0x1ac>)
 80020ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f2:	4a31      	ldr	r2, [pc, #196]	; (80021b8 <HAL_ADC_Start_DMA+0x1b0>)
 80020f4:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	221c      	movs	r2, #28
 80020fc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f042 0210 	orr.w	r2, r2, #16
 8002114:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a28      	ldr	r2, [pc, #160]	; (80021bc <HAL_ADC_Start_DMA+0x1b4>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d10f      	bne.n	8002140 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4619      	mov	r1, r3
 800212e:	4610      	mov	r0, r2
 8002130:	f7ff fb2e 	bl	8001790 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fb19 	bl	8001770 <LL_ADC_EnableDMAReq>
 800213e:	e007      	b.n	8002150 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	4619      	mov	r1, r3
 800214a:	4610      	mov	r0, r2
 800214c:	f7ff fafd 	bl	800174a <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	3340      	adds	r3, #64	; 0x40
 800215a:	4619      	mov	r1, r3
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f001 ffb4 	bl	80040cc <HAL_DMA_Start_IT>
 8002164:	4603      	mov	r3, r0
 8002166:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff fc3f 	bl	80019f0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002172:	e00d      	b.n	8002190 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (tmp_hal_status == HAL_OK)
 800217c:	e008      	b.n	8002190 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800218a:	e001      	b.n	8002190 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800218c:	2302      	movs	r3, #2
 800218e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002190:	7dfb      	ldrb	r3, [r7, #23]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40022000 	.word	0x40022000
 80021a0:	40022100 	.word	0x40022100
 80021a4:	40022300 	.word	0x40022300
 80021a8:	58026300 	.word	0x58026300
 80021ac:	fffff0fe 	.word	0xfffff0fe
 80021b0:	08002e27 	.word	0x08002e27
 80021b4:	08002eff 	.word	0x08002eff
 80021b8:	08002f1b 	.word	0x08002f1b
 80021bc:	58026000 	.word	0x58026000

080021c0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021fc:	b590      	push	{r4, r7, lr}
 80021fe:	b0b9      	sub	sp, #228	; 0xe4
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800220c:	2300      	movs	r3, #0
 800220e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002216:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	4ab3      	ldr	r2, [pc, #716]	; (80024ec <HAL_ADC_ConfigChannel+0x2f0>)
 800221e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002226:	2b01      	cmp	r3, #1
 8002228:	d102      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x34>
 800222a:	2302      	movs	r3, #2
 800222c:	f000 bcfa 	b.w	8002c24 <HAL_ADC_ConfigChannel+0xa28>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fbeb 	bl	8001a18 <LL_ADC_REG_IsConversionOngoing>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	f040 84de 	bne.w	8002c06 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4aa8      	ldr	r2, [pc, #672]	; (80024f0 <HAL_ADC_ConfigChannel+0x2f4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d033      	beq.n	80022bc <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800225c:	2b00      	cmp	r3, #0
 800225e:	d108      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x76>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	0e9b      	lsrs	r3, r3, #26
 8002266:	f003 031f 	and.w	r3, r3, #31
 800226a:	2201      	movs	r2, #1
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	e01d      	b.n	80022ae <HAL_ADC_ConfigChannel+0xb2>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800227e:	fa93 f3a3 	rbit	r3, r3
 8002282:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002286:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800228a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800228e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8002296:	2320      	movs	r3, #32
 8002298:	e004      	b.n	80022a4 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 800229a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800229e:	fab3 f383 	clz	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	f003 031f 	and.w	r3, r3, #31
 80022a8:	2201      	movs	r2, #1
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6812      	ldr	r2, [r2, #0]
 80022b2:	69d1      	ldr	r1, [r2, #28]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	430b      	orrs	r3, r1
 80022ba:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6818      	ldr	r0, [r3, #0]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	6859      	ldr	r1, [r3, #4]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	461a      	mov	r2, r3
 80022ca:	f7ff fa12 	bl	80016f2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff fba0 	bl	8001a18 <LL_ADC_REG_IsConversionOngoing>
 80022d8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fbac 	bl	8001a3e <LL_ADC_INJ_IsConversionOngoing>
 80022e6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f040 8270 	bne.w	80027d4 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f040 826b 	bne.w	80027d4 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6818      	ldr	r0, [r3, #0]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	6819      	ldr	r1, [r3, #0]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	461a      	mov	r2, r3
 800230c:	f7ff fa5a 	bl	80017c4 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a76      	ldr	r2, [pc, #472]	; (80024f0 <HAL_ADC_ConfigChannel+0x2f4>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d10d      	bne.n	8002336 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	695a      	ldr	r2, [r3, #20]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	08db      	lsrs	r3, r3, #3
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002334:	e032      	b.n	800239c <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002336:	4b6f      	ldr	r3, [pc, #444]	; (80024f4 <HAL_ADC_ConfigChannel+0x2f8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800233e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002342:	d10b      	bne.n	800235c <HAL_ADC_ConfigChannel+0x160>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	695a      	ldr	r2, [r3, #20]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	089b      	lsrs	r3, r3, #2
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	e01d      	b.n	8002398 <HAL_ADC_ConfigChannel+0x19c>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	f003 0310 	and.w	r3, r3, #16
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10b      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x186>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	695a      	ldr	r2, [r3, #20]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	089b      	lsrs	r3, r3, #2
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	e00a      	b.n	8002398 <HAL_ADC_ConfigChannel+0x19c>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	695a      	ldr	r2, [r3, #20]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	089b      	lsrs	r3, r3, #2
 800238e:	f003 0304 	and.w	r3, r3, #4
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d048      	beq.n	8002436 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	6919      	ldr	r1, [r3, #16]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023b4:	f7ff f898 	bl	80014e8 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a4c      	ldr	r2, [pc, #304]	; (80024f0 <HAL_ADC_ConfigChannel+0x2f4>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d119      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	6919      	ldr	r1, [r3, #16]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	461a      	mov	r2, r3
 80023d0:	f7ff f930 	bl	8001634 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6818      	ldr	r0, [r3, #0]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	6919      	ldr	r1, [r3, #16]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d102      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x1f0>
 80023e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023ea:	e000      	b.n	80023ee <HAL_ADC_ConfigChannel+0x1f2>
 80023ec:	2300      	movs	r3, #0
 80023ee:	461a      	mov	r2, r3
 80023f0:	f7ff f8fe 	bl	80015f0 <LL_ADC_SetOffsetSaturation>
 80023f4:	e1ee      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	6919      	ldr	r1, [r3, #16]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002404:	2b01      	cmp	r3, #1
 8002406:	d102      	bne.n	800240e <HAL_ADC_ConfigChannel+0x212>
 8002408:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800240c:	e000      	b.n	8002410 <HAL_ADC_ConfigChannel+0x214>
 800240e:	2300      	movs	r3, #0
 8002410:	461a      	mov	r2, r3
 8002412:	f7ff f8cb 	bl	80015ac <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	6919      	ldr	r1, [r3, #16]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	7e1b      	ldrb	r3, [r3, #24]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d102      	bne.n	800242c <HAL_ADC_ConfigChannel+0x230>
 8002426:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800242a:	e000      	b.n	800242e <HAL_ADC_ConfigChannel+0x232>
 800242c:	2300      	movs	r3, #0
 800242e:	461a      	mov	r2, r3
 8002430:	f7ff f8a2 	bl	8001578 <LL_ADC_SetDataRightShift>
 8002434:	e1ce      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a2d      	ldr	r2, [pc, #180]	; (80024f0 <HAL_ADC_ConfigChannel+0x2f4>)
 800243c:	4293      	cmp	r3, r2
 800243e:	f040 8181 	bne.w	8002744 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2100      	movs	r1, #0
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff f87f 	bl	800154c <LL_ADC_GetOffsetChannel>
 800244e:	4603      	mov	r3, r0
 8002450:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10a      	bne.n	800246e <HAL_ADC_ConfigChannel+0x272>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2100      	movs	r1, #0
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff f874 	bl	800154c <LL_ADC_GetOffsetChannel>
 8002464:	4603      	mov	r3, r0
 8002466:	0e9b      	lsrs	r3, r3, #26
 8002468:	f003 021f 	and.w	r2, r3, #31
 800246c:	e01e      	b.n	80024ac <HAL_ADC_ConfigChannel+0x2b0>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2100      	movs	r1, #0
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff f869 	bl	800154c <LL_ADC_GetOffsetChannel>
 800247a:	4603      	mov	r3, r0
 800247c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002484:	fa93 f3a3 	rbit	r3, r3
 8002488:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 800248c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002490:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8002494:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 800249c:	2320      	movs	r3, #32
 800249e:	e004      	b.n	80024aa <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80024a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80024a4:	fab3 f383 	clz	r3, r3
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	461a      	mov	r2, r3
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d105      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x2c8>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	0e9b      	lsrs	r3, r3, #26
 80024be:	f003 031f 	and.w	r3, r3, #31
 80024c2:	e01e      	b.n	8002502 <HAL_ADC_ConfigChannel+0x306>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024d0:	fa93 f3a3 	rbit	r3, r3
 80024d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80024d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80024e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d107      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80024e8:	2320      	movs	r3, #32
 80024ea:	e00a      	b.n	8002502 <HAL_ADC_ConfigChannel+0x306>
 80024ec:	47ff0000 	.word	0x47ff0000
 80024f0:	58026000 	.word	0x58026000
 80024f4:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 80024f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80024fc:	fab3 f383 	clz	r3, r3
 8002500:	b2db      	uxtb	r3, r3
 8002502:	429a      	cmp	r2, r3
 8002504:	d106      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2200      	movs	r2, #0
 800250c:	2100      	movs	r1, #0
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff f8b2 	bl	8001678 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2101      	movs	r1, #1
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff f816 	bl	800154c <LL_ADC_GetOffsetChannel>
 8002520:	4603      	mov	r3, r0
 8002522:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10a      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x344>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2101      	movs	r1, #1
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff f80b 	bl	800154c <LL_ADC_GetOffsetChannel>
 8002536:	4603      	mov	r3, r0
 8002538:	0e9b      	lsrs	r3, r3, #26
 800253a:	f003 021f 	and.w	r2, r3, #31
 800253e:	e01e      	b.n	800257e <HAL_ADC_ConfigChannel+0x382>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2101      	movs	r1, #1
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff f800 	bl	800154c <LL_ADC_GetOffsetChannel>
 800254c:	4603      	mov	r3, r0
 800254e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002552:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002556:	fa93 f3a3 	rbit	r3, r3
 800255a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800255e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002562:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002566:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800256e:	2320      	movs	r3, #32
 8002570:	e004      	b.n	800257c <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8002572:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002576:	fab3 f383 	clz	r3, r3
 800257a:	b2db      	uxtb	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002586:	2b00      	cmp	r3, #0
 8002588:	d105      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x39a>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	0e9b      	lsrs	r3, r3, #26
 8002590:	f003 031f 	and.w	r3, r3, #31
 8002594:	e018      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x3cc>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025a2:	fa93 f3a3 	rbit	r3, r3
 80025a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80025aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80025b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80025ba:	2320      	movs	r3, #32
 80025bc:	e004      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80025be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025c2:	fab3 f383 	clz	r3, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d106      	bne.n	80025da <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2200      	movs	r2, #0
 80025d2:	2101      	movs	r1, #1
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff f84f 	bl	8001678 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2102      	movs	r1, #2
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe ffb3 	bl	800154c <LL_ADC_GetOffsetChannel>
 80025e6:	4603      	mov	r3, r0
 80025e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10a      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x40a>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2102      	movs	r1, #2
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fe ffa8 	bl	800154c <LL_ADC_GetOffsetChannel>
 80025fc:	4603      	mov	r3, r0
 80025fe:	0e9b      	lsrs	r3, r3, #26
 8002600:	f003 021f 	and.w	r2, r3, #31
 8002604:	e01e      	b.n	8002644 <HAL_ADC_ConfigChannel+0x448>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2102      	movs	r1, #2
 800260c:	4618      	mov	r0, r3
 800260e:	f7fe ff9d 	bl	800154c <LL_ADC_GetOffsetChannel>
 8002612:	4603      	mov	r3, r0
 8002614:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002618:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800261c:	fa93 f3a3 	rbit	r3, r3
 8002620:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002624:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002628:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800262c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8002634:	2320      	movs	r3, #32
 8002636:	e004      	b.n	8002642 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8002638:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800263c:	fab3 f383 	clz	r3, r3
 8002640:	b2db      	uxtb	r3, r3
 8002642:	461a      	mov	r2, r3
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800264c:	2b00      	cmp	r3, #0
 800264e:	d105      	bne.n	800265c <HAL_ADC_ConfigChannel+0x460>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	0e9b      	lsrs	r3, r3, #26
 8002656:	f003 031f 	and.w	r3, r3, #31
 800265a:	e014      	b.n	8002686 <HAL_ADC_ConfigChannel+0x48a>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002662:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002664:	fa93 f3a3 	rbit	r3, r3
 8002668:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800266a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800266c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002670:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8002678:	2320      	movs	r3, #32
 800267a:	e004      	b.n	8002686 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 800267c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002680:	fab3 f383 	clz	r3, r3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	429a      	cmp	r2, r3
 8002688:	d106      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2200      	movs	r2, #0
 8002690:	2102      	movs	r1, #2
 8002692:	4618      	mov	r0, r3
 8002694:	f7fe fff0 	bl	8001678 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2103      	movs	r1, #3
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe ff54 	bl	800154c <LL_ADC_GetOffsetChannel>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10a      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x4c8>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2103      	movs	r1, #3
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fe ff49 	bl	800154c <LL_ADC_GetOffsetChannel>
 80026ba:	4603      	mov	r3, r0
 80026bc:	0e9b      	lsrs	r3, r3, #26
 80026be:	f003 021f 	and.w	r2, r3, #31
 80026c2:	e017      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x4f8>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2103      	movs	r1, #3
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe ff3e 	bl	800154c <LL_ADC_GetOffsetChannel>
 80026d0:	4603      	mov	r3, r0
 80026d2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026d6:	fa93 f3a3 	rbit	r3, r3
 80026da:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80026dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026de:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80026e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80026e6:	2320      	movs	r3, #32
 80026e8:	e003      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80026ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026ec:	fab3 f383 	clz	r3, r3
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	461a      	mov	r2, r3
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d105      	bne.n	800270c <HAL_ADC_ConfigChannel+0x510>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	0e9b      	lsrs	r3, r3, #26
 8002706:	f003 031f 	and.w	r3, r3, #31
 800270a:	e011      	b.n	8002730 <HAL_ADC_ConfigChannel+0x534>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002712:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002714:	fa93 f3a3 	rbit	r3, r3
 8002718:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800271a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800271c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800271e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8002724:	2320      	movs	r3, #32
 8002726:	e003      	b.n	8002730 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8002728:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	429a      	cmp	r2, r3
 8002732:	d14f      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2200      	movs	r2, #0
 800273a:	2103      	movs	r1, #3
 800273c:	4618      	mov	r0, r3
 800273e:	f7fe ff9b 	bl	8001678 <LL_ADC_SetOffsetState>
 8002742:	e047      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800274a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	069b      	lsls	r3, r3, #26
 8002754:	429a      	cmp	r2, r3
 8002756:	d107      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002766:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800276e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	069b      	lsls	r3, r3, #26
 8002778:	429a      	cmp	r2, r3
 800277a:	d107      	bne.n	800278c <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800278a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002792:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	069b      	lsls	r3, r3, #26
 800279c:	429a      	cmp	r2, r3
 800279e:	d107      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027ae:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	069b      	lsls	r3, r3, #26
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d107      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027d2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff f8e3 	bl	80019a4 <LL_ADC_IsEnabled>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f040 8219 	bne.w	8002c18 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	6819      	ldr	r1, [r3, #0]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	461a      	mov	r2, r3
 80027f4:	f7ff f812 	bl	800181c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	4aa1      	ldr	r2, [pc, #644]	; (8002a84 <HAL_ADC_ConfigChannel+0x888>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	f040 812e 	bne.w	8002a60 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10b      	bne.n	800282c <HAL_ADC_ConfigChannel+0x630>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	0e9b      	lsrs	r3, r3, #26
 800281a:	3301      	adds	r3, #1
 800281c:	f003 031f 	and.w	r3, r3, #31
 8002820:	2b09      	cmp	r3, #9
 8002822:	bf94      	ite	ls
 8002824:	2301      	movls	r3, #1
 8002826:	2300      	movhi	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	e019      	b.n	8002860 <HAL_ADC_ConfigChannel+0x664>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002834:	fa93 f3a3 	rbit	r3, r3
 8002838:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800283a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800283c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800283e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8002844:	2320      	movs	r3, #32
 8002846:	e003      	b.n	8002850 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8002848:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800284a:	fab3 f383 	clz	r3, r3
 800284e:	b2db      	uxtb	r3, r3
 8002850:	3301      	adds	r3, #1
 8002852:	f003 031f 	and.w	r3, r3, #31
 8002856:	2b09      	cmp	r3, #9
 8002858:	bf94      	ite	ls
 800285a:	2301      	movls	r3, #1
 800285c:	2300      	movhi	r3, #0
 800285e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002860:	2b00      	cmp	r3, #0
 8002862:	d079      	beq.n	8002958 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800286c:	2b00      	cmp	r3, #0
 800286e:	d107      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x684>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	0e9b      	lsrs	r3, r3, #26
 8002876:	3301      	adds	r3, #1
 8002878:	069b      	lsls	r3, r3, #26
 800287a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800287e:	e015      	b.n	80028ac <HAL_ADC_ConfigChannel+0x6b0>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002888:	fa93 f3a3 	rbit	r3, r3
 800288c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800288e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002890:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8002898:	2320      	movs	r3, #32
 800289a:	e003      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 800289c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800289e:	fab3 f383 	clz	r3, r3
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	3301      	adds	r3, #1
 80028a6:	069b      	lsls	r3, r3, #26
 80028a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d109      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x6d0>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	0e9b      	lsrs	r3, r3, #26
 80028be:	3301      	adds	r3, #1
 80028c0:	f003 031f 	and.w	r3, r3, #31
 80028c4:	2101      	movs	r1, #1
 80028c6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ca:	e017      	b.n	80028fc <HAL_ADC_ConfigChannel+0x700>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028d4:	fa93 f3a3 	rbit	r3, r3
 80028d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80028da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80028de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80028e4:	2320      	movs	r3, #32
 80028e6:	e003      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80028e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028ea:	fab3 f383 	clz	r3, r3
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	3301      	adds	r3, #1
 80028f2:	f003 031f 	and.w	r3, r3, #31
 80028f6:	2101      	movs	r1, #1
 80028f8:	fa01 f303 	lsl.w	r3, r1, r3
 80028fc:	ea42 0103 	orr.w	r1, r2, r3
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10a      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x726>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	0e9b      	lsrs	r3, r3, #26
 8002912:	3301      	adds	r3, #1
 8002914:	f003 021f 	and.w	r2, r3, #31
 8002918:	4613      	mov	r3, r2
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	4413      	add	r3, r2
 800291e:	051b      	lsls	r3, r3, #20
 8002920:	e018      	b.n	8002954 <HAL_ADC_ConfigChannel+0x758>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292a:	fa93 f3a3 	rbit	r3, r3
 800292e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002932:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 800293a:	2320      	movs	r3, #32
 800293c:	e003      	b.n	8002946 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800293e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002940:	fab3 f383 	clz	r3, r3
 8002944:	b2db      	uxtb	r3, r3
 8002946:	3301      	adds	r3, #1
 8002948:	f003 021f 	and.w	r2, r3, #31
 800294c:	4613      	mov	r3, r2
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	4413      	add	r3, r2
 8002952:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002954:	430b      	orrs	r3, r1
 8002956:	e07e      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002960:	2b00      	cmp	r3, #0
 8002962:	d107      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x778>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	0e9b      	lsrs	r3, r3, #26
 800296a:	3301      	adds	r3, #1
 800296c:	069b      	lsls	r3, r3, #26
 800296e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002972:	e015      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x7a4>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297c:	fa93 f3a3 	rbit	r3, r3
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 800298c:	2320      	movs	r3, #32
 800298e:	e003      	b.n	8002998 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8002990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002992:	fab3 f383 	clz	r3, r3
 8002996:	b2db      	uxtb	r3, r3
 8002998:	3301      	adds	r3, #1
 800299a:	069b      	lsls	r3, r3, #26
 800299c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d109      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x7c4>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	0e9b      	lsrs	r3, r3, #26
 80029b2:	3301      	adds	r3, #1
 80029b4:	f003 031f 	and.w	r3, r3, #31
 80029b8:	2101      	movs	r1, #1
 80029ba:	fa01 f303 	lsl.w	r3, r1, r3
 80029be:	e017      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x7f4>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	fa93 f3a3 	rbit	r3, r3
 80029cc:	61bb      	str	r3, [r7, #24]
  return result;
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80029d8:	2320      	movs	r3, #32
 80029da:	e003      	b.n	80029e4 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	fab3 f383 	clz	r3, r3
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	3301      	adds	r3, #1
 80029e6:	f003 031f 	and.w	r3, r3, #31
 80029ea:	2101      	movs	r1, #1
 80029ec:	fa01 f303 	lsl.w	r3, r1, r3
 80029f0:	ea42 0103 	orr.w	r1, r2, r3
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10d      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x820>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	0e9b      	lsrs	r3, r3, #26
 8002a06:	3301      	adds	r3, #1
 8002a08:	f003 021f 	and.w	r2, r3, #31
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	4413      	add	r3, r2
 8002a12:	3b1e      	subs	r3, #30
 8002a14:	051b      	lsls	r3, r3, #20
 8002a16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a1a:	e01b      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x858>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	fa93 f3a3 	rbit	r3, r3
 8002a28:	60fb      	str	r3, [r7, #12]
  return result;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8002a34:	2320      	movs	r3, #32
 8002a36:	e003      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	3301      	adds	r3, #1
 8002a42:	f003 021f 	and.w	r2, r3, #31
 8002a46:	4613      	mov	r3, r2
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3b1e      	subs	r3, #30
 8002a4e:	051b      	lsls	r3, r3, #20
 8002a50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a54:	430b      	orrs	r3, r1
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	6892      	ldr	r2, [r2, #8]
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	f7fe feb2 	bl	80017c4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f280 80d7 	bge.w	8002c18 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a06      	ldr	r2, [pc, #24]	; (8002a88 <HAL_ADC_ConfigChannel+0x88c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d004      	beq.n	8002a7e <HAL_ADC_ConfigChannel+0x882>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a04      	ldr	r2, [pc, #16]	; (8002a8c <HAL_ADC_ConfigChannel+0x890>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d10a      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x898>
 8002a7e:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <HAL_ADC_ConfigChannel+0x894>)
 8002a80:	e009      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x89a>
 8002a82:	bf00      	nop
 8002a84:	47ff0000 	.word	0x47ff0000
 8002a88:	40022000 	.word	0x40022000
 8002a8c:	40022100 	.word	0x40022100
 8002a90:	40022300 	.word	0x40022300
 8002a94:	4b65      	ldr	r3, [pc, #404]	; (8002c2c <HAL_ADC_ConfigChannel+0xa30>)
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe fd18 	bl	80014cc <LL_ADC_GetCommonPathInternalCh>
 8002a9c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a62      	ldr	r2, [pc, #392]	; (8002c30 <HAL_ADC_ConfigChannel+0xa34>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d004      	beq.n	8002ab4 <HAL_ADC_ConfigChannel+0x8b8>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a61      	ldr	r2, [pc, #388]	; (8002c34 <HAL_ADC_ConfigChannel+0xa38>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d10e      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x8d6>
 8002ab4:	485e      	ldr	r0, [pc, #376]	; (8002c30 <HAL_ADC_ConfigChannel+0xa34>)
 8002ab6:	f7fe ff75 	bl	80019a4 <LL_ADC_IsEnabled>
 8002aba:	4604      	mov	r4, r0
 8002abc:	485d      	ldr	r0, [pc, #372]	; (8002c34 <HAL_ADC_ConfigChannel+0xa38>)
 8002abe:	f7fe ff71 	bl	80019a4 <LL_ADC_IsEnabled>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	4323      	orrs	r3, r4
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	bf0c      	ite	eq
 8002aca:	2301      	moveq	r3, #1
 8002acc:	2300      	movne	r3, #0
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	e008      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x8e8>
 8002ad2:	4859      	ldr	r0, [pc, #356]	; (8002c38 <HAL_ADC_ConfigChannel+0xa3c>)
 8002ad4:	f7fe ff66 	bl	80019a4 <LL_ADC_IsEnabled>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	bf0c      	ite	eq
 8002ade:	2301      	moveq	r3, #1
 8002ae0:	2300      	movne	r3, #0
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 8084 	beq.w	8002bf2 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a53      	ldr	r2, [pc, #332]	; (8002c3c <HAL_ADC_ConfigChannel+0xa40>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d132      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x95e>
 8002af4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002af8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d12c      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a4c      	ldr	r2, [pc, #304]	; (8002c38 <HAL_ADC_ConfigChannel+0xa3c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	f040 8086 	bne.w	8002c18 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a47      	ldr	r2, [pc, #284]	; (8002c30 <HAL_ADC_ConfigChannel+0xa34>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d004      	beq.n	8002b20 <HAL_ADC_ConfigChannel+0x924>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a46      	ldr	r2, [pc, #280]	; (8002c34 <HAL_ADC_ConfigChannel+0xa38>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d101      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x928>
 8002b20:	4a47      	ldr	r2, [pc, #284]	; (8002c40 <HAL_ADC_ConfigChannel+0xa44>)
 8002b22:	e000      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x92a>
 8002b24:	4a41      	ldr	r2, [pc, #260]	; (8002c2c <HAL_ADC_ConfigChannel+0xa30>)
 8002b26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b2a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4610      	mov	r0, r2
 8002b32:	f7fe fcb8 	bl	80014a6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b36:	4b43      	ldr	r3, [pc, #268]	; (8002c44 <HAL_ADC_ConfigChannel+0xa48>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	099b      	lsrs	r3, r3, #6
 8002b3c:	4a42      	ldr	r2, [pc, #264]	; (8002c48 <HAL_ADC_ConfigChannel+0xa4c>)
 8002b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b42:	099b      	lsrs	r3, r3, #6
 8002b44:	3301      	adds	r3, #1
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002b4a:	e002      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1f9      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b58:	e05e      	b.n	8002c18 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a3b      	ldr	r2, [pc, #236]	; (8002c4c <HAL_ADC_ConfigChannel+0xa50>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d120      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x9aa>
 8002b64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d11a      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a30      	ldr	r2, [pc, #192]	; (8002c38 <HAL_ADC_ConfigChannel+0xa3c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d14e      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a2c      	ldr	r2, [pc, #176]	; (8002c30 <HAL_ADC_ConfigChannel+0xa34>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d004      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x992>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a2a      	ldr	r2, [pc, #168]	; (8002c34 <HAL_ADC_ConfigChannel+0xa38>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d101      	bne.n	8002b92 <HAL_ADC_ConfigChannel+0x996>
 8002b8e:	4a2c      	ldr	r2, [pc, #176]	; (8002c40 <HAL_ADC_ConfigChannel+0xa44>)
 8002b90:	e000      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x998>
 8002b92:	4a26      	ldr	r2, [pc, #152]	; (8002c2c <HAL_ADC_ConfigChannel+0xa30>)
 8002b94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	f7fe fc81 	bl	80014a6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ba4:	e038      	b.n	8002c18 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a29      	ldr	r2, [pc, #164]	; (8002c50 <HAL_ADC_ConfigChannel+0xa54>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d133      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0xa1c>
 8002bb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002bb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d12d      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a1d      	ldr	r2, [pc, #116]	; (8002c38 <HAL_ADC_ConfigChannel+0xa3c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d128      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a19      	ldr	r2, [pc, #100]	; (8002c30 <HAL_ADC_ConfigChannel+0xa34>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d004      	beq.n	8002bda <HAL_ADC_ConfigChannel+0x9de>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a17      	ldr	r2, [pc, #92]	; (8002c34 <HAL_ADC_ConfigChannel+0xa38>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d101      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x9e2>
 8002bda:	4a19      	ldr	r2, [pc, #100]	; (8002c40 <HAL_ADC_ConfigChannel+0xa44>)
 8002bdc:	e000      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x9e4>
 8002bde:	4a13      	ldr	r2, [pc, #76]	; (8002c2c <HAL_ADC_ConfigChannel+0xa30>)
 8002be0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002be4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002be8:	4619      	mov	r1, r3
 8002bea:	4610      	mov	r0, r2
 8002bec:	f7fe fc5b 	bl	80014a6 <LL_ADC_SetCommonPathInternalCh>
 8002bf0:	e012      	b.n	8002c18 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf6:	f043 0220 	orr.w	r2, r3, #32
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8002c04:	e008      	b.n	8002c18 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c0a:	f043 0220 	orr.w	r2, r3, #32
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002c20:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	37e4      	adds	r7, #228	; 0xe4
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd90      	pop	{r4, r7, pc}
 8002c2c:	58026300 	.word	0x58026300
 8002c30:	40022000 	.word	0x40022000
 8002c34:	40022100 	.word	0x40022100
 8002c38:	58026000 	.word	0x58026000
 8002c3c:	c7520000 	.word	0xc7520000
 8002c40:	40022300 	.word	0x40022300
 8002c44:	24000000 	.word	0x24000000
 8002c48:	053e2d63 	.word	0x053e2d63
 8002c4c:	c3210000 	.word	0xc3210000
 8002c50:	cb840000 	.word	0xcb840000

08002c54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fe fe9f 	bl	80019a4 <LL_ADC_IsEnabled>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d16e      	bne.n	8002d4a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	4b38      	ldr	r3, [pc, #224]	; (8002d54 <ADC_Enable+0x100>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00d      	beq.n	8002c96 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c7e:	f043 0210 	orr.w	r2, r3, #16
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c8a:	f043 0201 	orr.w	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e05a      	b.n	8002d4c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe fe5a 	bl	8001954 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ca0:	f7fe fbaa 	bl	80013f8 <HAL_GetTick>
 8002ca4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a2b      	ldr	r2, [pc, #172]	; (8002d58 <ADC_Enable+0x104>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d004      	beq.n	8002cba <ADC_Enable+0x66>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a29      	ldr	r2, [pc, #164]	; (8002d5c <ADC_Enable+0x108>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d101      	bne.n	8002cbe <ADC_Enable+0x6a>
 8002cba:	4b29      	ldr	r3, [pc, #164]	; (8002d60 <ADC_Enable+0x10c>)
 8002cbc:	e000      	b.n	8002cc0 <ADC_Enable+0x6c>
 8002cbe:	4b29      	ldr	r3, [pc, #164]	; (8002d64 <ADC_Enable+0x110>)
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fe fdeb 	bl	800189c <LL_ADC_GetMultimode>
 8002cc6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a23      	ldr	r2, [pc, #140]	; (8002d5c <ADC_Enable+0x108>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d002      	beq.n	8002cd8 <ADC_Enable+0x84>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	e000      	b.n	8002cda <ADC_Enable+0x86>
 8002cd8:	4b1f      	ldr	r3, [pc, #124]	; (8002d58 <ADC_Enable+0x104>)
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6812      	ldr	r2, [r2, #0]
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d02c      	beq.n	8002d3c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d130      	bne.n	8002d4a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ce8:	e028      	b.n	8002d3c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fe fe58 	bl	80019a4 <LL_ADC_IsEnabled>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d104      	bne.n	8002d04 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe fe28 	bl	8001954 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d04:	f7fe fb78 	bl	80013f8 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d914      	bls.n	8002d3c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d00d      	beq.n	8002d3c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d24:	f043 0210 	orr.w	r2, r3, #16
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d30:	f043 0201 	orr.w	r2, r3, #1
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e007      	b.n	8002d4c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d1cf      	bne.n	8002cea <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	8000003f 	.word	0x8000003f
 8002d58:	40022000 	.word	0x40022000
 8002d5c:	40022100 	.word	0x40022100
 8002d60:	40022300 	.word	0x40022300
 8002d64:	58026300 	.word	0x58026300

08002d68 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fe fe28 	bl	80019ca <LL_ADC_IsDisableOngoing>
 8002d7a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fe fe0f 	bl	80019a4 <LL_ADC_IsEnabled>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d047      	beq.n	8002e1c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d144      	bne.n	8002e1c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 030d 	and.w	r3, r3, #13
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d10c      	bne.n	8002dba <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fe fde9 	bl	800197c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2203      	movs	r2, #3
 8002db0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002db2:	f7fe fb21 	bl	80013f8 <HAL_GetTick>
 8002db6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002db8:	e029      	b.n	8002e0e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dbe:	f043 0210 	orr.w	r2, r3, #16
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dca:	f043 0201 	orr.w	r2, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e023      	b.n	8002e1e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002dd6:	f7fe fb0f 	bl	80013f8 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d914      	bls.n	8002e0e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00d      	beq.n	8002e0e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002df6:	f043 0210 	orr.w	r2, r3, #16
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e02:	f043 0201 	orr.w	r2, r3, #1
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e007      	b.n	8002e1e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1dc      	bne.n	8002dd6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e38:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d14b      	bne.n	8002ed8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e44:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d021      	beq.n	8002e9e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fe fc34 	bl	80016cc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d032      	beq.n	8002ed0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d12b      	bne.n	8002ed0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	661a      	str	r2, [r3, #96]	; 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d11f      	bne.n	8002ed0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e94:	f043 0201 	orr.w	r2, r3, #1
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	661a      	str	r2, [r3, #96]	; 0x60
 8002e9c:	e018      	b.n	8002ed0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f003 0303 	and.w	r3, r3, #3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d111      	bne.n	8002ed0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	661a      	str	r2, [r3, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ebc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d105      	bne.n	8002ed0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec8:	f043 0201 	orr.w	r2, r3, #1
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	661a      	str	r2, [r3, #96]	; 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f7ff f975 	bl	80021c0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ed6:	e00e      	b.n	8002ef6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f7ff f97f 	bl	80021e8 <HAL_ADC_ErrorCallback>
}
 8002eea:	e004      	b.n	8002ef6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	4798      	blx	r3
}
 8002ef6:	bf00      	nop
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b084      	sub	sp, #16
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f7ff f961 	bl	80021d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f12:	bf00      	nop
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b084      	sub	sp, #16
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f38:	f043 0204 	orr.w	r2, r3, #4
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f7ff f951 	bl	80021e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f46:	bf00      	nop
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a6b      	ldr	r2, [pc, #428]	; (800310c <ADC_ConfigureBoostMode+0x1bc>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d004      	beq.n	8002f6c <ADC_ConfigureBoostMode+0x1c>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a6a      	ldr	r2, [pc, #424]	; (8003110 <ADC_ConfigureBoostMode+0x1c0>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d109      	bne.n	8002f80 <ADC_ConfigureBoostMode+0x30>
 8002f6c:	4b69      	ldr	r3, [pc, #420]	; (8003114 <ADC_ConfigureBoostMode+0x1c4>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	bf14      	ite	ne
 8002f78:	2301      	movne	r3, #1
 8002f7a:	2300      	moveq	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	e008      	b.n	8002f92 <ADC_ConfigureBoostMode+0x42>
 8002f80:	4b65      	ldr	r3, [pc, #404]	; (8003118 <ADC_ConfigureBoostMode+0x1c8>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf14      	ite	ne
 8002f8c:	2301      	movne	r3, #1
 8002f8e:	2300      	moveq	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d01c      	beq.n	8002fd0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002f96:	f005 fcfb 	bl	8008990 <HAL_RCC_GetHCLKFreq>
 8002f9a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fa4:	d010      	beq.n	8002fc8 <ADC_ConfigureBoostMode+0x78>
 8002fa6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002faa:	d871      	bhi.n	8003090 <ADC_ConfigureBoostMode+0x140>
 8002fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb0:	d002      	beq.n	8002fb8 <ADC_ConfigureBoostMode+0x68>
 8002fb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fb6:	d16b      	bne.n	8003090 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	0c1b      	lsrs	r3, r3, #16
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc4:	60fb      	str	r3, [r7, #12]
        break;
 8002fc6:	e066      	b.n	8003096 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	089b      	lsrs	r3, r3, #2
 8002fcc:	60fb      	str	r3, [r7, #12]
        break;
 8002fce:	e062      	b.n	8003096 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002fd0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002fd4:	f006 fc32 	bl	800983c <HAL_RCCEx_GetPeriphCLKFreq>
 8002fd8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002fe2:	d051      	beq.n	8003088 <ADC_ConfigureBoostMode+0x138>
 8002fe4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002fe8:	d854      	bhi.n	8003094 <ADC_ConfigureBoostMode+0x144>
 8002fea:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002fee:	d047      	beq.n	8003080 <ADC_ConfigureBoostMode+0x130>
 8002ff0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002ff4:	d84e      	bhi.n	8003094 <ADC_ConfigureBoostMode+0x144>
 8002ff6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002ffa:	d03d      	beq.n	8003078 <ADC_ConfigureBoostMode+0x128>
 8002ffc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003000:	d848      	bhi.n	8003094 <ADC_ConfigureBoostMode+0x144>
 8003002:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003006:	d033      	beq.n	8003070 <ADC_ConfigureBoostMode+0x120>
 8003008:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800300c:	d842      	bhi.n	8003094 <ADC_ConfigureBoostMode+0x144>
 800300e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003012:	d029      	beq.n	8003068 <ADC_ConfigureBoostMode+0x118>
 8003014:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003018:	d83c      	bhi.n	8003094 <ADC_ConfigureBoostMode+0x144>
 800301a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800301e:	d01a      	beq.n	8003056 <ADC_ConfigureBoostMode+0x106>
 8003020:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003024:	d836      	bhi.n	8003094 <ADC_ConfigureBoostMode+0x144>
 8003026:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800302a:	d014      	beq.n	8003056 <ADC_ConfigureBoostMode+0x106>
 800302c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003030:	d830      	bhi.n	8003094 <ADC_ConfigureBoostMode+0x144>
 8003032:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003036:	d00e      	beq.n	8003056 <ADC_ConfigureBoostMode+0x106>
 8003038:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800303c:	d82a      	bhi.n	8003094 <ADC_ConfigureBoostMode+0x144>
 800303e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003042:	d008      	beq.n	8003056 <ADC_ConfigureBoostMode+0x106>
 8003044:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003048:	d824      	bhi.n	8003094 <ADC_ConfigureBoostMode+0x144>
 800304a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800304e:	d002      	beq.n	8003056 <ADC_ConfigureBoostMode+0x106>
 8003050:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003054:	d11e      	bne.n	8003094 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	0c9b      	lsrs	r3, r3, #18
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	fbb2 f3f3 	udiv	r3, r2, r3
 8003064:	60fb      	str	r3, [r7, #12]
        break;
 8003066:	e016      	b.n	8003096 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	091b      	lsrs	r3, r3, #4
 800306c:	60fb      	str	r3, [r7, #12]
        break;
 800306e:	e012      	b.n	8003096 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	60fb      	str	r3, [r7, #12]
        break;
 8003076:	e00e      	b.n	8003096 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	099b      	lsrs	r3, r3, #6
 800307c:	60fb      	str	r3, [r7, #12]
        break;
 800307e:	e00a      	b.n	8003096 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	09db      	lsrs	r3, r3, #7
 8003084:	60fb      	str	r3, [r7, #12]
        break;
 8003086:	e006      	b.n	8003096 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	0a1b      	lsrs	r3, r3, #8
 800308c:	60fb      	str	r3, [r7, #12]
        break;
 800308e:	e002      	b.n	8003096 <ADC_ConfigureBoostMode+0x146>
        break;
 8003090:	bf00      	nop
 8003092:	e000      	b.n	8003096 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003094:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	085b      	lsrs	r3, r3, #1
 800309a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4a1f      	ldr	r2, [pc, #124]	; (800311c <ADC_ConfigureBoostMode+0x1cc>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d808      	bhi.n	80030b6 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80030b2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80030b4:	e025      	b.n	8003102 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	4a19      	ldr	r2, [pc, #100]	; (8003120 <ADC_ConfigureBoostMode+0x1d0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d80a      	bhi.n	80030d4 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030d0:	609a      	str	r2, [r3, #8]
}
 80030d2:	e016      	b.n	8003102 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4a13      	ldr	r2, [pc, #76]	; (8003124 <ADC_ConfigureBoostMode+0x1d4>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d80a      	bhi.n	80030f2 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ee:	609a      	str	r2, [r3, #8]
}
 80030f0:	e007      	b.n	8003102 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003100:	609a      	str	r2, [r3, #8]
}
 8003102:	bf00      	nop
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40022000 	.word	0x40022000
 8003110:	40022100 	.word	0x40022100
 8003114:	40022300 	.word	0x40022300
 8003118:	58026300 	.word	0x58026300
 800311c:	005f5e10 	.word	0x005f5e10
 8003120:	00bebc20 	.word	0x00bebc20
 8003124:	017d7840 	.word	0x017d7840

08003128 <LL_ADC_IsEnabled>:
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <LL_ADC_IsEnabled+0x18>
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <LL_ADC_IsEnabled+0x1a>
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
	...

08003150 <LL_ADC_StartCalibration>:
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	4b09      	ldr	r3, [pc, #36]	; (8003188 <LL_ADC_StartCalibration+0x38>)
 8003162:	4013      	ands	r3, r2
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003170:	430a      	orrs	r2, r1
 8003172:	4313      	orrs	r3, r2
 8003174:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	609a      	str	r2, [r3, #8]
}
 800317c:	bf00      	nop
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	3ffeffc0 	.word	0x3ffeffc0

0800318c <LL_ADC_IsCalibrationOnGoing>:
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800319c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031a0:	d101      	bne.n	80031a6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <LL_ADC_REG_IsConversionOngoing>:
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d101      	bne.n	80031cc <LL_ADC_REG_IsConversionOngoing+0x18>
 80031c8:	2301      	movs	r3, #1
 80031ca:	e000      	b.n	80031ce <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
	...

080031dc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <HAL_ADCEx_Calibration_Start+0x1e>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e04c      	b.n	8003294 <HAL_ADCEx_Calibration_Start+0xb8>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f7ff fdb0 	bl	8002d68 <ADC_Disable>
 8003208:	4603      	mov	r3, r0
 800320a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800320c:	7dfb      	ldrb	r3, [r7, #23]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d135      	bne.n	800327e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003216:	4b21      	ldr	r3, [pc, #132]	; (800329c <HAL_ADCEx_Calibration_Start+0xc0>)
 8003218:	4013      	ands	r3, r2
 800321a:	f043 0202 	orr.w	r2, r3, #2
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	661a      	str	r2, [r3, #96]	; 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	68b9      	ldr	r1, [r7, #8]
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff ff90 	bl	8003150 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003230:	e014      	b.n	800325c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	3301      	adds	r3, #1
 8003236:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	4a19      	ldr	r2, [pc, #100]	; (80032a0 <HAL_ADCEx_Calibration_Start+0xc4>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d30d      	bcc.n	800325c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003244:	f023 0312 	bic.w	r3, r3, #18
 8003248:	f043 0210 	orr.w	r2, r3, #16
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e01b      	b.n	8003294 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff ff93 	bl	800318c <LL_ADC_IsCalibrationOnGoing>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1e2      	bne.n	8003232 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003270:	f023 0303 	bic.w	r3, r3, #3
 8003274:	f043 0201 	orr.w	r2, r3, #1
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	661a      	str	r2, [r3, #96]	; 0x60
 800327c:	e005      	b.n	800328a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003282:	f043 0210 	orr.w	r2, r3, #16
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	661a      	str	r2, [r3, #96]	; 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003292:	7dfb      	ldrb	r3, [r7, #23]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	ffffeefd 	.word	0xffffeefd
 80032a0:	25c3f800 	.word	0x25c3f800

080032a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80032a4:	b590      	push	{r4, r7, lr}
 80032a6:	b0a3      	sub	sp, #140	; 0x8c
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032ae:	2300      	movs	r3, #0
 80032b0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80032be:	2302      	movs	r3, #2
 80032c0:	e0c1      	b.n	8003446 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80032ca:	2300      	movs	r3, #0
 80032cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80032ce:	2300      	movs	r3, #0
 80032d0:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a5e      	ldr	r2, [pc, #376]	; (8003450 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d102      	bne.n	80032e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80032dc:	4b5d      	ldr	r3, [pc, #372]	; (8003454 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	e001      	b.n	80032e6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80032e2:	2300      	movs	r3, #0
 80032e4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10b      	bne.n	8003304 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032f0:	f043 0220 	orr.w	r2, r3, #32
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e0a0      	b.n	8003446 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff ff54 	bl	80031b4 <LL_ADC_REG_IsConversionOngoing>
 800330c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff ff4d 	bl	80031b4 <LL_ADC_REG_IsConversionOngoing>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	f040 8081 	bne.w	8003424 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003322:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003326:	2b00      	cmp	r3, #0
 8003328:	d17c      	bne.n	8003424 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a48      	ldr	r2, [pc, #288]	; (8003450 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d004      	beq.n	800333e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a46      	ldr	r2, [pc, #280]	; (8003454 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d101      	bne.n	8003342 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800333e:	4b46      	ldr	r3, [pc, #280]	; (8003458 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003340:	e000      	b.n	8003344 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003342:	4b46      	ldr	r3, [pc, #280]	; (800345c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003344:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d039      	beq.n	80033c2 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800334e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	431a      	orrs	r2, r3
 800335c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800335e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a3a      	ldr	r2, [pc, #232]	; (8003450 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d004      	beq.n	8003374 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a39      	ldr	r2, [pc, #228]	; (8003454 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d10e      	bne.n	8003392 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003374:	4836      	ldr	r0, [pc, #216]	; (8003450 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003376:	f7ff fed7 	bl	8003128 <LL_ADC_IsEnabled>
 800337a:	4604      	mov	r4, r0
 800337c:	4835      	ldr	r0, [pc, #212]	; (8003454 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800337e:	f7ff fed3 	bl	8003128 <LL_ADC_IsEnabled>
 8003382:	4603      	mov	r3, r0
 8003384:	4323      	orrs	r3, r4
 8003386:	2b00      	cmp	r3, #0
 8003388:	bf0c      	ite	eq
 800338a:	2301      	moveq	r3, #1
 800338c:	2300      	movne	r3, #0
 800338e:	b2db      	uxtb	r3, r3
 8003390:	e008      	b.n	80033a4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003392:	4833      	ldr	r0, [pc, #204]	; (8003460 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003394:	f7ff fec8 	bl	8003128 <LL_ADC_IsEnabled>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	bf0c      	ite	eq
 800339e:	2301      	moveq	r3, #1
 80033a0:	2300      	movne	r3, #0
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d047      	beq.n	8003438 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80033a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	4b2d      	ldr	r3, [pc, #180]	; (8003464 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80033ae:	4013      	ands	r3, r2
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	6811      	ldr	r1, [r2, #0]
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	6892      	ldr	r2, [r2, #8]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	431a      	orrs	r2, r3
 80033bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033be:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033c0:	e03a      	b.n	8003438 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80033c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033cc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a1f      	ldr	r2, [pc, #124]	; (8003450 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d004      	beq.n	80033e2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a1d      	ldr	r2, [pc, #116]	; (8003454 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d10e      	bne.n	8003400 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80033e2:	481b      	ldr	r0, [pc, #108]	; (8003450 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80033e4:	f7ff fea0 	bl	8003128 <LL_ADC_IsEnabled>
 80033e8:	4604      	mov	r4, r0
 80033ea:	481a      	ldr	r0, [pc, #104]	; (8003454 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80033ec:	f7ff fe9c 	bl	8003128 <LL_ADC_IsEnabled>
 80033f0:	4603      	mov	r3, r0
 80033f2:	4323      	orrs	r3, r4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	bf0c      	ite	eq
 80033f8:	2301      	moveq	r3, #1
 80033fa:	2300      	movne	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	e008      	b.n	8003412 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8003400:	4817      	ldr	r0, [pc, #92]	; (8003460 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003402:	f7ff fe91 	bl	8003128 <LL_ADC_IsEnabled>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	bf0c      	ite	eq
 800340c:	2301      	moveq	r3, #1
 800340e:	2300      	movne	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d010      	beq.n	8003438 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003416:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	4b12      	ldr	r3, [pc, #72]	; (8003464 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800341c:	4013      	ands	r3, r2
 800341e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003420:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003422:	e009      	b.n	8003438 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003428:	f043 0220 	orr.w	r2, r3, #32
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8003436:	e000      	b.n	800343a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003438:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003442:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8003446:	4618      	mov	r0, r3
 8003448:	378c      	adds	r7, #140	; 0x8c
 800344a:	46bd      	mov	sp, r7
 800344c:	bd90      	pop	{r4, r7, pc}
 800344e:	bf00      	nop
 8003450:	40022000 	.word	0x40022000
 8003454:	40022100 	.word	0x40022100
 8003458:	40022300 	.word	0x40022300
 800345c:	58026300 	.word	0x58026300
 8003460:	58026000 	.word	0x58026000
 8003464:	fffff0e0 	.word	0xfffff0e0

08003468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003478:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <__NVIC_SetPriorityGrouping+0x40>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003484:	4013      	ands	r3, r2
 8003486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003490:	4b06      	ldr	r3, [pc, #24]	; (80034ac <__NVIC_SetPriorityGrouping+0x44>)
 8003492:	4313      	orrs	r3, r2
 8003494:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003496:	4a04      	ldr	r2, [pc, #16]	; (80034a8 <__NVIC_SetPriorityGrouping+0x40>)
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	60d3      	str	r3, [r2, #12]
}
 800349c:	bf00      	nop
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	e000ed00 	.word	0xe000ed00
 80034ac:	05fa0000 	.word	0x05fa0000

080034b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034b4:	4b04      	ldr	r3, [pc, #16]	; (80034c8 <__NVIC_GetPriorityGrouping+0x18>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	0a1b      	lsrs	r3, r3, #8
 80034ba:	f003 0307 	and.w	r3, r3, #7
}
 80034be:	4618      	mov	r0, r3
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	e000ed00 	.word	0xe000ed00

080034cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	4603      	mov	r3, r0
 80034d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	db0b      	blt.n	80034f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034de:	88fb      	ldrh	r3, [r7, #6]
 80034e0:	f003 021f 	and.w	r2, r3, #31
 80034e4:	4907      	ldr	r1, [pc, #28]	; (8003504 <__NVIC_EnableIRQ+0x38>)
 80034e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034ea:	095b      	lsrs	r3, r3, #5
 80034ec:	2001      	movs	r0, #1
 80034ee:	fa00 f202 	lsl.w	r2, r0, r2
 80034f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	e000e100 	.word	0xe000e100

08003508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	6039      	str	r1, [r7, #0]
 8003512:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003514:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003518:	2b00      	cmp	r3, #0
 800351a:	db0a      	blt.n	8003532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	b2da      	uxtb	r2, r3
 8003520:	490c      	ldr	r1, [pc, #48]	; (8003554 <__NVIC_SetPriority+0x4c>)
 8003522:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003526:	0112      	lsls	r2, r2, #4
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	440b      	add	r3, r1
 800352c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003530:	e00a      	b.n	8003548 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	b2da      	uxtb	r2, r3
 8003536:	4908      	ldr	r1, [pc, #32]	; (8003558 <__NVIC_SetPriority+0x50>)
 8003538:	88fb      	ldrh	r3, [r7, #6]
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	3b04      	subs	r3, #4
 8003540:	0112      	lsls	r2, r2, #4
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	440b      	add	r3, r1
 8003546:	761a      	strb	r2, [r3, #24]
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	e000e100 	.word	0xe000e100
 8003558:	e000ed00 	.word	0xe000ed00

0800355c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800355c:	b480      	push	{r7}
 800355e:	b089      	sub	sp, #36	; 0x24
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f1c3 0307 	rsb	r3, r3, #7
 8003576:	2b04      	cmp	r3, #4
 8003578:	bf28      	it	cs
 800357a:	2304      	movcs	r3, #4
 800357c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	3304      	adds	r3, #4
 8003582:	2b06      	cmp	r3, #6
 8003584:	d902      	bls.n	800358c <NVIC_EncodePriority+0x30>
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	3b03      	subs	r3, #3
 800358a:	e000      	b.n	800358e <NVIC_EncodePriority+0x32>
 800358c:	2300      	movs	r3, #0
 800358e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003590:	f04f 32ff 	mov.w	r2, #4294967295
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	43da      	mvns	r2, r3
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	401a      	ands	r2, r3
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035a4:	f04f 31ff 	mov.w	r1, #4294967295
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	fa01 f303 	lsl.w	r3, r1, r3
 80035ae:	43d9      	mvns	r1, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b4:	4313      	orrs	r3, r2
         );
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3724      	adds	r7, #36	; 0x24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
	...

080035c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035d4:	d301      	bcc.n	80035da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035d6:	2301      	movs	r3, #1
 80035d8:	e00f      	b.n	80035fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035da:	4a0a      	ldr	r2, [pc, #40]	; (8003604 <SysTick_Config+0x40>)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3b01      	subs	r3, #1
 80035e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035e2:	210f      	movs	r1, #15
 80035e4:	f04f 30ff 	mov.w	r0, #4294967295
 80035e8:	f7ff ff8e 	bl	8003508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035ec:	4b05      	ldr	r3, [pc, #20]	; (8003604 <SysTick_Config+0x40>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035f2:	4b04      	ldr	r3, [pc, #16]	; (8003604 <SysTick_Config+0x40>)
 80035f4:	2207      	movs	r2, #7
 80035f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	e000e010 	.word	0xe000e010

08003608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f7ff ff29 	bl	8003468 <__NVIC_SetPriorityGrouping>
}
 8003616:	bf00      	nop
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b086      	sub	sp, #24
 8003622:	af00      	add	r7, sp, #0
 8003624:	4603      	mov	r3, r0
 8003626:	60b9      	str	r1, [r7, #8]
 8003628:	607a      	str	r2, [r7, #4]
 800362a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800362c:	f7ff ff40 	bl	80034b0 <__NVIC_GetPriorityGrouping>
 8003630:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	68b9      	ldr	r1, [r7, #8]
 8003636:	6978      	ldr	r0, [r7, #20]
 8003638:	f7ff ff90 	bl	800355c <NVIC_EncodePriority>
 800363c:	4602      	mov	r2, r0
 800363e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003642:	4611      	mov	r1, r2
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff ff5f 	bl	8003508 <__NVIC_SetPriority>
}
 800364a:	bf00      	nop
 800364c:	3718      	adds	r7, #24
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b082      	sub	sp, #8
 8003656:	af00      	add	r7, sp, #0
 8003658:	4603      	mov	r3, r0
 800365a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800365c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff ff33 	bl	80034cc <__NVIC_EnableIRQ>
}
 8003666:	bf00      	nop
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b082      	sub	sp, #8
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7ff ffa4 	bl	80035c4 <SysTick_Config>
 800367c:	4603      	mov	r3, r0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b082      	sub	sp, #8
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e014      	b.n	80036c2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	791b      	ldrb	r3, [r3, #4]
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d105      	bne.n	80036ae <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f7fd fbc5 	bl	8000e38 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2202      	movs	r2, #2
 80036b2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
 80036d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	795b      	ldrb	r3, [r3, #5]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_DAC_Start+0x16>
 80036dc:	2302      	movs	r3, #2
 80036de:	e040      	b.n	8003762 <HAL_DAC_Start+0x98>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2202      	movs	r2, #2
 80036ea:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6819      	ldr	r1, [r3, #0]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	f003 0310 	and.w	r3, r3, #16
 80036f8:	2201      	movs	r2, #1
 80036fa:	409a      	lsls	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10f      	bne.n	800372a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8003714:	2b02      	cmp	r3, #2
 8003716:	d11d      	bne.n	8003754 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	605a      	str	r2, [r3, #4]
 8003728:	e014      	b.n	8003754 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	f003 0310 	and.w	r3, r3, #16
 800373a:	2102      	movs	r1, #2
 800373c:	fa01 f303 	lsl.w	r3, r1, r3
 8003740:	429a      	cmp	r2, r3
 8003742:	d107      	bne.n	8003754 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0202 	orr.w	r2, r2, #2
 8003752:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800376e:	b480      	push	{r7}
 8003770:	b087      	sub	sp, #28
 8003772:	af00      	add	r7, sp, #0
 8003774:	60f8      	str	r0, [r7, #12]
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	607a      	str	r2, [r7, #4]
 800377a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800377c:	2300      	movs	r3, #0
 800377e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d105      	bne.n	8003798 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4413      	add	r3, r2
 8003792:	3308      	adds	r3, #8
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	e004      	b.n	80037a2 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4413      	add	r3, r2
 800379e:	3314      	adds	r3, #20
 80037a0:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	461a      	mov	r2, r3
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	371c      	adds	r7, #28
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b088      	sub	sp, #32
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	795b      	ldrb	r3, [r3, #5]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_DAC_ConfigChannel+0x18>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e11d      	b.n	8003a0c <HAL_DAC_ConfigChannel+0x254>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2201      	movs	r2, #1
 80037d4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2202      	movs	r2, #2
 80037da:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d174      	bne.n	80038ce <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80037e4:	f7fd fe08 	bl	80013f8 <HAL_GetTick>
 80037e8:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d134      	bne.n	800385a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80037f0:	e011      	b.n	8003816 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80037f2:	f7fd fe01 	bl	80013f8 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d90a      	bls.n	8003816 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	f043 0208 	orr.w	r2, r3, #8
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2203      	movs	r2, #3
 8003810:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e0fa      	b.n	8003a0c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800381c:	4b7d      	ldr	r3, [pc, #500]	; (8003a14 <HAL_DAC_ConfigChannel+0x25c>)
 800381e:	4013      	ands	r3, r2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1e6      	bne.n	80037f2 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8003824:	2001      	movs	r0, #1
 8003826:	f7fd fdf3 	bl	8001410 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	6992      	ldr	r2, [r2, #24]
 8003832:	641a      	str	r2, [r3, #64]	; 0x40
 8003834:	e01e      	b.n	8003874 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003836:	f7fd fddf 	bl	80013f8 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b01      	cmp	r3, #1
 8003842:	d90a      	bls.n	800385a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	f043 0208 	orr.w	r2, r3, #8
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2203      	movs	r2, #3
 8003854:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e0d8      	b.n	8003a0c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003860:	2b00      	cmp	r3, #0
 8003862:	dbe8      	blt.n	8003836 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003864:	2001      	movs	r0, #1
 8003866:	f7fd fdd3 	bl	8001410 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	6992      	ldr	r2, [r2, #24]
 8003872:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f003 0310 	and.w	r3, r3, #16
 8003880:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003884:	fa01 f303 	lsl.w	r3, r1, r3
 8003888:	43db      	mvns	r3, r3
 800388a:	ea02 0103 	and.w	r1, r2, r3
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	69da      	ldr	r2, [r3, #28]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f003 0310 	and.w	r3, r3, #16
 8003898:	409a      	lsls	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f003 0310 	and.w	r3, r3, #16
 80038ae:	21ff      	movs	r1, #255	; 0xff
 80038b0:	fa01 f303 	lsl.w	r3, r1, r3
 80038b4:	43db      	mvns	r3, r3
 80038b6:	ea02 0103 	and.w	r1, r2, r3
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	6a1a      	ldr	r2, [r3, #32]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f003 0310 	and.w	r3, r3, #16
 80038c4:	409a      	lsls	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d11d      	bne.n	8003912 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038dc:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f003 0310 	and.w	r3, r3, #16
 80038e4:	221f      	movs	r2, #31
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	43db      	mvns	r3, r3
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	4013      	ands	r3, r2
 80038f0:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f003 0310 	and.w	r3, r3, #16
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	4313      	orrs	r3, r2
 8003908:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003918:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f003 0310 	and.w	r3, r3, #16
 8003920:	2207      	movs	r2, #7
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	43db      	mvns	r3, r3
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	4013      	ands	r3, r2
 800392c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d102      	bne.n	800393c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8003936:	2300      	movs	r3, #0
 8003938:	61fb      	str	r3, [r7, #28]
 800393a:	e00f      	b.n	800395c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	2b02      	cmp	r3, #2
 8003942:	d102      	bne.n	800394a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003944:	2301      	movs	r3, #1
 8003946:	61fb      	str	r3, [r7, #28]
 8003948:	e008      	b.n	800395c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d102      	bne.n	8003958 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003952:	2301      	movs	r3, #1
 8003954:	61fb      	str	r3, [r7, #28]
 8003956:	e001      	b.n	800395c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003958:	2300      	movs	r3, #0
 800395a:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	4313      	orrs	r3, r2
 8003966:	69fa      	ldr	r2, [r7, #28]
 8003968:	4313      	orrs	r3, r2
 800396a:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f003 0310 	and.w	r3, r3, #16
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	4313      	orrs	r3, r2
 800397c:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6819      	ldr	r1, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f003 0310 	and.w	r3, r3, #16
 8003992:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	43da      	mvns	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	400a      	ands	r2, r1
 80039a2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f003 0310 	and.w	r3, r3, #16
 80039b2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	43db      	mvns	r3, r3
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	4013      	ands	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f003 0310 	and.w	r3, r3, #16
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6819      	ldr	r1, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f003 0310 	and.w	r3, r3, #16
 80039ee:	22c0      	movs	r2, #192	; 0xc0
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	43da      	mvns	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	400a      	ands	r2, r1
 80039fc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2201      	movs	r2, #1
 8003a02:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3720      	adds	r7, #32
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	20008000 	.word	0x20008000

08003a18 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003a20:	f7fd fcea 	bl	80013f8 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e314      	b.n	800405a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a66      	ldr	r2, [pc, #408]	; (8003bd0 <HAL_DMA_Init+0x1b8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d04a      	beq.n	8003ad0 <HAL_DMA_Init+0xb8>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a65      	ldr	r2, [pc, #404]	; (8003bd4 <HAL_DMA_Init+0x1bc>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d045      	beq.n	8003ad0 <HAL_DMA_Init+0xb8>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a63      	ldr	r2, [pc, #396]	; (8003bd8 <HAL_DMA_Init+0x1c0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d040      	beq.n	8003ad0 <HAL_DMA_Init+0xb8>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a62      	ldr	r2, [pc, #392]	; (8003bdc <HAL_DMA_Init+0x1c4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d03b      	beq.n	8003ad0 <HAL_DMA_Init+0xb8>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a60      	ldr	r2, [pc, #384]	; (8003be0 <HAL_DMA_Init+0x1c8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d036      	beq.n	8003ad0 <HAL_DMA_Init+0xb8>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a5f      	ldr	r2, [pc, #380]	; (8003be4 <HAL_DMA_Init+0x1cc>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d031      	beq.n	8003ad0 <HAL_DMA_Init+0xb8>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a5d      	ldr	r2, [pc, #372]	; (8003be8 <HAL_DMA_Init+0x1d0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d02c      	beq.n	8003ad0 <HAL_DMA_Init+0xb8>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a5c      	ldr	r2, [pc, #368]	; (8003bec <HAL_DMA_Init+0x1d4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d027      	beq.n	8003ad0 <HAL_DMA_Init+0xb8>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a5a      	ldr	r2, [pc, #360]	; (8003bf0 <HAL_DMA_Init+0x1d8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d022      	beq.n	8003ad0 <HAL_DMA_Init+0xb8>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a59      	ldr	r2, [pc, #356]	; (8003bf4 <HAL_DMA_Init+0x1dc>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d01d      	beq.n	8003ad0 <HAL_DMA_Init+0xb8>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a57      	ldr	r2, [pc, #348]	; (8003bf8 <HAL_DMA_Init+0x1e0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d018      	beq.n	8003ad0 <HAL_DMA_Init+0xb8>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a56      	ldr	r2, [pc, #344]	; (8003bfc <HAL_DMA_Init+0x1e4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d013      	beq.n	8003ad0 <HAL_DMA_Init+0xb8>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a54      	ldr	r2, [pc, #336]	; (8003c00 <HAL_DMA_Init+0x1e8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00e      	beq.n	8003ad0 <HAL_DMA_Init+0xb8>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a53      	ldr	r2, [pc, #332]	; (8003c04 <HAL_DMA_Init+0x1ec>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d009      	beq.n	8003ad0 <HAL_DMA_Init+0xb8>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a51      	ldr	r2, [pc, #324]	; (8003c08 <HAL_DMA_Init+0x1f0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d004      	beq.n	8003ad0 <HAL_DMA_Init+0xb8>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a50      	ldr	r2, [pc, #320]	; (8003c0c <HAL_DMA_Init+0x1f4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d101      	bne.n	8003ad4 <HAL_DMA_Init+0xbc>
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e000      	b.n	8003ad6 <HAL_DMA_Init+0xbe>
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 813c 	beq.w	8003d54 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a37      	ldr	r2, [pc, #220]	; (8003bd0 <HAL_DMA_Init+0x1b8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d04a      	beq.n	8003b8c <HAL_DMA_Init+0x174>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a36      	ldr	r2, [pc, #216]	; (8003bd4 <HAL_DMA_Init+0x1bc>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d045      	beq.n	8003b8c <HAL_DMA_Init+0x174>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a34      	ldr	r2, [pc, #208]	; (8003bd8 <HAL_DMA_Init+0x1c0>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d040      	beq.n	8003b8c <HAL_DMA_Init+0x174>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a33      	ldr	r2, [pc, #204]	; (8003bdc <HAL_DMA_Init+0x1c4>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d03b      	beq.n	8003b8c <HAL_DMA_Init+0x174>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a31      	ldr	r2, [pc, #196]	; (8003be0 <HAL_DMA_Init+0x1c8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d036      	beq.n	8003b8c <HAL_DMA_Init+0x174>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a30      	ldr	r2, [pc, #192]	; (8003be4 <HAL_DMA_Init+0x1cc>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d031      	beq.n	8003b8c <HAL_DMA_Init+0x174>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a2e      	ldr	r2, [pc, #184]	; (8003be8 <HAL_DMA_Init+0x1d0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d02c      	beq.n	8003b8c <HAL_DMA_Init+0x174>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a2d      	ldr	r2, [pc, #180]	; (8003bec <HAL_DMA_Init+0x1d4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d027      	beq.n	8003b8c <HAL_DMA_Init+0x174>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a2b      	ldr	r2, [pc, #172]	; (8003bf0 <HAL_DMA_Init+0x1d8>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d022      	beq.n	8003b8c <HAL_DMA_Init+0x174>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a2a      	ldr	r2, [pc, #168]	; (8003bf4 <HAL_DMA_Init+0x1dc>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d01d      	beq.n	8003b8c <HAL_DMA_Init+0x174>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a28      	ldr	r2, [pc, #160]	; (8003bf8 <HAL_DMA_Init+0x1e0>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d018      	beq.n	8003b8c <HAL_DMA_Init+0x174>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a27      	ldr	r2, [pc, #156]	; (8003bfc <HAL_DMA_Init+0x1e4>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d013      	beq.n	8003b8c <HAL_DMA_Init+0x174>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a25      	ldr	r2, [pc, #148]	; (8003c00 <HAL_DMA_Init+0x1e8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00e      	beq.n	8003b8c <HAL_DMA_Init+0x174>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a24      	ldr	r2, [pc, #144]	; (8003c04 <HAL_DMA_Init+0x1ec>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d009      	beq.n	8003b8c <HAL_DMA_Init+0x174>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a22      	ldr	r2, [pc, #136]	; (8003c08 <HAL_DMA_Init+0x1f0>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d004      	beq.n	8003b8c <HAL_DMA_Init+0x174>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a21      	ldr	r2, [pc, #132]	; (8003c0c <HAL_DMA_Init+0x1f4>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d108      	bne.n	8003b9e <HAL_DMA_Init+0x186>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	e007      	b.n	8003bae <HAL_DMA_Init+0x196>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0201 	bic.w	r2, r2, #1
 8003bac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003bae:	e02f      	b.n	8003c10 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bb0:	f7fd fc22 	bl	80013f8 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b05      	cmp	r3, #5
 8003bbc:	d928      	bls.n	8003c10 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2203      	movs	r2, #3
 8003bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e244      	b.n	800405a <HAL_DMA_Init+0x642>
 8003bd0:	40020010 	.word	0x40020010
 8003bd4:	40020028 	.word	0x40020028
 8003bd8:	40020040 	.word	0x40020040
 8003bdc:	40020058 	.word	0x40020058
 8003be0:	40020070 	.word	0x40020070
 8003be4:	40020088 	.word	0x40020088
 8003be8:	400200a0 	.word	0x400200a0
 8003bec:	400200b8 	.word	0x400200b8
 8003bf0:	40020410 	.word	0x40020410
 8003bf4:	40020428 	.word	0x40020428
 8003bf8:	40020440 	.word	0x40020440
 8003bfc:	40020458 	.word	0x40020458
 8003c00:	40020470 	.word	0x40020470
 8003c04:	40020488 	.word	0x40020488
 8003c08:	400204a0 	.word	0x400204a0
 8003c0c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1c8      	bne.n	8003bb0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4b84      	ldr	r3, [pc, #528]	; (8003e3c <HAL_DMA_Init+0x424>)
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003c36:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c42:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c4e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	2b04      	cmp	r3, #4
 8003c62:	d107      	bne.n	8003c74 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b28      	cmp	r3, #40	; 0x28
 8003c7a:	d903      	bls.n	8003c84 <HAL_DMA_Init+0x26c>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	2b2e      	cmp	r3, #46	; 0x2e
 8003c82:	d91f      	bls.n	8003cc4 <HAL_DMA_Init+0x2ac>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	2b3e      	cmp	r3, #62	; 0x3e
 8003c8a:	d903      	bls.n	8003c94 <HAL_DMA_Init+0x27c>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2b42      	cmp	r3, #66	; 0x42
 8003c92:	d917      	bls.n	8003cc4 <HAL_DMA_Init+0x2ac>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	2b46      	cmp	r3, #70	; 0x46
 8003c9a:	d903      	bls.n	8003ca4 <HAL_DMA_Init+0x28c>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2b48      	cmp	r3, #72	; 0x48
 8003ca2:	d90f      	bls.n	8003cc4 <HAL_DMA_Init+0x2ac>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b4e      	cmp	r3, #78	; 0x4e
 8003caa:	d903      	bls.n	8003cb4 <HAL_DMA_Init+0x29c>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2b52      	cmp	r3, #82	; 0x52
 8003cb2:	d907      	bls.n	8003cc4 <HAL_DMA_Init+0x2ac>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2b73      	cmp	r3, #115	; 0x73
 8003cba:	d905      	bls.n	8003cc8 <HAL_DMA_Init+0x2b0>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b77      	cmp	r3, #119	; 0x77
 8003cc2:	d801      	bhi.n	8003cc8 <HAL_DMA_Init+0x2b0>
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e000      	b.n	8003cca <HAL_DMA_Init+0x2b2>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cd4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f023 0307 	bic.w	r3, r3, #7
 8003cec:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d117      	bne.n	8003d30 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00e      	beq.n	8003d30 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f001 fdcc 	bl	80058b0 <DMA_CheckFifoParam>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d008      	beq.n	8003d30 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2240      	movs	r2, #64	; 0x40
 8003d22:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e194      	b.n	800405a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f001 fd07 	bl	800574c <DMA_CalcBaseAndBitshift>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d46:	f003 031f 	and.w	r3, r3, #31
 8003d4a:	223f      	movs	r2, #63	; 0x3f
 8003d4c:	409a      	lsls	r2, r3
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	609a      	str	r2, [r3, #8]
 8003d52:	e0ca      	b.n	8003eea <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a39      	ldr	r2, [pc, #228]	; (8003e40 <HAL_DMA_Init+0x428>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d022      	beq.n	8003da4 <HAL_DMA_Init+0x38c>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a38      	ldr	r2, [pc, #224]	; (8003e44 <HAL_DMA_Init+0x42c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d01d      	beq.n	8003da4 <HAL_DMA_Init+0x38c>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a36      	ldr	r2, [pc, #216]	; (8003e48 <HAL_DMA_Init+0x430>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d018      	beq.n	8003da4 <HAL_DMA_Init+0x38c>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a35      	ldr	r2, [pc, #212]	; (8003e4c <HAL_DMA_Init+0x434>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d013      	beq.n	8003da4 <HAL_DMA_Init+0x38c>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a33      	ldr	r2, [pc, #204]	; (8003e50 <HAL_DMA_Init+0x438>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00e      	beq.n	8003da4 <HAL_DMA_Init+0x38c>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a32      	ldr	r2, [pc, #200]	; (8003e54 <HAL_DMA_Init+0x43c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d009      	beq.n	8003da4 <HAL_DMA_Init+0x38c>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a30      	ldr	r2, [pc, #192]	; (8003e58 <HAL_DMA_Init+0x440>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d004      	beq.n	8003da4 <HAL_DMA_Init+0x38c>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a2f      	ldr	r2, [pc, #188]	; (8003e5c <HAL_DMA_Init+0x444>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d101      	bne.n	8003da8 <HAL_DMA_Init+0x390>
 8003da4:	2301      	movs	r3, #1
 8003da6:	e000      	b.n	8003daa <HAL_DMA_Init+0x392>
 8003da8:	2300      	movs	r3, #0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 8094 	beq.w	8003ed8 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a22      	ldr	r2, [pc, #136]	; (8003e40 <HAL_DMA_Init+0x428>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d021      	beq.n	8003dfe <HAL_DMA_Init+0x3e6>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a21      	ldr	r2, [pc, #132]	; (8003e44 <HAL_DMA_Init+0x42c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d01c      	beq.n	8003dfe <HAL_DMA_Init+0x3e6>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a1f      	ldr	r2, [pc, #124]	; (8003e48 <HAL_DMA_Init+0x430>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d017      	beq.n	8003dfe <HAL_DMA_Init+0x3e6>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a1e      	ldr	r2, [pc, #120]	; (8003e4c <HAL_DMA_Init+0x434>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d012      	beq.n	8003dfe <HAL_DMA_Init+0x3e6>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a1c      	ldr	r2, [pc, #112]	; (8003e50 <HAL_DMA_Init+0x438>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00d      	beq.n	8003dfe <HAL_DMA_Init+0x3e6>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a1b      	ldr	r2, [pc, #108]	; (8003e54 <HAL_DMA_Init+0x43c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d008      	beq.n	8003dfe <HAL_DMA_Init+0x3e6>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a19      	ldr	r2, [pc, #100]	; (8003e58 <HAL_DMA_Init+0x440>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d003      	beq.n	8003dfe <HAL_DMA_Init+0x3e6>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a18      	ldr	r2, [pc, #96]	; (8003e5c <HAL_DMA_Init+0x444>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	4b11      	ldr	r3, [pc, #68]	; (8003e60 <HAL_DMA_Init+0x448>)
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	2b40      	cmp	r3, #64	; 0x40
 8003e26:	d01d      	beq.n	8003e64 <HAL_DMA_Init+0x44c>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2b80      	cmp	r3, #128	; 0x80
 8003e2e:	d102      	bne.n	8003e36 <HAL_DMA_Init+0x41e>
 8003e30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e34:	e017      	b.n	8003e66 <HAL_DMA_Init+0x44e>
 8003e36:	2300      	movs	r3, #0
 8003e38:	e015      	b.n	8003e66 <HAL_DMA_Init+0x44e>
 8003e3a:	bf00      	nop
 8003e3c:	fe10803f 	.word	0xfe10803f
 8003e40:	58025408 	.word	0x58025408
 8003e44:	5802541c 	.word	0x5802541c
 8003e48:	58025430 	.word	0x58025430
 8003e4c:	58025444 	.word	0x58025444
 8003e50:	58025458 	.word	0x58025458
 8003e54:	5802546c 	.word	0x5802546c
 8003e58:	58025480 	.word	0x58025480
 8003e5c:	58025494 	.word	0x58025494
 8003e60:	fffe000f 	.word	0xfffe000f
 8003e64:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	68d2      	ldr	r2, [r2, #12]
 8003e6a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e94:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4b6e      	ldr	r3, [pc, #440]	; (8004064 <HAL_DMA_Init+0x64c>)
 8003eac:	4413      	add	r3, r2
 8003eae:	4a6e      	ldr	r2, [pc, #440]	; (8004068 <HAL_DMA_Init+0x650>)
 8003eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb4:	091b      	lsrs	r3, r3, #4
 8003eb6:	009a      	lsls	r2, r3, #2
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f001 fc45 	bl	800574c <DMA_CalcBaseAndBitshift>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eca:	f003 031f 	and.w	r3, r3, #31
 8003ece:	2201      	movs	r2, #1
 8003ed0:	409a      	lsls	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	605a      	str	r2, [r3, #4]
 8003ed6:	e008      	b.n	8003eea <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2240      	movs	r2, #64	; 0x40
 8003edc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2203      	movs	r2, #3
 8003ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e0b7      	b.n	800405a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a5f      	ldr	r2, [pc, #380]	; (800406c <HAL_DMA_Init+0x654>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d072      	beq.n	8003fda <HAL_DMA_Init+0x5c2>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a5d      	ldr	r2, [pc, #372]	; (8004070 <HAL_DMA_Init+0x658>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d06d      	beq.n	8003fda <HAL_DMA_Init+0x5c2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a5c      	ldr	r2, [pc, #368]	; (8004074 <HAL_DMA_Init+0x65c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d068      	beq.n	8003fda <HAL_DMA_Init+0x5c2>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a5a      	ldr	r2, [pc, #360]	; (8004078 <HAL_DMA_Init+0x660>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d063      	beq.n	8003fda <HAL_DMA_Init+0x5c2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a59      	ldr	r2, [pc, #356]	; (800407c <HAL_DMA_Init+0x664>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d05e      	beq.n	8003fda <HAL_DMA_Init+0x5c2>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a57      	ldr	r2, [pc, #348]	; (8004080 <HAL_DMA_Init+0x668>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d059      	beq.n	8003fda <HAL_DMA_Init+0x5c2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a56      	ldr	r2, [pc, #344]	; (8004084 <HAL_DMA_Init+0x66c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d054      	beq.n	8003fda <HAL_DMA_Init+0x5c2>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a54      	ldr	r2, [pc, #336]	; (8004088 <HAL_DMA_Init+0x670>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d04f      	beq.n	8003fda <HAL_DMA_Init+0x5c2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a53      	ldr	r2, [pc, #332]	; (800408c <HAL_DMA_Init+0x674>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d04a      	beq.n	8003fda <HAL_DMA_Init+0x5c2>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a51      	ldr	r2, [pc, #324]	; (8004090 <HAL_DMA_Init+0x678>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d045      	beq.n	8003fda <HAL_DMA_Init+0x5c2>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a50      	ldr	r2, [pc, #320]	; (8004094 <HAL_DMA_Init+0x67c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d040      	beq.n	8003fda <HAL_DMA_Init+0x5c2>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a4e      	ldr	r2, [pc, #312]	; (8004098 <HAL_DMA_Init+0x680>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d03b      	beq.n	8003fda <HAL_DMA_Init+0x5c2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a4d      	ldr	r2, [pc, #308]	; (800409c <HAL_DMA_Init+0x684>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d036      	beq.n	8003fda <HAL_DMA_Init+0x5c2>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a4b      	ldr	r2, [pc, #300]	; (80040a0 <HAL_DMA_Init+0x688>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d031      	beq.n	8003fda <HAL_DMA_Init+0x5c2>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a4a      	ldr	r2, [pc, #296]	; (80040a4 <HAL_DMA_Init+0x68c>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d02c      	beq.n	8003fda <HAL_DMA_Init+0x5c2>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a48      	ldr	r2, [pc, #288]	; (80040a8 <HAL_DMA_Init+0x690>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d027      	beq.n	8003fda <HAL_DMA_Init+0x5c2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a47      	ldr	r2, [pc, #284]	; (80040ac <HAL_DMA_Init+0x694>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d022      	beq.n	8003fda <HAL_DMA_Init+0x5c2>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a45      	ldr	r2, [pc, #276]	; (80040b0 <HAL_DMA_Init+0x698>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d01d      	beq.n	8003fda <HAL_DMA_Init+0x5c2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a44      	ldr	r2, [pc, #272]	; (80040b4 <HAL_DMA_Init+0x69c>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d018      	beq.n	8003fda <HAL_DMA_Init+0x5c2>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a42      	ldr	r2, [pc, #264]	; (80040b8 <HAL_DMA_Init+0x6a0>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d013      	beq.n	8003fda <HAL_DMA_Init+0x5c2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a41      	ldr	r2, [pc, #260]	; (80040bc <HAL_DMA_Init+0x6a4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d00e      	beq.n	8003fda <HAL_DMA_Init+0x5c2>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a3f      	ldr	r2, [pc, #252]	; (80040c0 <HAL_DMA_Init+0x6a8>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d009      	beq.n	8003fda <HAL_DMA_Init+0x5c2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a3e      	ldr	r2, [pc, #248]	; (80040c4 <HAL_DMA_Init+0x6ac>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d004      	beq.n	8003fda <HAL_DMA_Init+0x5c2>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a3c      	ldr	r2, [pc, #240]	; (80040c8 <HAL_DMA_Init+0x6b0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d101      	bne.n	8003fde <HAL_DMA_Init+0x5c6>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e000      	b.n	8003fe0 <HAL_DMA_Init+0x5c8>
 8003fde:	2300      	movs	r3, #0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d032      	beq.n	800404a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f001 fcdf 	bl	80059a8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	2b80      	cmp	r3, #128	; 0x80
 8003ff0:	d102      	bne.n	8003ff8 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004000:	b2d2      	uxtb	r2, r2
 8004002:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800400c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d010      	beq.n	8004038 <HAL_DMA_Init+0x620>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2b08      	cmp	r3, #8
 800401c:	d80c      	bhi.n	8004038 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f001 fd5c 	bl	8005adc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	e008      	b.n	800404a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	a7fdabf8 	.word	0xa7fdabf8
 8004068:	cccccccd 	.word	0xcccccccd
 800406c:	40020010 	.word	0x40020010
 8004070:	40020028 	.word	0x40020028
 8004074:	40020040 	.word	0x40020040
 8004078:	40020058 	.word	0x40020058
 800407c:	40020070 	.word	0x40020070
 8004080:	40020088 	.word	0x40020088
 8004084:	400200a0 	.word	0x400200a0
 8004088:	400200b8 	.word	0x400200b8
 800408c:	40020410 	.word	0x40020410
 8004090:	40020428 	.word	0x40020428
 8004094:	40020440 	.word	0x40020440
 8004098:	40020458 	.word	0x40020458
 800409c:	40020470 	.word	0x40020470
 80040a0:	40020488 	.word	0x40020488
 80040a4:	400204a0 	.word	0x400204a0
 80040a8:	400204b8 	.word	0x400204b8
 80040ac:	58025408 	.word	0x58025408
 80040b0:	5802541c 	.word	0x5802541c
 80040b4:	58025430 	.word	0x58025430
 80040b8:	58025444 	.word	0x58025444
 80040bc:	58025458 	.word	0x58025458
 80040c0:	5802546c 	.word	0x5802546c
 80040c4:	58025480 	.word	0x58025480
 80040c8:	58025494 	.word	0x58025494

080040cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040da:	2300      	movs	r3, #0
 80040dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e226      	b.n	8004536 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d101      	bne.n	80040f6 <HAL_DMA_Start_IT+0x2a>
 80040f2:	2302      	movs	r3, #2
 80040f4:	e21f      	b.n	8004536 <HAL_DMA_Start_IT+0x46a>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b01      	cmp	r3, #1
 8004108:	f040 820a 	bne.w	8004520 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2202      	movs	r2, #2
 8004110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a68      	ldr	r2, [pc, #416]	; (80042c0 <HAL_DMA_Start_IT+0x1f4>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d04a      	beq.n	80041ba <HAL_DMA_Start_IT+0xee>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a66      	ldr	r2, [pc, #408]	; (80042c4 <HAL_DMA_Start_IT+0x1f8>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d045      	beq.n	80041ba <HAL_DMA_Start_IT+0xee>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a65      	ldr	r2, [pc, #404]	; (80042c8 <HAL_DMA_Start_IT+0x1fc>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d040      	beq.n	80041ba <HAL_DMA_Start_IT+0xee>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a63      	ldr	r2, [pc, #396]	; (80042cc <HAL_DMA_Start_IT+0x200>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d03b      	beq.n	80041ba <HAL_DMA_Start_IT+0xee>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a62      	ldr	r2, [pc, #392]	; (80042d0 <HAL_DMA_Start_IT+0x204>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d036      	beq.n	80041ba <HAL_DMA_Start_IT+0xee>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a60      	ldr	r2, [pc, #384]	; (80042d4 <HAL_DMA_Start_IT+0x208>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d031      	beq.n	80041ba <HAL_DMA_Start_IT+0xee>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a5f      	ldr	r2, [pc, #380]	; (80042d8 <HAL_DMA_Start_IT+0x20c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d02c      	beq.n	80041ba <HAL_DMA_Start_IT+0xee>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a5d      	ldr	r2, [pc, #372]	; (80042dc <HAL_DMA_Start_IT+0x210>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d027      	beq.n	80041ba <HAL_DMA_Start_IT+0xee>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a5c      	ldr	r2, [pc, #368]	; (80042e0 <HAL_DMA_Start_IT+0x214>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d022      	beq.n	80041ba <HAL_DMA_Start_IT+0xee>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a5a      	ldr	r2, [pc, #360]	; (80042e4 <HAL_DMA_Start_IT+0x218>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d01d      	beq.n	80041ba <HAL_DMA_Start_IT+0xee>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a59      	ldr	r2, [pc, #356]	; (80042e8 <HAL_DMA_Start_IT+0x21c>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d018      	beq.n	80041ba <HAL_DMA_Start_IT+0xee>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a57      	ldr	r2, [pc, #348]	; (80042ec <HAL_DMA_Start_IT+0x220>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d013      	beq.n	80041ba <HAL_DMA_Start_IT+0xee>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a56      	ldr	r2, [pc, #344]	; (80042f0 <HAL_DMA_Start_IT+0x224>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d00e      	beq.n	80041ba <HAL_DMA_Start_IT+0xee>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a54      	ldr	r2, [pc, #336]	; (80042f4 <HAL_DMA_Start_IT+0x228>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d009      	beq.n	80041ba <HAL_DMA_Start_IT+0xee>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a53      	ldr	r2, [pc, #332]	; (80042f8 <HAL_DMA_Start_IT+0x22c>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d004      	beq.n	80041ba <HAL_DMA_Start_IT+0xee>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a51      	ldr	r2, [pc, #324]	; (80042fc <HAL_DMA_Start_IT+0x230>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d108      	bne.n	80041cc <HAL_DMA_Start_IT+0x100>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0201 	bic.w	r2, r2, #1
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	e007      	b.n	80041dc <HAL_DMA_Start_IT+0x110>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0201 	bic.w	r2, r2, #1
 80041da:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	68b9      	ldr	r1, [r7, #8]
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f001 f906 	bl	80053f4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a34      	ldr	r2, [pc, #208]	; (80042c0 <HAL_DMA_Start_IT+0x1f4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d04a      	beq.n	8004288 <HAL_DMA_Start_IT+0x1bc>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a33      	ldr	r2, [pc, #204]	; (80042c4 <HAL_DMA_Start_IT+0x1f8>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d045      	beq.n	8004288 <HAL_DMA_Start_IT+0x1bc>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a31      	ldr	r2, [pc, #196]	; (80042c8 <HAL_DMA_Start_IT+0x1fc>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d040      	beq.n	8004288 <HAL_DMA_Start_IT+0x1bc>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a30      	ldr	r2, [pc, #192]	; (80042cc <HAL_DMA_Start_IT+0x200>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d03b      	beq.n	8004288 <HAL_DMA_Start_IT+0x1bc>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a2e      	ldr	r2, [pc, #184]	; (80042d0 <HAL_DMA_Start_IT+0x204>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d036      	beq.n	8004288 <HAL_DMA_Start_IT+0x1bc>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a2d      	ldr	r2, [pc, #180]	; (80042d4 <HAL_DMA_Start_IT+0x208>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d031      	beq.n	8004288 <HAL_DMA_Start_IT+0x1bc>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a2b      	ldr	r2, [pc, #172]	; (80042d8 <HAL_DMA_Start_IT+0x20c>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d02c      	beq.n	8004288 <HAL_DMA_Start_IT+0x1bc>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a2a      	ldr	r2, [pc, #168]	; (80042dc <HAL_DMA_Start_IT+0x210>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d027      	beq.n	8004288 <HAL_DMA_Start_IT+0x1bc>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a28      	ldr	r2, [pc, #160]	; (80042e0 <HAL_DMA_Start_IT+0x214>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d022      	beq.n	8004288 <HAL_DMA_Start_IT+0x1bc>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a27      	ldr	r2, [pc, #156]	; (80042e4 <HAL_DMA_Start_IT+0x218>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d01d      	beq.n	8004288 <HAL_DMA_Start_IT+0x1bc>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a25      	ldr	r2, [pc, #148]	; (80042e8 <HAL_DMA_Start_IT+0x21c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d018      	beq.n	8004288 <HAL_DMA_Start_IT+0x1bc>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a24      	ldr	r2, [pc, #144]	; (80042ec <HAL_DMA_Start_IT+0x220>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d013      	beq.n	8004288 <HAL_DMA_Start_IT+0x1bc>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a22      	ldr	r2, [pc, #136]	; (80042f0 <HAL_DMA_Start_IT+0x224>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d00e      	beq.n	8004288 <HAL_DMA_Start_IT+0x1bc>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a21      	ldr	r2, [pc, #132]	; (80042f4 <HAL_DMA_Start_IT+0x228>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d009      	beq.n	8004288 <HAL_DMA_Start_IT+0x1bc>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a1f      	ldr	r2, [pc, #124]	; (80042f8 <HAL_DMA_Start_IT+0x22c>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d004      	beq.n	8004288 <HAL_DMA_Start_IT+0x1bc>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a1e      	ldr	r2, [pc, #120]	; (80042fc <HAL_DMA_Start_IT+0x230>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d101      	bne.n	800428c <HAL_DMA_Start_IT+0x1c0>
 8004288:	2301      	movs	r3, #1
 800428a:	e000      	b.n	800428e <HAL_DMA_Start_IT+0x1c2>
 800428c:	2300      	movs	r3, #0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d036      	beq.n	8004300 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f023 021e 	bic.w	r2, r3, #30
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f042 0216 	orr.w	r2, r2, #22
 80042a4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d03e      	beq.n	800432c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f042 0208 	orr.w	r2, r2, #8
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	e035      	b.n	800432c <HAL_DMA_Start_IT+0x260>
 80042c0:	40020010 	.word	0x40020010
 80042c4:	40020028 	.word	0x40020028
 80042c8:	40020040 	.word	0x40020040
 80042cc:	40020058 	.word	0x40020058
 80042d0:	40020070 	.word	0x40020070
 80042d4:	40020088 	.word	0x40020088
 80042d8:	400200a0 	.word	0x400200a0
 80042dc:	400200b8 	.word	0x400200b8
 80042e0:	40020410 	.word	0x40020410
 80042e4:	40020428 	.word	0x40020428
 80042e8:	40020440 	.word	0x40020440
 80042ec:	40020458 	.word	0x40020458
 80042f0:	40020470 	.word	0x40020470
 80042f4:	40020488 	.word	0x40020488
 80042f8:	400204a0 	.word	0x400204a0
 80042fc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f023 020e 	bic.w	r2, r3, #14
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 020a 	orr.w	r2, r2, #10
 8004312:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004318:	2b00      	cmp	r3, #0
 800431a:	d007      	beq.n	800432c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0204 	orr.w	r2, r2, #4
 800432a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a83      	ldr	r2, [pc, #524]	; (8004540 <HAL_DMA_Start_IT+0x474>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d072      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a82      	ldr	r2, [pc, #520]	; (8004544 <HAL_DMA_Start_IT+0x478>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d06d      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a80      	ldr	r2, [pc, #512]	; (8004548 <HAL_DMA_Start_IT+0x47c>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d068      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a7f      	ldr	r2, [pc, #508]	; (800454c <HAL_DMA_Start_IT+0x480>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d063      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a7d      	ldr	r2, [pc, #500]	; (8004550 <HAL_DMA_Start_IT+0x484>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d05e      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a7c      	ldr	r2, [pc, #496]	; (8004554 <HAL_DMA_Start_IT+0x488>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d059      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a7a      	ldr	r2, [pc, #488]	; (8004558 <HAL_DMA_Start_IT+0x48c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d054      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a79      	ldr	r2, [pc, #484]	; (800455c <HAL_DMA_Start_IT+0x490>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d04f      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a77      	ldr	r2, [pc, #476]	; (8004560 <HAL_DMA_Start_IT+0x494>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d04a      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a76      	ldr	r2, [pc, #472]	; (8004564 <HAL_DMA_Start_IT+0x498>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d045      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a74      	ldr	r2, [pc, #464]	; (8004568 <HAL_DMA_Start_IT+0x49c>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d040      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a73      	ldr	r2, [pc, #460]	; (800456c <HAL_DMA_Start_IT+0x4a0>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d03b      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a71      	ldr	r2, [pc, #452]	; (8004570 <HAL_DMA_Start_IT+0x4a4>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d036      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a70      	ldr	r2, [pc, #448]	; (8004574 <HAL_DMA_Start_IT+0x4a8>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d031      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a6e      	ldr	r2, [pc, #440]	; (8004578 <HAL_DMA_Start_IT+0x4ac>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d02c      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a6d      	ldr	r2, [pc, #436]	; (800457c <HAL_DMA_Start_IT+0x4b0>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d027      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a6b      	ldr	r2, [pc, #428]	; (8004580 <HAL_DMA_Start_IT+0x4b4>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d022      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a6a      	ldr	r2, [pc, #424]	; (8004584 <HAL_DMA_Start_IT+0x4b8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d01d      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a68      	ldr	r2, [pc, #416]	; (8004588 <HAL_DMA_Start_IT+0x4bc>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d018      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a67      	ldr	r2, [pc, #412]	; (800458c <HAL_DMA_Start_IT+0x4c0>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d013      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a65      	ldr	r2, [pc, #404]	; (8004590 <HAL_DMA_Start_IT+0x4c4>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00e      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a64      	ldr	r2, [pc, #400]	; (8004594 <HAL_DMA_Start_IT+0x4c8>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d009      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a62      	ldr	r2, [pc, #392]	; (8004598 <HAL_DMA_Start_IT+0x4cc>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d004      	beq.n	800441c <HAL_DMA_Start_IT+0x350>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a61      	ldr	r2, [pc, #388]	; (800459c <HAL_DMA_Start_IT+0x4d0>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d101      	bne.n	8004420 <HAL_DMA_Start_IT+0x354>
 800441c:	2301      	movs	r3, #1
 800441e:	e000      	b.n	8004422 <HAL_DMA_Start_IT+0x356>
 8004420:	2300      	movs	r3, #0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d01a      	beq.n	800445c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d007      	beq.n	8004444 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800443e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004442:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004448:	2b00      	cmp	r3, #0
 800444a:	d007      	beq.n	800445c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004456:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800445a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a37      	ldr	r2, [pc, #220]	; (8004540 <HAL_DMA_Start_IT+0x474>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d04a      	beq.n	80044fc <HAL_DMA_Start_IT+0x430>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a36      	ldr	r2, [pc, #216]	; (8004544 <HAL_DMA_Start_IT+0x478>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d045      	beq.n	80044fc <HAL_DMA_Start_IT+0x430>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a34      	ldr	r2, [pc, #208]	; (8004548 <HAL_DMA_Start_IT+0x47c>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d040      	beq.n	80044fc <HAL_DMA_Start_IT+0x430>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a33      	ldr	r2, [pc, #204]	; (800454c <HAL_DMA_Start_IT+0x480>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d03b      	beq.n	80044fc <HAL_DMA_Start_IT+0x430>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a31      	ldr	r2, [pc, #196]	; (8004550 <HAL_DMA_Start_IT+0x484>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d036      	beq.n	80044fc <HAL_DMA_Start_IT+0x430>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a30      	ldr	r2, [pc, #192]	; (8004554 <HAL_DMA_Start_IT+0x488>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d031      	beq.n	80044fc <HAL_DMA_Start_IT+0x430>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a2e      	ldr	r2, [pc, #184]	; (8004558 <HAL_DMA_Start_IT+0x48c>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d02c      	beq.n	80044fc <HAL_DMA_Start_IT+0x430>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a2d      	ldr	r2, [pc, #180]	; (800455c <HAL_DMA_Start_IT+0x490>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d027      	beq.n	80044fc <HAL_DMA_Start_IT+0x430>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a2b      	ldr	r2, [pc, #172]	; (8004560 <HAL_DMA_Start_IT+0x494>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d022      	beq.n	80044fc <HAL_DMA_Start_IT+0x430>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a2a      	ldr	r2, [pc, #168]	; (8004564 <HAL_DMA_Start_IT+0x498>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d01d      	beq.n	80044fc <HAL_DMA_Start_IT+0x430>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a28      	ldr	r2, [pc, #160]	; (8004568 <HAL_DMA_Start_IT+0x49c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d018      	beq.n	80044fc <HAL_DMA_Start_IT+0x430>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a27      	ldr	r2, [pc, #156]	; (800456c <HAL_DMA_Start_IT+0x4a0>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d013      	beq.n	80044fc <HAL_DMA_Start_IT+0x430>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a25      	ldr	r2, [pc, #148]	; (8004570 <HAL_DMA_Start_IT+0x4a4>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d00e      	beq.n	80044fc <HAL_DMA_Start_IT+0x430>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a24      	ldr	r2, [pc, #144]	; (8004574 <HAL_DMA_Start_IT+0x4a8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d009      	beq.n	80044fc <HAL_DMA_Start_IT+0x430>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a22      	ldr	r2, [pc, #136]	; (8004578 <HAL_DMA_Start_IT+0x4ac>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d004      	beq.n	80044fc <HAL_DMA_Start_IT+0x430>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a21      	ldr	r2, [pc, #132]	; (800457c <HAL_DMA_Start_IT+0x4b0>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d108      	bne.n	800450e <HAL_DMA_Start_IT+0x442>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0201 	orr.w	r2, r2, #1
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	e012      	b.n	8004534 <HAL_DMA_Start_IT+0x468>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f042 0201 	orr.w	r2, r2, #1
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	e009      	b.n	8004534 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004526:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004534:	7dfb      	ldrb	r3, [r7, #23]
}
 8004536:	4618      	mov	r0, r3
 8004538:	3718      	adds	r7, #24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	40020010 	.word	0x40020010
 8004544:	40020028 	.word	0x40020028
 8004548:	40020040 	.word	0x40020040
 800454c:	40020058 	.word	0x40020058
 8004550:	40020070 	.word	0x40020070
 8004554:	40020088 	.word	0x40020088
 8004558:	400200a0 	.word	0x400200a0
 800455c:	400200b8 	.word	0x400200b8
 8004560:	40020410 	.word	0x40020410
 8004564:	40020428 	.word	0x40020428
 8004568:	40020440 	.word	0x40020440
 800456c:	40020458 	.word	0x40020458
 8004570:	40020470 	.word	0x40020470
 8004574:	40020488 	.word	0x40020488
 8004578:	400204a0 	.word	0x400204a0
 800457c:	400204b8 	.word	0x400204b8
 8004580:	58025408 	.word	0x58025408
 8004584:	5802541c 	.word	0x5802541c
 8004588:	58025430 	.word	0x58025430
 800458c:	58025444 	.word	0x58025444
 8004590:	58025458 	.word	0x58025458
 8004594:	5802546c 	.word	0x5802546c
 8004598:	58025480 	.word	0x58025480
 800459c:	58025494 	.word	0x58025494

080045a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08a      	sub	sp, #40	; 0x28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80045ac:	4b67      	ldr	r3, [pc, #412]	; (800474c <HAL_DMA_IRQHandler+0x1ac>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a67      	ldr	r2, [pc, #412]	; (8004750 <HAL_DMA_IRQHandler+0x1b0>)
 80045b2:	fba2 2303 	umull	r2, r3, r2, r3
 80045b6:	0a9b      	lsrs	r3, r3, #10
 80045b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045be:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80045c6:	6a3b      	ldr	r3, [r7, #32]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a5f      	ldr	r2, [pc, #380]	; (8004754 <HAL_DMA_IRQHandler+0x1b4>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d04a      	beq.n	8004672 <HAL_DMA_IRQHandler+0xd2>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a5d      	ldr	r2, [pc, #372]	; (8004758 <HAL_DMA_IRQHandler+0x1b8>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d045      	beq.n	8004672 <HAL_DMA_IRQHandler+0xd2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a5c      	ldr	r2, [pc, #368]	; (800475c <HAL_DMA_IRQHandler+0x1bc>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d040      	beq.n	8004672 <HAL_DMA_IRQHandler+0xd2>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a5a      	ldr	r2, [pc, #360]	; (8004760 <HAL_DMA_IRQHandler+0x1c0>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d03b      	beq.n	8004672 <HAL_DMA_IRQHandler+0xd2>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a59      	ldr	r2, [pc, #356]	; (8004764 <HAL_DMA_IRQHandler+0x1c4>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d036      	beq.n	8004672 <HAL_DMA_IRQHandler+0xd2>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a57      	ldr	r2, [pc, #348]	; (8004768 <HAL_DMA_IRQHandler+0x1c8>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d031      	beq.n	8004672 <HAL_DMA_IRQHandler+0xd2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a56      	ldr	r2, [pc, #344]	; (800476c <HAL_DMA_IRQHandler+0x1cc>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d02c      	beq.n	8004672 <HAL_DMA_IRQHandler+0xd2>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a54      	ldr	r2, [pc, #336]	; (8004770 <HAL_DMA_IRQHandler+0x1d0>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d027      	beq.n	8004672 <HAL_DMA_IRQHandler+0xd2>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a53      	ldr	r2, [pc, #332]	; (8004774 <HAL_DMA_IRQHandler+0x1d4>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d022      	beq.n	8004672 <HAL_DMA_IRQHandler+0xd2>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a51      	ldr	r2, [pc, #324]	; (8004778 <HAL_DMA_IRQHandler+0x1d8>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d01d      	beq.n	8004672 <HAL_DMA_IRQHandler+0xd2>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a50      	ldr	r2, [pc, #320]	; (800477c <HAL_DMA_IRQHandler+0x1dc>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d018      	beq.n	8004672 <HAL_DMA_IRQHandler+0xd2>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a4e      	ldr	r2, [pc, #312]	; (8004780 <HAL_DMA_IRQHandler+0x1e0>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d013      	beq.n	8004672 <HAL_DMA_IRQHandler+0xd2>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a4d      	ldr	r2, [pc, #308]	; (8004784 <HAL_DMA_IRQHandler+0x1e4>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d00e      	beq.n	8004672 <HAL_DMA_IRQHandler+0xd2>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a4b      	ldr	r2, [pc, #300]	; (8004788 <HAL_DMA_IRQHandler+0x1e8>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d009      	beq.n	8004672 <HAL_DMA_IRQHandler+0xd2>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a4a      	ldr	r2, [pc, #296]	; (800478c <HAL_DMA_IRQHandler+0x1ec>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d004      	beq.n	8004672 <HAL_DMA_IRQHandler+0xd2>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a48      	ldr	r2, [pc, #288]	; (8004790 <HAL_DMA_IRQHandler+0x1f0>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d101      	bne.n	8004676 <HAL_DMA_IRQHandler+0xd6>
 8004672:	2301      	movs	r3, #1
 8004674:	e000      	b.n	8004678 <HAL_DMA_IRQHandler+0xd8>
 8004676:	2300      	movs	r3, #0
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 842b 	beq.w	8004ed4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004682:	f003 031f 	and.w	r3, r3, #31
 8004686:	2208      	movs	r2, #8
 8004688:	409a      	lsls	r2, r3
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	4013      	ands	r3, r2
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 80a2 	beq.w	80047d8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a2e      	ldr	r2, [pc, #184]	; (8004754 <HAL_DMA_IRQHandler+0x1b4>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d04a      	beq.n	8004734 <HAL_DMA_IRQHandler+0x194>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a2d      	ldr	r2, [pc, #180]	; (8004758 <HAL_DMA_IRQHandler+0x1b8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d045      	beq.n	8004734 <HAL_DMA_IRQHandler+0x194>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a2b      	ldr	r2, [pc, #172]	; (800475c <HAL_DMA_IRQHandler+0x1bc>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d040      	beq.n	8004734 <HAL_DMA_IRQHandler+0x194>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a2a      	ldr	r2, [pc, #168]	; (8004760 <HAL_DMA_IRQHandler+0x1c0>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d03b      	beq.n	8004734 <HAL_DMA_IRQHandler+0x194>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a28      	ldr	r2, [pc, #160]	; (8004764 <HAL_DMA_IRQHandler+0x1c4>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d036      	beq.n	8004734 <HAL_DMA_IRQHandler+0x194>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a27      	ldr	r2, [pc, #156]	; (8004768 <HAL_DMA_IRQHandler+0x1c8>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d031      	beq.n	8004734 <HAL_DMA_IRQHandler+0x194>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a25      	ldr	r2, [pc, #148]	; (800476c <HAL_DMA_IRQHandler+0x1cc>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d02c      	beq.n	8004734 <HAL_DMA_IRQHandler+0x194>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a24      	ldr	r2, [pc, #144]	; (8004770 <HAL_DMA_IRQHandler+0x1d0>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d027      	beq.n	8004734 <HAL_DMA_IRQHandler+0x194>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a22      	ldr	r2, [pc, #136]	; (8004774 <HAL_DMA_IRQHandler+0x1d4>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d022      	beq.n	8004734 <HAL_DMA_IRQHandler+0x194>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a21      	ldr	r2, [pc, #132]	; (8004778 <HAL_DMA_IRQHandler+0x1d8>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d01d      	beq.n	8004734 <HAL_DMA_IRQHandler+0x194>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a1f      	ldr	r2, [pc, #124]	; (800477c <HAL_DMA_IRQHandler+0x1dc>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d018      	beq.n	8004734 <HAL_DMA_IRQHandler+0x194>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a1e      	ldr	r2, [pc, #120]	; (8004780 <HAL_DMA_IRQHandler+0x1e0>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d013      	beq.n	8004734 <HAL_DMA_IRQHandler+0x194>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a1c      	ldr	r2, [pc, #112]	; (8004784 <HAL_DMA_IRQHandler+0x1e4>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00e      	beq.n	8004734 <HAL_DMA_IRQHandler+0x194>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a1b      	ldr	r2, [pc, #108]	; (8004788 <HAL_DMA_IRQHandler+0x1e8>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d009      	beq.n	8004734 <HAL_DMA_IRQHandler+0x194>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a19      	ldr	r2, [pc, #100]	; (800478c <HAL_DMA_IRQHandler+0x1ec>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d004      	beq.n	8004734 <HAL_DMA_IRQHandler+0x194>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a18      	ldr	r2, [pc, #96]	; (8004790 <HAL_DMA_IRQHandler+0x1f0>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d12f      	bne.n	8004794 <HAL_DMA_IRQHandler+0x1f4>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0304 	and.w	r3, r3, #4
 800473e:	2b00      	cmp	r3, #0
 8004740:	bf14      	ite	ne
 8004742:	2301      	movne	r3, #1
 8004744:	2300      	moveq	r3, #0
 8004746:	b2db      	uxtb	r3, r3
 8004748:	e02e      	b.n	80047a8 <HAL_DMA_IRQHandler+0x208>
 800474a:	bf00      	nop
 800474c:	24000000 	.word	0x24000000
 8004750:	1b4e81b5 	.word	0x1b4e81b5
 8004754:	40020010 	.word	0x40020010
 8004758:	40020028 	.word	0x40020028
 800475c:	40020040 	.word	0x40020040
 8004760:	40020058 	.word	0x40020058
 8004764:	40020070 	.word	0x40020070
 8004768:	40020088 	.word	0x40020088
 800476c:	400200a0 	.word	0x400200a0
 8004770:	400200b8 	.word	0x400200b8
 8004774:	40020410 	.word	0x40020410
 8004778:	40020428 	.word	0x40020428
 800477c:	40020440 	.word	0x40020440
 8004780:	40020458 	.word	0x40020458
 8004784:	40020470 	.word	0x40020470
 8004788:	40020488 	.word	0x40020488
 800478c:	400204a0 	.word	0x400204a0
 8004790:	400204b8 	.word	0x400204b8
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0308 	and.w	r3, r3, #8
 800479e:	2b00      	cmp	r3, #0
 80047a0:	bf14      	ite	ne
 80047a2:	2301      	movne	r3, #1
 80047a4:	2300      	moveq	r3, #0
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d015      	beq.n	80047d8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0204 	bic.w	r2, r2, #4
 80047ba:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c0:	f003 031f 	and.w	r3, r3, #31
 80047c4:	2208      	movs	r2, #8
 80047c6:	409a      	lsls	r2, r3
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d0:	f043 0201 	orr.w	r2, r3, #1
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047dc:	f003 031f 	and.w	r3, r3, #31
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	fa22 f303 	lsr.w	r3, r2, r3
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d06e      	beq.n	80048cc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a69      	ldr	r2, [pc, #420]	; (8004998 <HAL_DMA_IRQHandler+0x3f8>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d04a      	beq.n	800488e <HAL_DMA_IRQHandler+0x2ee>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a67      	ldr	r2, [pc, #412]	; (800499c <HAL_DMA_IRQHandler+0x3fc>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d045      	beq.n	800488e <HAL_DMA_IRQHandler+0x2ee>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a66      	ldr	r2, [pc, #408]	; (80049a0 <HAL_DMA_IRQHandler+0x400>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d040      	beq.n	800488e <HAL_DMA_IRQHandler+0x2ee>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a64      	ldr	r2, [pc, #400]	; (80049a4 <HAL_DMA_IRQHandler+0x404>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d03b      	beq.n	800488e <HAL_DMA_IRQHandler+0x2ee>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a63      	ldr	r2, [pc, #396]	; (80049a8 <HAL_DMA_IRQHandler+0x408>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d036      	beq.n	800488e <HAL_DMA_IRQHandler+0x2ee>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a61      	ldr	r2, [pc, #388]	; (80049ac <HAL_DMA_IRQHandler+0x40c>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d031      	beq.n	800488e <HAL_DMA_IRQHandler+0x2ee>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a60      	ldr	r2, [pc, #384]	; (80049b0 <HAL_DMA_IRQHandler+0x410>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d02c      	beq.n	800488e <HAL_DMA_IRQHandler+0x2ee>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a5e      	ldr	r2, [pc, #376]	; (80049b4 <HAL_DMA_IRQHandler+0x414>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d027      	beq.n	800488e <HAL_DMA_IRQHandler+0x2ee>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a5d      	ldr	r2, [pc, #372]	; (80049b8 <HAL_DMA_IRQHandler+0x418>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d022      	beq.n	800488e <HAL_DMA_IRQHandler+0x2ee>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a5b      	ldr	r2, [pc, #364]	; (80049bc <HAL_DMA_IRQHandler+0x41c>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d01d      	beq.n	800488e <HAL_DMA_IRQHandler+0x2ee>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a5a      	ldr	r2, [pc, #360]	; (80049c0 <HAL_DMA_IRQHandler+0x420>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d018      	beq.n	800488e <HAL_DMA_IRQHandler+0x2ee>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a58      	ldr	r2, [pc, #352]	; (80049c4 <HAL_DMA_IRQHandler+0x424>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d013      	beq.n	800488e <HAL_DMA_IRQHandler+0x2ee>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a57      	ldr	r2, [pc, #348]	; (80049c8 <HAL_DMA_IRQHandler+0x428>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d00e      	beq.n	800488e <HAL_DMA_IRQHandler+0x2ee>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a55      	ldr	r2, [pc, #340]	; (80049cc <HAL_DMA_IRQHandler+0x42c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d009      	beq.n	800488e <HAL_DMA_IRQHandler+0x2ee>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a54      	ldr	r2, [pc, #336]	; (80049d0 <HAL_DMA_IRQHandler+0x430>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d004      	beq.n	800488e <HAL_DMA_IRQHandler+0x2ee>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a52      	ldr	r2, [pc, #328]	; (80049d4 <HAL_DMA_IRQHandler+0x434>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d10a      	bne.n	80048a4 <HAL_DMA_IRQHandler+0x304>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004898:	2b00      	cmp	r3, #0
 800489a:	bf14      	ite	ne
 800489c:	2301      	movne	r3, #1
 800489e:	2300      	moveq	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	e003      	b.n	80048ac <HAL_DMA_IRQHandler+0x30c>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2300      	movs	r3, #0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00d      	beq.n	80048cc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b4:	f003 031f 	and.w	r3, r3, #31
 80048b8:	2201      	movs	r2, #1
 80048ba:	409a      	lsls	r2, r3
 80048bc:	6a3b      	ldr	r3, [r7, #32]
 80048be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c4:	f043 0202 	orr.w	r2, r3, #2
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d0:	f003 031f 	and.w	r3, r3, #31
 80048d4:	2204      	movs	r2, #4
 80048d6:	409a      	lsls	r2, r3
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	4013      	ands	r3, r2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 808f 	beq.w	8004a00 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a2c      	ldr	r2, [pc, #176]	; (8004998 <HAL_DMA_IRQHandler+0x3f8>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d04a      	beq.n	8004982 <HAL_DMA_IRQHandler+0x3e2>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a2a      	ldr	r2, [pc, #168]	; (800499c <HAL_DMA_IRQHandler+0x3fc>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d045      	beq.n	8004982 <HAL_DMA_IRQHandler+0x3e2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a29      	ldr	r2, [pc, #164]	; (80049a0 <HAL_DMA_IRQHandler+0x400>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d040      	beq.n	8004982 <HAL_DMA_IRQHandler+0x3e2>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a27      	ldr	r2, [pc, #156]	; (80049a4 <HAL_DMA_IRQHandler+0x404>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d03b      	beq.n	8004982 <HAL_DMA_IRQHandler+0x3e2>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a26      	ldr	r2, [pc, #152]	; (80049a8 <HAL_DMA_IRQHandler+0x408>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d036      	beq.n	8004982 <HAL_DMA_IRQHandler+0x3e2>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a24      	ldr	r2, [pc, #144]	; (80049ac <HAL_DMA_IRQHandler+0x40c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d031      	beq.n	8004982 <HAL_DMA_IRQHandler+0x3e2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a23      	ldr	r2, [pc, #140]	; (80049b0 <HAL_DMA_IRQHandler+0x410>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d02c      	beq.n	8004982 <HAL_DMA_IRQHandler+0x3e2>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a21      	ldr	r2, [pc, #132]	; (80049b4 <HAL_DMA_IRQHandler+0x414>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d027      	beq.n	8004982 <HAL_DMA_IRQHandler+0x3e2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a20      	ldr	r2, [pc, #128]	; (80049b8 <HAL_DMA_IRQHandler+0x418>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d022      	beq.n	8004982 <HAL_DMA_IRQHandler+0x3e2>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a1e      	ldr	r2, [pc, #120]	; (80049bc <HAL_DMA_IRQHandler+0x41c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d01d      	beq.n	8004982 <HAL_DMA_IRQHandler+0x3e2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a1d      	ldr	r2, [pc, #116]	; (80049c0 <HAL_DMA_IRQHandler+0x420>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d018      	beq.n	8004982 <HAL_DMA_IRQHandler+0x3e2>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a1b      	ldr	r2, [pc, #108]	; (80049c4 <HAL_DMA_IRQHandler+0x424>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d013      	beq.n	8004982 <HAL_DMA_IRQHandler+0x3e2>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a1a      	ldr	r2, [pc, #104]	; (80049c8 <HAL_DMA_IRQHandler+0x428>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d00e      	beq.n	8004982 <HAL_DMA_IRQHandler+0x3e2>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a18      	ldr	r2, [pc, #96]	; (80049cc <HAL_DMA_IRQHandler+0x42c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d009      	beq.n	8004982 <HAL_DMA_IRQHandler+0x3e2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a17      	ldr	r2, [pc, #92]	; (80049d0 <HAL_DMA_IRQHandler+0x430>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d004      	beq.n	8004982 <HAL_DMA_IRQHandler+0x3e2>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a15      	ldr	r2, [pc, #84]	; (80049d4 <HAL_DMA_IRQHandler+0x434>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d12a      	bne.n	80049d8 <HAL_DMA_IRQHandler+0x438>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	bf14      	ite	ne
 8004990:	2301      	movne	r3, #1
 8004992:	2300      	moveq	r3, #0
 8004994:	b2db      	uxtb	r3, r3
 8004996:	e023      	b.n	80049e0 <HAL_DMA_IRQHandler+0x440>
 8004998:	40020010 	.word	0x40020010
 800499c:	40020028 	.word	0x40020028
 80049a0:	40020040 	.word	0x40020040
 80049a4:	40020058 	.word	0x40020058
 80049a8:	40020070 	.word	0x40020070
 80049ac:	40020088 	.word	0x40020088
 80049b0:	400200a0 	.word	0x400200a0
 80049b4:	400200b8 	.word	0x400200b8
 80049b8:	40020410 	.word	0x40020410
 80049bc:	40020428 	.word	0x40020428
 80049c0:	40020440 	.word	0x40020440
 80049c4:	40020458 	.word	0x40020458
 80049c8:	40020470 	.word	0x40020470
 80049cc:	40020488 	.word	0x40020488
 80049d0:	400204a0 	.word	0x400204a0
 80049d4:	400204b8 	.word	0x400204b8
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2300      	movs	r3, #0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00d      	beq.n	8004a00 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e8:	f003 031f 	and.w	r3, r3, #31
 80049ec:	2204      	movs	r2, #4
 80049ee:	409a      	lsls	r2, r3
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f8:	f043 0204 	orr.w	r2, r3, #4
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a04:	f003 031f 	and.w	r3, r3, #31
 8004a08:	2210      	movs	r2, #16
 8004a0a:	409a      	lsls	r2, r3
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 80a6 	beq.w	8004b62 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a85      	ldr	r2, [pc, #532]	; (8004c30 <HAL_DMA_IRQHandler+0x690>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d04a      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x516>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a83      	ldr	r2, [pc, #524]	; (8004c34 <HAL_DMA_IRQHandler+0x694>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d045      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x516>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a82      	ldr	r2, [pc, #520]	; (8004c38 <HAL_DMA_IRQHandler+0x698>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d040      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x516>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a80      	ldr	r2, [pc, #512]	; (8004c3c <HAL_DMA_IRQHandler+0x69c>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d03b      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x516>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a7f      	ldr	r2, [pc, #508]	; (8004c40 <HAL_DMA_IRQHandler+0x6a0>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d036      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x516>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a7d      	ldr	r2, [pc, #500]	; (8004c44 <HAL_DMA_IRQHandler+0x6a4>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d031      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x516>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a7c      	ldr	r2, [pc, #496]	; (8004c48 <HAL_DMA_IRQHandler+0x6a8>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d02c      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x516>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a7a      	ldr	r2, [pc, #488]	; (8004c4c <HAL_DMA_IRQHandler+0x6ac>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d027      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x516>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a79      	ldr	r2, [pc, #484]	; (8004c50 <HAL_DMA_IRQHandler+0x6b0>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d022      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x516>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a77      	ldr	r2, [pc, #476]	; (8004c54 <HAL_DMA_IRQHandler+0x6b4>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d01d      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x516>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a76      	ldr	r2, [pc, #472]	; (8004c58 <HAL_DMA_IRQHandler+0x6b8>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d018      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x516>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a74      	ldr	r2, [pc, #464]	; (8004c5c <HAL_DMA_IRQHandler+0x6bc>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d013      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x516>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a73      	ldr	r2, [pc, #460]	; (8004c60 <HAL_DMA_IRQHandler+0x6c0>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d00e      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x516>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a71      	ldr	r2, [pc, #452]	; (8004c64 <HAL_DMA_IRQHandler+0x6c4>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d009      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x516>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a70      	ldr	r2, [pc, #448]	; (8004c68 <HAL_DMA_IRQHandler+0x6c8>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d004      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x516>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a6e      	ldr	r2, [pc, #440]	; (8004c6c <HAL_DMA_IRQHandler+0x6cc>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d10a      	bne.n	8004acc <HAL_DMA_IRQHandler+0x52c>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0308 	and.w	r3, r3, #8
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	bf14      	ite	ne
 8004ac4:	2301      	movne	r3, #1
 8004ac6:	2300      	moveq	r3, #0
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	e009      	b.n	8004ae0 <HAL_DMA_IRQHandler+0x540>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0304 	and.w	r3, r3, #4
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	bf14      	ite	ne
 8004ada:	2301      	movne	r3, #1
 8004adc:	2300      	moveq	r3, #0
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d03e      	beq.n	8004b62 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae8:	f003 031f 	and.w	r3, r3, #31
 8004aec:	2210      	movs	r2, #16
 8004aee:	409a      	lsls	r2, r3
 8004af0:	6a3b      	ldr	r3, [r7, #32]
 8004af2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d018      	beq.n	8004b34 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d108      	bne.n	8004b22 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d024      	beq.n	8004b62 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	4798      	blx	r3
 8004b20:	e01f      	b.n	8004b62 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d01b      	beq.n	8004b62 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	4798      	blx	r3
 8004b32:	e016      	b.n	8004b62 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d107      	bne.n	8004b52 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0208 	bic.w	r2, r2, #8
 8004b50:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b66:	f003 031f 	and.w	r3, r3, #31
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	409a      	lsls	r2, r3
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	4013      	ands	r3, r2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 8110 	beq.w	8004d98 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a2c      	ldr	r2, [pc, #176]	; (8004c30 <HAL_DMA_IRQHandler+0x690>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d04a      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x678>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a2b      	ldr	r2, [pc, #172]	; (8004c34 <HAL_DMA_IRQHandler+0x694>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d045      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x678>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a29      	ldr	r2, [pc, #164]	; (8004c38 <HAL_DMA_IRQHandler+0x698>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d040      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x678>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a28      	ldr	r2, [pc, #160]	; (8004c3c <HAL_DMA_IRQHandler+0x69c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d03b      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x678>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a26      	ldr	r2, [pc, #152]	; (8004c40 <HAL_DMA_IRQHandler+0x6a0>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d036      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x678>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a25      	ldr	r2, [pc, #148]	; (8004c44 <HAL_DMA_IRQHandler+0x6a4>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d031      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x678>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a23      	ldr	r2, [pc, #140]	; (8004c48 <HAL_DMA_IRQHandler+0x6a8>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d02c      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x678>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a22      	ldr	r2, [pc, #136]	; (8004c4c <HAL_DMA_IRQHandler+0x6ac>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d027      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x678>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a20      	ldr	r2, [pc, #128]	; (8004c50 <HAL_DMA_IRQHandler+0x6b0>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d022      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x678>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a1f      	ldr	r2, [pc, #124]	; (8004c54 <HAL_DMA_IRQHandler+0x6b4>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d01d      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x678>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a1d      	ldr	r2, [pc, #116]	; (8004c58 <HAL_DMA_IRQHandler+0x6b8>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d018      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x678>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a1c      	ldr	r2, [pc, #112]	; (8004c5c <HAL_DMA_IRQHandler+0x6bc>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d013      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x678>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a1a      	ldr	r2, [pc, #104]	; (8004c60 <HAL_DMA_IRQHandler+0x6c0>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d00e      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x678>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a19      	ldr	r2, [pc, #100]	; (8004c64 <HAL_DMA_IRQHandler+0x6c4>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d009      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x678>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a17      	ldr	r2, [pc, #92]	; (8004c68 <HAL_DMA_IRQHandler+0x6c8>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d004      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x678>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a16      	ldr	r2, [pc, #88]	; (8004c6c <HAL_DMA_IRQHandler+0x6cc>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d12b      	bne.n	8004c70 <HAL_DMA_IRQHandler+0x6d0>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0310 	and.w	r3, r3, #16
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	bf14      	ite	ne
 8004c26:	2301      	movne	r3, #1
 8004c28:	2300      	moveq	r3, #0
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	e02a      	b.n	8004c84 <HAL_DMA_IRQHandler+0x6e4>
 8004c2e:	bf00      	nop
 8004c30:	40020010 	.word	0x40020010
 8004c34:	40020028 	.word	0x40020028
 8004c38:	40020040 	.word	0x40020040
 8004c3c:	40020058 	.word	0x40020058
 8004c40:	40020070 	.word	0x40020070
 8004c44:	40020088 	.word	0x40020088
 8004c48:	400200a0 	.word	0x400200a0
 8004c4c:	400200b8 	.word	0x400200b8
 8004c50:	40020410 	.word	0x40020410
 8004c54:	40020428 	.word	0x40020428
 8004c58:	40020440 	.word	0x40020440
 8004c5c:	40020458 	.word	0x40020458
 8004c60:	40020470 	.word	0x40020470
 8004c64:	40020488 	.word	0x40020488
 8004c68:	400204a0 	.word	0x400204a0
 8004c6c:	400204b8 	.word	0x400204b8
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	bf14      	ite	ne
 8004c7e:	2301      	movne	r3, #1
 8004c80:	2300      	moveq	r3, #0
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 8087 	beq.w	8004d98 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c8e:	f003 031f 	and.w	r3, r3, #31
 8004c92:	2220      	movs	r2, #32
 8004c94:	409a      	lsls	r2, r3
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	d139      	bne.n	8004d1a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 0216 	bic.w	r2, r2, #22
 8004cb4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	695a      	ldr	r2, [r3, #20]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cc4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d103      	bne.n	8004cd6 <HAL_DMA_IRQHandler+0x736>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d007      	beq.n	8004ce6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 0208 	bic.w	r2, r2, #8
 8004ce4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cea:	f003 031f 	and.w	r3, r3, #31
 8004cee:	223f      	movs	r2, #63	; 0x3f
 8004cf0:	409a      	lsls	r2, r3
 8004cf2:	6a3b      	ldr	r3, [r7, #32]
 8004cf4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 834a 	beq.w	80053a4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	4798      	blx	r3
          }
          return;
 8004d18:	e344      	b.n	80053a4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d018      	beq.n	8004d5a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d108      	bne.n	8004d48 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d02c      	beq.n	8004d98 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	4798      	blx	r3
 8004d46:	e027      	b.n	8004d98 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d023      	beq.n	8004d98 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	4798      	blx	r3
 8004d58:	e01e      	b.n	8004d98 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10f      	bne.n	8004d88 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0210 	bic.w	r2, r2, #16
 8004d76:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 8306 	beq.w	80053ae <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 8088 	beq.w	8004ec0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2204      	movs	r2, #4
 8004db4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a7a      	ldr	r2, [pc, #488]	; (8004fa8 <HAL_DMA_IRQHandler+0xa08>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d04a      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x8b8>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a79      	ldr	r2, [pc, #484]	; (8004fac <HAL_DMA_IRQHandler+0xa0c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d045      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x8b8>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a77      	ldr	r2, [pc, #476]	; (8004fb0 <HAL_DMA_IRQHandler+0xa10>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d040      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x8b8>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a76      	ldr	r2, [pc, #472]	; (8004fb4 <HAL_DMA_IRQHandler+0xa14>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d03b      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x8b8>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a74      	ldr	r2, [pc, #464]	; (8004fb8 <HAL_DMA_IRQHandler+0xa18>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d036      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x8b8>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a73      	ldr	r2, [pc, #460]	; (8004fbc <HAL_DMA_IRQHandler+0xa1c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d031      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x8b8>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a71      	ldr	r2, [pc, #452]	; (8004fc0 <HAL_DMA_IRQHandler+0xa20>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d02c      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x8b8>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a70      	ldr	r2, [pc, #448]	; (8004fc4 <HAL_DMA_IRQHandler+0xa24>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d027      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x8b8>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a6e      	ldr	r2, [pc, #440]	; (8004fc8 <HAL_DMA_IRQHandler+0xa28>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d022      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x8b8>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a6d      	ldr	r2, [pc, #436]	; (8004fcc <HAL_DMA_IRQHandler+0xa2c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d01d      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x8b8>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a6b      	ldr	r2, [pc, #428]	; (8004fd0 <HAL_DMA_IRQHandler+0xa30>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d018      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x8b8>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a6a      	ldr	r2, [pc, #424]	; (8004fd4 <HAL_DMA_IRQHandler+0xa34>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d013      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x8b8>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a68      	ldr	r2, [pc, #416]	; (8004fd8 <HAL_DMA_IRQHandler+0xa38>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00e      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x8b8>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a67      	ldr	r2, [pc, #412]	; (8004fdc <HAL_DMA_IRQHandler+0xa3c>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d009      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x8b8>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a65      	ldr	r2, [pc, #404]	; (8004fe0 <HAL_DMA_IRQHandler+0xa40>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d004      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x8b8>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a64      	ldr	r2, [pc, #400]	; (8004fe4 <HAL_DMA_IRQHandler+0xa44>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d108      	bne.n	8004e6a <HAL_DMA_IRQHandler+0x8ca>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0201 	bic.w	r2, r2, #1
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	e007      	b.n	8004e7a <HAL_DMA_IRQHandler+0x8da>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0201 	bic.w	r2, r2, #1
 8004e78:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	60fb      	str	r3, [r7, #12]
 8004e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d307      	bcc.n	8004e96 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1f2      	bne.n	8004e7a <HAL_DMA_IRQHandler+0x8da>
 8004e94:	e000      	b.n	8004e98 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004e96:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d004      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2203      	movs	r2, #3
 8004eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004eae:	e003      	b.n	8004eb8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 8272 	beq.w	80053ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	4798      	blx	r3
 8004ed2:	e26c      	b.n	80053ae <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a43      	ldr	r2, [pc, #268]	; (8004fe8 <HAL_DMA_IRQHandler+0xa48>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d022      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x984>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a42      	ldr	r2, [pc, #264]	; (8004fec <HAL_DMA_IRQHandler+0xa4c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d01d      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x984>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a40      	ldr	r2, [pc, #256]	; (8004ff0 <HAL_DMA_IRQHandler+0xa50>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d018      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x984>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a3f      	ldr	r2, [pc, #252]	; (8004ff4 <HAL_DMA_IRQHandler+0xa54>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d013      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x984>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a3d      	ldr	r2, [pc, #244]	; (8004ff8 <HAL_DMA_IRQHandler+0xa58>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d00e      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x984>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a3c      	ldr	r2, [pc, #240]	; (8004ffc <HAL_DMA_IRQHandler+0xa5c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d009      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x984>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a3a      	ldr	r2, [pc, #232]	; (8005000 <HAL_DMA_IRQHandler+0xa60>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d004      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x984>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a39      	ldr	r2, [pc, #228]	; (8005004 <HAL_DMA_IRQHandler+0xa64>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d101      	bne.n	8004f28 <HAL_DMA_IRQHandler+0x988>
 8004f24:	2301      	movs	r3, #1
 8004f26:	e000      	b.n	8004f2a <HAL_DMA_IRQHandler+0x98a>
 8004f28:	2300      	movs	r3, #0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 823f 	beq.w	80053ae <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f3c:	f003 031f 	and.w	r3, r3, #31
 8004f40:	2204      	movs	r2, #4
 8004f42:	409a      	lsls	r2, r3
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	4013      	ands	r3, r2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 80cd 	beq.w	80050e8 <HAL_DMA_IRQHandler+0xb48>
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 80c7 	beq.w	80050e8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f5e:	f003 031f 	and.w	r3, r3, #31
 8004f62:	2204      	movs	r2, #4
 8004f64:	409a      	lsls	r2, r3
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d049      	beq.n	8005008 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d109      	bne.n	8004f92 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 8210 	beq.w	80053a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f90:	e20a      	b.n	80053a8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 8206 	beq.w	80053a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fa4:	e200      	b.n	80053a8 <HAL_DMA_IRQHandler+0xe08>
 8004fa6:	bf00      	nop
 8004fa8:	40020010 	.word	0x40020010
 8004fac:	40020028 	.word	0x40020028
 8004fb0:	40020040 	.word	0x40020040
 8004fb4:	40020058 	.word	0x40020058
 8004fb8:	40020070 	.word	0x40020070
 8004fbc:	40020088 	.word	0x40020088
 8004fc0:	400200a0 	.word	0x400200a0
 8004fc4:	400200b8 	.word	0x400200b8
 8004fc8:	40020410 	.word	0x40020410
 8004fcc:	40020428 	.word	0x40020428
 8004fd0:	40020440 	.word	0x40020440
 8004fd4:	40020458 	.word	0x40020458
 8004fd8:	40020470 	.word	0x40020470
 8004fdc:	40020488 	.word	0x40020488
 8004fe0:	400204a0 	.word	0x400204a0
 8004fe4:	400204b8 	.word	0x400204b8
 8004fe8:	58025408 	.word	0x58025408
 8004fec:	5802541c 	.word	0x5802541c
 8004ff0:	58025430 	.word	0x58025430
 8004ff4:	58025444 	.word	0x58025444
 8004ff8:	58025458 	.word	0x58025458
 8004ffc:	5802546c 	.word	0x5802546c
 8005000:	58025480 	.word	0x58025480
 8005004:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	f003 0320 	and.w	r3, r3, #32
 800500e:	2b00      	cmp	r3, #0
 8005010:	d160      	bne.n	80050d4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a8c      	ldr	r2, [pc, #560]	; (8005248 <HAL_DMA_IRQHandler+0xca8>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d04a      	beq.n	80050b2 <HAL_DMA_IRQHandler+0xb12>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a8a      	ldr	r2, [pc, #552]	; (800524c <HAL_DMA_IRQHandler+0xcac>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d045      	beq.n	80050b2 <HAL_DMA_IRQHandler+0xb12>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a89      	ldr	r2, [pc, #548]	; (8005250 <HAL_DMA_IRQHandler+0xcb0>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d040      	beq.n	80050b2 <HAL_DMA_IRQHandler+0xb12>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a87      	ldr	r2, [pc, #540]	; (8005254 <HAL_DMA_IRQHandler+0xcb4>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d03b      	beq.n	80050b2 <HAL_DMA_IRQHandler+0xb12>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a86      	ldr	r2, [pc, #536]	; (8005258 <HAL_DMA_IRQHandler+0xcb8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d036      	beq.n	80050b2 <HAL_DMA_IRQHandler+0xb12>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a84      	ldr	r2, [pc, #528]	; (800525c <HAL_DMA_IRQHandler+0xcbc>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d031      	beq.n	80050b2 <HAL_DMA_IRQHandler+0xb12>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a83      	ldr	r2, [pc, #524]	; (8005260 <HAL_DMA_IRQHandler+0xcc0>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d02c      	beq.n	80050b2 <HAL_DMA_IRQHandler+0xb12>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a81      	ldr	r2, [pc, #516]	; (8005264 <HAL_DMA_IRQHandler+0xcc4>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d027      	beq.n	80050b2 <HAL_DMA_IRQHandler+0xb12>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a80      	ldr	r2, [pc, #512]	; (8005268 <HAL_DMA_IRQHandler+0xcc8>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d022      	beq.n	80050b2 <HAL_DMA_IRQHandler+0xb12>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a7e      	ldr	r2, [pc, #504]	; (800526c <HAL_DMA_IRQHandler+0xccc>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d01d      	beq.n	80050b2 <HAL_DMA_IRQHandler+0xb12>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a7d      	ldr	r2, [pc, #500]	; (8005270 <HAL_DMA_IRQHandler+0xcd0>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d018      	beq.n	80050b2 <HAL_DMA_IRQHandler+0xb12>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a7b      	ldr	r2, [pc, #492]	; (8005274 <HAL_DMA_IRQHandler+0xcd4>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d013      	beq.n	80050b2 <HAL_DMA_IRQHandler+0xb12>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a7a      	ldr	r2, [pc, #488]	; (8005278 <HAL_DMA_IRQHandler+0xcd8>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d00e      	beq.n	80050b2 <HAL_DMA_IRQHandler+0xb12>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a78      	ldr	r2, [pc, #480]	; (800527c <HAL_DMA_IRQHandler+0xcdc>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d009      	beq.n	80050b2 <HAL_DMA_IRQHandler+0xb12>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a77      	ldr	r2, [pc, #476]	; (8005280 <HAL_DMA_IRQHandler+0xce0>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d004      	beq.n	80050b2 <HAL_DMA_IRQHandler+0xb12>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a75      	ldr	r2, [pc, #468]	; (8005284 <HAL_DMA_IRQHandler+0xce4>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d108      	bne.n	80050c4 <HAL_DMA_IRQHandler+0xb24>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0208 	bic.w	r2, r2, #8
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	e007      	b.n	80050d4 <HAL_DMA_IRQHandler+0xb34>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0204 	bic.w	r2, r2, #4
 80050d2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 8165 	beq.w	80053a8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050e6:	e15f      	b.n	80053a8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ec:	f003 031f 	and.w	r3, r3, #31
 80050f0:	2202      	movs	r2, #2
 80050f2:	409a      	lsls	r2, r3
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	4013      	ands	r3, r2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 80c5 	beq.w	8005288 <HAL_DMA_IRQHandler+0xce8>
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 80bf 	beq.w	8005288 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800510e:	f003 031f 	and.w	r3, r3, #31
 8005112:	2202      	movs	r2, #2
 8005114:	409a      	lsls	r2, r3
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d018      	beq.n	8005156 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d109      	bne.n	8005142 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005132:	2b00      	cmp	r3, #0
 8005134:	f000 813a 	beq.w	80053ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005140:	e134      	b.n	80053ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005146:	2b00      	cmp	r3, #0
 8005148:	f000 8130 	beq.w	80053ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005154:	e12a      	b.n	80053ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	f003 0320 	and.w	r3, r3, #32
 800515c:	2b00      	cmp	r3, #0
 800515e:	d168      	bne.n	8005232 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a38      	ldr	r2, [pc, #224]	; (8005248 <HAL_DMA_IRQHandler+0xca8>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d04a      	beq.n	8005200 <HAL_DMA_IRQHandler+0xc60>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a37      	ldr	r2, [pc, #220]	; (800524c <HAL_DMA_IRQHandler+0xcac>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d045      	beq.n	8005200 <HAL_DMA_IRQHandler+0xc60>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a35      	ldr	r2, [pc, #212]	; (8005250 <HAL_DMA_IRQHandler+0xcb0>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d040      	beq.n	8005200 <HAL_DMA_IRQHandler+0xc60>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a34      	ldr	r2, [pc, #208]	; (8005254 <HAL_DMA_IRQHandler+0xcb4>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d03b      	beq.n	8005200 <HAL_DMA_IRQHandler+0xc60>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a32      	ldr	r2, [pc, #200]	; (8005258 <HAL_DMA_IRQHandler+0xcb8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d036      	beq.n	8005200 <HAL_DMA_IRQHandler+0xc60>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a31      	ldr	r2, [pc, #196]	; (800525c <HAL_DMA_IRQHandler+0xcbc>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d031      	beq.n	8005200 <HAL_DMA_IRQHandler+0xc60>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a2f      	ldr	r2, [pc, #188]	; (8005260 <HAL_DMA_IRQHandler+0xcc0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d02c      	beq.n	8005200 <HAL_DMA_IRQHandler+0xc60>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a2e      	ldr	r2, [pc, #184]	; (8005264 <HAL_DMA_IRQHandler+0xcc4>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d027      	beq.n	8005200 <HAL_DMA_IRQHandler+0xc60>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a2c      	ldr	r2, [pc, #176]	; (8005268 <HAL_DMA_IRQHandler+0xcc8>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d022      	beq.n	8005200 <HAL_DMA_IRQHandler+0xc60>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a2b      	ldr	r2, [pc, #172]	; (800526c <HAL_DMA_IRQHandler+0xccc>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d01d      	beq.n	8005200 <HAL_DMA_IRQHandler+0xc60>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a29      	ldr	r2, [pc, #164]	; (8005270 <HAL_DMA_IRQHandler+0xcd0>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d018      	beq.n	8005200 <HAL_DMA_IRQHandler+0xc60>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a28      	ldr	r2, [pc, #160]	; (8005274 <HAL_DMA_IRQHandler+0xcd4>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d013      	beq.n	8005200 <HAL_DMA_IRQHandler+0xc60>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a26      	ldr	r2, [pc, #152]	; (8005278 <HAL_DMA_IRQHandler+0xcd8>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d00e      	beq.n	8005200 <HAL_DMA_IRQHandler+0xc60>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a25      	ldr	r2, [pc, #148]	; (800527c <HAL_DMA_IRQHandler+0xcdc>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d009      	beq.n	8005200 <HAL_DMA_IRQHandler+0xc60>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a23      	ldr	r2, [pc, #140]	; (8005280 <HAL_DMA_IRQHandler+0xce0>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d004      	beq.n	8005200 <HAL_DMA_IRQHandler+0xc60>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a22      	ldr	r2, [pc, #136]	; (8005284 <HAL_DMA_IRQHandler+0xce4>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d108      	bne.n	8005212 <HAL_DMA_IRQHandler+0xc72>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0214 	bic.w	r2, r2, #20
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	e007      	b.n	8005222 <HAL_DMA_IRQHandler+0xc82>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 020a 	bic.w	r2, r2, #10
 8005220:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005236:	2b00      	cmp	r3, #0
 8005238:	f000 80b8 	beq.w	80053ac <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005244:	e0b2      	b.n	80053ac <HAL_DMA_IRQHandler+0xe0c>
 8005246:	bf00      	nop
 8005248:	40020010 	.word	0x40020010
 800524c:	40020028 	.word	0x40020028
 8005250:	40020040 	.word	0x40020040
 8005254:	40020058 	.word	0x40020058
 8005258:	40020070 	.word	0x40020070
 800525c:	40020088 	.word	0x40020088
 8005260:	400200a0 	.word	0x400200a0
 8005264:	400200b8 	.word	0x400200b8
 8005268:	40020410 	.word	0x40020410
 800526c:	40020428 	.word	0x40020428
 8005270:	40020440 	.word	0x40020440
 8005274:	40020458 	.word	0x40020458
 8005278:	40020470 	.word	0x40020470
 800527c:	40020488 	.word	0x40020488
 8005280:	400204a0 	.word	0x400204a0
 8005284:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800528c:	f003 031f 	and.w	r3, r3, #31
 8005290:	2208      	movs	r2, #8
 8005292:	409a      	lsls	r2, r3
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	4013      	ands	r3, r2
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 8088 	beq.w	80053ae <HAL_DMA_IRQHandler+0xe0e>
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 8082 	beq.w	80053ae <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a41      	ldr	r2, [pc, #260]	; (80053b4 <HAL_DMA_IRQHandler+0xe14>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d04a      	beq.n	800534a <HAL_DMA_IRQHandler+0xdaa>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a3f      	ldr	r2, [pc, #252]	; (80053b8 <HAL_DMA_IRQHandler+0xe18>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d045      	beq.n	800534a <HAL_DMA_IRQHandler+0xdaa>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a3e      	ldr	r2, [pc, #248]	; (80053bc <HAL_DMA_IRQHandler+0xe1c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d040      	beq.n	800534a <HAL_DMA_IRQHandler+0xdaa>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a3c      	ldr	r2, [pc, #240]	; (80053c0 <HAL_DMA_IRQHandler+0xe20>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d03b      	beq.n	800534a <HAL_DMA_IRQHandler+0xdaa>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a3b      	ldr	r2, [pc, #236]	; (80053c4 <HAL_DMA_IRQHandler+0xe24>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d036      	beq.n	800534a <HAL_DMA_IRQHandler+0xdaa>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a39      	ldr	r2, [pc, #228]	; (80053c8 <HAL_DMA_IRQHandler+0xe28>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d031      	beq.n	800534a <HAL_DMA_IRQHandler+0xdaa>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a38      	ldr	r2, [pc, #224]	; (80053cc <HAL_DMA_IRQHandler+0xe2c>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d02c      	beq.n	800534a <HAL_DMA_IRQHandler+0xdaa>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a36      	ldr	r2, [pc, #216]	; (80053d0 <HAL_DMA_IRQHandler+0xe30>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d027      	beq.n	800534a <HAL_DMA_IRQHandler+0xdaa>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a35      	ldr	r2, [pc, #212]	; (80053d4 <HAL_DMA_IRQHandler+0xe34>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d022      	beq.n	800534a <HAL_DMA_IRQHandler+0xdaa>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a33      	ldr	r2, [pc, #204]	; (80053d8 <HAL_DMA_IRQHandler+0xe38>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d01d      	beq.n	800534a <HAL_DMA_IRQHandler+0xdaa>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a32      	ldr	r2, [pc, #200]	; (80053dc <HAL_DMA_IRQHandler+0xe3c>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d018      	beq.n	800534a <HAL_DMA_IRQHandler+0xdaa>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a30      	ldr	r2, [pc, #192]	; (80053e0 <HAL_DMA_IRQHandler+0xe40>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d013      	beq.n	800534a <HAL_DMA_IRQHandler+0xdaa>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a2f      	ldr	r2, [pc, #188]	; (80053e4 <HAL_DMA_IRQHandler+0xe44>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d00e      	beq.n	800534a <HAL_DMA_IRQHandler+0xdaa>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a2d      	ldr	r2, [pc, #180]	; (80053e8 <HAL_DMA_IRQHandler+0xe48>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d009      	beq.n	800534a <HAL_DMA_IRQHandler+0xdaa>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a2c      	ldr	r2, [pc, #176]	; (80053ec <HAL_DMA_IRQHandler+0xe4c>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d004      	beq.n	800534a <HAL_DMA_IRQHandler+0xdaa>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a2a      	ldr	r2, [pc, #168]	; (80053f0 <HAL_DMA_IRQHandler+0xe50>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d108      	bne.n	800535c <HAL_DMA_IRQHandler+0xdbc>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 021c 	bic.w	r2, r2, #28
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	e007      	b.n	800536c <HAL_DMA_IRQHandler+0xdcc>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 020e 	bic.w	r2, r2, #14
 800536a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005370:	f003 031f 	and.w	r3, r3, #31
 8005374:	2201      	movs	r2, #1
 8005376:	409a      	lsls	r2, r3
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005396:	2b00      	cmp	r3, #0
 8005398:	d009      	beq.n	80053ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	4798      	blx	r3
 80053a2:	e004      	b.n	80053ae <HAL_DMA_IRQHandler+0xe0e>
          return;
 80053a4:	bf00      	nop
 80053a6:	e002      	b.n	80053ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053a8:	bf00      	nop
 80053aa:	e000      	b.n	80053ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053ac:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80053ae:	3728      	adds	r7, #40	; 0x28
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	40020010 	.word	0x40020010
 80053b8:	40020028 	.word	0x40020028
 80053bc:	40020040 	.word	0x40020040
 80053c0:	40020058 	.word	0x40020058
 80053c4:	40020070 	.word	0x40020070
 80053c8:	40020088 	.word	0x40020088
 80053cc:	400200a0 	.word	0x400200a0
 80053d0:	400200b8 	.word	0x400200b8
 80053d4:	40020410 	.word	0x40020410
 80053d8:	40020428 	.word	0x40020428
 80053dc:	40020440 	.word	0x40020440
 80053e0:	40020458 	.word	0x40020458
 80053e4:	40020470 	.word	0x40020470
 80053e8:	40020488 	.word	0x40020488
 80053ec:	400204a0 	.word	0x400204a0
 80053f0:	400204b8 	.word	0x400204b8

080053f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
 8005400:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005406:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800540c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a84      	ldr	r2, [pc, #528]	; (8005624 <DMA_SetConfig+0x230>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d072      	beq.n	80054fe <DMA_SetConfig+0x10a>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a82      	ldr	r2, [pc, #520]	; (8005628 <DMA_SetConfig+0x234>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d06d      	beq.n	80054fe <DMA_SetConfig+0x10a>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a81      	ldr	r2, [pc, #516]	; (800562c <DMA_SetConfig+0x238>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d068      	beq.n	80054fe <DMA_SetConfig+0x10a>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a7f      	ldr	r2, [pc, #508]	; (8005630 <DMA_SetConfig+0x23c>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d063      	beq.n	80054fe <DMA_SetConfig+0x10a>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a7e      	ldr	r2, [pc, #504]	; (8005634 <DMA_SetConfig+0x240>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d05e      	beq.n	80054fe <DMA_SetConfig+0x10a>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a7c      	ldr	r2, [pc, #496]	; (8005638 <DMA_SetConfig+0x244>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d059      	beq.n	80054fe <DMA_SetConfig+0x10a>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a7b      	ldr	r2, [pc, #492]	; (800563c <DMA_SetConfig+0x248>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d054      	beq.n	80054fe <DMA_SetConfig+0x10a>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a79      	ldr	r2, [pc, #484]	; (8005640 <DMA_SetConfig+0x24c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d04f      	beq.n	80054fe <DMA_SetConfig+0x10a>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a78      	ldr	r2, [pc, #480]	; (8005644 <DMA_SetConfig+0x250>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d04a      	beq.n	80054fe <DMA_SetConfig+0x10a>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a76      	ldr	r2, [pc, #472]	; (8005648 <DMA_SetConfig+0x254>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d045      	beq.n	80054fe <DMA_SetConfig+0x10a>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a75      	ldr	r2, [pc, #468]	; (800564c <DMA_SetConfig+0x258>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d040      	beq.n	80054fe <DMA_SetConfig+0x10a>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a73      	ldr	r2, [pc, #460]	; (8005650 <DMA_SetConfig+0x25c>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d03b      	beq.n	80054fe <DMA_SetConfig+0x10a>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a72      	ldr	r2, [pc, #456]	; (8005654 <DMA_SetConfig+0x260>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d036      	beq.n	80054fe <DMA_SetConfig+0x10a>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a70      	ldr	r2, [pc, #448]	; (8005658 <DMA_SetConfig+0x264>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d031      	beq.n	80054fe <DMA_SetConfig+0x10a>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a6f      	ldr	r2, [pc, #444]	; (800565c <DMA_SetConfig+0x268>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d02c      	beq.n	80054fe <DMA_SetConfig+0x10a>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a6d      	ldr	r2, [pc, #436]	; (8005660 <DMA_SetConfig+0x26c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d027      	beq.n	80054fe <DMA_SetConfig+0x10a>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a6c      	ldr	r2, [pc, #432]	; (8005664 <DMA_SetConfig+0x270>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d022      	beq.n	80054fe <DMA_SetConfig+0x10a>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a6a      	ldr	r2, [pc, #424]	; (8005668 <DMA_SetConfig+0x274>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d01d      	beq.n	80054fe <DMA_SetConfig+0x10a>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a69      	ldr	r2, [pc, #420]	; (800566c <DMA_SetConfig+0x278>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d018      	beq.n	80054fe <DMA_SetConfig+0x10a>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a67      	ldr	r2, [pc, #412]	; (8005670 <DMA_SetConfig+0x27c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d013      	beq.n	80054fe <DMA_SetConfig+0x10a>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a66      	ldr	r2, [pc, #408]	; (8005674 <DMA_SetConfig+0x280>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d00e      	beq.n	80054fe <DMA_SetConfig+0x10a>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a64      	ldr	r2, [pc, #400]	; (8005678 <DMA_SetConfig+0x284>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d009      	beq.n	80054fe <DMA_SetConfig+0x10a>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a63      	ldr	r2, [pc, #396]	; (800567c <DMA_SetConfig+0x288>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d004      	beq.n	80054fe <DMA_SetConfig+0x10a>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a61      	ldr	r2, [pc, #388]	; (8005680 <DMA_SetConfig+0x28c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d101      	bne.n	8005502 <DMA_SetConfig+0x10e>
 80054fe:	2301      	movs	r3, #1
 8005500:	e000      	b.n	8005504 <DMA_SetConfig+0x110>
 8005502:	2300      	movs	r3, #0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00d      	beq.n	8005524 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005510:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005516:	2b00      	cmp	r3, #0
 8005518:	d004      	beq.n	8005524 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005522:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a3e      	ldr	r2, [pc, #248]	; (8005624 <DMA_SetConfig+0x230>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d04a      	beq.n	80055c4 <DMA_SetConfig+0x1d0>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a3d      	ldr	r2, [pc, #244]	; (8005628 <DMA_SetConfig+0x234>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d045      	beq.n	80055c4 <DMA_SetConfig+0x1d0>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a3b      	ldr	r2, [pc, #236]	; (800562c <DMA_SetConfig+0x238>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d040      	beq.n	80055c4 <DMA_SetConfig+0x1d0>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a3a      	ldr	r2, [pc, #232]	; (8005630 <DMA_SetConfig+0x23c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d03b      	beq.n	80055c4 <DMA_SetConfig+0x1d0>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a38      	ldr	r2, [pc, #224]	; (8005634 <DMA_SetConfig+0x240>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d036      	beq.n	80055c4 <DMA_SetConfig+0x1d0>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a37      	ldr	r2, [pc, #220]	; (8005638 <DMA_SetConfig+0x244>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d031      	beq.n	80055c4 <DMA_SetConfig+0x1d0>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a35      	ldr	r2, [pc, #212]	; (800563c <DMA_SetConfig+0x248>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d02c      	beq.n	80055c4 <DMA_SetConfig+0x1d0>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a34      	ldr	r2, [pc, #208]	; (8005640 <DMA_SetConfig+0x24c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d027      	beq.n	80055c4 <DMA_SetConfig+0x1d0>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a32      	ldr	r2, [pc, #200]	; (8005644 <DMA_SetConfig+0x250>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d022      	beq.n	80055c4 <DMA_SetConfig+0x1d0>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a31      	ldr	r2, [pc, #196]	; (8005648 <DMA_SetConfig+0x254>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d01d      	beq.n	80055c4 <DMA_SetConfig+0x1d0>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a2f      	ldr	r2, [pc, #188]	; (800564c <DMA_SetConfig+0x258>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d018      	beq.n	80055c4 <DMA_SetConfig+0x1d0>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a2e      	ldr	r2, [pc, #184]	; (8005650 <DMA_SetConfig+0x25c>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d013      	beq.n	80055c4 <DMA_SetConfig+0x1d0>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a2c      	ldr	r2, [pc, #176]	; (8005654 <DMA_SetConfig+0x260>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d00e      	beq.n	80055c4 <DMA_SetConfig+0x1d0>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a2b      	ldr	r2, [pc, #172]	; (8005658 <DMA_SetConfig+0x264>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d009      	beq.n	80055c4 <DMA_SetConfig+0x1d0>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a29      	ldr	r2, [pc, #164]	; (800565c <DMA_SetConfig+0x268>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d004      	beq.n	80055c4 <DMA_SetConfig+0x1d0>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a28      	ldr	r2, [pc, #160]	; (8005660 <DMA_SetConfig+0x26c>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d101      	bne.n	80055c8 <DMA_SetConfig+0x1d4>
 80055c4:	2301      	movs	r3, #1
 80055c6:	e000      	b.n	80055ca <DMA_SetConfig+0x1d6>
 80055c8:	2300      	movs	r3, #0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d05a      	beq.n	8005684 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d2:	f003 031f 	and.w	r3, r3, #31
 80055d6:	223f      	movs	r2, #63	; 0x3f
 80055d8:	409a      	lsls	r2, r3
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80055ec:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	2b40      	cmp	r3, #64	; 0x40
 80055fc:	d108      	bne.n	8005610 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800560e:	e087      	b.n	8005720 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	60da      	str	r2, [r3, #12]
}
 8005620:	e07e      	b.n	8005720 <DMA_SetConfig+0x32c>
 8005622:	bf00      	nop
 8005624:	40020010 	.word	0x40020010
 8005628:	40020028 	.word	0x40020028
 800562c:	40020040 	.word	0x40020040
 8005630:	40020058 	.word	0x40020058
 8005634:	40020070 	.word	0x40020070
 8005638:	40020088 	.word	0x40020088
 800563c:	400200a0 	.word	0x400200a0
 8005640:	400200b8 	.word	0x400200b8
 8005644:	40020410 	.word	0x40020410
 8005648:	40020428 	.word	0x40020428
 800564c:	40020440 	.word	0x40020440
 8005650:	40020458 	.word	0x40020458
 8005654:	40020470 	.word	0x40020470
 8005658:	40020488 	.word	0x40020488
 800565c:	400204a0 	.word	0x400204a0
 8005660:	400204b8 	.word	0x400204b8
 8005664:	58025408 	.word	0x58025408
 8005668:	5802541c 	.word	0x5802541c
 800566c:	58025430 	.word	0x58025430
 8005670:	58025444 	.word	0x58025444
 8005674:	58025458 	.word	0x58025458
 8005678:	5802546c 	.word	0x5802546c
 800567c:	58025480 	.word	0x58025480
 8005680:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a28      	ldr	r2, [pc, #160]	; (800572c <DMA_SetConfig+0x338>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d022      	beq.n	80056d4 <DMA_SetConfig+0x2e0>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a27      	ldr	r2, [pc, #156]	; (8005730 <DMA_SetConfig+0x33c>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d01d      	beq.n	80056d4 <DMA_SetConfig+0x2e0>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a25      	ldr	r2, [pc, #148]	; (8005734 <DMA_SetConfig+0x340>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d018      	beq.n	80056d4 <DMA_SetConfig+0x2e0>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a24      	ldr	r2, [pc, #144]	; (8005738 <DMA_SetConfig+0x344>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d013      	beq.n	80056d4 <DMA_SetConfig+0x2e0>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a22      	ldr	r2, [pc, #136]	; (800573c <DMA_SetConfig+0x348>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d00e      	beq.n	80056d4 <DMA_SetConfig+0x2e0>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a21      	ldr	r2, [pc, #132]	; (8005740 <DMA_SetConfig+0x34c>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d009      	beq.n	80056d4 <DMA_SetConfig+0x2e0>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a1f      	ldr	r2, [pc, #124]	; (8005744 <DMA_SetConfig+0x350>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d004      	beq.n	80056d4 <DMA_SetConfig+0x2e0>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a1e      	ldr	r2, [pc, #120]	; (8005748 <DMA_SetConfig+0x354>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d101      	bne.n	80056d8 <DMA_SetConfig+0x2e4>
 80056d4:	2301      	movs	r3, #1
 80056d6:	e000      	b.n	80056da <DMA_SetConfig+0x2e6>
 80056d8:	2300      	movs	r3, #0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d020      	beq.n	8005720 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056e2:	f003 031f 	and.w	r3, r3, #31
 80056e6:	2201      	movs	r2, #1
 80056e8:	409a      	lsls	r2, r3
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	2b40      	cmp	r3, #64	; 0x40
 80056fc:	d108      	bne.n	8005710 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	60da      	str	r2, [r3, #12]
}
 800570e:	e007      	b.n	8005720 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	60da      	str	r2, [r3, #12]
}
 8005720:	bf00      	nop
 8005722:	371c      	adds	r7, #28
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	58025408 	.word	0x58025408
 8005730:	5802541c 	.word	0x5802541c
 8005734:	58025430 	.word	0x58025430
 8005738:	58025444 	.word	0x58025444
 800573c:	58025458 	.word	0x58025458
 8005740:	5802546c 	.word	0x5802546c
 8005744:	58025480 	.word	0x58025480
 8005748:	58025494 	.word	0x58025494

0800574c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a42      	ldr	r2, [pc, #264]	; (8005864 <DMA_CalcBaseAndBitshift+0x118>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d04a      	beq.n	80057f4 <DMA_CalcBaseAndBitshift+0xa8>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a41      	ldr	r2, [pc, #260]	; (8005868 <DMA_CalcBaseAndBitshift+0x11c>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d045      	beq.n	80057f4 <DMA_CalcBaseAndBitshift+0xa8>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a3f      	ldr	r2, [pc, #252]	; (800586c <DMA_CalcBaseAndBitshift+0x120>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d040      	beq.n	80057f4 <DMA_CalcBaseAndBitshift+0xa8>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a3e      	ldr	r2, [pc, #248]	; (8005870 <DMA_CalcBaseAndBitshift+0x124>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d03b      	beq.n	80057f4 <DMA_CalcBaseAndBitshift+0xa8>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a3c      	ldr	r2, [pc, #240]	; (8005874 <DMA_CalcBaseAndBitshift+0x128>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d036      	beq.n	80057f4 <DMA_CalcBaseAndBitshift+0xa8>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a3b      	ldr	r2, [pc, #236]	; (8005878 <DMA_CalcBaseAndBitshift+0x12c>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d031      	beq.n	80057f4 <DMA_CalcBaseAndBitshift+0xa8>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a39      	ldr	r2, [pc, #228]	; (800587c <DMA_CalcBaseAndBitshift+0x130>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d02c      	beq.n	80057f4 <DMA_CalcBaseAndBitshift+0xa8>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a38      	ldr	r2, [pc, #224]	; (8005880 <DMA_CalcBaseAndBitshift+0x134>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d027      	beq.n	80057f4 <DMA_CalcBaseAndBitshift+0xa8>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a36      	ldr	r2, [pc, #216]	; (8005884 <DMA_CalcBaseAndBitshift+0x138>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d022      	beq.n	80057f4 <DMA_CalcBaseAndBitshift+0xa8>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a35      	ldr	r2, [pc, #212]	; (8005888 <DMA_CalcBaseAndBitshift+0x13c>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d01d      	beq.n	80057f4 <DMA_CalcBaseAndBitshift+0xa8>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a33      	ldr	r2, [pc, #204]	; (800588c <DMA_CalcBaseAndBitshift+0x140>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d018      	beq.n	80057f4 <DMA_CalcBaseAndBitshift+0xa8>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a32      	ldr	r2, [pc, #200]	; (8005890 <DMA_CalcBaseAndBitshift+0x144>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d013      	beq.n	80057f4 <DMA_CalcBaseAndBitshift+0xa8>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a30      	ldr	r2, [pc, #192]	; (8005894 <DMA_CalcBaseAndBitshift+0x148>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d00e      	beq.n	80057f4 <DMA_CalcBaseAndBitshift+0xa8>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a2f      	ldr	r2, [pc, #188]	; (8005898 <DMA_CalcBaseAndBitshift+0x14c>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d009      	beq.n	80057f4 <DMA_CalcBaseAndBitshift+0xa8>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a2d      	ldr	r2, [pc, #180]	; (800589c <DMA_CalcBaseAndBitshift+0x150>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d004      	beq.n	80057f4 <DMA_CalcBaseAndBitshift+0xa8>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a2c      	ldr	r2, [pc, #176]	; (80058a0 <DMA_CalcBaseAndBitshift+0x154>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d101      	bne.n	80057f8 <DMA_CalcBaseAndBitshift+0xac>
 80057f4:	2301      	movs	r3, #1
 80057f6:	e000      	b.n	80057fa <DMA_CalcBaseAndBitshift+0xae>
 80057f8:	2300      	movs	r3, #0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d024      	beq.n	8005848 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	b2db      	uxtb	r3, r3
 8005804:	3b10      	subs	r3, #16
 8005806:	4a27      	ldr	r2, [pc, #156]	; (80058a4 <DMA_CalcBaseAndBitshift+0x158>)
 8005808:	fba2 2303 	umull	r2, r3, r2, r3
 800580c:	091b      	lsrs	r3, r3, #4
 800580e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f003 0307 	and.w	r3, r3, #7
 8005816:	4a24      	ldr	r2, [pc, #144]	; (80058a8 <DMA_CalcBaseAndBitshift+0x15c>)
 8005818:	5cd3      	ldrb	r3, [r2, r3]
 800581a:	461a      	mov	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2b03      	cmp	r3, #3
 8005824:	d908      	bls.n	8005838 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	461a      	mov	r2, r3
 800582c:	4b1f      	ldr	r3, [pc, #124]	; (80058ac <DMA_CalcBaseAndBitshift+0x160>)
 800582e:	4013      	ands	r3, r2
 8005830:	1d1a      	adds	r2, r3, #4
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	659a      	str	r2, [r3, #88]	; 0x58
 8005836:	e00d      	b.n	8005854 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	461a      	mov	r2, r3
 800583e:	4b1b      	ldr	r3, [pc, #108]	; (80058ac <DMA_CalcBaseAndBitshift+0x160>)
 8005840:	4013      	ands	r3, r2
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6593      	str	r3, [r2, #88]	; 0x58
 8005846:	e005      	b.n	8005854 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005858:	4618      	mov	r0, r3
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	40020010 	.word	0x40020010
 8005868:	40020028 	.word	0x40020028
 800586c:	40020040 	.word	0x40020040
 8005870:	40020058 	.word	0x40020058
 8005874:	40020070 	.word	0x40020070
 8005878:	40020088 	.word	0x40020088
 800587c:	400200a0 	.word	0x400200a0
 8005880:	400200b8 	.word	0x400200b8
 8005884:	40020410 	.word	0x40020410
 8005888:	40020428 	.word	0x40020428
 800588c:	40020440 	.word	0x40020440
 8005890:	40020458 	.word	0x40020458
 8005894:	40020470 	.word	0x40020470
 8005898:	40020488 	.word	0x40020488
 800589c:	400204a0 	.word	0x400204a0
 80058a0:	400204b8 	.word	0x400204b8
 80058a4:	aaaaaaab 	.word	0xaaaaaaab
 80058a8:	0800fb1c 	.word	0x0800fb1c
 80058ac:	fffffc00 	.word	0xfffffc00

080058b0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058b8:	2300      	movs	r3, #0
 80058ba:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d120      	bne.n	8005906 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c8:	2b03      	cmp	r3, #3
 80058ca:	d858      	bhi.n	800597e <DMA_CheckFifoParam+0xce>
 80058cc:	a201      	add	r2, pc, #4	; (adr r2, 80058d4 <DMA_CheckFifoParam+0x24>)
 80058ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d2:	bf00      	nop
 80058d4:	080058e5 	.word	0x080058e5
 80058d8:	080058f7 	.word	0x080058f7
 80058dc:	080058e5 	.word	0x080058e5
 80058e0:	0800597f 	.word	0x0800597f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d048      	beq.n	8005982 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058f4:	e045      	b.n	8005982 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058fe:	d142      	bne.n	8005986 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005904:	e03f      	b.n	8005986 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800590e:	d123      	bne.n	8005958 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005914:	2b03      	cmp	r3, #3
 8005916:	d838      	bhi.n	800598a <DMA_CheckFifoParam+0xda>
 8005918:	a201      	add	r2, pc, #4	; (adr r2, 8005920 <DMA_CheckFifoParam+0x70>)
 800591a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591e:	bf00      	nop
 8005920:	08005931 	.word	0x08005931
 8005924:	08005937 	.word	0x08005937
 8005928:	08005931 	.word	0x08005931
 800592c:	08005949 	.word	0x08005949
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	73fb      	strb	r3, [r7, #15]
        break;
 8005934:	e030      	b.n	8005998 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d025      	beq.n	800598e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005946:	e022      	b.n	800598e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005950:	d11f      	bne.n	8005992 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005956:	e01c      	b.n	8005992 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595c:	2b02      	cmp	r3, #2
 800595e:	d902      	bls.n	8005966 <DMA_CheckFifoParam+0xb6>
 8005960:	2b03      	cmp	r3, #3
 8005962:	d003      	beq.n	800596c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005964:	e018      	b.n	8005998 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	73fb      	strb	r3, [r7, #15]
        break;
 800596a:	e015      	b.n	8005998 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005970:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00e      	beq.n	8005996 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	73fb      	strb	r3, [r7, #15]
    break;
 800597c:	e00b      	b.n	8005996 <DMA_CheckFifoParam+0xe6>
        break;
 800597e:	bf00      	nop
 8005980:	e00a      	b.n	8005998 <DMA_CheckFifoParam+0xe8>
        break;
 8005982:	bf00      	nop
 8005984:	e008      	b.n	8005998 <DMA_CheckFifoParam+0xe8>
        break;
 8005986:	bf00      	nop
 8005988:	e006      	b.n	8005998 <DMA_CheckFifoParam+0xe8>
        break;
 800598a:	bf00      	nop
 800598c:	e004      	b.n	8005998 <DMA_CheckFifoParam+0xe8>
        break;
 800598e:	bf00      	nop
 8005990:	e002      	b.n	8005998 <DMA_CheckFifoParam+0xe8>
        break;
 8005992:	bf00      	nop
 8005994:	e000      	b.n	8005998 <DMA_CheckFifoParam+0xe8>
    break;
 8005996:	bf00      	nop
    }
  }

  return status;
 8005998:	7bfb      	ldrb	r3, [r7, #15]
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop

080059a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a38      	ldr	r2, [pc, #224]	; (8005a9c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d022      	beq.n	8005a06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a36      	ldr	r2, [pc, #216]	; (8005aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d01d      	beq.n	8005a06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a35      	ldr	r2, [pc, #212]	; (8005aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d018      	beq.n	8005a06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a33      	ldr	r2, [pc, #204]	; (8005aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d013      	beq.n	8005a06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a32      	ldr	r2, [pc, #200]	; (8005aac <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d00e      	beq.n	8005a06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a30      	ldr	r2, [pc, #192]	; (8005ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d009      	beq.n	8005a06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a2f      	ldr	r2, [pc, #188]	; (8005ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d004      	beq.n	8005a06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a2d      	ldr	r2, [pc, #180]	; (8005ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d101      	bne.n	8005a0a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005a06:	2301      	movs	r3, #1
 8005a08:	e000      	b.n	8005a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d01a      	beq.n	8005a46 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	3b08      	subs	r3, #8
 8005a18:	4a28      	ldr	r2, [pc, #160]	; (8005abc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1e:	091b      	lsrs	r3, r3, #4
 8005a20:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4b26      	ldr	r3, [pc, #152]	; (8005ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005a26:	4413      	add	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a24      	ldr	r2, [pc, #144]	; (8005ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005a34:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f003 031f 	and.w	r3, r3, #31
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	409a      	lsls	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005a44:	e024      	b.n	8005a90 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	3b10      	subs	r3, #16
 8005a4e:	4a1e      	ldr	r2, [pc, #120]	; (8005ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005a50:	fba2 2303 	umull	r2, r3, r2, r3
 8005a54:	091b      	lsrs	r3, r3, #4
 8005a56:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	4a1c      	ldr	r2, [pc, #112]	; (8005acc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d806      	bhi.n	8005a6e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	4a1b      	ldr	r2, [pc, #108]	; (8005ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d902      	bls.n	8005a6e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	3308      	adds	r3, #8
 8005a6c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	4b18      	ldr	r3, [pc, #96]	; (8005ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005a72:	4413      	add	r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	461a      	mov	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a16      	ldr	r2, [pc, #88]	; (8005ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005a80:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f003 031f 	and.w	r3, r3, #31
 8005a88:	2201      	movs	r2, #1
 8005a8a:	409a      	lsls	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005a90:	bf00      	nop
 8005a92:	3714      	adds	r7, #20
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	58025408 	.word	0x58025408
 8005aa0:	5802541c 	.word	0x5802541c
 8005aa4:	58025430 	.word	0x58025430
 8005aa8:	58025444 	.word	0x58025444
 8005aac:	58025458 	.word	0x58025458
 8005ab0:	5802546c 	.word	0x5802546c
 8005ab4:	58025480 	.word	0x58025480
 8005ab8:	58025494 	.word	0x58025494
 8005abc:	cccccccd 	.word	0xcccccccd
 8005ac0:	16009600 	.word	0x16009600
 8005ac4:	58025880 	.word	0x58025880
 8005ac8:	aaaaaaab 	.word	0xaaaaaaab
 8005acc:	400204b8 	.word	0x400204b8
 8005ad0:	4002040f 	.word	0x4002040f
 8005ad4:	10008200 	.word	0x10008200
 8005ad8:	40020880 	.word	0x40020880

08005adc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d04a      	beq.n	8005b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2b08      	cmp	r3, #8
 8005af6:	d847      	bhi.n	8005b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a25      	ldr	r2, [pc, #148]	; (8005b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d022      	beq.n	8005b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a24      	ldr	r2, [pc, #144]	; (8005b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d01d      	beq.n	8005b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a22      	ldr	r2, [pc, #136]	; (8005b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d018      	beq.n	8005b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a21      	ldr	r2, [pc, #132]	; (8005ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d013      	beq.n	8005b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a1f      	ldr	r2, [pc, #124]	; (8005ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d00e      	beq.n	8005b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a1e      	ldr	r2, [pc, #120]	; (8005ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d009      	beq.n	8005b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a1c      	ldr	r2, [pc, #112]	; (8005bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d004      	beq.n	8005b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a1b      	ldr	r2, [pc, #108]	; (8005bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d101      	bne.n	8005b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e000      	b.n	8005b4e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00a      	beq.n	8005b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	4b17      	ldr	r3, [pc, #92]	; (8005bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005b56:	4413      	add	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a15      	ldr	r2, [pc, #84]	; (8005bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005b64:	671a      	str	r2, [r3, #112]	; 0x70
 8005b66:	e009      	b.n	8005b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	4b14      	ldr	r3, [pc, #80]	; (8005bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005b6c:	4413      	add	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	461a      	mov	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a11      	ldr	r2, [pc, #68]	; (8005bc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005b7a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	2201      	movs	r2, #1
 8005b82:	409a      	lsls	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005b88:	bf00      	nop
 8005b8a:	3714      	adds	r7, #20
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr
 8005b94:	58025408 	.word	0x58025408
 8005b98:	5802541c 	.word	0x5802541c
 8005b9c:	58025430 	.word	0x58025430
 8005ba0:	58025444 	.word	0x58025444
 8005ba4:	58025458 	.word	0x58025458
 8005ba8:	5802546c 	.word	0x5802546c
 8005bac:	58025480 	.word	0x58025480
 8005bb0:	58025494 	.word	0x58025494
 8005bb4:	1600963f 	.word	0x1600963f
 8005bb8:	58025940 	.word	0x58025940
 8005bbc:	1000823f 	.word	0x1000823f
 8005bc0:	40020940 	.word	0x40020940

08005bc4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e0c6      	b.n	8005d64 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d102      	bne.n	8005be4 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7fb f970 	bl	8000ec4 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2223      	movs	r2, #35	; 0x23
 8005be8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bea:	4b60      	ldr	r3, [pc, #384]	; (8005d6c <HAL_ETH_Init+0x1a8>)
 8005bec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005bf0:	4a5e      	ldr	r2, [pc, #376]	; (8005d6c <HAL_ETH_Init+0x1a8>)
 8005bf2:	f043 0302 	orr.w	r3, r3, #2
 8005bf6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005bfa:	4b5c      	ldr	r3, [pc, #368]	; (8005d6c <HAL_ETH_Init+0x1a8>)
 8005bfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c00:	f003 0302 	and.w	r3, r3, #2
 8005c04:	60bb      	str	r3, [r7, #8]
 8005c06:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	7a1b      	ldrb	r3, [r3, #8]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d103      	bne.n	8005c18 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005c10:	2000      	movs	r0, #0
 8005c12:	f7fb fc21 	bl	8001458 <HAL_SYSCFG_ETHInterfaceSelect>
 8005c16:	e003      	b.n	8005c20 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005c18:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005c1c:	f7fb fc1c 	bl	8001458 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 0201 	orr.w	r2, r2, #1
 8005c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c38:	f7fb fbde 	bl	80013f8 <HAL_GetTick>
 8005c3c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005c3e:	e00f      	b.n	8005c60 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8005c40:	f7fb fbda 	bl	80013f8 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005c4e:	d907      	bls.n	8005c60 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2204      	movs	r2, #4
 8005c54:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	22e0      	movs	r2, #224	; 0xe0
 8005c5a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e081      	b.n	8005d64 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1e6      	bne.n	8005c40 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 fac0 	bl	80061f8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005c78:	f002 fe8a 	bl	8008990 <HAL_RCC_GetHCLKFreq>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	4a3c      	ldr	r2, [pc, #240]	; (8005d70 <HAL_ETH_Init+0x1ac>)
 8005c80:	fba2 2303 	umull	r2, r3, r2, r3
 8005c84:	0c9a      	lsrs	r2, r3, #18
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	3a01      	subs	r2, #1
 8005c8c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 fa13 	bl	80060bc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005cac:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005cb0:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	f003 0303 	and.w	r3, r3, #3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d007      	beq.n	8005cce <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	22e0      	movs	r2, #224	; 0xe0
 8005cc8:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e04a      	b.n	8005d64 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	f241 1308 	movw	r3, #4360	; 0x1108
 8005cd6:	4413      	add	r3, r2
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	4b26      	ldr	r3, [pc, #152]	; (8005d74 <HAL_ETH_Init+0x1b0>)
 8005cdc:	4013      	ands	r3, r2
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	6952      	ldr	r2, [r2, #20]
 8005ce2:	0052      	lsls	r2, r2, #1
 8005ce4:	6879      	ldr	r1, [r7, #4]
 8005ce6:	6809      	ldr	r1, [r1, #0]
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	f241 1308 	movw	r3, #4360	; 0x1108
 8005cee:	440b      	add	r3, r1
 8005cf0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fad8 	bl	80062a8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 fb1c 	bl	8006336 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	3305      	adds	r3, #5
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	021a      	lsls	r2, r3, #8
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	3304      	adds	r3, #4
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	4619      	mov	r1, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	3303      	adds	r3, #3
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	061a      	lsls	r2, r3, #24
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	3302      	adds	r3, #2
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	041b      	lsls	r3, r3, #16
 8005d30:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	3301      	adds	r3, #1
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005d3c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005d4a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005d4c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2210      	movs	r2, #16
 8005d5a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2210      	movs	r2, #16
 8005d60:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	58024400 	.word	0x58024400
 8005d70:	431bde83 	.word	0x431bde83
 8005d74:	ffff8001 	.word	0xffff8001

08005d78 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8005d8a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	791b      	ldrb	r3, [r3, #4]
 8005d90:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8005d92:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	7b1b      	ldrb	r3, [r3, #12]
 8005d98:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005d9a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	7b5b      	ldrb	r3, [r3, #13]
 8005da0:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005da2:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	7b9b      	ldrb	r3, [r3, #14]
 8005da8:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005daa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	7bdb      	ldrb	r3, [r3, #15]
 8005db0:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005db2:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005db4:	683a      	ldr	r2, [r7, #0]
 8005db6:	7c12      	ldrb	r2, [r2, #16]
 8005db8:	2a00      	cmp	r2, #0
 8005dba:	d102      	bne.n	8005dc2 <ETH_SetMACConfig+0x4a>
 8005dbc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005dc0:	e000      	b.n	8005dc4 <ETH_SetMACConfig+0x4c>
 8005dc2:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005dc4:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005dc6:	683a      	ldr	r2, [r7, #0]
 8005dc8:	7c52      	ldrb	r2, [r2, #17]
 8005dca:	2a00      	cmp	r2, #0
 8005dcc:	d102      	bne.n	8005dd4 <ETH_SetMACConfig+0x5c>
 8005dce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005dd2:	e000      	b.n	8005dd6 <ETH_SetMACConfig+0x5e>
 8005dd4:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005dd6:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	7c9b      	ldrb	r3, [r3, #18]
 8005ddc:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005dde:	431a      	orrs	r2, r3
                                macconf->Speed |
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005de4:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8005dea:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	7f1b      	ldrb	r3, [r3, #28]
 8005df0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8005df2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	7f5b      	ldrb	r3, [r3, #29]
 8005df8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005dfa:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	7f92      	ldrb	r2, [r2, #30]
 8005e00:	2a00      	cmp	r2, #0
 8005e02:	d102      	bne.n	8005e0a <ETH_SetMACConfig+0x92>
 8005e04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e08:	e000      	b.n	8005e0c <ETH_SetMACConfig+0x94>
 8005e0a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005e0c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	7fdb      	ldrb	r3, [r3, #31]
 8005e12:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005e14:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005e1c:	2a00      	cmp	r2, #0
 8005e1e:	d102      	bne.n	8005e26 <ETH_SetMACConfig+0xae>
 8005e20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e24:	e000      	b.n	8005e28 <ETH_SetMACConfig+0xb0>
 8005e26:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005e28:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005e2e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e36:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8005e38:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	4b56      	ldr	r3, [pc, #344]	; (8005fa4 <ETH_SetMACConfig+0x22c>)
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	6812      	ldr	r2, [r2, #0]
 8005e50:	68f9      	ldr	r1, [r7, #12]
 8005e52:	430b      	orrs	r3, r1
 8005e54:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e62:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005e64:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e6c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005e6e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005e76:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8005e78:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005e80:	2a00      	cmp	r2, #0
 8005e82:	d102      	bne.n	8005e8a <ETH_SetMACConfig+0x112>
 8005e84:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005e88:	e000      	b.n	8005e8c <ETH_SetMACConfig+0x114>
 8005e8a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005e8c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005e92:	4313      	orrs	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	4b42      	ldr	r3, [pc, #264]	; (8005fa8 <ETH_SetMACConfig+0x230>)
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	6812      	ldr	r2, [r2, #0]
 8005ea4:	68f9      	ldr	r1, [r7, #12]
 8005ea6:	430b      	orrs	r3, r1
 8005ea8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005eb0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68da      	ldr	r2, [r3, #12]
 8005ec0:	4b3a      	ldr	r3, [pc, #232]	; (8005fac <ETH_SetMACConfig+0x234>)
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	6812      	ldr	r2, [r2, #0]
 8005ec8:	68f9      	ldr	r1, [r7, #12]
 8005eca:	430b      	orrs	r3, r1
 8005ecc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005ed4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005eda:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005ee2:	2a00      	cmp	r2, #0
 8005ee4:	d101      	bne.n	8005eea <ETH_SetMACConfig+0x172>
 8005ee6:	2280      	movs	r2, #128	; 0x80
 8005ee8:	e000      	b.n	8005eec <ETH_SetMACConfig+0x174>
 8005eea:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005eec:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ef2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005efe:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005f02:	4013      	ands	r3, r2
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	6812      	ldr	r2, [r2, #0]
 8005f08:	68f9      	ldr	r1, [r7, #12]
 8005f0a:	430b      	orrs	r3, r1
 8005f0c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005f14:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005f1c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f2a:	f023 0103 	bic.w	r1, r3, #3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	430a      	orrs	r2, r1
 8005f36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005f42:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005f58:	683a      	ldr	r2, [r7, #0]
 8005f5a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005f5e:	2a00      	cmp	r2, #0
 8005f60:	d101      	bne.n	8005f66 <ETH_SetMACConfig+0x1ee>
 8005f62:	2240      	movs	r2, #64	; 0x40
 8005f64:	e000      	b.n	8005f68 <ETH_SetMACConfig+0x1f0>
 8005f66:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005f68:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005f70:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005f72:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005f7a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005f88:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005f98:	bf00      	nop
 8005f9a:	3714      	adds	r7, #20
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr
 8005fa4:	00048083 	.word	0x00048083
 8005fa8:	c0f88000 	.word	0xc0f88000
 8005fac:	fffffef0 	.word	0xfffffef0

08005fb0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	4b38      	ldr	r3, [pc, #224]	; (80060a8 <ETH_SetDMAConfig+0xf8>)
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	6812      	ldr	r2, [r2, #0]
 8005fcc:	6879      	ldr	r1, [r7, #4]
 8005fce:	6809      	ldr	r1, [r1, #0]
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8005fd6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	791b      	ldrb	r3, [r3, #4]
 8005fdc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005fe2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	7b1b      	ldrb	r3, [r3, #12]
 8005fe8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005fea:	4313      	orrs	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	f241 0304 	movw	r3, #4100	; 0x1004
 8005ff6:	4413      	add	r3, r2
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	4b2c      	ldr	r3, [pc, #176]	; (80060ac <ETH_SetDMAConfig+0xfc>)
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	6811      	ldr	r1, [r2, #0]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	431a      	orrs	r2, r3
 8006006:	f241 0304 	movw	r3, #4100	; 0x1004
 800600a:	440b      	add	r3, r1
 800600c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	7b5b      	ldrb	r3, [r3, #13]
 8006012:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006018:	4313      	orrs	r3, r2
 800601a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	4b22      	ldr	r3, [pc, #136]	; (80060b0 <ETH_SetDMAConfig+0x100>)
 8006028:	4013      	ands	r3, r2
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	6811      	ldr	r1, [r2, #0]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	431a      	orrs	r2, r3
 8006032:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8006036:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	7d1b      	ldrb	r3, [r3, #20]
 8006040:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8006042:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	7f5b      	ldrb	r3, [r3, #29]
 8006048:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	f241 1304 	movw	r3, #4356	; 0x1104
 8006056:	4413      	add	r3, r2
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	4b16      	ldr	r3, [pc, #88]	; (80060b4 <ETH_SetDMAConfig+0x104>)
 800605c:	4013      	ands	r3, r2
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	6811      	ldr	r1, [r2, #0]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	431a      	orrs	r2, r3
 8006066:	f241 1304 	movw	r3, #4356	; 0x1104
 800606a:	440b      	add	r3, r1
 800606c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	7f1b      	ldrb	r3, [r3, #28]
 8006072:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006078:	4313      	orrs	r3, r2
 800607a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	f241 1308 	movw	r3, #4360	; 0x1108
 8006084:	4413      	add	r3, r2
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	4b0b      	ldr	r3, [pc, #44]	; (80060b8 <ETH_SetDMAConfig+0x108>)
 800608a:	4013      	ands	r3, r2
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	6811      	ldr	r1, [r2, #0]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	431a      	orrs	r2, r3
 8006094:	f241 1308 	movw	r3, #4360	; 0x1108
 8006098:	440b      	add	r3, r1
 800609a:	601a      	str	r2, [r3, #0]
}
 800609c:	bf00      	nop
 800609e:	3714      	adds	r7, #20
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr
 80060a8:	ffff87fd 	.word	0xffff87fd
 80060ac:	ffff2ffe 	.word	0xffff2ffe
 80060b0:	fffec000 	.word	0xfffec000
 80060b4:	ffc0efef 	.word	0xffc0efef
 80060b8:	7fc0ffff 	.word	0x7fc0ffff

080060bc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b0a4      	sub	sp, #144	; 0x90
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80060c4:	2301      	movs	r3, #1
 80060c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80060ca:	2300      	movs	r3, #0
 80060cc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80060ce:	2300      	movs	r3, #0
 80060d0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80060d4:	2300      	movs	r3, #0
 80060d6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80060da:	2301      	movs	r3, #1
 80060dc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80060e0:	2301      	movs	r3, #1
 80060e2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80060e6:	2301      	movs	r3, #1
 80060e8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80060ec:	2300      	movs	r3, #0
 80060ee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80060f2:	2301      	movs	r3, #1
 80060f4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80060f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80060fc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80060fe:	2300      	movs	r3, #0
 8006100:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8006104:	2300      	movs	r3, #0
 8006106:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8006108:	2300      	movs	r3, #0
 800610a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800610e:	2300      	movs	r3, #0
 8006110:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8006114:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8006118:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800611a:	2300      	movs	r3, #0
 800611c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8006120:	2300      	movs	r3, #0
 8006122:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8006124:	2301      	movs	r3, #1
 8006126:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800612a:	2300      	movs	r3, #0
 800612c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8006130:	2300      	movs	r3, #0
 8006132:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8006136:	2300      	movs	r3, #0
 8006138:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800613a:	2300      	movs	r3, #0
 800613c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800613e:	2300      	movs	r3, #0
 8006140:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8006142:	2300      	movs	r3, #0
 8006144:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006148:	2300      	movs	r3, #0
 800614a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800614e:	2301      	movs	r3, #1
 8006150:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8006154:	2320      	movs	r3, #32
 8006156:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800615a:	2301      	movs	r3, #1
 800615c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8006160:	2300      	movs	r3, #0
 8006162:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8006166:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800616a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800616c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006170:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8006172:	2300      	movs	r3, #0
 8006174:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8006178:	2302      	movs	r3, #2
 800617a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800617e:	2300      	movs	r3, #0
 8006180:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006184:	2300      	movs	r3, #0
 8006186:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800618a:	2300      	movs	r3, #0
 800618c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8006190:	2301      	movs	r3, #1
 8006192:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8006196:	2300      	movs	r3, #0
 8006198:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800619a:	2301      	movs	r3, #1
 800619c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80061a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80061a4:	4619      	mov	r1, r3
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f7ff fde6 	bl	8005d78 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80061ac:	2301      	movs	r3, #1
 80061ae:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80061b0:	2301      	movs	r3, #1
 80061b2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80061b4:	2300      	movs	r3, #0
 80061b6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80061b8:	2300      	movs	r3, #0
 80061ba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80061be:	2300      	movs	r3, #0
 80061c0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80061c2:	2300      	movs	r3, #0
 80061c4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80061c6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80061ca:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80061cc:	2300      	movs	r3, #0
 80061ce:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80061d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80061d4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80061d6:	2300      	movs	r3, #0
 80061d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80061dc:	f44f 7306 	mov.w	r3, #536	; 0x218
 80061e0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80061e2:	f107 0308 	add.w	r3, r7, #8
 80061e6:	4619      	mov	r1, r3
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f7ff fee1 	bl	8005fb0 <ETH_SetDMAConfig>
}
 80061ee:	bf00      	nop
 80061f0:	3790      	adds	r7, #144	; 0x90
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
	...

080061f8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006208:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006210:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006212:	f002 fbbd 	bl	8008990 <HAL_RCC_GetHCLKFreq>
 8006216:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	4a1e      	ldr	r2, [pc, #120]	; (8006294 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d908      	bls.n	8006232 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	4a1d      	ldr	r2, [pc, #116]	; (8006298 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d804      	bhi.n	8006232 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800622e:	60fb      	str	r3, [r7, #12]
 8006230:	e027      	b.n	8006282 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	4a18      	ldr	r2, [pc, #96]	; (8006298 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d908      	bls.n	800624c <ETH_MAC_MDIO_ClkConfig+0x54>
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	4a17      	ldr	r2, [pc, #92]	; (800629c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d204      	bcs.n	800624c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006248:	60fb      	str	r3, [r7, #12]
 800624a:	e01a      	b.n	8006282 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	4a13      	ldr	r2, [pc, #76]	; (800629c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d303      	bcc.n	800625c <ETH_MAC_MDIO_ClkConfig+0x64>
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	4a12      	ldr	r2, [pc, #72]	; (80062a0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d911      	bls.n	8006280 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	4a10      	ldr	r2, [pc, #64]	; (80062a0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d908      	bls.n	8006276 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	4a0f      	ldr	r2, [pc, #60]	; (80062a4 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d804      	bhi.n	8006276 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006272:	60fb      	str	r3, [r7, #12]
 8006274:	e005      	b.n	8006282 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800627c:	60fb      	str	r3, [r7, #12]
 800627e:	e000      	b.n	8006282 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8006280:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800628c:	bf00      	nop
 800628e:	3710      	adds	r7, #16
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	01312cff 	.word	0x01312cff
 8006298:	02160ebf 	.word	0x02160ebf
 800629c:	03938700 	.word	0x03938700
 80062a0:	05f5e0ff 	.word	0x05f5e0ff
 80062a4:	08f0d17f 	.word	0x08f0d17f

080062a8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80062b0:	2300      	movs	r3, #0
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	e01d      	b.n	80062f2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68d9      	ldr	r1, [r3, #12]
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	4613      	mov	r3, r2
 80062be:	005b      	lsls	r3, r3, #1
 80062c0:	4413      	add	r3, r2
 80062c2:	00db      	lsls	r3, r3, #3
 80062c4:	440b      	add	r3, r1
 80062c6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	2200      	movs	r2, #0
 80062cc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2200      	movs	r2, #0
 80062d2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2200      	movs	r2, #0
 80062d8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	2200      	movs	r2, #0
 80062de:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80062e0:	68b9      	ldr	r1, [r7, #8]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	3206      	adds	r2, #6
 80062e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	3301      	adds	r3, #1
 80062f0:	60fb      	str	r3, [r7, #12]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2b03      	cmp	r3, #3
 80062f6:	d9de      	bls.n	80062b6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	f241 132c 	movw	r3, #4396	; 0x112c
 8006306:	4413      	add	r3, r2
 8006308:	2203      	movs	r2, #3
 800630a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68d9      	ldr	r1, [r3, #12]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	f241 1314 	movw	r3, #4372	; 0x1114
 8006318:	4413      	add	r3, r2
 800631a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68da      	ldr	r2, [r3, #12]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8006328:	601a      	str	r2, [r3, #0]
}
 800632a:	bf00      	nop
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006336:	b480      	push	{r7}
 8006338:	b085      	sub	sp, #20
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800633e:	2300      	movs	r3, #0
 8006340:	60fb      	str	r3, [r7, #12]
 8006342:	e024      	b.n	800638e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6919      	ldr	r1, [r3, #16]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	4613      	mov	r3, r2
 800634c:	005b      	lsls	r3, r3, #1
 800634e:	4413      	add	r3, r2
 8006350:	00db      	lsls	r3, r3, #3
 8006352:	440b      	add	r3, r1
 8006354:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	2200      	movs	r2, #0
 800635a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	2200      	movs	r2, #0
 8006360:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	2200      	movs	r2, #0
 8006366:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	2200      	movs	r2, #0
 800636c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	2200      	movs	r2, #0
 8006372:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	2200      	movs	r2, #0
 8006378:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	6879      	ldr	r1, [r7, #4]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	3310      	adds	r3, #16
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	440b      	add	r3, r1
 8006386:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	3301      	adds	r3, #1
 800638c:	60fb      	str	r3, [r7, #12]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2b03      	cmp	r3, #3
 8006392:	d9d7      	bls.n	8006344 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	f241 1330 	movw	r3, #4400	; 0x1130
 80063ba:	4413      	add	r3, r2
 80063bc:	2203      	movs	r2, #3
 80063be:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6919      	ldr	r1, [r3, #16]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	f241 131c 	movw	r3, #4380	; 0x111c
 80063cc:	4413      	add	r3, r2
 80063ce:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	f241 1328 	movw	r3, #4392	; 0x1128
 80063e0:	4413      	add	r3, r2
 80063e2:	6019      	str	r1, [r3, #0]
}
 80063e4:	bf00      	nop
 80063e6:	3714      	adds	r7, #20
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b089      	sub	sp, #36	; 0x24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80063fa:	2300      	movs	r3, #0
 80063fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80063fe:	4b86      	ldr	r3, [pc, #536]	; (8006618 <HAL_GPIO_Init+0x228>)
 8006400:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006402:	e18c      	b.n	800671e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	2101      	movs	r1, #1
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	fa01 f303 	lsl.w	r3, r1, r3
 8006410:	4013      	ands	r3, r2
 8006412:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	2b00      	cmp	r3, #0
 8006418:	f000 817e 	beq.w	8006718 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f003 0303 	and.w	r3, r3, #3
 8006424:	2b01      	cmp	r3, #1
 8006426:	d005      	beq.n	8006434 <HAL_GPIO_Init+0x44>
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f003 0303 	and.w	r3, r3, #3
 8006430:	2b02      	cmp	r3, #2
 8006432:	d130      	bne.n	8006496 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	005b      	lsls	r3, r3, #1
 800643e:	2203      	movs	r2, #3
 8006440:	fa02 f303 	lsl.w	r3, r2, r3
 8006444:	43db      	mvns	r3, r3
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	4013      	ands	r3, r2
 800644a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	68da      	ldr	r2, [r3, #12]
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	005b      	lsls	r3, r3, #1
 8006454:	fa02 f303 	lsl.w	r3, r2, r3
 8006458:	69ba      	ldr	r2, [r7, #24]
 800645a:	4313      	orrs	r3, r2
 800645c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	69ba      	ldr	r2, [r7, #24]
 8006462:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800646a:	2201      	movs	r2, #1
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	fa02 f303 	lsl.w	r3, r2, r3
 8006472:	43db      	mvns	r3, r3
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	4013      	ands	r3, r2
 8006478:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	091b      	lsrs	r3, r3, #4
 8006480:	f003 0201 	and.w	r2, r3, #1
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	fa02 f303 	lsl.w	r3, r2, r3
 800648a:	69ba      	ldr	r2, [r7, #24]
 800648c:	4313      	orrs	r3, r2
 800648e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	69ba      	ldr	r2, [r7, #24]
 8006494:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f003 0303 	and.w	r3, r3, #3
 800649e:	2b03      	cmp	r3, #3
 80064a0:	d017      	beq.n	80064d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	005b      	lsls	r3, r3, #1
 80064ac:	2203      	movs	r2, #3
 80064ae:	fa02 f303 	lsl.w	r3, r2, r3
 80064b2:	43db      	mvns	r3, r3
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	4013      	ands	r3, r2
 80064b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	689a      	ldr	r2, [r3, #8]
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	005b      	lsls	r3, r3, #1
 80064c2:	fa02 f303 	lsl.w	r3, r2, r3
 80064c6:	69ba      	ldr	r2, [r7, #24]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f003 0303 	and.w	r3, r3, #3
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d123      	bne.n	8006526 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	08da      	lsrs	r2, r3, #3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	3208      	adds	r2, #8
 80064e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	f003 0307 	and.w	r3, r3, #7
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	220f      	movs	r2, #15
 80064f6:	fa02 f303 	lsl.w	r3, r2, r3
 80064fa:	43db      	mvns	r3, r3
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	4013      	ands	r3, r2
 8006500:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	691a      	ldr	r2, [r3, #16]
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	f003 0307 	and.w	r3, r3, #7
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	fa02 f303 	lsl.w	r3, r2, r3
 8006512:	69ba      	ldr	r2, [r7, #24]
 8006514:	4313      	orrs	r3, r2
 8006516:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	08da      	lsrs	r2, r3, #3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	3208      	adds	r2, #8
 8006520:	69b9      	ldr	r1, [r7, #24]
 8006522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	005b      	lsls	r3, r3, #1
 8006530:	2203      	movs	r2, #3
 8006532:	fa02 f303 	lsl.w	r3, r2, r3
 8006536:	43db      	mvns	r3, r3
 8006538:	69ba      	ldr	r2, [r7, #24]
 800653a:	4013      	ands	r3, r2
 800653c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	f003 0203 	and.w	r2, r3, #3
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	005b      	lsls	r3, r3, #1
 800654a:	fa02 f303 	lsl.w	r3, r2, r3
 800654e:	69ba      	ldr	r2, [r7, #24]
 8006550:	4313      	orrs	r3, r2
 8006552:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	69ba      	ldr	r2, [r7, #24]
 8006558:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006562:	2b00      	cmp	r3, #0
 8006564:	f000 80d8 	beq.w	8006718 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006568:	4b2c      	ldr	r3, [pc, #176]	; (800661c <HAL_GPIO_Init+0x22c>)
 800656a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800656e:	4a2b      	ldr	r2, [pc, #172]	; (800661c <HAL_GPIO_Init+0x22c>)
 8006570:	f043 0302 	orr.w	r3, r3, #2
 8006574:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006578:	4b28      	ldr	r3, [pc, #160]	; (800661c <HAL_GPIO_Init+0x22c>)
 800657a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800657e:	f003 0302 	and.w	r3, r3, #2
 8006582:	60fb      	str	r3, [r7, #12]
 8006584:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006586:	4a26      	ldr	r2, [pc, #152]	; (8006620 <HAL_GPIO_Init+0x230>)
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	089b      	lsrs	r3, r3, #2
 800658c:	3302      	adds	r3, #2
 800658e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006592:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	f003 0303 	and.w	r3, r3, #3
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	220f      	movs	r2, #15
 800659e:	fa02 f303 	lsl.w	r3, r2, r3
 80065a2:	43db      	mvns	r3, r3
 80065a4:	69ba      	ldr	r2, [r7, #24]
 80065a6:	4013      	ands	r3, r2
 80065a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a1d      	ldr	r2, [pc, #116]	; (8006624 <HAL_GPIO_Init+0x234>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d04a      	beq.n	8006648 <HAL_GPIO_Init+0x258>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a1c      	ldr	r2, [pc, #112]	; (8006628 <HAL_GPIO_Init+0x238>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d02b      	beq.n	8006612 <HAL_GPIO_Init+0x222>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a1b      	ldr	r2, [pc, #108]	; (800662c <HAL_GPIO_Init+0x23c>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d025      	beq.n	800660e <HAL_GPIO_Init+0x21e>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a1a      	ldr	r2, [pc, #104]	; (8006630 <HAL_GPIO_Init+0x240>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d01f      	beq.n	800660a <HAL_GPIO_Init+0x21a>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a19      	ldr	r2, [pc, #100]	; (8006634 <HAL_GPIO_Init+0x244>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d019      	beq.n	8006606 <HAL_GPIO_Init+0x216>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a18      	ldr	r2, [pc, #96]	; (8006638 <HAL_GPIO_Init+0x248>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d013      	beq.n	8006602 <HAL_GPIO_Init+0x212>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a17      	ldr	r2, [pc, #92]	; (800663c <HAL_GPIO_Init+0x24c>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d00d      	beq.n	80065fe <HAL_GPIO_Init+0x20e>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a16      	ldr	r2, [pc, #88]	; (8006640 <HAL_GPIO_Init+0x250>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d007      	beq.n	80065fa <HAL_GPIO_Init+0x20a>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a15      	ldr	r2, [pc, #84]	; (8006644 <HAL_GPIO_Init+0x254>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d101      	bne.n	80065f6 <HAL_GPIO_Init+0x206>
 80065f2:	2309      	movs	r3, #9
 80065f4:	e029      	b.n	800664a <HAL_GPIO_Init+0x25a>
 80065f6:	230a      	movs	r3, #10
 80065f8:	e027      	b.n	800664a <HAL_GPIO_Init+0x25a>
 80065fa:	2307      	movs	r3, #7
 80065fc:	e025      	b.n	800664a <HAL_GPIO_Init+0x25a>
 80065fe:	2306      	movs	r3, #6
 8006600:	e023      	b.n	800664a <HAL_GPIO_Init+0x25a>
 8006602:	2305      	movs	r3, #5
 8006604:	e021      	b.n	800664a <HAL_GPIO_Init+0x25a>
 8006606:	2304      	movs	r3, #4
 8006608:	e01f      	b.n	800664a <HAL_GPIO_Init+0x25a>
 800660a:	2303      	movs	r3, #3
 800660c:	e01d      	b.n	800664a <HAL_GPIO_Init+0x25a>
 800660e:	2302      	movs	r3, #2
 8006610:	e01b      	b.n	800664a <HAL_GPIO_Init+0x25a>
 8006612:	2301      	movs	r3, #1
 8006614:	e019      	b.n	800664a <HAL_GPIO_Init+0x25a>
 8006616:	bf00      	nop
 8006618:	58000080 	.word	0x58000080
 800661c:	58024400 	.word	0x58024400
 8006620:	58000400 	.word	0x58000400
 8006624:	58020000 	.word	0x58020000
 8006628:	58020400 	.word	0x58020400
 800662c:	58020800 	.word	0x58020800
 8006630:	58020c00 	.word	0x58020c00
 8006634:	58021000 	.word	0x58021000
 8006638:	58021400 	.word	0x58021400
 800663c:	58021800 	.word	0x58021800
 8006640:	58021c00 	.word	0x58021c00
 8006644:	58022400 	.word	0x58022400
 8006648:	2300      	movs	r3, #0
 800664a:	69fa      	ldr	r2, [r7, #28]
 800664c:	f002 0203 	and.w	r2, r2, #3
 8006650:	0092      	lsls	r2, r2, #2
 8006652:	4093      	lsls	r3, r2
 8006654:	69ba      	ldr	r2, [r7, #24]
 8006656:	4313      	orrs	r3, r2
 8006658:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800665a:	4938      	ldr	r1, [pc, #224]	; (800673c <HAL_GPIO_Init+0x34c>)
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	089b      	lsrs	r3, r3, #2
 8006660:	3302      	adds	r3, #2
 8006662:	69ba      	ldr	r2, [r7, #24]
 8006664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	43db      	mvns	r3, r3
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	4013      	ands	r3, r2
 8006678:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d003      	beq.n	800668e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006686:	69ba      	ldr	r2, [r7, #24]
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	4313      	orrs	r3, r2
 800668c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800668e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	43db      	mvns	r3, r3
 80066a2:	69ba      	ldr	r2, [r7, #24]
 80066a4:	4013      	ands	r3, r2
 80066a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d003      	beq.n	80066bc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80066b4:	69ba      	ldr	r2, [r7, #24]
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80066bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	43db      	mvns	r3, r3
 80066ce:	69ba      	ldr	r2, [r7, #24]
 80066d0:	4013      	ands	r3, r2
 80066d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d003      	beq.n	80066e8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80066e0:	69ba      	ldr	r2, [r7, #24]
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	69ba      	ldr	r2, [r7, #24]
 80066ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	43db      	mvns	r3, r3
 80066f8:	69ba      	ldr	r2, [r7, #24]
 80066fa:	4013      	ands	r3, r2
 80066fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800670a:	69ba      	ldr	r2, [r7, #24]
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	4313      	orrs	r3, r2
 8006710:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	69ba      	ldr	r2, [r7, #24]
 8006716:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	3301      	adds	r3, #1
 800671c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	fa22 f303 	lsr.w	r3, r2, r3
 8006728:	2b00      	cmp	r3, #0
 800672a:	f47f ae6b 	bne.w	8006404 <HAL_GPIO_Init+0x14>
  }
}
 800672e:	bf00      	nop
 8006730:	bf00      	nop
 8006732:	3724      	adds	r7, #36	; 0x24
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	58000400 	.word	0x58000400

08006740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	460b      	mov	r3, r1
 800674a:	807b      	strh	r3, [r7, #2]
 800674c:	4613      	mov	r3, r2
 800674e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006750:	787b      	ldrb	r3, [r7, #1]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d003      	beq.n	800675e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006756:	887a      	ldrh	r2, [r7, #2]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800675c:	e003      	b.n	8006766 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800675e:	887b      	ldrh	r3, [r7, #2]
 8006760:	041a      	lsls	r2, r3, #16
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	619a      	str	r2, [r3, #24]
}
 8006766:	bf00      	nop
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006772:	b480      	push	{r7}
 8006774:	b085      	sub	sp, #20
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	460b      	mov	r3, r1
 800677c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006784:	887a      	ldrh	r2, [r7, #2]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	4013      	ands	r3, r2
 800678a:	041a      	lsls	r2, r3, #16
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	43d9      	mvns	r1, r3
 8006790:	887b      	ldrh	r3, [r7, #2]
 8006792:	400b      	ands	r3, r1
 8006794:	431a      	orrs	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	619a      	str	r2, [r3, #24]
}
 800679a:	bf00      	nop
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80067a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067a8:	b08f      	sub	sp, #60	; 0x3c
 80067aa:	af0a      	add	r7, sp, #40	; 0x28
 80067ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d101      	bne.n	80067b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e116      	b.n	80069e6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d106      	bne.n	80067d8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f008 fd88 	bl	800f2e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2203      	movs	r2, #3
 80067dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d102      	bne.n	80067f2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4618      	mov	r0, r3
 80067f8:	f005 fc3f 	bl	800c07a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	603b      	str	r3, [r7, #0]
 8006802:	687e      	ldr	r6, [r7, #4]
 8006804:	466d      	mov	r5, sp
 8006806:	f106 0410 	add.w	r4, r6, #16
 800680a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800680c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800680e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006810:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006812:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006816:	e885 0003 	stmia.w	r5, {r0, r1}
 800681a:	1d33      	adds	r3, r6, #4
 800681c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800681e:	6838      	ldr	r0, [r7, #0]
 8006820:	f005 fb0a 	bl	800be38 <USB_CoreInit>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d005      	beq.n	8006836 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2202      	movs	r2, #2
 800682e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e0d7      	b.n	80069e6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2100      	movs	r1, #0
 800683c:	4618      	mov	r0, r3
 800683e:	f005 fc2d 	bl	800c09c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006842:	2300      	movs	r3, #0
 8006844:	73fb      	strb	r3, [r7, #15]
 8006846:	e04a      	b.n	80068de <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006848:	7bfa      	ldrb	r2, [r7, #15]
 800684a:	6879      	ldr	r1, [r7, #4]
 800684c:	4613      	mov	r3, r2
 800684e:	00db      	lsls	r3, r3, #3
 8006850:	1a9b      	subs	r3, r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	440b      	add	r3, r1
 8006856:	333d      	adds	r3, #61	; 0x3d
 8006858:	2201      	movs	r2, #1
 800685a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800685c:	7bfa      	ldrb	r2, [r7, #15]
 800685e:	6879      	ldr	r1, [r7, #4]
 8006860:	4613      	mov	r3, r2
 8006862:	00db      	lsls	r3, r3, #3
 8006864:	1a9b      	subs	r3, r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	440b      	add	r3, r1
 800686a:	333c      	adds	r3, #60	; 0x3c
 800686c:	7bfa      	ldrb	r2, [r7, #15]
 800686e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006870:	7bfa      	ldrb	r2, [r7, #15]
 8006872:	7bfb      	ldrb	r3, [r7, #15]
 8006874:	b298      	uxth	r0, r3
 8006876:	6879      	ldr	r1, [r7, #4]
 8006878:	4613      	mov	r3, r2
 800687a:	00db      	lsls	r3, r3, #3
 800687c:	1a9b      	subs	r3, r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	440b      	add	r3, r1
 8006882:	3342      	adds	r3, #66	; 0x42
 8006884:	4602      	mov	r2, r0
 8006886:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006888:	7bfa      	ldrb	r2, [r7, #15]
 800688a:	6879      	ldr	r1, [r7, #4]
 800688c:	4613      	mov	r3, r2
 800688e:	00db      	lsls	r3, r3, #3
 8006890:	1a9b      	subs	r3, r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	440b      	add	r3, r1
 8006896:	333f      	adds	r3, #63	; 0x3f
 8006898:	2200      	movs	r2, #0
 800689a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800689c:	7bfa      	ldrb	r2, [r7, #15]
 800689e:	6879      	ldr	r1, [r7, #4]
 80068a0:	4613      	mov	r3, r2
 80068a2:	00db      	lsls	r3, r3, #3
 80068a4:	1a9b      	subs	r3, r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	440b      	add	r3, r1
 80068aa:	3344      	adds	r3, #68	; 0x44
 80068ac:	2200      	movs	r2, #0
 80068ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80068b0:	7bfa      	ldrb	r2, [r7, #15]
 80068b2:	6879      	ldr	r1, [r7, #4]
 80068b4:	4613      	mov	r3, r2
 80068b6:	00db      	lsls	r3, r3, #3
 80068b8:	1a9b      	subs	r3, r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	440b      	add	r3, r1
 80068be:	3348      	adds	r3, #72	; 0x48
 80068c0:	2200      	movs	r2, #0
 80068c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80068c4:	7bfa      	ldrb	r2, [r7, #15]
 80068c6:	6879      	ldr	r1, [r7, #4]
 80068c8:	4613      	mov	r3, r2
 80068ca:	00db      	lsls	r3, r3, #3
 80068cc:	1a9b      	subs	r3, r3, r2
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	440b      	add	r3, r1
 80068d2:	3350      	adds	r3, #80	; 0x50
 80068d4:	2200      	movs	r2, #0
 80068d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068d8:	7bfb      	ldrb	r3, [r7, #15]
 80068da:	3301      	adds	r3, #1
 80068dc:	73fb      	strb	r3, [r7, #15]
 80068de:	7bfa      	ldrb	r2, [r7, #15]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d3af      	bcc.n	8006848 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068e8:	2300      	movs	r3, #0
 80068ea:	73fb      	strb	r3, [r7, #15]
 80068ec:	e044      	b.n	8006978 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80068ee:	7bfa      	ldrb	r2, [r7, #15]
 80068f0:	6879      	ldr	r1, [r7, #4]
 80068f2:	4613      	mov	r3, r2
 80068f4:	00db      	lsls	r3, r3, #3
 80068f6:	1a9b      	subs	r3, r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	440b      	add	r3, r1
 80068fc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006900:	2200      	movs	r2, #0
 8006902:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006904:	7bfa      	ldrb	r2, [r7, #15]
 8006906:	6879      	ldr	r1, [r7, #4]
 8006908:	4613      	mov	r3, r2
 800690a:	00db      	lsls	r3, r3, #3
 800690c:	1a9b      	subs	r3, r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	440b      	add	r3, r1
 8006912:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006916:	7bfa      	ldrb	r2, [r7, #15]
 8006918:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800691a:	7bfa      	ldrb	r2, [r7, #15]
 800691c:	6879      	ldr	r1, [r7, #4]
 800691e:	4613      	mov	r3, r2
 8006920:	00db      	lsls	r3, r3, #3
 8006922:	1a9b      	subs	r3, r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	440b      	add	r3, r1
 8006928:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800692c:	2200      	movs	r2, #0
 800692e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006930:	7bfa      	ldrb	r2, [r7, #15]
 8006932:	6879      	ldr	r1, [r7, #4]
 8006934:	4613      	mov	r3, r2
 8006936:	00db      	lsls	r3, r3, #3
 8006938:	1a9b      	subs	r3, r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	440b      	add	r3, r1
 800693e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006942:	2200      	movs	r2, #0
 8006944:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006946:	7bfa      	ldrb	r2, [r7, #15]
 8006948:	6879      	ldr	r1, [r7, #4]
 800694a:	4613      	mov	r3, r2
 800694c:	00db      	lsls	r3, r3, #3
 800694e:	1a9b      	subs	r3, r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	440b      	add	r3, r1
 8006954:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006958:	2200      	movs	r2, #0
 800695a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800695c:	7bfa      	ldrb	r2, [r7, #15]
 800695e:	6879      	ldr	r1, [r7, #4]
 8006960:	4613      	mov	r3, r2
 8006962:	00db      	lsls	r3, r3, #3
 8006964:	1a9b      	subs	r3, r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	440b      	add	r3, r1
 800696a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800696e:	2200      	movs	r2, #0
 8006970:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006972:	7bfb      	ldrb	r3, [r7, #15]
 8006974:	3301      	adds	r3, #1
 8006976:	73fb      	strb	r3, [r7, #15]
 8006978:	7bfa      	ldrb	r2, [r7, #15]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	429a      	cmp	r2, r3
 8006980:	d3b5      	bcc.n	80068ee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	603b      	str	r3, [r7, #0]
 8006988:	687e      	ldr	r6, [r7, #4]
 800698a:	466d      	mov	r5, sp
 800698c:	f106 0410 	add.w	r4, r6, #16
 8006990:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006992:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006994:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006996:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006998:	e894 0003 	ldmia.w	r4, {r0, r1}
 800699c:	e885 0003 	stmia.w	r5, {r0, r1}
 80069a0:	1d33      	adds	r3, r6, #4
 80069a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069a4:	6838      	ldr	r0, [r7, #0]
 80069a6:	f005 fbc5 	bl	800c134 <USB_DevInit>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d005      	beq.n	80069bc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2202      	movs	r2, #2
 80069b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e014      	b.n	80069e6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d102      	bne.n	80069da <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f001 f885 	bl	8007ae4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4618      	mov	r0, r3
 80069e0:	f006 fc5d 	bl	800d29e <USB_DevDisconnect>

  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080069ee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b084      	sub	sp, #16
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d101      	bne.n	8006a0a <HAL_PCD_Start+0x1c>
 8006a06:	2302      	movs	r3, #2
 8006a08:	e020      	b.n	8006a4c <HAL_PCD_Start+0x5e>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d109      	bne.n	8006a2e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d005      	beq.n	8006a2e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4618      	mov	r0, r3
 8006a34:	f005 fb10 	bl	800c058 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f006 fc0d 	bl	800d25c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006a54:	b590      	push	{r4, r7, lr}
 8006a56:	b08d      	sub	sp, #52	; 0x34
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f006 fccb 	bl	800d406 <USB_GetMode>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f040 83be 	bne.w	80071f4 <HAL_PCD_IRQHandler+0x7a0>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f006 fc2f 	bl	800d2e0 <USB_ReadInterrupts>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 83b4 	beq.w	80071f2 <HAL_PCD_IRQHandler+0x79e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f006 fc26 	bl	800d2e0 <USB_ReadInterrupts>
 8006a94:	4603      	mov	r3, r0
 8006a96:	f003 0302 	and.w	r3, r3, #2
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d107      	bne.n	8006aae <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	695a      	ldr	r2, [r3, #20]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f002 0202 	and.w	r2, r2, #2
 8006aac:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f006 fc14 	bl	800d2e0 <USB_ReadInterrupts>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	f003 0310 	and.w	r3, r3, #16
 8006abe:	2b10      	cmp	r3, #16
 8006ac0:	d161      	bne.n	8006b86 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	699a      	ldr	r2, [r3, #24]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f022 0210 	bic.w	r2, r2, #16
 8006ad0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	f003 020f 	and.w	r2, r3, #15
 8006ade:	4613      	mov	r3, r2
 8006ae0:	00db      	lsls	r3, r3, #3
 8006ae2:	1a9b      	subs	r3, r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	4413      	add	r3, r2
 8006aee:	3304      	adds	r3, #4
 8006af0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	0c5b      	lsrs	r3, r3, #17
 8006af6:	f003 030f 	and.w	r3, r3, #15
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d124      	bne.n	8006b48 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006afe:	69ba      	ldr	r2, [r7, #24]
 8006b00:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006b04:	4013      	ands	r3, r2
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d035      	beq.n	8006b76 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	091b      	lsrs	r3, r3, #4
 8006b12:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006b14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	6a38      	ldr	r0, [r7, #32]
 8006b1e:	f006 fa4b 	bl	800cfb8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	68da      	ldr	r2, [r3, #12]
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	091b      	lsrs	r3, r3, #4
 8006b2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b2e:	441a      	add	r2, r3
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	699a      	ldr	r2, [r3, #24]
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	091b      	lsrs	r3, r3, #4
 8006b3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b40:	441a      	add	r2, r3
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	619a      	str	r2, [r3, #24]
 8006b46:	e016      	b.n	8006b76 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	0c5b      	lsrs	r3, r3, #17
 8006b4c:	f003 030f 	and.w	r3, r3, #15
 8006b50:	2b06      	cmp	r3, #6
 8006b52:	d110      	bne.n	8006b76 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006b5a:	2208      	movs	r2, #8
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	6a38      	ldr	r0, [r7, #32]
 8006b60:	f006 fa2a 	bl	800cfb8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	699a      	ldr	r2, [r3, #24]
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	091b      	lsrs	r3, r3, #4
 8006b6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b70:	441a      	add	r2, r3
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	699a      	ldr	r2, [r3, #24]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f042 0210 	orr.w	r2, r2, #16
 8006b84:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f006 fba8 	bl	800d2e0 <USB_ReadInterrupts>
 8006b90:	4603      	mov	r3, r0
 8006b92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b96:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b9a:	d16e      	bne.n	8006c7a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f006 fbae 	bl	800d306 <USB_ReadDevAllOutEpInterrupt>
 8006baa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006bac:	e062      	b.n	8006c74 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb0:	f003 0301 	and.w	r3, r3, #1
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d057      	beq.n	8006c68 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bbe:	b2d2      	uxtb	r2, r2
 8006bc0:	4611      	mov	r1, r2
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f006 fbd3 	bl	800d36e <USB_ReadDevOutEPInterrupt>
 8006bc8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	f003 0301 	and.w	r3, r3, #1
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00c      	beq.n	8006bee <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be0:	461a      	mov	r2, r3
 8006be2:	2301      	movs	r3, #1
 8006be4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006be6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 fdd1 	bl	8007790 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	f003 0308 	and.w	r3, r3, #8
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00c      	beq.n	8006c12 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	015a      	lsls	r2, r3, #5
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c04:	461a      	mov	r2, r3
 8006c06:	2308      	movs	r3, #8
 8006c08:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006c0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 fecb 	bl	80079a8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	f003 0310 	and.w	r3, r3, #16
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d008      	beq.n	8006c2e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c28:	461a      	mov	r2, r3
 8006c2a:	2310      	movs	r3, #16
 8006c2c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	f003 0320 	and.w	r3, r3, #32
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d008      	beq.n	8006c4a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	015a      	lsls	r2, r3, #5
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c44:	461a      	mov	r2, r3
 8006c46:	2320      	movs	r3, #32
 8006c48:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d009      	beq.n	8006c68 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c60:	461a      	mov	r2, r3
 8006c62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006c66:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c70:	085b      	lsrs	r3, r3, #1
 8006c72:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d199      	bne.n	8006bae <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f006 fb2e 	bl	800d2e0 <USB_ReadInterrupts>
 8006c84:	4603      	mov	r3, r0
 8006c86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c8e:	f040 80c4 	bne.w	8006e1a <HAL_PCD_IRQHandler+0x3c6>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4618      	mov	r0, r3
 8006c98:	f006 fb4f 	bl	800d33a <USB_ReadDevAllInEpInterrupt>
 8006c9c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006ca2:	e0b6      	b.n	8006e12 <HAL_PCD_IRQHandler+0x3be>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f000 80ab 	beq.w	8006e06 <HAL_PCD_IRQHandler+0x3b2>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cb6:	b2d2      	uxtb	r2, r2
 8006cb8:	4611      	mov	r1, r2
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f006 fb75 	bl	800d3aa <USB_ReadDevInEPInterrupt>
 8006cc0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	f003 0301 	and.w	r3, r3, #1
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d057      	beq.n	8006d7c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cce:	f003 030f 	and.w	r3, r3, #15
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	43db      	mvns	r3, r3
 8006ce6:	69f9      	ldr	r1, [r7, #28]
 8006ce8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cec:	4013      	ands	r3, r2
 8006cee:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf2:	015a      	lsls	r2, r3, #5
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	2301      	movs	r3, #1
 8006d00:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d132      	bne.n	8006d70 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006d0a:	6879      	ldr	r1, [r7, #4]
 8006d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d0e:	4613      	mov	r3, r2
 8006d10:	00db      	lsls	r3, r3, #3
 8006d12:	1a9b      	subs	r3, r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	440b      	add	r3, r1
 8006d18:	3348      	adds	r3, #72	; 0x48
 8006d1a:	6819      	ldr	r1, [r3, #0]
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d20:	4613      	mov	r3, r2
 8006d22:	00db      	lsls	r3, r3, #3
 8006d24:	1a9b      	subs	r3, r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4403      	add	r3, r0
 8006d2a:	3344      	adds	r3, #68	; 0x44
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4419      	add	r1, r3
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d34:	4613      	mov	r3, r2
 8006d36:	00db      	lsls	r3, r3, #3
 8006d38:	1a9b      	subs	r3, r3, r2
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	4403      	add	r3, r0
 8006d3e:	3348      	adds	r3, #72	; 0x48
 8006d40:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d113      	bne.n	8006d70 <HAL_PCD_IRQHandler+0x31c>
 8006d48:	6879      	ldr	r1, [r7, #4]
 8006d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	00db      	lsls	r3, r3, #3
 8006d50:	1a9b      	subs	r3, r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	440b      	add	r3, r1
 8006d56:	3350      	adds	r3, #80	; 0x50
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d108      	bne.n	8006d70 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6818      	ldr	r0, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006d68:	461a      	mov	r2, r3
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	f006 fb7e 	bl	800d46c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	4619      	mov	r1, r3
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f008 fb65 	bl	800f446 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	f003 0308 	and.w	r3, r3, #8
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d008      	beq.n	8006d98 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d88:	015a      	lsls	r2, r3, #5
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d92:	461a      	mov	r2, r3
 8006d94:	2308      	movs	r3, #8
 8006d96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	f003 0310 	and.w	r3, r3, #16
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d008      	beq.n	8006db4 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da4:	015a      	lsls	r2, r3, #5
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	4413      	add	r3, r2
 8006daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dae:	461a      	mov	r2, r3
 8006db0:	2310      	movs	r3, #16
 8006db2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d008      	beq.n	8006dd0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc0:	015a      	lsls	r2, r3, #5
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dca:	461a      	mov	r2, r3
 8006dcc:	2340      	movs	r3, #64	; 0x40
 8006dce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00c      	beq.n	8006df4 <HAL_PCD_IRQHandler+0x3a0>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006dda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ddc:	6a38      	ldr	r0, [r7, #32]
 8006dde:	f005 fb07 	bl	800c3f0 <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de4:	015a      	lsls	r2, r3, #5
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	4413      	add	r3, r2
 8006dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dee:	461a      	mov	r2, r3
 8006df0:	2302      	movs	r3, #2
 8006df2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <HAL_PCD_IRQHandler+0x3b2>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006dfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 fc38 	bl	8007676 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e08:	3301      	adds	r3, #1
 8006e0a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0e:	085b      	lsrs	r3, r3, #1
 8006e10:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f47f af45 	bne.w	8006ca4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f006 fa5e 	bl	800d2e0 <USB_ReadInterrupts>
 8006e24:	4603      	mov	r3, r0
 8006e26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e2e:	d122      	bne.n	8006e76 <HAL_PCD_IRQHandler+0x422>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	69fa      	ldr	r2, [r7, #28]
 8006e3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e3e:	f023 0301 	bic.w	r3, r3, #1
 8006e42:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d108      	bne.n	8006e60 <HAL_PCD_IRQHandler+0x40c>
      {
        hpcd->LPM_State = LPM_L0;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006e56:	2100      	movs	r1, #0
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fe67 	bl	8007b2c <HAL_PCDEx_LPM_Callback>
 8006e5e:	e002      	b.n	8006e66 <HAL_PCD_IRQHandler+0x412>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f008 fb67 	bl	800f534 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	695a      	ldr	r2, [r3, #20]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006e74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f006 fa30 	bl	800d2e0 <USB_ReadInterrupts>
 8006e80:	4603      	mov	r3, r0
 8006e82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e8a:	d112      	bne.n	8006eb2 <HAL_PCD_IRQHandler+0x45e>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f003 0301 	and.w	r3, r3, #1
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d102      	bne.n	8006ea2 <HAL_PCD_IRQHandler+0x44e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f008 fb23 	bl	800f4e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	695a      	ldr	r2, [r3, #20]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006eb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f006 fa12 	bl	800d2e0 <USB_ReadInterrupts>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ec2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ec6:	d121      	bne.n	8006f0c <HAL_PCD_IRQHandler+0x4b8>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	695a      	ldr	r2, [r3, #20]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006ed6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d111      	bne.n	8006f06 <HAL_PCD_IRQHandler+0x4b2>
      {
        hpcd->LPM_State = LPM_L1;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef0:	089b      	lsrs	r3, r3, #2
 8006ef2:	f003 020f 	and.w	r2, r3, #15
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006efc:	2101      	movs	r1, #1
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fe14 	bl	8007b2c <HAL_PCDEx_LPM_Callback>
 8006f04:	e002      	b.n	8006f0c <HAL_PCD_IRQHandler+0x4b8>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f008 faee 	bl	800f4e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4618      	mov	r0, r3
 8006f12:	f006 f9e5 	bl	800d2e0 <USB_ReadInterrupts>
 8006f16:	4603      	mov	r3, r0
 8006f18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f20:	f040 80b7 	bne.w	8007092 <HAL_PCD_IRQHandler+0x63e>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	69fa      	ldr	r2, [r7, #28]
 8006f2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f32:	f023 0301 	bic.w	r3, r3, #1
 8006f36:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2110      	movs	r1, #16
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f005 fa56 	bl	800c3f0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f44:	2300      	movs	r3, #0
 8006f46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f48:	e046      	b.n	8006fd8 <HAL_PCD_IRQHandler+0x584>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f56:	461a      	mov	r2, r3
 8006f58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f5c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f60:	015a      	lsls	r2, r3, #5
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	4413      	add	r3, r2
 8006f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f6e:	0151      	lsls	r1, r2, #5
 8006f70:	69fa      	ldr	r2, [r7, #28]
 8006f72:	440a      	add	r2, r1
 8006f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f7c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f80:	015a      	lsls	r2, r3, #5
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	4413      	add	r3, r2
 8006f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f90:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f94:	015a      	lsls	r2, r3, #5
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fa2:	0151      	lsls	r1, r2, #5
 8006fa4:	69fa      	ldr	r2, [r7, #28]
 8006fa6:	440a      	add	r2, r1
 8006fa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006fb0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fc2:	0151      	lsls	r1, r2, #5
 8006fc4:	69fa      	ldr	r2, [r7, #28]
 8006fc6:	440a      	add	r2, r1
 8006fc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fcc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006fd0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d3b3      	bcc.n	8006f4a <HAL_PCD_IRQHandler+0x4f6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fe8:	69db      	ldr	r3, [r3, #28]
 8006fea:	69fa      	ldr	r2, [r7, #28]
 8006fec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ff0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006ff4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d016      	beq.n	800702c <HAL_PCD_IRQHandler+0x5d8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007008:	69fa      	ldr	r2, [r7, #28]
 800700a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800700e:	f043 030b 	orr.w	r3, r3, #11
 8007012:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800701c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800701e:	69fa      	ldr	r2, [r7, #28]
 8007020:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007024:	f043 030b 	orr.w	r3, r3, #11
 8007028:	6453      	str	r3, [r2, #68]	; 0x44
 800702a:	e015      	b.n	8007058 <HAL_PCD_IRQHandler+0x604>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007032:	695a      	ldr	r2, [r3, #20]
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800703a:	4619      	mov	r1, r3
 800703c:	f242 032b 	movw	r3, #8235	; 0x202b
 8007040:	4313      	orrs	r3, r2
 8007042:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	69fa      	ldr	r2, [r7, #28]
 800704e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007052:	f043 030b 	orr.w	r3, r3, #11
 8007056:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	69fa      	ldr	r2, [r7, #28]
 8007062:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007066:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800706a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6818      	ldr	r0, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800707c:	461a      	mov	r2, r3
 800707e:	f006 f9f5 	bl	800d46c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	695a      	ldr	r2, [r3, #20]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007090:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4618      	mov	r0, r3
 8007098:	f006 f922 	bl	800d2e0 <USB_ReadInterrupts>
 800709c:	4603      	mov	r3, r0
 800709e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070a6:	d124      	bne.n	80070f2 <HAL_PCD_IRQHandler+0x69e>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4618      	mov	r0, r3
 80070ae:	f006 f9b9 	bl	800d424 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4618      	mov	r0, r3
 80070b8:	f005 fa13 	bl	800c4e2 <USB_GetDevSpeed>
 80070bc:	4603      	mov	r3, r0
 80070be:	461a      	mov	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681c      	ldr	r4, [r3, #0]
 80070c8:	f001 fc62 	bl	8008990 <HAL_RCC_GetHCLKFreq>
 80070cc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	461a      	mov	r2, r3
 80070d6:	4620      	mov	r0, r4
 80070d8:	f004 ff1c 	bl	800bf14 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f008 f9da 	bl	800f496 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	695a      	ldr	r2, [r3, #20]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80070f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4618      	mov	r0, r3
 80070f8:	f006 f8f2 	bl	800d2e0 <USB_ReadInterrupts>
 80070fc:	4603      	mov	r3, r0
 80070fe:	f003 0308 	and.w	r3, r3, #8
 8007102:	2b08      	cmp	r3, #8
 8007104:	d10a      	bne.n	800711c <HAL_PCD_IRQHandler+0x6c8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f008 f9b7 	bl	800f47a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	695a      	ldr	r2, [r3, #20]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f002 0208 	and.w	r2, r2, #8
 800711a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4618      	mov	r0, r3
 8007122:	f006 f8dd 	bl	800d2e0 <USB_ReadInterrupts>
 8007126:	4603      	mov	r3, r0
 8007128:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800712c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007130:	d10f      	bne.n	8007152 <HAL_PCD_IRQHandler+0x6fe>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007132:	2300      	movs	r3, #0
 8007134:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007138:	b2db      	uxtb	r3, r3
 800713a:	4619      	mov	r1, r3
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f008 fa19 	bl	800f574 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	695a      	ldr	r2, [r3, #20]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007150:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4618      	mov	r0, r3
 8007158:	f006 f8c2 	bl	800d2e0 <USB_ReadInterrupts>
 800715c:	4603      	mov	r3, r0
 800715e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007162:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007166:	d10f      	bne.n	8007188 <HAL_PCD_IRQHandler+0x734>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007168:	2300      	movs	r3, #0
 800716a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800716c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716e:	b2db      	uxtb	r3, r3
 8007170:	4619      	mov	r1, r3
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f008 f9ec 	bl	800f550 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	695a      	ldr	r2, [r3, #20]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007186:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4618      	mov	r0, r3
 800718e:	f006 f8a7 	bl	800d2e0 <USB_ReadInterrupts>
 8007192:	4603      	mov	r3, r0
 8007194:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800719c:	d10a      	bne.n	80071b4 <HAL_PCD_IRQHandler+0x760>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f008 f9fa 	bl	800f598 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	695a      	ldr	r2, [r3, #20]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80071b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4618      	mov	r0, r3
 80071ba:	f006 f891 	bl	800d2e0 <USB_ReadInterrupts>
 80071be:	4603      	mov	r3, r0
 80071c0:	f003 0304 	and.w	r3, r3, #4
 80071c4:	2b04      	cmp	r3, #4
 80071c6:	d115      	bne.n	80071f4 <HAL_PCD_IRQHandler+0x7a0>
    {
      temp = hpcd->Instance->GOTGINT;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	f003 0304 	and.w	r3, r3, #4
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d002      	beq.n	80071e0 <HAL_PCD_IRQHandler+0x78c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f008 f9ea 	bl	800f5b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	6859      	ldr	r1, [r3, #4]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	69ba      	ldr	r2, [r7, #24]
 80071ec:	430a      	orrs	r2, r1
 80071ee:	605a      	str	r2, [r3, #4]
 80071f0:	e000      	b.n	80071f4 <HAL_PCD_IRQHandler+0x7a0>
      return;
 80071f2:	bf00      	nop
    }
  }
}
 80071f4:	3734      	adds	r7, #52	; 0x34
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd90      	pop	{r4, r7, pc}

080071fa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b082      	sub	sp, #8
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
 8007202:	460b      	mov	r3, r1
 8007204:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800720c:	2b01      	cmp	r3, #1
 800720e:	d101      	bne.n	8007214 <HAL_PCD_SetAddress+0x1a>
 8007210:	2302      	movs	r3, #2
 8007212:	e013      	b.n	800723c <HAL_PCD_SetAddress+0x42>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	78fa      	ldrb	r2, [r7, #3]
 8007220:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	78fa      	ldrb	r2, [r7, #3]
 800722a:	4611      	mov	r1, r2
 800722c:	4618      	mov	r0, r3
 800722e:	f005 ffef 	bl	800d210 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	4608      	mov	r0, r1
 800724e:	4611      	mov	r1, r2
 8007250:	461a      	mov	r2, r3
 8007252:	4603      	mov	r3, r0
 8007254:	70fb      	strb	r3, [r7, #3]
 8007256:	460b      	mov	r3, r1
 8007258:	803b      	strh	r3, [r7, #0]
 800725a:	4613      	mov	r3, r2
 800725c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800725e:	2300      	movs	r3, #0
 8007260:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007262:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007266:	2b00      	cmp	r3, #0
 8007268:	da0f      	bge.n	800728a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800726a:	78fb      	ldrb	r3, [r7, #3]
 800726c:	f003 020f 	and.w	r2, r3, #15
 8007270:	4613      	mov	r3, r2
 8007272:	00db      	lsls	r3, r3, #3
 8007274:	1a9b      	subs	r3, r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	3338      	adds	r3, #56	; 0x38
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	4413      	add	r3, r2
 800727e:	3304      	adds	r3, #4
 8007280:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2201      	movs	r2, #1
 8007286:	705a      	strb	r2, [r3, #1]
 8007288:	e00f      	b.n	80072aa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800728a:	78fb      	ldrb	r3, [r7, #3]
 800728c:	f003 020f 	and.w	r2, r3, #15
 8007290:	4613      	mov	r3, r2
 8007292:	00db      	lsls	r3, r3, #3
 8007294:	1a9b      	subs	r3, r3, r2
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	4413      	add	r3, r2
 80072a0:	3304      	adds	r3, #4
 80072a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80072aa:	78fb      	ldrb	r3, [r7, #3]
 80072ac:	f003 030f 	and.w	r3, r3, #15
 80072b0:	b2da      	uxtb	r2, r3
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80072b6:	883a      	ldrh	r2, [r7, #0]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	78ba      	ldrb	r2, [r7, #2]
 80072c0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	785b      	ldrb	r3, [r3, #1]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d004      	beq.n	80072d4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80072d4:	78bb      	ldrb	r3, [r7, #2]
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d102      	bne.n	80072e0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d101      	bne.n	80072ee <HAL_PCD_EP_Open+0xaa>
 80072ea:	2302      	movs	r3, #2
 80072ec:	e00e      	b.n	800730c <HAL_PCD_EP_Open+0xc8>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68f9      	ldr	r1, [r7, #12]
 80072fc:	4618      	mov	r0, r3
 80072fe:	f005 f915 	bl	800c52c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800730a:	7afb      	ldrb	r3, [r7, #11]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	460b      	mov	r3, r1
 800731e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007320:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007324:	2b00      	cmp	r3, #0
 8007326:	da0f      	bge.n	8007348 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007328:	78fb      	ldrb	r3, [r7, #3]
 800732a:	f003 020f 	and.w	r2, r3, #15
 800732e:	4613      	mov	r3, r2
 8007330:	00db      	lsls	r3, r3, #3
 8007332:	1a9b      	subs	r3, r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	3338      	adds	r3, #56	; 0x38
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	4413      	add	r3, r2
 800733c:	3304      	adds	r3, #4
 800733e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2201      	movs	r2, #1
 8007344:	705a      	strb	r2, [r3, #1]
 8007346:	e00f      	b.n	8007368 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007348:	78fb      	ldrb	r3, [r7, #3]
 800734a:	f003 020f 	and.w	r2, r3, #15
 800734e:	4613      	mov	r3, r2
 8007350:	00db      	lsls	r3, r3, #3
 8007352:	1a9b      	subs	r3, r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	4413      	add	r3, r2
 800735e:	3304      	adds	r3, #4
 8007360:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007368:	78fb      	ldrb	r3, [r7, #3]
 800736a:	f003 030f 	and.w	r3, r3, #15
 800736e:	b2da      	uxtb	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800737a:	2b01      	cmp	r3, #1
 800737c:	d101      	bne.n	8007382 <HAL_PCD_EP_Close+0x6e>
 800737e:	2302      	movs	r3, #2
 8007380:	e00e      	b.n	80073a0 <HAL_PCD_EP_Close+0x8c>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68f9      	ldr	r1, [r7, #12]
 8007390:	4618      	mov	r0, r3
 8007392:	f005 f953 	bl	800c63c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b086      	sub	sp, #24
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	607a      	str	r2, [r7, #4]
 80073b2:	603b      	str	r3, [r7, #0]
 80073b4:	460b      	mov	r3, r1
 80073b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80073b8:	7afb      	ldrb	r3, [r7, #11]
 80073ba:	f003 020f 	and.w	r2, r3, #15
 80073be:	4613      	mov	r3, r2
 80073c0:	00db      	lsls	r3, r3, #3
 80073c2:	1a9b      	subs	r3, r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	4413      	add	r3, r2
 80073ce:	3304      	adds	r3, #4
 80073d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	683a      	ldr	r2, [r7, #0]
 80073dc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	2200      	movs	r2, #0
 80073e2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	2200      	movs	r2, #0
 80073e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80073ea:	7afb      	ldrb	r3, [r7, #11]
 80073ec:	f003 030f 	and.w	r3, r3, #15
 80073f0:	b2da      	uxtb	r2, r3
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d102      	bne.n	8007404 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007404:	7afb      	ldrb	r3, [r7, #11]
 8007406:	f003 030f 	and.w	r3, r3, #15
 800740a:	2b00      	cmp	r3, #0
 800740c:	d109      	bne.n	8007422 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6818      	ldr	r0, [r3, #0]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	b2db      	uxtb	r3, r3
 8007418:	461a      	mov	r2, r3
 800741a:	6979      	ldr	r1, [r7, #20]
 800741c:	f005 fc36 	bl	800cc8c <USB_EP0StartXfer>
 8007420:	e008      	b.n	8007434 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6818      	ldr	r0, [r3, #0]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	b2db      	uxtb	r3, r3
 800742c:	461a      	mov	r2, r3
 800742e:	6979      	ldr	r1, [r7, #20]
 8007430:	f005 f9e0 	bl	800c7f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3718      	adds	r7, #24
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800743e:	b480      	push	{r7}
 8007440:	b083      	sub	sp, #12
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	460b      	mov	r3, r1
 8007448:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800744a:	78fb      	ldrb	r3, [r7, #3]
 800744c:	f003 020f 	and.w	r2, r3, #15
 8007450:	6879      	ldr	r1, [r7, #4]
 8007452:	4613      	mov	r3, r2
 8007454:	00db      	lsls	r3, r3, #3
 8007456:	1a9b      	subs	r3, r3, r2
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	440b      	add	r3, r1
 800745c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007460:	681b      	ldr	r3, [r3, #0]
}
 8007462:	4618      	mov	r0, r3
 8007464:	370c      	adds	r7, #12
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b086      	sub	sp, #24
 8007472:	af00      	add	r7, sp, #0
 8007474:	60f8      	str	r0, [r7, #12]
 8007476:	607a      	str	r2, [r7, #4]
 8007478:	603b      	str	r3, [r7, #0]
 800747a:	460b      	mov	r3, r1
 800747c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800747e:	7afb      	ldrb	r3, [r7, #11]
 8007480:	f003 020f 	and.w	r2, r3, #15
 8007484:	4613      	mov	r3, r2
 8007486:	00db      	lsls	r3, r3, #3
 8007488:	1a9b      	subs	r3, r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	3338      	adds	r3, #56	; 0x38
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	4413      	add	r3, r2
 8007492:	3304      	adds	r3, #4
 8007494:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	683a      	ldr	r2, [r7, #0]
 80074a0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	2200      	movs	r2, #0
 80074a6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	2201      	movs	r2, #1
 80074ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80074ae:	7afb      	ldrb	r3, [r7, #11]
 80074b0:	f003 030f 	and.w	r3, r3, #15
 80074b4:	b2da      	uxtb	r2, r3
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d102      	bne.n	80074c8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80074c8:	7afb      	ldrb	r3, [r7, #11]
 80074ca:	f003 030f 	and.w	r3, r3, #15
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d109      	bne.n	80074e6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6818      	ldr	r0, [r3, #0]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	461a      	mov	r2, r3
 80074de:	6979      	ldr	r1, [r7, #20]
 80074e0:	f005 fbd4 	bl	800cc8c <USB_EP0StartXfer>
 80074e4:	e008      	b.n	80074f8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6818      	ldr	r0, [r3, #0]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	461a      	mov	r2, r3
 80074f2:	6979      	ldr	r1, [r7, #20]
 80074f4:	f005 f97e 	bl	800c7f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3718      	adds	r7, #24
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b084      	sub	sp, #16
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
 800750a:	460b      	mov	r3, r1
 800750c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800750e:	78fb      	ldrb	r3, [r7, #3]
 8007510:	f003 020f 	and.w	r2, r3, #15
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	429a      	cmp	r2, r3
 800751a:	d901      	bls.n	8007520 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e050      	b.n	80075c2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007520:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007524:	2b00      	cmp	r3, #0
 8007526:	da0f      	bge.n	8007548 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007528:	78fb      	ldrb	r3, [r7, #3]
 800752a:	f003 020f 	and.w	r2, r3, #15
 800752e:	4613      	mov	r3, r2
 8007530:	00db      	lsls	r3, r3, #3
 8007532:	1a9b      	subs	r3, r3, r2
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	3338      	adds	r3, #56	; 0x38
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	4413      	add	r3, r2
 800753c:	3304      	adds	r3, #4
 800753e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2201      	movs	r2, #1
 8007544:	705a      	strb	r2, [r3, #1]
 8007546:	e00d      	b.n	8007564 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007548:	78fa      	ldrb	r2, [r7, #3]
 800754a:	4613      	mov	r3, r2
 800754c:	00db      	lsls	r3, r3, #3
 800754e:	1a9b      	subs	r3, r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	4413      	add	r3, r2
 800755a:	3304      	adds	r3, #4
 800755c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2201      	movs	r2, #1
 8007568:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800756a:	78fb      	ldrb	r3, [r7, #3]
 800756c:	f003 030f 	and.w	r3, r3, #15
 8007570:	b2da      	uxtb	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800757c:	2b01      	cmp	r3, #1
 800757e:	d101      	bne.n	8007584 <HAL_PCD_EP_SetStall+0x82>
 8007580:	2302      	movs	r3, #2
 8007582:	e01e      	b.n	80075c2 <HAL_PCD_EP_SetStall+0xc0>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68f9      	ldr	r1, [r7, #12]
 8007592:	4618      	mov	r0, r3
 8007594:	f005 fd68 	bl	800d068 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007598:	78fb      	ldrb	r3, [r7, #3]
 800759a:	f003 030f 	and.w	r3, r3, #15
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10a      	bne.n	80075b8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6818      	ldr	r0, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	b2d9      	uxtb	r1, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80075b2:	461a      	mov	r2, r3
 80075b4:	f005 ff5a 	bl	800d46c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b084      	sub	sp, #16
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
 80075d2:	460b      	mov	r3, r1
 80075d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80075d6:	78fb      	ldrb	r3, [r7, #3]
 80075d8:	f003 020f 	and.w	r2, r3, #15
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d901      	bls.n	80075e8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e042      	b.n	800766e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80075e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	da0f      	bge.n	8007610 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075f0:	78fb      	ldrb	r3, [r7, #3]
 80075f2:	f003 020f 	and.w	r2, r3, #15
 80075f6:	4613      	mov	r3, r2
 80075f8:	00db      	lsls	r3, r3, #3
 80075fa:	1a9b      	subs	r3, r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	3338      	adds	r3, #56	; 0x38
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	4413      	add	r3, r2
 8007604:	3304      	adds	r3, #4
 8007606:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2201      	movs	r2, #1
 800760c:	705a      	strb	r2, [r3, #1]
 800760e:	e00f      	b.n	8007630 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007610:	78fb      	ldrb	r3, [r7, #3]
 8007612:	f003 020f 	and.w	r2, r3, #15
 8007616:	4613      	mov	r3, r2
 8007618:	00db      	lsls	r3, r3, #3
 800761a:	1a9b      	subs	r3, r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	4413      	add	r3, r2
 8007626:	3304      	adds	r3, #4
 8007628:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007636:	78fb      	ldrb	r3, [r7, #3]
 8007638:	f003 030f 	and.w	r3, r3, #15
 800763c:	b2da      	uxtb	r2, r3
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007648:	2b01      	cmp	r3, #1
 800764a:	d101      	bne.n	8007650 <HAL_PCD_EP_ClrStall+0x86>
 800764c:	2302      	movs	r3, #2
 800764e:	e00e      	b.n	800766e <HAL_PCD_EP_ClrStall+0xa4>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68f9      	ldr	r1, [r7, #12]
 800765e:	4618      	mov	r0, r3
 8007660:	f005 fd70 	bl	800d144 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3710      	adds	r7, #16
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b08a      	sub	sp, #40	; 0x28
 800767a:	af02      	add	r7, sp, #8
 800767c:	6078      	str	r0, [r7, #4]
 800767e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800768a:	683a      	ldr	r2, [r7, #0]
 800768c:	4613      	mov	r3, r2
 800768e:	00db      	lsls	r3, r3, #3
 8007690:	1a9b      	subs	r3, r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	3338      	adds	r3, #56	; 0x38
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	4413      	add	r3, r2
 800769a:	3304      	adds	r3, #4
 800769c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	699a      	ldr	r2, [r3, #24]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d901      	bls.n	80076ae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e06c      	b.n	8007788 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	695a      	ldr	r2, [r3, #20]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	699b      	ldr	r3, [r3, #24]
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	69fa      	ldr	r2, [r7, #28]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d902      	bls.n	80076ca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	3303      	adds	r3, #3
 80076ce:	089b      	lsrs	r3, r3, #2
 80076d0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80076d2:	e02b      	b.n	800772c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	695a      	ldr	r2, [r3, #20]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	69fa      	ldr	r2, [r7, #28]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d902      	bls.n	80076f0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	3303      	adds	r3, #3
 80076f4:	089b      	lsrs	r3, r3, #2
 80076f6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	68d9      	ldr	r1, [r3, #12]
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	b2da      	uxtb	r2, r3
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007708:	b2db      	uxtb	r3, r3
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	4603      	mov	r3, r0
 800770e:	6978      	ldr	r0, [r7, #20]
 8007710:	f005 fc14 	bl	800cf3c <USB_WritePacket>

    ep->xfer_buff  += len;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	68da      	ldr	r2, [r3, #12]
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	441a      	add	r2, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	699a      	ldr	r2, [r3, #24]
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	441a      	add	r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	015a      	lsls	r2, r3, #5
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	4413      	add	r3, r2
 8007734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007738:	699b      	ldr	r3, [r3, #24]
 800773a:	b29b      	uxth	r3, r3
 800773c:	69ba      	ldr	r2, [r7, #24]
 800773e:	429a      	cmp	r2, r3
 8007740:	d809      	bhi.n	8007756 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	699a      	ldr	r2, [r3, #24]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800774a:	429a      	cmp	r2, r3
 800774c:	d203      	bcs.n	8007756 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	695b      	ldr	r3, [r3, #20]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1be      	bne.n	80076d4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	695a      	ldr	r2, [r3, #20]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	429a      	cmp	r2, r3
 8007760:	d811      	bhi.n	8007786 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	f003 030f 	and.w	r3, r3, #15
 8007768:	2201      	movs	r2, #1
 800776a:	fa02 f303 	lsl.w	r3, r2, r3
 800776e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007776:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	43db      	mvns	r3, r3
 800777c:	6939      	ldr	r1, [r7, #16]
 800777e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007782:	4013      	ands	r3, r2
 8007784:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3720      	adds	r7, #32
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	333c      	adds	r3, #60	; 0x3c
 80077a8:	3304      	adds	r3, #4
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	015a      	lsls	r2, r3, #5
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	4413      	add	r3, r2
 80077b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	f040 80a0 	bne.w	8007908 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	f003 0308 	and.w	r3, r3, #8
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d015      	beq.n	80077fe <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	4a72      	ldr	r2, [pc, #456]	; (80079a0 <PCD_EP_OutXfrComplete_int+0x210>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	f240 80dd 	bls.w	8007996 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 80d7 	beq.w	8007996 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	015a      	lsls	r2, r3, #5
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f4:	461a      	mov	r2, r3
 80077f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077fa:	6093      	str	r3, [r2, #8]
 80077fc:	e0cb      	b.n	8007996 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	f003 0320 	and.w	r3, r3, #32
 8007804:	2b00      	cmp	r3, #0
 8007806:	d009      	beq.n	800781c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	015a      	lsls	r2, r3, #5
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	4413      	add	r3, r2
 8007810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007814:	461a      	mov	r2, r3
 8007816:	2320      	movs	r3, #32
 8007818:	6093      	str	r3, [r2, #8]
 800781a:	e0bc      	b.n	8007996 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007822:	2b00      	cmp	r3, #0
 8007824:	f040 80b7 	bne.w	8007996 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	4a5d      	ldr	r2, [pc, #372]	; (80079a0 <PCD_EP_OutXfrComplete_int+0x210>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d90f      	bls.n	8007850 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00a      	beq.n	8007850 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	015a      	lsls	r2, r3, #5
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	4413      	add	r3, r2
 8007842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007846:	461a      	mov	r2, r3
 8007848:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800784c:	6093      	str	r3, [r2, #8]
 800784e:	e0a2      	b.n	8007996 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007850:	6879      	ldr	r1, [r7, #4]
 8007852:	683a      	ldr	r2, [r7, #0]
 8007854:	4613      	mov	r3, r2
 8007856:	00db      	lsls	r3, r3, #3
 8007858:	1a9b      	subs	r3, r3, r2
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	440b      	add	r3, r1
 800785e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007862:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	0159      	lsls	r1, r3, #5
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	440b      	add	r3, r1
 800786c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007876:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	683a      	ldr	r2, [r7, #0]
 800787c:	4613      	mov	r3, r2
 800787e:	00db      	lsls	r3, r3, #3
 8007880:	1a9b      	subs	r3, r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	4403      	add	r3, r0
 8007886:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800788a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800788c:	6879      	ldr	r1, [r7, #4]
 800788e:	683a      	ldr	r2, [r7, #0]
 8007890:	4613      	mov	r3, r2
 8007892:	00db      	lsls	r3, r3, #3
 8007894:	1a9b      	subs	r3, r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	440b      	add	r3, r1
 800789a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800789e:	6819      	ldr	r1, [r3, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	683a      	ldr	r2, [r7, #0]
 80078a4:	4613      	mov	r3, r2
 80078a6:	00db      	lsls	r3, r3, #3
 80078a8:	1a9b      	subs	r3, r3, r2
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4403      	add	r3, r0
 80078ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4419      	add	r1, r3
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	683a      	ldr	r2, [r7, #0]
 80078ba:	4613      	mov	r3, r2
 80078bc:	00db      	lsls	r3, r3, #3
 80078be:	1a9b      	subs	r3, r3, r2
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	4403      	add	r3, r0
 80078c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80078c8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d114      	bne.n	80078fa <PCD_EP_OutXfrComplete_int+0x16a>
 80078d0:	6879      	ldr	r1, [r7, #4]
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	4613      	mov	r3, r2
 80078d6:	00db      	lsls	r3, r3, #3
 80078d8:	1a9b      	subs	r3, r3, r2
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	440b      	add	r3, r1
 80078de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d108      	bne.n	80078fa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6818      	ldr	r0, [r3, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80078f2:	461a      	mov	r2, r3
 80078f4:	2101      	movs	r1, #1
 80078f6:	f005 fdb9 	bl	800d46c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	4619      	mov	r1, r3
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f007 fd85 	bl	800f410 <HAL_PCD_DataOutStageCallback>
 8007906:	e046      	b.n	8007996 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	4a26      	ldr	r2, [pc, #152]	; (80079a4 <PCD_EP_OutXfrComplete_int+0x214>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d124      	bne.n	800795a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00a      	beq.n	8007930 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	015a      	lsls	r2, r3, #5
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	4413      	add	r3, r2
 8007922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007926:	461a      	mov	r2, r3
 8007928:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800792c:	6093      	str	r3, [r2, #8]
 800792e:	e032      	b.n	8007996 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	f003 0320 	and.w	r3, r3, #32
 8007936:	2b00      	cmp	r3, #0
 8007938:	d008      	beq.n	800794c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	015a      	lsls	r2, r3, #5
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	4413      	add	r3, r2
 8007942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007946:	461a      	mov	r2, r3
 8007948:	2320      	movs	r3, #32
 800794a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	b2db      	uxtb	r3, r3
 8007950:	4619      	mov	r1, r3
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f007 fd5c 	bl	800f410 <HAL_PCD_DataOutStageCallback>
 8007958:	e01d      	b.n	8007996 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d114      	bne.n	800798a <PCD_EP_OutXfrComplete_int+0x1fa>
 8007960:	6879      	ldr	r1, [r7, #4]
 8007962:	683a      	ldr	r2, [r7, #0]
 8007964:	4613      	mov	r3, r2
 8007966:	00db      	lsls	r3, r3, #3
 8007968:	1a9b      	subs	r3, r3, r2
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	440b      	add	r3, r1
 800796e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d108      	bne.n	800798a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6818      	ldr	r0, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007982:	461a      	mov	r2, r3
 8007984:	2100      	movs	r1, #0
 8007986:	f005 fd71 	bl	800d46c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	b2db      	uxtb	r3, r3
 800798e:	4619      	mov	r1, r3
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f007 fd3d 	bl	800f410 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3718      	adds	r7, #24
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	4f54300a 	.word	0x4f54300a
 80079a4:	4f54310a 	.word	0x4f54310a

080079a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	333c      	adds	r3, #60	; 0x3c
 80079c0:	3304      	adds	r3, #4
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	015a      	lsls	r2, r3, #5
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	4413      	add	r3, r2
 80079ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	4a15      	ldr	r2, [pc, #84]	; (8007a30 <PCD_EP_OutSetupPacket_int+0x88>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d90e      	bls.n	80079fc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d009      	beq.n	80079fc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	015a      	lsls	r2, r3, #5
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	4413      	add	r3, r2
 80079f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f4:	461a      	mov	r2, r3
 80079f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079fa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f007 fcf5 	bl	800f3ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	4a0a      	ldr	r2, [pc, #40]	; (8007a30 <PCD_EP_OutSetupPacket_int+0x88>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d90c      	bls.n	8007a24 <PCD_EP_OutSetupPacket_int+0x7c>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d108      	bne.n	8007a24 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6818      	ldr	r0, [r3, #0]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	2101      	movs	r1, #1
 8007a20:	f005 fd24 	bl	800d46c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3718      	adds	r7, #24
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	4f54300a 	.word	0x4f54300a

08007a34 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	70fb      	strb	r3, [r7, #3]
 8007a40:	4613      	mov	r3, r2
 8007a42:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007a4c:	78fb      	ldrb	r3, [r7, #3]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d107      	bne.n	8007a62 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007a52:	883b      	ldrh	r3, [r7, #0]
 8007a54:	0419      	lsls	r1, r3, #16
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68ba      	ldr	r2, [r7, #8]
 8007a5c:	430a      	orrs	r2, r1
 8007a5e:	629a      	str	r2, [r3, #40]	; 0x28
 8007a60:	e028      	b.n	8007ab4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a68:	0c1b      	lsrs	r3, r3, #16
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007a70:	2300      	movs	r3, #0
 8007a72:	73fb      	strb	r3, [r7, #15]
 8007a74:	e00d      	b.n	8007a92 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
 8007a7c:	3340      	adds	r3, #64	; 0x40
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	4413      	add	r3, r2
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	0c1b      	lsrs	r3, r3, #16
 8007a86:	68ba      	ldr	r2, [r7, #8]
 8007a88:	4413      	add	r3, r2
 8007a8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007a8c:	7bfb      	ldrb	r3, [r7, #15]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	73fb      	strb	r3, [r7, #15]
 8007a92:	7bfa      	ldrb	r2, [r7, #15]
 8007a94:	78fb      	ldrb	r3, [r7, #3]
 8007a96:	3b01      	subs	r3, #1
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d3ec      	bcc.n	8007a76 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007a9c:	883b      	ldrh	r3, [r7, #0]
 8007a9e:	0418      	lsls	r0, r3, #16
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6819      	ldr	r1, [r3, #0]
 8007aa4:	78fb      	ldrb	r3, [r7, #3]
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	68ba      	ldr	r2, [r7, #8]
 8007aaa:	4302      	orrs	r2, r0
 8007aac:	3340      	adds	r3, #64	; 0x40
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	440b      	add	r3, r1
 8007ab2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr

08007ac2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b083      	sub	sp, #12
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	460b      	mov	r3, r1
 8007acc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	887a      	ldrh	r2, [r7, #2]
 8007ad4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	699b      	ldr	r3, [r3, #24]
 8007b06:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b12:	4b05      	ldr	r3, [pc, #20]	; (8007b28 <HAL_PCDEx_ActivateLPM+0x44>)
 8007b14:	4313      	orrs	r3, r2
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3714      	adds	r7, #20
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr
 8007b28:	10000003 	.word	0x10000003

08007b2c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	460b      	mov	r3, r1
 8007b36:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007b38:	bf00      	nop
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007b4c:	4b19      	ldr	r3, [pc, #100]	; (8007bb4 <HAL_PWREx_ConfigSupply+0x70>)
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	f003 0304 	and.w	r3, r3, #4
 8007b54:	2b04      	cmp	r3, #4
 8007b56:	d00a      	beq.n	8007b6e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007b58:	4b16      	ldr	r3, [pc, #88]	; (8007bb4 <HAL_PWREx_ConfigSupply+0x70>)
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	f003 0307 	and.w	r3, r3, #7
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d001      	beq.n	8007b6a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e01f      	b.n	8007baa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	e01d      	b.n	8007baa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007b6e:	4b11      	ldr	r3, [pc, #68]	; (8007bb4 <HAL_PWREx_ConfigSupply+0x70>)
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	f023 0207 	bic.w	r2, r3, #7
 8007b76:	490f      	ldr	r1, [pc, #60]	; (8007bb4 <HAL_PWREx_ConfigSupply+0x70>)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007b7e:	f7f9 fc3b 	bl	80013f8 <HAL_GetTick>
 8007b82:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007b84:	e009      	b.n	8007b9a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007b86:	f7f9 fc37 	bl	80013f8 <HAL_GetTick>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	1ad3      	subs	r3, r2, r3
 8007b90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b94:	d901      	bls.n	8007b9a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e007      	b.n	8007baa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007b9a:	4b06      	ldr	r3, [pc, #24]	; (8007bb4 <HAL_PWREx_ConfigSupply+0x70>)
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ba6:	d1ee      	bne.n	8007b86 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	58024800 	.word	0x58024800

08007bb8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007bbc:	4b05      	ldr	r3, [pc, #20]	; (8007bd4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	4a04      	ldr	r2, [pc, #16]	; (8007bd4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007bc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007bc6:	60d3      	str	r3, [r2, #12]
}
 8007bc8:	bf00      	nop
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	58024800 	.word	0x58024800

08007bd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b08c      	sub	sp, #48	; 0x30
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d101      	bne.n	8007bea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e397      	b.n	800831a <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 0301 	and.w	r3, r3, #1
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f000 8087 	beq.w	8007d06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007bf8:	4b9e      	ldr	r3, [pc, #632]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c00:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c02:	4b9c      	ldr	r3, [pc, #624]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c06:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0a:	2b10      	cmp	r3, #16
 8007c0c:	d007      	beq.n	8007c1e <HAL_RCC_OscConfig+0x46>
 8007c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c10:	2b18      	cmp	r3, #24
 8007c12:	d110      	bne.n	8007c36 <HAL_RCC_OscConfig+0x5e>
 8007c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c16:	f003 0303 	and.w	r3, r3, #3
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d10b      	bne.n	8007c36 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c1e:	4b95      	ldr	r3, [pc, #596]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d06c      	beq.n	8007d04 <HAL_RCC_OscConfig+0x12c>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d168      	bne.n	8007d04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e371      	b.n	800831a <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c3e:	d106      	bne.n	8007c4e <HAL_RCC_OscConfig+0x76>
 8007c40:	4b8c      	ldr	r3, [pc, #560]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a8b      	ldr	r2, [pc, #556]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c4a:	6013      	str	r3, [r2, #0]
 8007c4c:	e02e      	b.n	8007cac <HAL_RCC_OscConfig+0xd4>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10c      	bne.n	8007c70 <HAL_RCC_OscConfig+0x98>
 8007c56:	4b87      	ldr	r3, [pc, #540]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a86      	ldr	r2, [pc, #536]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c60:	6013      	str	r3, [r2, #0]
 8007c62:	4b84      	ldr	r3, [pc, #528]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a83      	ldr	r2, [pc, #524]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007c68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c6c:	6013      	str	r3, [r2, #0]
 8007c6e:	e01d      	b.n	8007cac <HAL_RCC_OscConfig+0xd4>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c78:	d10c      	bne.n	8007c94 <HAL_RCC_OscConfig+0xbc>
 8007c7a:	4b7e      	ldr	r3, [pc, #504]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a7d      	ldr	r2, [pc, #500]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c84:	6013      	str	r3, [r2, #0]
 8007c86:	4b7b      	ldr	r3, [pc, #492]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a7a      	ldr	r2, [pc, #488]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c90:	6013      	str	r3, [r2, #0]
 8007c92:	e00b      	b.n	8007cac <HAL_RCC_OscConfig+0xd4>
 8007c94:	4b77      	ldr	r3, [pc, #476]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a76      	ldr	r2, [pc, #472]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c9e:	6013      	str	r3, [r2, #0]
 8007ca0:	4b74      	ldr	r3, [pc, #464]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a73      	ldr	r2, [pc, #460]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007caa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d013      	beq.n	8007cdc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cb4:	f7f9 fba0 	bl	80013f8 <HAL_GetTick>
 8007cb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007cba:	e008      	b.n	8007cce <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007cbc:	f7f9 fb9c 	bl	80013f8 <HAL_GetTick>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	2b64      	cmp	r3, #100	; 0x64
 8007cc8:	d901      	bls.n	8007cce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e325      	b.n	800831a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007cce:	4b69      	ldr	r3, [pc, #420]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d0f0      	beq.n	8007cbc <HAL_RCC_OscConfig+0xe4>
 8007cda:	e014      	b.n	8007d06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cdc:	f7f9 fb8c 	bl	80013f8 <HAL_GetTick>
 8007ce0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007ce2:	e008      	b.n	8007cf6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ce4:	f7f9 fb88 	bl	80013f8 <HAL_GetTick>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cec:	1ad3      	subs	r3, r2, r3
 8007cee:	2b64      	cmp	r3, #100	; 0x64
 8007cf0:	d901      	bls.n	8007cf6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	e311      	b.n	800831a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007cf6:	4b5f      	ldr	r3, [pc, #380]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1f0      	bne.n	8007ce4 <HAL_RCC_OscConfig+0x10c>
 8007d02:	e000      	b.n	8007d06 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f003 0302 	and.w	r3, r3, #2
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f000 808a 	beq.w	8007e28 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d14:	4b57      	ldr	r3, [pc, #348]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d1c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d1e:	4b55      	ldr	r3, [pc, #340]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d22:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007d24:	6a3b      	ldr	r3, [r7, #32]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d007      	beq.n	8007d3a <HAL_RCC_OscConfig+0x162>
 8007d2a:	6a3b      	ldr	r3, [r7, #32]
 8007d2c:	2b18      	cmp	r3, #24
 8007d2e:	d137      	bne.n	8007da0 <HAL_RCC_OscConfig+0x1c8>
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	f003 0303 	and.w	r3, r3, #3
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d132      	bne.n	8007da0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d3a:	4b4e      	ldr	r3, [pc, #312]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 0304 	and.w	r3, r3, #4
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d005      	beq.n	8007d52 <HAL_RCC_OscConfig+0x17a>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	68db      	ldr	r3, [r3, #12]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d101      	bne.n	8007d52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e2e3      	b.n	800831a <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007d52:	4b48      	ldr	r3, [pc, #288]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f023 0219 	bic.w	r2, r3, #25
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	4945      	ldr	r1, [pc, #276]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007d60:	4313      	orrs	r3, r2
 8007d62:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007d64:	f7f9 fb48 	bl	80013f8 <HAL_GetTick>
 8007d68:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d6a:	e008      	b.n	8007d7e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d6c:	f7f9 fb44 	bl	80013f8 <HAL_GetTick>
 8007d70:	4602      	mov	r2, r0
 8007d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d901      	bls.n	8007d7e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	e2cd      	b.n	800831a <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d7e:	4b3d      	ldr	r3, [pc, #244]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 0304 	and.w	r3, r3, #4
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d0f0      	beq.n	8007d6c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d8a:	4b3a      	ldr	r3, [pc, #232]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	061b      	lsls	r3, r3, #24
 8007d98:	4936      	ldr	r1, [pc, #216]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d9e:	e043      	b.n	8007e28 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d026      	beq.n	8007df6 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007da8:	4b32      	ldr	r3, [pc, #200]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f023 0219 	bic.w	r2, r3, #25
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	492f      	ldr	r1, [pc, #188]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dba:	f7f9 fb1d 	bl	80013f8 <HAL_GetTick>
 8007dbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007dc0:	e008      	b.n	8007dd4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007dc2:	f7f9 fb19 	bl	80013f8 <HAL_GetTick>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d901      	bls.n	8007dd4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	e2a2      	b.n	800831a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007dd4:	4b27      	ldr	r3, [pc, #156]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 0304 	and.w	r3, r3, #4
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d0f0      	beq.n	8007dc2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007de0:	4b24      	ldr	r3, [pc, #144]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	061b      	lsls	r3, r3, #24
 8007dee:	4921      	ldr	r1, [pc, #132]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007df0:	4313      	orrs	r3, r2
 8007df2:	604b      	str	r3, [r1, #4]
 8007df4:	e018      	b.n	8007e28 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007df6:	4b1f      	ldr	r3, [pc, #124]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a1e      	ldr	r2, [pc, #120]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007dfc:	f023 0301 	bic.w	r3, r3, #1
 8007e00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e02:	f7f9 faf9 	bl	80013f8 <HAL_GetTick>
 8007e06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007e08:	e008      	b.n	8007e1c <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e0a:	f7f9 faf5 	bl	80013f8 <HAL_GetTick>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e12:	1ad3      	subs	r3, r2, r3
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d901      	bls.n	8007e1c <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8007e18:	2303      	movs	r3, #3
 8007e1a:	e27e      	b.n	800831a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007e1c:	4b15      	ldr	r3, [pc, #84]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 0304 	and.w	r3, r3, #4
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d1f0      	bne.n	8007e0a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0310 	and.w	r3, r3, #16
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d06d      	beq.n	8007f10 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e34:	4b0f      	ldr	r3, [pc, #60]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e3c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e3e:	4b0d      	ldr	r3, [pc, #52]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e42:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	2b08      	cmp	r3, #8
 8007e48:	d007      	beq.n	8007e5a <HAL_RCC_OscConfig+0x282>
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	2b18      	cmp	r3, #24
 8007e4e:	d11e      	bne.n	8007e8e <HAL_RCC_OscConfig+0x2b6>
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	f003 0303 	and.w	r3, r3, #3
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d119      	bne.n	8007e8e <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e5a:	4b06      	ldr	r3, [pc, #24]	; (8007e74 <HAL_RCC_OscConfig+0x29c>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d008      	beq.n	8007e78 <HAL_RCC_OscConfig+0x2a0>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	69db      	ldr	r3, [r3, #28]
 8007e6a:	2b80      	cmp	r3, #128	; 0x80
 8007e6c:	d004      	beq.n	8007e78 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e253      	b.n	800831a <HAL_RCC_OscConfig+0x742>
 8007e72:	bf00      	nop
 8007e74:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e78:	4ba3      	ldr	r3, [pc, #652]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6a1b      	ldr	r3, [r3, #32]
 8007e84:	061b      	lsls	r3, r3, #24
 8007e86:	49a0      	ldr	r1, [pc, #640]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e8c:	e040      	b.n	8007f10 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	69db      	ldr	r3, [r3, #28]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d023      	beq.n	8007ede <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007e96:	4b9c      	ldr	r3, [pc, #624]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a9b      	ldr	r2, [pc, #620]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 8007e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ea0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ea2:	f7f9 faa9 	bl	80013f8 <HAL_GetTick>
 8007ea6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007ea8:	e008      	b.n	8007ebc <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007eaa:	f7f9 faa5 	bl	80013f8 <HAL_GetTick>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb2:	1ad3      	subs	r3, r2, r3
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d901      	bls.n	8007ebc <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	e22e      	b.n	800831a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007ebc:	4b92      	ldr	r3, [pc, #584]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d0f0      	beq.n	8007eaa <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ec8:	4b8f      	ldr	r3, [pc, #572]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a1b      	ldr	r3, [r3, #32]
 8007ed4:	061b      	lsls	r3, r3, #24
 8007ed6:	498c      	ldr	r1, [pc, #560]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	60cb      	str	r3, [r1, #12]
 8007edc:	e018      	b.n	8007f10 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007ede:	4b8a      	ldr	r3, [pc, #552]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a89      	ldr	r2, [pc, #548]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 8007ee4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eea:	f7f9 fa85 	bl	80013f8 <HAL_GetTick>
 8007eee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007ef0:	e008      	b.n	8007f04 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007ef2:	f7f9 fa81 	bl	80013f8 <HAL_GetTick>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d901      	bls.n	8007f04 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8007f00:	2303      	movs	r3, #3
 8007f02:	e20a      	b.n	800831a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007f04:	4b80      	ldr	r3, [pc, #512]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1f0      	bne.n	8007ef2 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 0308 	and.w	r3, r3, #8
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d036      	beq.n	8007f8a <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	695b      	ldr	r3, [r3, #20]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d019      	beq.n	8007f58 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f24:	4b78      	ldr	r3, [pc, #480]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 8007f26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f28:	4a77      	ldr	r2, [pc, #476]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 8007f2a:	f043 0301 	orr.w	r3, r3, #1
 8007f2e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f30:	f7f9 fa62 	bl	80013f8 <HAL_GetTick>
 8007f34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007f36:	e008      	b.n	8007f4a <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f38:	f7f9 fa5e 	bl	80013f8 <HAL_GetTick>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	d901      	bls.n	8007f4a <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8007f46:	2303      	movs	r3, #3
 8007f48:	e1e7      	b.n	800831a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007f4a:	4b6f      	ldr	r3, [pc, #444]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 8007f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f4e:	f003 0302 	and.w	r3, r3, #2
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d0f0      	beq.n	8007f38 <HAL_RCC_OscConfig+0x360>
 8007f56:	e018      	b.n	8007f8a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f58:	4b6b      	ldr	r3, [pc, #428]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 8007f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f5c:	4a6a      	ldr	r2, [pc, #424]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 8007f5e:	f023 0301 	bic.w	r3, r3, #1
 8007f62:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f64:	f7f9 fa48 	bl	80013f8 <HAL_GetTick>
 8007f68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007f6a:	e008      	b.n	8007f7e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f6c:	f7f9 fa44 	bl	80013f8 <HAL_GetTick>
 8007f70:	4602      	mov	r2, r0
 8007f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d901      	bls.n	8007f7e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	e1cd      	b.n	800831a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007f7e:	4b62      	ldr	r3, [pc, #392]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 8007f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f82:	f003 0302 	and.w	r3, r3, #2
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1f0      	bne.n	8007f6c <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f003 0320 	and.w	r3, r3, #32
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d036      	beq.n	8008004 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	699b      	ldr	r3, [r3, #24]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d019      	beq.n	8007fd2 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007f9e:	4b5a      	ldr	r3, [pc, #360]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a59      	ldr	r2, [pc, #356]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 8007fa4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007fa8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007faa:	f7f9 fa25 	bl	80013f8 <HAL_GetTick>
 8007fae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007fb0:	e008      	b.n	8007fc4 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007fb2:	f7f9 fa21 	bl	80013f8 <HAL_GetTick>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fba:	1ad3      	subs	r3, r2, r3
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d901      	bls.n	8007fc4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	e1aa      	b.n	800831a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007fc4:	4b50      	ldr	r3, [pc, #320]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d0f0      	beq.n	8007fb2 <HAL_RCC_OscConfig+0x3da>
 8007fd0:	e018      	b.n	8008004 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007fd2:	4b4d      	ldr	r3, [pc, #308]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a4c      	ldr	r2, [pc, #304]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 8007fd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fdc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007fde:	f7f9 fa0b 	bl	80013f8 <HAL_GetTick>
 8007fe2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007fe4:	e008      	b.n	8007ff8 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007fe6:	f7f9 fa07 	bl	80013f8 <HAL_GetTick>
 8007fea:	4602      	mov	r2, r0
 8007fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fee:	1ad3      	subs	r3, r2, r3
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d901      	bls.n	8007ff8 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e190      	b.n	800831a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007ff8:	4b43      	ldr	r3, [pc, #268]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008000:	2b00      	cmp	r3, #0
 8008002:	d1f0      	bne.n	8007fe6 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 0304 	and.w	r3, r3, #4
 800800c:	2b00      	cmp	r3, #0
 800800e:	f000 8085 	beq.w	800811c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008012:	4b3e      	ldr	r3, [pc, #248]	; (800810c <HAL_RCC_OscConfig+0x534>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a3d      	ldr	r2, [pc, #244]	; (800810c <HAL_RCC_OscConfig+0x534>)
 8008018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800801c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800801e:	f7f9 f9eb 	bl	80013f8 <HAL_GetTick>
 8008022:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008024:	e008      	b.n	8008038 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008026:	f7f9 f9e7 	bl	80013f8 <HAL_GetTick>
 800802a:	4602      	mov	r2, r0
 800802c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	2b64      	cmp	r3, #100	; 0x64
 8008032:	d901      	bls.n	8008038 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8008034:	2303      	movs	r3, #3
 8008036:	e170      	b.n	800831a <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008038:	4b34      	ldr	r3, [pc, #208]	; (800810c <HAL_RCC_OscConfig+0x534>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008040:	2b00      	cmp	r3, #0
 8008042:	d0f0      	beq.n	8008026 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	2b01      	cmp	r3, #1
 800804a:	d106      	bne.n	800805a <HAL_RCC_OscConfig+0x482>
 800804c:	4b2e      	ldr	r3, [pc, #184]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 800804e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008050:	4a2d      	ldr	r2, [pc, #180]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 8008052:	f043 0301 	orr.w	r3, r3, #1
 8008056:	6713      	str	r3, [r2, #112]	; 0x70
 8008058:	e02d      	b.n	80080b6 <HAL_RCC_OscConfig+0x4de>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d10c      	bne.n	800807c <HAL_RCC_OscConfig+0x4a4>
 8008062:	4b29      	ldr	r3, [pc, #164]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 8008064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008066:	4a28      	ldr	r2, [pc, #160]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 8008068:	f023 0301 	bic.w	r3, r3, #1
 800806c:	6713      	str	r3, [r2, #112]	; 0x70
 800806e:	4b26      	ldr	r3, [pc, #152]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 8008070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008072:	4a25      	ldr	r2, [pc, #148]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 8008074:	f023 0304 	bic.w	r3, r3, #4
 8008078:	6713      	str	r3, [r2, #112]	; 0x70
 800807a:	e01c      	b.n	80080b6 <HAL_RCC_OscConfig+0x4de>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	2b05      	cmp	r3, #5
 8008082:	d10c      	bne.n	800809e <HAL_RCC_OscConfig+0x4c6>
 8008084:	4b20      	ldr	r3, [pc, #128]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 8008086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008088:	4a1f      	ldr	r2, [pc, #124]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 800808a:	f043 0304 	orr.w	r3, r3, #4
 800808e:	6713      	str	r3, [r2, #112]	; 0x70
 8008090:	4b1d      	ldr	r3, [pc, #116]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 8008092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008094:	4a1c      	ldr	r2, [pc, #112]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 8008096:	f043 0301 	orr.w	r3, r3, #1
 800809a:	6713      	str	r3, [r2, #112]	; 0x70
 800809c:	e00b      	b.n	80080b6 <HAL_RCC_OscConfig+0x4de>
 800809e:	4b1a      	ldr	r3, [pc, #104]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 80080a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a2:	4a19      	ldr	r2, [pc, #100]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 80080a4:	f023 0301 	bic.w	r3, r3, #1
 80080a8:	6713      	str	r3, [r2, #112]	; 0x70
 80080aa:	4b17      	ldr	r3, [pc, #92]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 80080ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ae:	4a16      	ldr	r2, [pc, #88]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 80080b0:	f023 0304 	bic.w	r3, r3, #4
 80080b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d015      	beq.n	80080ea <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080be:	f7f9 f99b 	bl	80013f8 <HAL_GetTick>
 80080c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080c4:	e00a      	b.n	80080dc <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080c6:	f7f9 f997 	bl	80013f8 <HAL_GetTick>
 80080ca:	4602      	mov	r2, r0
 80080cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ce:	1ad3      	subs	r3, r2, r3
 80080d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d901      	bls.n	80080dc <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80080d8:	2303      	movs	r3, #3
 80080da:	e11e      	b.n	800831a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080dc:	4b0a      	ldr	r3, [pc, #40]	; (8008108 <HAL_RCC_OscConfig+0x530>)
 80080de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e0:	f003 0302 	and.w	r3, r3, #2
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d0ee      	beq.n	80080c6 <HAL_RCC_OscConfig+0x4ee>
 80080e8:	e018      	b.n	800811c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080ea:	f7f9 f985 	bl	80013f8 <HAL_GetTick>
 80080ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80080f0:	e00e      	b.n	8008110 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080f2:	f7f9 f981 	bl	80013f8 <HAL_GetTick>
 80080f6:	4602      	mov	r2, r0
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fa:	1ad3      	subs	r3, r2, r3
 80080fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008100:	4293      	cmp	r3, r2
 8008102:	d905      	bls.n	8008110 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008104:	2303      	movs	r3, #3
 8008106:	e108      	b.n	800831a <HAL_RCC_OscConfig+0x742>
 8008108:	58024400 	.word	0x58024400
 800810c:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008110:	4b84      	ldr	r3, [pc, #528]	; (8008324 <HAL_RCC_OscConfig+0x74c>)
 8008112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008114:	f003 0302 	and.w	r3, r3, #2
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1ea      	bne.n	80080f2 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008120:	2b00      	cmp	r3, #0
 8008122:	f000 80f9 	beq.w	8008318 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008126:	4b7f      	ldr	r3, [pc, #508]	; (8008324 <HAL_RCC_OscConfig+0x74c>)
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800812e:	2b18      	cmp	r3, #24
 8008130:	f000 80b4 	beq.w	800829c <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008138:	2b02      	cmp	r3, #2
 800813a:	f040 8095 	bne.w	8008268 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800813e:	4b79      	ldr	r3, [pc, #484]	; (8008324 <HAL_RCC_OscConfig+0x74c>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a78      	ldr	r2, [pc, #480]	; (8008324 <HAL_RCC_OscConfig+0x74c>)
 8008144:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800814a:	f7f9 f955 	bl	80013f8 <HAL_GetTick>
 800814e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008150:	e008      	b.n	8008164 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008152:	f7f9 f951 	bl	80013f8 <HAL_GetTick>
 8008156:	4602      	mov	r2, r0
 8008158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815a:	1ad3      	subs	r3, r2, r3
 800815c:	2b02      	cmp	r3, #2
 800815e:	d901      	bls.n	8008164 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008160:	2303      	movs	r3, #3
 8008162:	e0da      	b.n	800831a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008164:	4b6f      	ldr	r3, [pc, #444]	; (8008324 <HAL_RCC_OscConfig+0x74c>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1f0      	bne.n	8008152 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008170:	4b6c      	ldr	r3, [pc, #432]	; (8008324 <HAL_RCC_OscConfig+0x74c>)
 8008172:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008174:	4b6c      	ldr	r3, [pc, #432]	; (8008328 <HAL_RCC_OscConfig+0x750>)
 8008176:	4013      	ands	r3, r2
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008180:	0112      	lsls	r2, r2, #4
 8008182:	430a      	orrs	r2, r1
 8008184:	4967      	ldr	r1, [pc, #412]	; (8008324 <HAL_RCC_OscConfig+0x74c>)
 8008186:	4313      	orrs	r3, r2
 8008188:	628b      	str	r3, [r1, #40]	; 0x28
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800818e:	3b01      	subs	r3, #1
 8008190:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008198:	3b01      	subs	r3, #1
 800819a:	025b      	lsls	r3, r3, #9
 800819c:	b29b      	uxth	r3, r3
 800819e:	431a      	orrs	r2, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a4:	3b01      	subs	r3, #1
 80081a6:	041b      	lsls	r3, r3, #16
 80081a8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80081ac:	431a      	orrs	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081b2:	3b01      	subs	r3, #1
 80081b4:	061b      	lsls	r3, r3, #24
 80081b6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80081ba:	495a      	ldr	r1, [pc, #360]	; (8008324 <HAL_RCC_OscConfig+0x74c>)
 80081bc:	4313      	orrs	r3, r2
 80081be:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80081c0:	4b58      	ldr	r3, [pc, #352]	; (8008324 <HAL_RCC_OscConfig+0x74c>)
 80081c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c4:	4a57      	ldr	r2, [pc, #348]	; (8008324 <HAL_RCC_OscConfig+0x74c>)
 80081c6:	f023 0301 	bic.w	r3, r3, #1
 80081ca:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80081cc:	4b55      	ldr	r3, [pc, #340]	; (8008324 <HAL_RCC_OscConfig+0x74c>)
 80081ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081d0:	4b56      	ldr	r3, [pc, #344]	; (800832c <HAL_RCC_OscConfig+0x754>)
 80081d2:	4013      	ands	r3, r2
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80081d8:	00d2      	lsls	r2, r2, #3
 80081da:	4952      	ldr	r1, [pc, #328]	; (8008324 <HAL_RCC_OscConfig+0x74c>)
 80081dc:	4313      	orrs	r3, r2
 80081de:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80081e0:	4b50      	ldr	r3, [pc, #320]	; (8008324 <HAL_RCC_OscConfig+0x74c>)
 80081e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e4:	f023 020c 	bic.w	r2, r3, #12
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ec:	494d      	ldr	r1, [pc, #308]	; (8008324 <HAL_RCC_OscConfig+0x74c>)
 80081ee:	4313      	orrs	r3, r2
 80081f0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80081f2:	4b4c      	ldr	r3, [pc, #304]	; (8008324 <HAL_RCC_OscConfig+0x74c>)
 80081f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f6:	f023 0202 	bic.w	r2, r3, #2
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081fe:	4949      	ldr	r1, [pc, #292]	; (8008324 <HAL_RCC_OscConfig+0x74c>)
 8008200:	4313      	orrs	r3, r2
 8008202:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008204:	4b47      	ldr	r3, [pc, #284]	; (8008324 <HAL_RCC_OscConfig+0x74c>)
 8008206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008208:	4a46      	ldr	r2, [pc, #280]	; (8008324 <HAL_RCC_OscConfig+0x74c>)
 800820a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800820e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008210:	4b44      	ldr	r3, [pc, #272]	; (8008324 <HAL_RCC_OscConfig+0x74c>)
 8008212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008214:	4a43      	ldr	r2, [pc, #268]	; (8008324 <HAL_RCC_OscConfig+0x74c>)
 8008216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800821a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800821c:	4b41      	ldr	r3, [pc, #260]	; (8008324 <HAL_RCC_OscConfig+0x74c>)
 800821e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008220:	4a40      	ldr	r2, [pc, #256]	; (8008324 <HAL_RCC_OscConfig+0x74c>)
 8008222:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008226:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008228:	4b3e      	ldr	r3, [pc, #248]	; (8008324 <HAL_RCC_OscConfig+0x74c>)
 800822a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800822c:	4a3d      	ldr	r2, [pc, #244]	; (8008324 <HAL_RCC_OscConfig+0x74c>)
 800822e:	f043 0301 	orr.w	r3, r3, #1
 8008232:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008234:	4b3b      	ldr	r3, [pc, #236]	; (8008324 <HAL_RCC_OscConfig+0x74c>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a3a      	ldr	r2, [pc, #232]	; (8008324 <HAL_RCC_OscConfig+0x74c>)
 800823a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800823e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008240:	f7f9 f8da 	bl	80013f8 <HAL_GetTick>
 8008244:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008246:	e008      	b.n	800825a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008248:	f7f9 f8d6 	bl	80013f8 <HAL_GetTick>
 800824c:	4602      	mov	r2, r0
 800824e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	2b02      	cmp	r3, #2
 8008254:	d901      	bls.n	800825a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008256:	2303      	movs	r3, #3
 8008258:	e05f      	b.n	800831a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800825a:	4b32      	ldr	r3, [pc, #200]	; (8008324 <HAL_RCC_OscConfig+0x74c>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008262:	2b00      	cmp	r3, #0
 8008264:	d0f0      	beq.n	8008248 <HAL_RCC_OscConfig+0x670>
 8008266:	e057      	b.n	8008318 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008268:	4b2e      	ldr	r3, [pc, #184]	; (8008324 <HAL_RCC_OscConfig+0x74c>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a2d      	ldr	r2, [pc, #180]	; (8008324 <HAL_RCC_OscConfig+0x74c>)
 800826e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008274:	f7f9 f8c0 	bl	80013f8 <HAL_GetTick>
 8008278:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800827a:	e008      	b.n	800828e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800827c:	f7f9 f8bc 	bl	80013f8 <HAL_GetTick>
 8008280:	4602      	mov	r2, r0
 8008282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008284:	1ad3      	subs	r3, r2, r3
 8008286:	2b02      	cmp	r3, #2
 8008288:	d901      	bls.n	800828e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800828a:	2303      	movs	r3, #3
 800828c:	e045      	b.n	800831a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800828e:	4b25      	ldr	r3, [pc, #148]	; (8008324 <HAL_RCC_OscConfig+0x74c>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1f0      	bne.n	800827c <HAL_RCC_OscConfig+0x6a4>
 800829a:	e03d      	b.n	8008318 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800829c:	4b21      	ldr	r3, [pc, #132]	; (8008324 <HAL_RCC_OscConfig+0x74c>)
 800829e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80082a2:	4b20      	ldr	r3, [pc, #128]	; (8008324 <HAL_RCC_OscConfig+0x74c>)
 80082a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d031      	beq.n	8008314 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	f003 0203 	and.w	r2, r3, #3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d12a      	bne.n	8008314 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	091b      	lsrs	r3, r3, #4
 80082c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d122      	bne.n	8008314 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80082da:	429a      	cmp	r2, r3
 80082dc:	d11a      	bne.n	8008314 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	0a5b      	lsrs	r3, r3, #9
 80082e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ea:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d111      	bne.n	8008314 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	0c1b      	lsrs	r3, r3, #16
 80082f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082fc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80082fe:	429a      	cmp	r2, r3
 8008300:	d108      	bne.n	8008314 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	0e1b      	lsrs	r3, r3, #24
 8008306:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800830e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008310:	429a      	cmp	r2, r3
 8008312:	d001      	beq.n	8008318 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	e000      	b.n	800831a <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3730      	adds	r7, #48	; 0x30
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	58024400 	.word	0x58024400
 8008328:	fffffc0c 	.word	0xfffffc0c
 800832c:	ffff0007 	.word	0xffff0007

08008330 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d101      	bne.n	8008344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	e19c      	b.n	800867e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008344:	4b8a      	ldr	r3, [pc, #552]	; (8008570 <HAL_RCC_ClockConfig+0x240>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 030f 	and.w	r3, r3, #15
 800834c:	683a      	ldr	r2, [r7, #0]
 800834e:	429a      	cmp	r2, r3
 8008350:	d910      	bls.n	8008374 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008352:	4b87      	ldr	r3, [pc, #540]	; (8008570 <HAL_RCC_ClockConfig+0x240>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f023 020f 	bic.w	r2, r3, #15
 800835a:	4985      	ldr	r1, [pc, #532]	; (8008570 <HAL_RCC_ClockConfig+0x240>)
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	4313      	orrs	r3, r2
 8008360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008362:	4b83      	ldr	r3, [pc, #524]	; (8008570 <HAL_RCC_ClockConfig+0x240>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 030f 	and.w	r3, r3, #15
 800836a:	683a      	ldr	r2, [r7, #0]
 800836c:	429a      	cmp	r2, r3
 800836e:	d001      	beq.n	8008374 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	e184      	b.n	800867e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 0304 	and.w	r3, r3, #4
 800837c:	2b00      	cmp	r3, #0
 800837e:	d010      	beq.n	80083a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	691a      	ldr	r2, [r3, #16]
 8008384:	4b7b      	ldr	r3, [pc, #492]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 8008386:	699b      	ldr	r3, [r3, #24]
 8008388:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800838c:	429a      	cmp	r2, r3
 800838e:	d908      	bls.n	80083a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008390:	4b78      	ldr	r3, [pc, #480]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	4975      	ldr	r1, [pc, #468]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 800839e:	4313      	orrs	r3, r2
 80083a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f003 0308 	and.w	r3, r3, #8
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d010      	beq.n	80083d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	695a      	ldr	r2, [r3, #20]
 80083b2:	4b70      	ldr	r3, [pc, #448]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 80083b4:	69db      	ldr	r3, [r3, #28]
 80083b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d908      	bls.n	80083d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80083be:	4b6d      	ldr	r3, [pc, #436]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 80083c0:	69db      	ldr	r3, [r3, #28]
 80083c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	695b      	ldr	r3, [r3, #20]
 80083ca:	496a      	ldr	r1, [pc, #424]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 80083cc:	4313      	orrs	r3, r2
 80083ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 0310 	and.w	r3, r3, #16
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d010      	beq.n	80083fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	699a      	ldr	r2, [r3, #24]
 80083e0:	4b64      	ldr	r3, [pc, #400]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 80083e2:	69db      	ldr	r3, [r3, #28]
 80083e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d908      	bls.n	80083fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80083ec:	4b61      	ldr	r3, [pc, #388]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 80083ee:	69db      	ldr	r3, [r3, #28]
 80083f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	699b      	ldr	r3, [r3, #24]
 80083f8:	495e      	ldr	r1, [pc, #376]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 80083fa:	4313      	orrs	r3, r2
 80083fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 0320 	and.w	r3, r3, #32
 8008406:	2b00      	cmp	r3, #0
 8008408:	d010      	beq.n	800842c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	69da      	ldr	r2, [r3, #28]
 800840e:	4b59      	ldr	r3, [pc, #356]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008416:	429a      	cmp	r2, r3
 8008418:	d908      	bls.n	800842c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800841a:	4b56      	ldr	r3, [pc, #344]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 800841c:	6a1b      	ldr	r3, [r3, #32]
 800841e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	69db      	ldr	r3, [r3, #28]
 8008426:	4953      	ldr	r1, [pc, #332]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 8008428:	4313      	orrs	r3, r2
 800842a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f003 0302 	and.w	r3, r3, #2
 8008434:	2b00      	cmp	r3, #0
 8008436:	d010      	beq.n	800845a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	68da      	ldr	r2, [r3, #12]
 800843c:	4b4d      	ldr	r3, [pc, #308]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	f003 030f 	and.w	r3, r3, #15
 8008444:	429a      	cmp	r2, r3
 8008446:	d908      	bls.n	800845a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008448:	4b4a      	ldr	r3, [pc, #296]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 800844a:	699b      	ldr	r3, [r3, #24]
 800844c:	f023 020f 	bic.w	r2, r3, #15
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	4947      	ldr	r1, [pc, #284]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 8008456:	4313      	orrs	r3, r2
 8008458:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 0301 	and.w	r3, r3, #1
 8008462:	2b00      	cmp	r3, #0
 8008464:	d055      	beq.n	8008512 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008466:	4b43      	ldr	r3, [pc, #268]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 8008468:	699b      	ldr	r3, [r3, #24]
 800846a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	4940      	ldr	r1, [pc, #256]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 8008474:	4313      	orrs	r3, r2
 8008476:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	2b02      	cmp	r3, #2
 800847e:	d107      	bne.n	8008490 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008480:	4b3c      	ldr	r3, [pc, #240]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008488:	2b00      	cmp	r3, #0
 800848a:	d121      	bne.n	80084d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	e0f6      	b.n	800867e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	2b03      	cmp	r3, #3
 8008496:	d107      	bne.n	80084a8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008498:	4b36      	ldr	r3, [pc, #216]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d115      	bne.n	80084d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	e0ea      	b.n	800867e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d107      	bne.n	80084c0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80084b0:	4b30      	ldr	r3, [pc, #192]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d109      	bne.n	80084d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	e0de      	b.n	800867e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084c0:	4b2c      	ldr	r3, [pc, #176]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f003 0304 	and.w	r3, r3, #4
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d101      	bne.n	80084d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	e0d6      	b.n	800867e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80084d0:	4b28      	ldr	r3, [pc, #160]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	f023 0207 	bic.w	r2, r3, #7
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	4925      	ldr	r1, [pc, #148]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 80084de:	4313      	orrs	r3, r2
 80084e0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084e2:	f7f8 ff89 	bl	80013f8 <HAL_GetTick>
 80084e6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084e8:	e00a      	b.n	8008500 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084ea:	f7f8 ff85 	bl	80013f8 <HAL_GetTick>
 80084ee:	4602      	mov	r2, r0
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	1ad3      	subs	r3, r2, r3
 80084f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d901      	bls.n	8008500 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80084fc:	2303      	movs	r3, #3
 80084fe:	e0be      	b.n	800867e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008500:	4b1c      	ldr	r3, [pc, #112]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 8008502:	691b      	ldr	r3, [r3, #16]
 8008504:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	00db      	lsls	r3, r3, #3
 800850e:	429a      	cmp	r2, r3
 8008510:	d1eb      	bne.n	80084ea <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 0302 	and.w	r3, r3, #2
 800851a:	2b00      	cmp	r3, #0
 800851c:	d010      	beq.n	8008540 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	68da      	ldr	r2, [r3, #12]
 8008522:	4b14      	ldr	r3, [pc, #80]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 8008524:	699b      	ldr	r3, [r3, #24]
 8008526:	f003 030f 	and.w	r3, r3, #15
 800852a:	429a      	cmp	r2, r3
 800852c:	d208      	bcs.n	8008540 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800852e:	4b11      	ldr	r3, [pc, #68]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	f023 020f 	bic.w	r2, r3, #15
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	490e      	ldr	r1, [pc, #56]	; (8008574 <HAL_RCC_ClockConfig+0x244>)
 800853c:	4313      	orrs	r3, r2
 800853e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008540:	4b0b      	ldr	r3, [pc, #44]	; (8008570 <HAL_RCC_ClockConfig+0x240>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f003 030f 	and.w	r3, r3, #15
 8008548:	683a      	ldr	r2, [r7, #0]
 800854a:	429a      	cmp	r2, r3
 800854c:	d214      	bcs.n	8008578 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800854e:	4b08      	ldr	r3, [pc, #32]	; (8008570 <HAL_RCC_ClockConfig+0x240>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f023 020f 	bic.w	r2, r3, #15
 8008556:	4906      	ldr	r1, [pc, #24]	; (8008570 <HAL_RCC_ClockConfig+0x240>)
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	4313      	orrs	r3, r2
 800855c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800855e:	4b04      	ldr	r3, [pc, #16]	; (8008570 <HAL_RCC_ClockConfig+0x240>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 030f 	and.w	r3, r3, #15
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	429a      	cmp	r2, r3
 800856a:	d005      	beq.n	8008578 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	e086      	b.n	800867e <HAL_RCC_ClockConfig+0x34e>
 8008570:	52002000 	.word	0x52002000
 8008574:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 0304 	and.w	r3, r3, #4
 8008580:	2b00      	cmp	r3, #0
 8008582:	d010      	beq.n	80085a6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	691a      	ldr	r2, [r3, #16]
 8008588:	4b3f      	ldr	r3, [pc, #252]	; (8008688 <HAL_RCC_ClockConfig+0x358>)
 800858a:	699b      	ldr	r3, [r3, #24]
 800858c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008590:	429a      	cmp	r2, r3
 8008592:	d208      	bcs.n	80085a6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008594:	4b3c      	ldr	r3, [pc, #240]	; (8008688 <HAL_RCC_ClockConfig+0x358>)
 8008596:	699b      	ldr	r3, [r3, #24]
 8008598:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	691b      	ldr	r3, [r3, #16]
 80085a0:	4939      	ldr	r1, [pc, #228]	; (8008688 <HAL_RCC_ClockConfig+0x358>)
 80085a2:	4313      	orrs	r3, r2
 80085a4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f003 0308 	and.w	r3, r3, #8
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d010      	beq.n	80085d4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	695a      	ldr	r2, [r3, #20]
 80085b6:	4b34      	ldr	r3, [pc, #208]	; (8008688 <HAL_RCC_ClockConfig+0x358>)
 80085b8:	69db      	ldr	r3, [r3, #28]
 80085ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085be:	429a      	cmp	r2, r3
 80085c0:	d208      	bcs.n	80085d4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80085c2:	4b31      	ldr	r3, [pc, #196]	; (8008688 <HAL_RCC_ClockConfig+0x358>)
 80085c4:	69db      	ldr	r3, [r3, #28]
 80085c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	492e      	ldr	r1, [pc, #184]	; (8008688 <HAL_RCC_ClockConfig+0x358>)
 80085d0:	4313      	orrs	r3, r2
 80085d2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 0310 	and.w	r3, r3, #16
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d010      	beq.n	8008602 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	699a      	ldr	r2, [r3, #24]
 80085e4:	4b28      	ldr	r3, [pc, #160]	; (8008688 <HAL_RCC_ClockConfig+0x358>)
 80085e6:	69db      	ldr	r3, [r3, #28]
 80085e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d208      	bcs.n	8008602 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80085f0:	4b25      	ldr	r3, [pc, #148]	; (8008688 <HAL_RCC_ClockConfig+0x358>)
 80085f2:	69db      	ldr	r3, [r3, #28]
 80085f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	699b      	ldr	r3, [r3, #24]
 80085fc:	4922      	ldr	r1, [pc, #136]	; (8008688 <HAL_RCC_ClockConfig+0x358>)
 80085fe:	4313      	orrs	r3, r2
 8008600:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 0320 	and.w	r3, r3, #32
 800860a:	2b00      	cmp	r3, #0
 800860c:	d010      	beq.n	8008630 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	69da      	ldr	r2, [r3, #28]
 8008612:	4b1d      	ldr	r3, [pc, #116]	; (8008688 <HAL_RCC_ClockConfig+0x358>)
 8008614:	6a1b      	ldr	r3, [r3, #32]
 8008616:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800861a:	429a      	cmp	r2, r3
 800861c:	d208      	bcs.n	8008630 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800861e:	4b1a      	ldr	r3, [pc, #104]	; (8008688 <HAL_RCC_ClockConfig+0x358>)
 8008620:	6a1b      	ldr	r3, [r3, #32]
 8008622:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	69db      	ldr	r3, [r3, #28]
 800862a:	4917      	ldr	r1, [pc, #92]	; (8008688 <HAL_RCC_ClockConfig+0x358>)
 800862c:	4313      	orrs	r3, r2
 800862e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008630:	f000 f834 	bl	800869c <HAL_RCC_GetSysClockFreq>
 8008634:	4602      	mov	r2, r0
 8008636:	4b14      	ldr	r3, [pc, #80]	; (8008688 <HAL_RCC_ClockConfig+0x358>)
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	0a1b      	lsrs	r3, r3, #8
 800863c:	f003 030f 	and.w	r3, r3, #15
 8008640:	4912      	ldr	r1, [pc, #72]	; (800868c <HAL_RCC_ClockConfig+0x35c>)
 8008642:	5ccb      	ldrb	r3, [r1, r3]
 8008644:	f003 031f 	and.w	r3, r3, #31
 8008648:	fa22 f303 	lsr.w	r3, r2, r3
 800864c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800864e:	4b0e      	ldr	r3, [pc, #56]	; (8008688 <HAL_RCC_ClockConfig+0x358>)
 8008650:	699b      	ldr	r3, [r3, #24]
 8008652:	f003 030f 	and.w	r3, r3, #15
 8008656:	4a0d      	ldr	r2, [pc, #52]	; (800868c <HAL_RCC_ClockConfig+0x35c>)
 8008658:	5cd3      	ldrb	r3, [r2, r3]
 800865a:	f003 031f 	and.w	r3, r3, #31
 800865e:	693a      	ldr	r2, [r7, #16]
 8008660:	fa22 f303 	lsr.w	r3, r2, r3
 8008664:	4a0a      	ldr	r2, [pc, #40]	; (8008690 <HAL_RCC_ClockConfig+0x360>)
 8008666:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008668:	4a0a      	ldr	r2, [pc, #40]	; (8008694 <HAL_RCC_ClockConfig+0x364>)
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800866e:	4b0a      	ldr	r3, [pc, #40]	; (8008698 <HAL_RCC_ClockConfig+0x368>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4618      	mov	r0, r3
 8008674:	f7f8 fe76 	bl	8001364 <HAL_InitTick>
 8008678:	4603      	mov	r3, r0
 800867a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800867c:	7bfb      	ldrb	r3, [r7, #15]
}
 800867e:	4618      	mov	r0, r3
 8008680:	3718      	adds	r7, #24
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	58024400 	.word	0x58024400
 800868c:	0800fb0c 	.word	0x0800fb0c
 8008690:	24000004 	.word	0x24000004
 8008694:	24000000 	.word	0x24000000
 8008698:	24000008 	.word	0x24000008

0800869c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800869c:	b480      	push	{r7}
 800869e:	b089      	sub	sp, #36	; 0x24
 80086a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80086a2:	4bb3      	ldr	r3, [pc, #716]	; (8008970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086aa:	2b18      	cmp	r3, #24
 80086ac:	f200 8155 	bhi.w	800895a <HAL_RCC_GetSysClockFreq+0x2be>
 80086b0:	a201      	add	r2, pc, #4	; (adr r2, 80086b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80086b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b6:	bf00      	nop
 80086b8:	0800871d 	.word	0x0800871d
 80086bc:	0800895b 	.word	0x0800895b
 80086c0:	0800895b 	.word	0x0800895b
 80086c4:	0800895b 	.word	0x0800895b
 80086c8:	0800895b 	.word	0x0800895b
 80086cc:	0800895b 	.word	0x0800895b
 80086d0:	0800895b 	.word	0x0800895b
 80086d4:	0800895b 	.word	0x0800895b
 80086d8:	08008743 	.word	0x08008743
 80086dc:	0800895b 	.word	0x0800895b
 80086e0:	0800895b 	.word	0x0800895b
 80086e4:	0800895b 	.word	0x0800895b
 80086e8:	0800895b 	.word	0x0800895b
 80086ec:	0800895b 	.word	0x0800895b
 80086f0:	0800895b 	.word	0x0800895b
 80086f4:	0800895b 	.word	0x0800895b
 80086f8:	08008749 	.word	0x08008749
 80086fc:	0800895b 	.word	0x0800895b
 8008700:	0800895b 	.word	0x0800895b
 8008704:	0800895b 	.word	0x0800895b
 8008708:	0800895b 	.word	0x0800895b
 800870c:	0800895b 	.word	0x0800895b
 8008710:	0800895b 	.word	0x0800895b
 8008714:	0800895b 	.word	0x0800895b
 8008718:	0800874f 	.word	0x0800874f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800871c:	4b94      	ldr	r3, [pc, #592]	; (8008970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 0320 	and.w	r3, r3, #32
 8008724:	2b00      	cmp	r3, #0
 8008726:	d009      	beq.n	800873c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008728:	4b91      	ldr	r3, [pc, #580]	; (8008970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	08db      	lsrs	r3, r3, #3
 800872e:	f003 0303 	and.w	r3, r3, #3
 8008732:	4a90      	ldr	r2, [pc, #576]	; (8008974 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008734:	fa22 f303 	lsr.w	r3, r2, r3
 8008738:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800873a:	e111      	b.n	8008960 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800873c:	4b8d      	ldr	r3, [pc, #564]	; (8008974 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800873e:	61bb      	str	r3, [r7, #24]
    break;
 8008740:	e10e      	b.n	8008960 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008742:	4b8d      	ldr	r3, [pc, #564]	; (8008978 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008744:	61bb      	str	r3, [r7, #24]
    break;
 8008746:	e10b      	b.n	8008960 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008748:	4b8c      	ldr	r3, [pc, #560]	; (800897c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800874a:	61bb      	str	r3, [r7, #24]
    break;
 800874c:	e108      	b.n	8008960 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800874e:	4b88      	ldr	r3, [pc, #544]	; (8008970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008752:	f003 0303 	and.w	r3, r3, #3
 8008756:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008758:	4b85      	ldr	r3, [pc, #532]	; (8008970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800875a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875c:	091b      	lsrs	r3, r3, #4
 800875e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008762:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008764:	4b82      	ldr	r3, [pc, #520]	; (8008970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008768:	f003 0301 	and.w	r3, r3, #1
 800876c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800876e:	4b80      	ldr	r3, [pc, #512]	; (8008970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008772:	08db      	lsrs	r3, r3, #3
 8008774:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008778:	68fa      	ldr	r2, [r7, #12]
 800877a:	fb02 f303 	mul.w	r3, r2, r3
 800877e:	ee07 3a90 	vmov	s15, r3
 8008782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008786:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	2b00      	cmp	r3, #0
 800878e:	f000 80e1 	beq.w	8008954 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	2b02      	cmp	r3, #2
 8008796:	f000 8083 	beq.w	80088a0 <HAL_RCC_GetSysClockFreq+0x204>
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	2b02      	cmp	r3, #2
 800879e:	f200 80a1 	bhi.w	80088e4 <HAL_RCC_GetSysClockFreq+0x248>
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d003      	beq.n	80087b0 <HAL_RCC_GetSysClockFreq+0x114>
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d056      	beq.n	800885c <HAL_RCC_GetSysClockFreq+0x1c0>
 80087ae:	e099      	b.n	80088e4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087b0:	4b6f      	ldr	r3, [pc, #444]	; (8008970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f003 0320 	and.w	r3, r3, #32
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d02d      	beq.n	8008818 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087bc:	4b6c      	ldr	r3, [pc, #432]	; (8008970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	08db      	lsrs	r3, r3, #3
 80087c2:	f003 0303 	and.w	r3, r3, #3
 80087c6:	4a6b      	ldr	r2, [pc, #428]	; (8008974 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80087c8:	fa22 f303 	lsr.w	r3, r2, r3
 80087cc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	ee07 3a90 	vmov	s15, r3
 80087d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	ee07 3a90 	vmov	s15, r3
 80087de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087e6:	4b62      	ldr	r3, [pc, #392]	; (8008970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ee:	ee07 3a90 	vmov	s15, r3
 80087f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80087fa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008980 <HAL_RCC_GetSysClockFreq+0x2e4>
 80087fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800880a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800880e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008812:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008816:	e087      	b.n	8008928 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	ee07 3a90 	vmov	s15, r3
 800881e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008822:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008984 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800882a:	4b51      	ldr	r3, [pc, #324]	; (8008970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800882c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800882e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008832:	ee07 3a90 	vmov	s15, r3
 8008836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800883a:	ed97 6a02 	vldr	s12, [r7, #8]
 800883e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008980 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800884a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800884e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008856:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800885a:	e065      	b.n	8008928 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	ee07 3a90 	vmov	s15, r3
 8008862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008866:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008988 <HAL_RCC_GetSysClockFreq+0x2ec>
 800886a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800886e:	4b40      	ldr	r3, [pc, #256]	; (8008970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008876:	ee07 3a90 	vmov	s15, r3
 800887a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800887e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008882:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008980 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800888a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800888e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800889a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800889e:	e043      	b.n	8008928 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	ee07 3a90 	vmov	s15, r3
 80088a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088aa:	eddf 6a38 	vldr	s13, [pc, #224]	; 800898c <HAL_RCC_GetSysClockFreq+0x2f0>
 80088ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088b2:	4b2f      	ldr	r3, [pc, #188]	; (8008970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ba:	ee07 3a90 	vmov	s15, r3
 80088be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80088c6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008980 <HAL_RCC_GetSysClockFreq+0x2e4>
 80088ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088e2:	e021      	b.n	8008928 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	ee07 3a90 	vmov	s15, r3
 80088ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008988 <HAL_RCC_GetSysClockFreq+0x2ec>
 80088f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088f6:	4b1e      	ldr	r3, [pc, #120]	; (8008970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088fe:	ee07 3a90 	vmov	s15, r3
 8008902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008906:	ed97 6a02 	vldr	s12, [r7, #8]
 800890a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008980 <HAL_RCC_GetSysClockFreq+0x2e4>
 800890e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800891a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800891e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008926:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008928:	4b11      	ldr	r3, [pc, #68]	; (8008970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800892a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892c:	0a5b      	lsrs	r3, r3, #9
 800892e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008932:	3301      	adds	r3, #1
 8008934:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	ee07 3a90 	vmov	s15, r3
 800893c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008940:	edd7 6a07 	vldr	s13, [r7, #28]
 8008944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800894c:	ee17 3a90 	vmov	r3, s15
 8008950:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008952:	e005      	b.n	8008960 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008954:	2300      	movs	r3, #0
 8008956:	61bb      	str	r3, [r7, #24]
    break;
 8008958:	e002      	b.n	8008960 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800895a:	4b07      	ldr	r3, [pc, #28]	; (8008978 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800895c:	61bb      	str	r3, [r7, #24]
    break;
 800895e:	bf00      	nop
  }

  return sysclockfreq;
 8008960:	69bb      	ldr	r3, [r7, #24]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3724      	adds	r7, #36	; 0x24
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop
 8008970:	58024400 	.word	0x58024400
 8008974:	03d09000 	.word	0x03d09000
 8008978:	003d0900 	.word	0x003d0900
 800897c:	007a1200 	.word	0x007a1200
 8008980:	46000000 	.word	0x46000000
 8008984:	4c742400 	.word	0x4c742400
 8008988:	4a742400 	.word	0x4a742400
 800898c:	4af42400 	.word	0x4af42400

08008990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008996:	f7ff fe81 	bl	800869c <HAL_RCC_GetSysClockFreq>
 800899a:	4602      	mov	r2, r0
 800899c:	4b10      	ldr	r3, [pc, #64]	; (80089e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800899e:	699b      	ldr	r3, [r3, #24]
 80089a0:	0a1b      	lsrs	r3, r3, #8
 80089a2:	f003 030f 	and.w	r3, r3, #15
 80089a6:	490f      	ldr	r1, [pc, #60]	; (80089e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80089a8:	5ccb      	ldrb	r3, [r1, r3]
 80089aa:	f003 031f 	and.w	r3, r3, #31
 80089ae:	fa22 f303 	lsr.w	r3, r2, r3
 80089b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089b4:	4b0a      	ldr	r3, [pc, #40]	; (80089e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80089b6:	699b      	ldr	r3, [r3, #24]
 80089b8:	f003 030f 	and.w	r3, r3, #15
 80089bc:	4a09      	ldr	r2, [pc, #36]	; (80089e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80089be:	5cd3      	ldrb	r3, [r2, r3]
 80089c0:	f003 031f 	and.w	r3, r3, #31
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	fa22 f303 	lsr.w	r3, r2, r3
 80089ca:	4a07      	ldr	r2, [pc, #28]	; (80089e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80089cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80089ce:	4a07      	ldr	r2, [pc, #28]	; (80089ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80089d4:	4b04      	ldr	r3, [pc, #16]	; (80089e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80089d6:	681b      	ldr	r3, [r3, #0]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3708      	adds	r7, #8
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	58024400 	.word	0x58024400
 80089e4:	0800fb0c 	.word	0x0800fb0c
 80089e8:	24000004 	.word	0x24000004
 80089ec:	24000000 	.word	0x24000000

080089f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80089f4:	f7ff ffcc 	bl	8008990 <HAL_RCC_GetHCLKFreq>
 80089f8:	4602      	mov	r2, r0
 80089fa:	4b06      	ldr	r3, [pc, #24]	; (8008a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 80089fc:	69db      	ldr	r3, [r3, #28]
 80089fe:	091b      	lsrs	r3, r3, #4
 8008a00:	f003 0307 	and.w	r3, r3, #7
 8008a04:	4904      	ldr	r1, [pc, #16]	; (8008a18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008a06:	5ccb      	ldrb	r3, [r1, r3]
 8008a08:	f003 031f 	and.w	r3, r3, #31
 8008a0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	58024400 	.word	0x58024400
 8008a18:	0800fb0c 	.word	0x0800fb0c

08008a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008a20:	f7ff ffb6 	bl	8008990 <HAL_RCC_GetHCLKFreq>
 8008a24:	4602      	mov	r2, r0
 8008a26:	4b06      	ldr	r3, [pc, #24]	; (8008a40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a28:	69db      	ldr	r3, [r3, #28]
 8008a2a:	0a1b      	lsrs	r3, r3, #8
 8008a2c:	f003 0307 	and.w	r3, r3, #7
 8008a30:	4904      	ldr	r1, [pc, #16]	; (8008a44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008a32:	5ccb      	ldrb	r3, [r1, r3]
 8008a34:	f003 031f 	and.w	r3, r3, #31
 8008a38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	58024400 	.word	0x58024400
 8008a44:	0800fb0c 	.word	0x0800fb0c

08008a48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b086      	sub	sp, #24
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008a50:	2300      	movs	r3, #0
 8008a52:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008a54:	2300      	movs	r3, #0
 8008a56:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d03f      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008a6c:	d02a      	beq.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008a6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008a72:	d824      	bhi.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008a74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a78:	d018      	beq.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008a7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a7e:	d81e      	bhi.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d003      	beq.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008a84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a88:	d007      	beq.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008a8a:	e018      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a8c:	4bab      	ldr	r3, [pc, #684]	; (8008d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a90:	4aaa      	ldr	r2, [pc, #680]	; (8008d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008a98:	e015      	b.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	3304      	adds	r3, #4
 8008a9e:	2102      	movs	r1, #2
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f001 feff 	bl	800a8a4 <RCCEx_PLL2_Config>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008aaa:	e00c      	b.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	3324      	adds	r3, #36	; 0x24
 8008ab0:	2102      	movs	r1, #2
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f001 ffa8 	bl	800aa08 <RCCEx_PLL3_Config>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008abc:	e003      	b.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	75fb      	strb	r3, [r7, #23]
      break;
 8008ac2:	e000      	b.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008ac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ac6:	7dfb      	ldrb	r3, [r7, #23]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d109      	bne.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008acc:	4b9b      	ldr	r3, [pc, #620]	; (8008d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ad0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ad8:	4998      	ldr	r1, [pc, #608]	; (8008d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ada:	4313      	orrs	r3, r2
 8008adc:	650b      	str	r3, [r1, #80]	; 0x50
 8008ade:	e001      	b.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ae0:	7dfb      	ldrb	r3, [r7, #23]
 8008ae2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d03d      	beq.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008af4:	2b04      	cmp	r3, #4
 8008af6:	d826      	bhi.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008af8:	a201      	add	r2, pc, #4	; (adr r2, 8008b00 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afe:	bf00      	nop
 8008b00:	08008b15 	.word	0x08008b15
 8008b04:	08008b23 	.word	0x08008b23
 8008b08:	08008b35 	.word	0x08008b35
 8008b0c:	08008b4d 	.word	0x08008b4d
 8008b10:	08008b4d 	.word	0x08008b4d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b14:	4b89      	ldr	r3, [pc, #548]	; (8008d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b18:	4a88      	ldr	r2, [pc, #544]	; (8008d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b20:	e015      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	3304      	adds	r3, #4
 8008b26:	2100      	movs	r1, #0
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f001 febb 	bl	800a8a4 <RCCEx_PLL2_Config>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b32:	e00c      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	3324      	adds	r3, #36	; 0x24
 8008b38:	2100      	movs	r1, #0
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f001 ff64 	bl	800aa08 <RCCEx_PLL3_Config>
 8008b40:	4603      	mov	r3, r0
 8008b42:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b44:	e003      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	75fb      	strb	r3, [r7, #23]
      break;
 8008b4a:	e000      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008b4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b4e:	7dfb      	ldrb	r3, [r7, #23]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d109      	bne.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008b54:	4b79      	ldr	r3, [pc, #484]	; (8008d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b58:	f023 0207 	bic.w	r2, r3, #7
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b60:	4976      	ldr	r1, [pc, #472]	; (8008d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b62:	4313      	orrs	r3, r2
 8008b64:	650b      	str	r3, [r1, #80]	; 0x50
 8008b66:	e001      	b.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b68:	7dfb      	ldrb	r3, [r7, #23]
 8008b6a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d051      	beq.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008b7e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008b82:	d036      	beq.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008b84:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008b88:	d830      	bhi.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008b8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b8e:	d032      	beq.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8008b90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b94:	d82a      	bhi.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008b96:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008b9a:	d02e      	beq.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8008b9c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008ba0:	d824      	bhi.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008ba2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ba6:	d018      	beq.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008ba8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bac:	d81e      	bhi.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d003      	beq.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x172>
 8008bb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bb6:	d007      	beq.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8008bb8:	e018      	b.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bba:	4b60      	ldr	r3, [pc, #384]	; (8008d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bbe:	4a5f      	ldr	r2, [pc, #380]	; (8008d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bc4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008bc6:	e019      	b.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	3304      	adds	r3, #4
 8008bcc:	2100      	movs	r1, #0
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f001 fe68 	bl	800a8a4 <RCCEx_PLL2_Config>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008bd8:	e010      	b.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	3324      	adds	r3, #36	; 0x24
 8008bde:	2100      	movs	r1, #0
 8008be0:	4618      	mov	r0, r3
 8008be2:	f001 ff11 	bl	800aa08 <RCCEx_PLL3_Config>
 8008be6:	4603      	mov	r3, r0
 8008be8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008bea:	e007      	b.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	75fb      	strb	r3, [r7, #23]
      break;
 8008bf0:	e004      	b.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008bf2:	bf00      	nop
 8008bf4:	e002      	b.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008bf6:	bf00      	nop
 8008bf8:	e000      	b.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008bfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bfc:	7dfb      	ldrb	r3, [r7, #23]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d10a      	bne.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008c02:	4b4e      	ldr	r3, [pc, #312]	; (8008d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c06:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008c10:	494a      	ldr	r1, [pc, #296]	; (8008d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c12:	4313      	orrs	r3, r2
 8008c14:	658b      	str	r3, [r1, #88]	; 0x58
 8008c16:	e001      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c18:	7dfb      	ldrb	r3, [r7, #23]
 8008c1a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d051      	beq.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008c2e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008c32:	d036      	beq.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8008c34:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008c38:	d830      	bhi.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008c3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c3e:	d032      	beq.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8008c40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c44:	d82a      	bhi.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008c46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c4a:	d02e      	beq.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x262>
 8008c4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c50:	d824      	bhi.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008c52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c56:	d018      	beq.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8008c58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c5c:	d81e      	bhi.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d003      	beq.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8008c62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c66:	d007      	beq.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008c68:	e018      	b.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c6a:	4b34      	ldr	r3, [pc, #208]	; (8008d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6e:	4a33      	ldr	r2, [pc, #204]	; (8008d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c76:	e019      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	3304      	adds	r3, #4
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f001 fe10 	bl	800a8a4 <RCCEx_PLL2_Config>
 8008c84:	4603      	mov	r3, r0
 8008c86:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008c88:	e010      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	3324      	adds	r3, #36	; 0x24
 8008c8e:	2100      	movs	r1, #0
 8008c90:	4618      	mov	r0, r3
 8008c92:	f001 feb9 	bl	800aa08 <RCCEx_PLL3_Config>
 8008c96:	4603      	mov	r3, r0
 8008c98:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c9a:	e007      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	75fb      	strb	r3, [r7, #23]
      break;
 8008ca0:	e004      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008ca2:	bf00      	nop
 8008ca4:	e002      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008ca6:	bf00      	nop
 8008ca8:	e000      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008caa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cac:	7dfb      	ldrb	r3, [r7, #23]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10a      	bne.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008cb2:	4b22      	ldr	r3, [pc, #136]	; (8008d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cb6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008cc0:	491e      	ldr	r1, [pc, #120]	; (8008d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	658b      	str	r3, [r1, #88]	; 0x58
 8008cc6:	e001      	b.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cc8:	7dfb      	ldrb	r3, [r7, #23]
 8008cca:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d035      	beq.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cdc:	2b30      	cmp	r3, #48	; 0x30
 8008cde:	d01c      	beq.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008ce0:	2b30      	cmp	r3, #48	; 0x30
 8008ce2:	d817      	bhi.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008ce4:	2b20      	cmp	r3, #32
 8008ce6:	d00c      	beq.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8008ce8:	2b20      	cmp	r3, #32
 8008cea:	d813      	bhi.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d016      	beq.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8008cf0:	2b10      	cmp	r3, #16
 8008cf2:	d10f      	bne.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cf4:	4b11      	ldr	r3, [pc, #68]	; (8008d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf8:	4a10      	ldr	r2, [pc, #64]	; (8008d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cfe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008d00:	e00e      	b.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	3304      	adds	r3, #4
 8008d06:	2102      	movs	r1, #2
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f001 fdcb 	bl	800a8a4 <RCCEx_PLL2_Config>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008d12:	e005      	b.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	75fb      	strb	r3, [r7, #23]
      break;
 8008d18:	e002      	b.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8008d1a:	bf00      	nop
 8008d1c:	e000      	b.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8008d1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d20:	7dfb      	ldrb	r3, [r7, #23]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d10c      	bne.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008d26:	4b05      	ldr	r3, [pc, #20]	; (8008d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d2a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d32:	4902      	ldr	r1, [pc, #8]	; (8008d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d34:	4313      	orrs	r3, r2
 8008d36:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008d38:	e004      	b.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008d3a:	bf00      	nop
 8008d3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d40:	7dfb      	ldrb	r3, [r7, #23]
 8008d42:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d047      	beq.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d58:	d030      	beq.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x374>
 8008d5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d5e:	d82a      	bhi.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008d60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d64:	d02c      	beq.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8008d66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d6a:	d824      	bhi.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008d6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d70:	d018      	beq.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008d72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d76:	d81e      	bhi.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d003      	beq.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d80:	d007      	beq.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008d82:	e018      	b.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d84:	4bac      	ldr	r3, [pc, #688]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d88:	4aab      	ldr	r2, [pc, #684]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008d8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008d90:	e017      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	3304      	adds	r3, #4
 8008d96:	2100      	movs	r1, #0
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f001 fd83 	bl	800a8a4 <RCCEx_PLL2_Config>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008da2:	e00e      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	3324      	adds	r3, #36	; 0x24
 8008da8:	2100      	movs	r1, #0
 8008daa:	4618      	mov	r0, r3
 8008dac:	f001 fe2c 	bl	800aa08 <RCCEx_PLL3_Config>
 8008db0:	4603      	mov	r3, r0
 8008db2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008db4:	e005      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	75fb      	strb	r3, [r7, #23]
      break;
 8008dba:	e002      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008dbc:	bf00      	nop
 8008dbe:	e000      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008dc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dc2:	7dfb      	ldrb	r3, [r7, #23]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d109      	bne.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008dc8:	4b9b      	ldr	r3, [pc, #620]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dcc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dd4:	4998      	ldr	r1, [pc, #608]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	650b      	str	r3, [r1, #80]	; 0x50
 8008dda:	e001      	b.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ddc:	7dfb      	ldrb	r3, [r7, #23]
 8008dde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d049      	beq.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008df0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008df4:	d02e      	beq.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8008df6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008dfa:	d828      	bhi.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008dfc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e00:	d02a      	beq.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008e02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e06:	d822      	bhi.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008e08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e0c:	d026      	beq.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8008e0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e12:	d81c      	bhi.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008e14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e18:	d010      	beq.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8008e1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e1e:	d816      	bhi.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d01d      	beq.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8008e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e28:	d111      	bne.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	3304      	adds	r3, #4
 8008e2e:	2101      	movs	r1, #1
 8008e30:	4618      	mov	r0, r3
 8008e32:	f001 fd37 	bl	800a8a4 <RCCEx_PLL2_Config>
 8008e36:	4603      	mov	r3, r0
 8008e38:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008e3a:	e012      	b.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	3324      	adds	r3, #36	; 0x24
 8008e40:	2101      	movs	r1, #1
 8008e42:	4618      	mov	r0, r3
 8008e44:	f001 fde0 	bl	800aa08 <RCCEx_PLL3_Config>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008e4c:	e009      	b.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	75fb      	strb	r3, [r7, #23]
      break;
 8008e52:	e006      	b.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008e54:	bf00      	nop
 8008e56:	e004      	b.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008e58:	bf00      	nop
 8008e5a:	e002      	b.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008e5c:	bf00      	nop
 8008e5e:	e000      	b.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008e60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e62:	7dfb      	ldrb	r3, [r7, #23]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d109      	bne.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008e68:	4b73      	ldr	r3, [pc, #460]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e6c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e74:	4970      	ldr	r1, [pc, #448]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008e76:	4313      	orrs	r3, r2
 8008e78:	650b      	str	r3, [r1, #80]	; 0x50
 8008e7a:	e001      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e7c:	7dfb      	ldrb	r3, [r7, #23]
 8008e7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d04b      	beq.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008e92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e96:	d02e      	beq.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8008e98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e9c:	d828      	bhi.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ea2:	d02a      	beq.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8008ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ea8:	d822      	bhi.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008eaa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008eae:	d026      	beq.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8008eb0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008eb4:	d81c      	bhi.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008eb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008eba:	d010      	beq.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x496>
 8008ebc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ec0:	d816      	bhi.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d01d      	beq.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8008ec6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008eca:	d111      	bne.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	3304      	adds	r3, #4
 8008ed0:	2101      	movs	r1, #1
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f001 fce6 	bl	800a8a4 <RCCEx_PLL2_Config>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008edc:	e012      	b.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	3324      	adds	r3, #36	; 0x24
 8008ee2:	2101      	movs	r1, #1
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f001 fd8f 	bl	800aa08 <RCCEx_PLL3_Config>
 8008eea:	4603      	mov	r3, r0
 8008eec:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008eee:	e009      	b.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ef4:	e006      	b.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008ef6:	bf00      	nop
 8008ef8:	e004      	b.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008efa:	bf00      	nop
 8008efc:	e002      	b.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008efe:	bf00      	nop
 8008f00:	e000      	b.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008f02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f04:	7dfb      	ldrb	r3, [r7, #23]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d10a      	bne.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008f0a:	4b4b      	ldr	r3, [pc, #300]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f0e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008f18:	4947      	ldr	r1, [pc, #284]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	658b      	str	r3, [r1, #88]	; 0x58
 8008f1e:	e001      	b.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f20:	7dfb      	ldrb	r3, [r7, #23]
 8008f22:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d02f      	beq.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f38:	d00e      	beq.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8008f3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f3e:	d814      	bhi.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d015      	beq.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8008f44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f48:	d10f      	bne.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f4a:	4b3b      	ldr	r3, [pc, #236]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4e:	4a3a      	ldr	r2, [pc, #232]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008f56:	e00c      	b.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	3304      	adds	r3, #4
 8008f5c:	2101      	movs	r1, #1
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f001 fca0 	bl	800a8a4 <RCCEx_PLL2_Config>
 8008f64:	4603      	mov	r3, r0
 8008f66:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008f68:	e003      	b.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	75fb      	strb	r3, [r7, #23]
      break;
 8008f6e:	e000      	b.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8008f70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f72:	7dfb      	ldrb	r3, [r7, #23]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d109      	bne.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008f78:	4b2f      	ldr	r3, [pc, #188]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f7c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f84:	492c      	ldr	r1, [pc, #176]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008f86:	4313      	orrs	r3, r2
 8008f88:	650b      	str	r3, [r1, #80]	; 0x50
 8008f8a:	e001      	b.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f8c:	7dfb      	ldrb	r3, [r7, #23]
 8008f8e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d032      	beq.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fa0:	2b03      	cmp	r3, #3
 8008fa2:	d81b      	bhi.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x594>
 8008fa4:	a201      	add	r2, pc, #4	; (adr r2, 8008fac <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8008fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008faa:	bf00      	nop
 8008fac:	08008fe3 	.word	0x08008fe3
 8008fb0:	08008fbd 	.word	0x08008fbd
 8008fb4:	08008fcb 	.word	0x08008fcb
 8008fb8:	08008fe3 	.word	0x08008fe3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fbc:	4b1e      	ldr	r3, [pc, #120]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc0:	4a1d      	ldr	r2, [pc, #116]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008fc8:	e00c      	b.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	3304      	adds	r3, #4
 8008fce:	2102      	movs	r1, #2
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f001 fc67 	bl	800a8a4 <RCCEx_PLL2_Config>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008fda:	e003      	b.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	75fb      	strb	r3, [r7, #23]
      break;
 8008fe0:	e000      	b.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8008fe2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fe4:	7dfb      	ldrb	r3, [r7, #23]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d109      	bne.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008fea:	4b13      	ldr	r3, [pc, #76]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fee:	f023 0203 	bic.w	r2, r3, #3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ff6:	4910      	ldr	r1, [pc, #64]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008ffc:	e001      	b.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ffe:	7dfb      	ldrb	r3, [r7, #23]
 8009000:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800900a:	2b00      	cmp	r3, #0
 800900c:	f000 808a 	beq.w	8009124 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009010:	4b0a      	ldr	r3, [pc, #40]	; (800903c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a09      	ldr	r2, [pc, #36]	; (800903c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8009016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800901a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800901c:	f7f8 f9ec 	bl	80013f8 <HAL_GetTick>
 8009020:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009022:	e00d      	b.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009024:	f7f8 f9e8 	bl	80013f8 <HAL_GetTick>
 8009028:	4602      	mov	r2, r0
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	2b64      	cmp	r3, #100	; 0x64
 8009030:	d906      	bls.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8009032:	2303      	movs	r3, #3
 8009034:	75fb      	strb	r3, [r7, #23]
        break;
 8009036:	e009      	b.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009038:	58024400 	.word	0x58024400
 800903c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009040:	4bb9      	ldr	r3, [pc, #740]	; (8009328 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009048:	2b00      	cmp	r3, #0
 800904a:	d0eb      	beq.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800904c:	7dfb      	ldrb	r3, [r7, #23]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d166      	bne.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009052:	4bb6      	ldr	r3, [pc, #728]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009054:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800905c:	4053      	eors	r3, r2
 800905e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009062:	2b00      	cmp	r3, #0
 8009064:	d013      	beq.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009066:	4bb1      	ldr	r3, [pc, #708]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800906a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800906e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009070:	4bae      	ldr	r3, [pc, #696]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009074:	4aad      	ldr	r2, [pc, #692]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800907a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800907c:	4bab      	ldr	r3, [pc, #684]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800907e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009080:	4aaa      	ldr	r2, [pc, #680]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009086:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009088:	4aa8      	ldr	r2, [pc, #672]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009098:	d115      	bne.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800909a:	f7f8 f9ad 	bl	80013f8 <HAL_GetTick>
 800909e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090a0:	e00b      	b.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090a2:	f7f8 f9a9 	bl	80013f8 <HAL_GetTick>
 80090a6:	4602      	mov	r2, r0
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	1ad3      	subs	r3, r2, r3
 80090ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d902      	bls.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80090b4:	2303      	movs	r3, #3
 80090b6:	75fb      	strb	r3, [r7, #23]
            break;
 80090b8:	e005      	b.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090ba:	4b9c      	ldr	r3, [pc, #624]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80090bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090be:	f003 0302 	and.w	r3, r3, #2
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d0ed      	beq.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 80090c6:	7dfb      	ldrb	r3, [r7, #23]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d126      	bne.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80090d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090da:	d10d      	bne.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80090dc:	4b93      	ldr	r3, [pc, #588]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80090de:	691b      	ldr	r3, [r3, #16]
 80090e0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80090ea:	0919      	lsrs	r1, r3, #4
 80090ec:	4b90      	ldr	r3, [pc, #576]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80090ee:	400b      	ands	r3, r1
 80090f0:	498e      	ldr	r1, [pc, #568]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80090f2:	4313      	orrs	r3, r2
 80090f4:	610b      	str	r3, [r1, #16]
 80090f6:	e005      	b.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 80090f8:	4b8c      	ldr	r3, [pc, #560]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80090fa:	691b      	ldr	r3, [r3, #16]
 80090fc:	4a8b      	ldr	r2, [pc, #556]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80090fe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009102:	6113      	str	r3, [r2, #16]
 8009104:	4b89      	ldr	r3, [pc, #548]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009106:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800910e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009112:	4986      	ldr	r1, [pc, #536]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009114:	4313      	orrs	r3, r2
 8009116:	670b      	str	r3, [r1, #112]	; 0x70
 8009118:	e004      	b.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800911a:	7dfb      	ldrb	r3, [r7, #23]
 800911c:	75bb      	strb	r3, [r7, #22]
 800911e:	e001      	b.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009120:	7dfb      	ldrb	r3, [r7, #23]
 8009122:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f003 0301 	and.w	r3, r3, #1
 800912c:	2b00      	cmp	r3, #0
 800912e:	d07e      	beq.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009134:	2b28      	cmp	r3, #40	; 0x28
 8009136:	d867      	bhi.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8009138:	a201      	add	r2, pc, #4	; (adr r2, 8009140 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800913a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800913e:	bf00      	nop
 8009140:	0800920f 	.word	0x0800920f
 8009144:	08009209 	.word	0x08009209
 8009148:	08009209 	.word	0x08009209
 800914c:	08009209 	.word	0x08009209
 8009150:	08009209 	.word	0x08009209
 8009154:	08009209 	.word	0x08009209
 8009158:	08009209 	.word	0x08009209
 800915c:	08009209 	.word	0x08009209
 8009160:	080091e5 	.word	0x080091e5
 8009164:	08009209 	.word	0x08009209
 8009168:	08009209 	.word	0x08009209
 800916c:	08009209 	.word	0x08009209
 8009170:	08009209 	.word	0x08009209
 8009174:	08009209 	.word	0x08009209
 8009178:	08009209 	.word	0x08009209
 800917c:	08009209 	.word	0x08009209
 8009180:	080091f7 	.word	0x080091f7
 8009184:	08009209 	.word	0x08009209
 8009188:	08009209 	.word	0x08009209
 800918c:	08009209 	.word	0x08009209
 8009190:	08009209 	.word	0x08009209
 8009194:	08009209 	.word	0x08009209
 8009198:	08009209 	.word	0x08009209
 800919c:	08009209 	.word	0x08009209
 80091a0:	0800920f 	.word	0x0800920f
 80091a4:	08009209 	.word	0x08009209
 80091a8:	08009209 	.word	0x08009209
 80091ac:	08009209 	.word	0x08009209
 80091b0:	08009209 	.word	0x08009209
 80091b4:	08009209 	.word	0x08009209
 80091b8:	08009209 	.word	0x08009209
 80091bc:	08009209 	.word	0x08009209
 80091c0:	0800920f 	.word	0x0800920f
 80091c4:	08009209 	.word	0x08009209
 80091c8:	08009209 	.word	0x08009209
 80091cc:	08009209 	.word	0x08009209
 80091d0:	08009209 	.word	0x08009209
 80091d4:	08009209 	.word	0x08009209
 80091d8:	08009209 	.word	0x08009209
 80091dc:	08009209 	.word	0x08009209
 80091e0:	0800920f 	.word	0x0800920f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	3304      	adds	r3, #4
 80091e8:	2101      	movs	r1, #1
 80091ea:	4618      	mov	r0, r3
 80091ec:	f001 fb5a 	bl	800a8a4 <RCCEx_PLL2_Config>
 80091f0:	4603      	mov	r3, r0
 80091f2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80091f4:	e00c      	b.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	3324      	adds	r3, #36	; 0x24
 80091fa:	2101      	movs	r1, #1
 80091fc:	4618      	mov	r0, r3
 80091fe:	f001 fc03 	bl	800aa08 <RCCEx_PLL3_Config>
 8009202:	4603      	mov	r3, r0
 8009204:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009206:	e003      	b.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009208:	2301      	movs	r3, #1
 800920a:	75fb      	strb	r3, [r7, #23]
      break;
 800920c:	e000      	b.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800920e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009210:	7dfb      	ldrb	r3, [r7, #23]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d109      	bne.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009216:	4b45      	ldr	r3, [pc, #276]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800921a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009222:	4942      	ldr	r1, [pc, #264]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009224:	4313      	orrs	r3, r2
 8009226:	654b      	str	r3, [r1, #84]	; 0x54
 8009228:	e001      	b.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800922a:	7dfb      	ldrb	r3, [r7, #23]
 800922c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f003 0302 	and.w	r3, r3, #2
 8009236:	2b00      	cmp	r3, #0
 8009238:	d037      	beq.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800923e:	2b05      	cmp	r3, #5
 8009240:	d820      	bhi.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8009242:	a201      	add	r2, pc, #4	; (adr r2, 8009248 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8009244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009248:	0800928b 	.word	0x0800928b
 800924c:	08009261 	.word	0x08009261
 8009250:	08009273 	.word	0x08009273
 8009254:	0800928b 	.word	0x0800928b
 8009258:	0800928b 	.word	0x0800928b
 800925c:	0800928b 	.word	0x0800928b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	3304      	adds	r3, #4
 8009264:	2101      	movs	r1, #1
 8009266:	4618      	mov	r0, r3
 8009268:	f001 fb1c 	bl	800a8a4 <RCCEx_PLL2_Config>
 800926c:	4603      	mov	r3, r0
 800926e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009270:	e00c      	b.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	3324      	adds	r3, #36	; 0x24
 8009276:	2101      	movs	r1, #1
 8009278:	4618      	mov	r0, r3
 800927a:	f001 fbc5 	bl	800aa08 <RCCEx_PLL3_Config>
 800927e:	4603      	mov	r3, r0
 8009280:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009282:	e003      	b.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	75fb      	strb	r3, [r7, #23]
      break;
 8009288:	e000      	b.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800928a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800928c:	7dfb      	ldrb	r3, [r7, #23]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d109      	bne.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009292:	4b26      	ldr	r3, [pc, #152]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009296:	f023 0207 	bic.w	r2, r3, #7
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800929e:	4923      	ldr	r1, [pc, #140]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80092a0:	4313      	orrs	r3, r2
 80092a2:	654b      	str	r3, [r1, #84]	; 0x54
 80092a4:	e001      	b.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092a6:	7dfb      	ldrb	r3, [r7, #23]
 80092a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f003 0304 	and.w	r3, r3, #4
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d040      	beq.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092bc:	2b05      	cmp	r3, #5
 80092be:	d821      	bhi.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80092c0:	a201      	add	r2, pc, #4	; (adr r2, 80092c8 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80092c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c6:	bf00      	nop
 80092c8:	0800930b 	.word	0x0800930b
 80092cc:	080092e1 	.word	0x080092e1
 80092d0:	080092f3 	.word	0x080092f3
 80092d4:	0800930b 	.word	0x0800930b
 80092d8:	0800930b 	.word	0x0800930b
 80092dc:	0800930b 	.word	0x0800930b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	3304      	adds	r3, #4
 80092e4:	2101      	movs	r1, #1
 80092e6:	4618      	mov	r0, r3
 80092e8:	f001 fadc 	bl	800a8a4 <RCCEx_PLL2_Config>
 80092ec:	4603      	mov	r3, r0
 80092ee:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80092f0:	e00c      	b.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	3324      	adds	r3, #36	; 0x24
 80092f6:	2101      	movs	r1, #1
 80092f8:	4618      	mov	r0, r3
 80092fa:	f001 fb85 	bl	800aa08 <RCCEx_PLL3_Config>
 80092fe:	4603      	mov	r3, r0
 8009300:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009302:	e003      	b.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009304:	2301      	movs	r3, #1
 8009306:	75fb      	strb	r3, [r7, #23]
      break;
 8009308:	e000      	b.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800930a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800930c:	7dfb      	ldrb	r3, [r7, #23]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d110      	bne.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009312:	4b06      	ldr	r3, [pc, #24]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009316:	f023 0207 	bic.w	r2, r3, #7
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009320:	4902      	ldr	r1, [pc, #8]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009322:	4313      	orrs	r3, r2
 8009324:	658b      	str	r3, [r1, #88]	; 0x58
 8009326:	e007      	b.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8009328:	58024800 	.word	0x58024800
 800932c:	58024400 	.word	0x58024400
 8009330:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009334:	7dfb      	ldrb	r3, [r7, #23]
 8009336:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 0320 	and.w	r3, r3, #32
 8009340:	2b00      	cmp	r3, #0
 8009342:	d04b      	beq.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800934a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800934e:	d02e      	beq.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x966>
 8009350:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009354:	d828      	bhi.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8009356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800935a:	d02a      	beq.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800935c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009360:	d822      	bhi.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8009362:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009366:	d026      	beq.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8009368:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800936c:	d81c      	bhi.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800936e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009372:	d010      	beq.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8009374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009378:	d816      	bhi.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800937a:	2b00      	cmp	r3, #0
 800937c:	d01d      	beq.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x972>
 800937e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009382:	d111      	bne.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	3304      	adds	r3, #4
 8009388:	2100      	movs	r1, #0
 800938a:	4618      	mov	r0, r3
 800938c:	f001 fa8a 	bl	800a8a4 <RCCEx_PLL2_Config>
 8009390:	4603      	mov	r3, r0
 8009392:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009394:	e012      	b.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	3324      	adds	r3, #36	; 0x24
 800939a:	2102      	movs	r1, #2
 800939c:	4618      	mov	r0, r3
 800939e:	f001 fb33 	bl	800aa08 <RCCEx_PLL3_Config>
 80093a2:	4603      	mov	r3, r0
 80093a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80093a6:	e009      	b.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093a8:	2301      	movs	r3, #1
 80093aa:	75fb      	strb	r3, [r7, #23]
      break;
 80093ac:	e006      	b.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80093ae:	bf00      	nop
 80093b0:	e004      	b.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80093b2:	bf00      	nop
 80093b4:	e002      	b.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80093b6:	bf00      	nop
 80093b8:	e000      	b.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80093ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093bc:	7dfb      	ldrb	r3, [r7, #23]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d10a      	bne.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80093c2:	4bb2      	ldr	r3, [pc, #712]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80093c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093c6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093d0:	49ae      	ldr	r1, [pc, #696]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80093d2:	4313      	orrs	r3, r2
 80093d4:	654b      	str	r3, [r1, #84]	; 0x54
 80093d6:	e001      	b.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093d8:	7dfb      	ldrb	r3, [r7, #23]
 80093da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d04b      	beq.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093ee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80093f2:	d02e      	beq.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80093f4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80093f8:	d828      	bhi.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80093fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093fe:	d02a      	beq.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8009400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009404:	d822      	bhi.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8009406:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800940a:	d026      	beq.n	800945a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800940c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009410:	d81c      	bhi.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8009412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009416:	d010      	beq.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8009418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800941c:	d816      	bhi.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800941e:	2b00      	cmp	r3, #0
 8009420:	d01d      	beq.n	800945e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8009422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009426:	d111      	bne.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	3304      	adds	r3, #4
 800942c:	2100      	movs	r1, #0
 800942e:	4618      	mov	r0, r3
 8009430:	f001 fa38 	bl	800a8a4 <RCCEx_PLL2_Config>
 8009434:	4603      	mov	r3, r0
 8009436:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009438:	e012      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	3324      	adds	r3, #36	; 0x24
 800943e:	2102      	movs	r1, #2
 8009440:	4618      	mov	r0, r3
 8009442:	f001 fae1 	bl	800aa08 <RCCEx_PLL3_Config>
 8009446:	4603      	mov	r3, r0
 8009448:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800944a:	e009      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800944c:	2301      	movs	r3, #1
 800944e:	75fb      	strb	r3, [r7, #23]
      break;
 8009450:	e006      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8009452:	bf00      	nop
 8009454:	e004      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8009456:	bf00      	nop
 8009458:	e002      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800945a:	bf00      	nop
 800945c:	e000      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800945e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009460:	7dfb      	ldrb	r3, [r7, #23]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d10a      	bne.n	800947c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009466:	4b89      	ldr	r3, [pc, #548]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800946a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009474:	4985      	ldr	r1, [pc, #532]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009476:	4313      	orrs	r3, r2
 8009478:	658b      	str	r3, [r1, #88]	; 0x58
 800947a:	e001      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800947c:	7dfb      	ldrb	r3, [r7, #23]
 800947e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009488:	2b00      	cmp	r3, #0
 800948a:	d04b      	beq.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009492:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009496:	d02e      	beq.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8009498:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800949c:	d828      	bhi.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800949e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094a2:	d02a      	beq.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80094a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094a8:	d822      	bhi.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80094aa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80094ae:	d026      	beq.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80094b0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80094b4:	d81c      	bhi.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80094b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094ba:	d010      	beq.n	80094de <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80094bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094c0:	d816      	bhi.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d01d      	beq.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80094c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094ca:	d111      	bne.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	3304      	adds	r3, #4
 80094d0:	2100      	movs	r1, #0
 80094d2:	4618      	mov	r0, r3
 80094d4:	f001 f9e6 	bl	800a8a4 <RCCEx_PLL2_Config>
 80094d8:	4603      	mov	r3, r0
 80094da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80094dc:	e012      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	3324      	adds	r3, #36	; 0x24
 80094e2:	2102      	movs	r1, #2
 80094e4:	4618      	mov	r0, r3
 80094e6:	f001 fa8f 	bl	800aa08 <RCCEx_PLL3_Config>
 80094ea:	4603      	mov	r3, r0
 80094ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80094ee:	e009      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094f0:	2301      	movs	r3, #1
 80094f2:	75fb      	strb	r3, [r7, #23]
      break;
 80094f4:	e006      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80094f6:	bf00      	nop
 80094f8:	e004      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80094fa:	bf00      	nop
 80094fc:	e002      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80094fe:	bf00      	nop
 8009500:	e000      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8009502:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009504:	7dfb      	ldrb	r3, [r7, #23]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10a      	bne.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800950a:	4b60      	ldr	r3, [pc, #384]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800950c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800950e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009518:	495c      	ldr	r1, [pc, #368]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800951a:	4313      	orrs	r3, r2
 800951c:	658b      	str	r3, [r1, #88]	; 0x58
 800951e:	e001      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009520:	7dfb      	ldrb	r3, [r7, #23]
 8009522:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f003 0308 	and.w	r3, r3, #8
 800952c:	2b00      	cmp	r3, #0
 800952e:	d018      	beq.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009538:	d10a      	bne.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	3324      	adds	r3, #36	; 0x24
 800953e:	2102      	movs	r1, #2
 8009540:	4618      	mov	r0, r3
 8009542:	f001 fa61 	bl	800aa08 <RCCEx_PLL3_Config>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d001      	beq.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800954c:	2301      	movs	r3, #1
 800954e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009550:	4b4e      	ldr	r3, [pc, #312]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009554:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800955c:	494b      	ldr	r1, [pc, #300]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800955e:	4313      	orrs	r3, r2
 8009560:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f003 0310 	and.w	r3, r3, #16
 800956a:	2b00      	cmp	r3, #0
 800956c:	d01a      	beq.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009578:	d10a      	bne.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	3324      	adds	r3, #36	; 0x24
 800957e:	2102      	movs	r1, #2
 8009580:	4618      	mov	r0, r3
 8009582:	f001 fa41 	bl	800aa08 <RCCEx_PLL3_Config>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d001      	beq.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009590:	4b3e      	ldr	r3, [pc, #248]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009594:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800959e:	493b      	ldr	r1, [pc, #236]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80095a0:	4313      	orrs	r3, r2
 80095a2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d034      	beq.n	800961a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80095b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095ba:	d01d      	beq.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80095bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095c0:	d817      	bhi.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d003      	beq.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80095c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095ca:	d009      	beq.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80095cc:	e011      	b.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	3304      	adds	r3, #4
 80095d2:	2100      	movs	r1, #0
 80095d4:	4618      	mov	r0, r3
 80095d6:	f001 f965 	bl	800a8a4 <RCCEx_PLL2_Config>
 80095da:	4603      	mov	r3, r0
 80095dc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80095de:	e00c      	b.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	3324      	adds	r3, #36	; 0x24
 80095e4:	2102      	movs	r1, #2
 80095e6:	4618      	mov	r0, r3
 80095e8:	f001 fa0e 	bl	800aa08 <RCCEx_PLL3_Config>
 80095ec:	4603      	mov	r3, r0
 80095ee:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80095f0:	e003      	b.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	75fb      	strb	r3, [r7, #23]
      break;
 80095f6:	e000      	b.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80095f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095fa:	7dfb      	ldrb	r3, [r7, #23]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d10a      	bne.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009600:	4b22      	ldr	r3, [pc, #136]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009604:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800960e:	491f      	ldr	r1, [pc, #124]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009610:	4313      	orrs	r3, r2
 8009612:	658b      	str	r3, [r1, #88]	; 0x58
 8009614:	e001      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009616:	7dfb      	ldrb	r3, [r7, #23]
 8009618:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009622:	2b00      	cmp	r3, #0
 8009624:	d036      	beq.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800962c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009630:	d01c      	beq.n	800966c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009632:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009636:	d816      	bhi.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009638:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800963c:	d003      	beq.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800963e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009642:	d007      	beq.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8009644:	e00f      	b.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009646:	4b11      	ldr	r3, [pc, #68]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964a:	4a10      	ldr	r2, [pc, #64]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800964c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009650:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009652:	e00c      	b.n	800966e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	3324      	adds	r3, #36	; 0x24
 8009658:	2101      	movs	r1, #1
 800965a:	4618      	mov	r0, r3
 800965c:	f001 f9d4 	bl	800aa08 <RCCEx_PLL3_Config>
 8009660:	4603      	mov	r3, r0
 8009662:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009664:	e003      	b.n	800966e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	75fb      	strb	r3, [r7, #23]
      break;
 800966a:	e000      	b.n	800966e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800966c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800966e:	7dfb      	ldrb	r3, [r7, #23]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d10d      	bne.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009674:	4b05      	ldr	r3, [pc, #20]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009678:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009682:	4902      	ldr	r1, [pc, #8]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009684:	4313      	orrs	r3, r2
 8009686:	654b      	str	r3, [r1, #84]	; 0x54
 8009688:	e004      	b.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800968a:	bf00      	nop
 800968c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009690:	7dfb      	ldrb	r3, [r7, #23]
 8009692:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800969c:	2b00      	cmp	r3, #0
 800969e:	d029      	beq.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d003      	beq.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80096a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096ac:	d007      	beq.n	80096be <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80096ae:	e00f      	b.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096b0:	4b61      	ldr	r3, [pc, #388]	; (8009838 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80096b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b4:	4a60      	ldr	r2, [pc, #384]	; (8009838 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80096b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80096bc:	e00b      	b.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	3304      	adds	r3, #4
 80096c2:	2102      	movs	r1, #2
 80096c4:	4618      	mov	r0, r3
 80096c6:	f001 f8ed 	bl	800a8a4 <RCCEx_PLL2_Config>
 80096ca:	4603      	mov	r3, r0
 80096cc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80096ce:	e002      	b.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	75fb      	strb	r3, [r7, #23]
      break;
 80096d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096d6:	7dfb      	ldrb	r3, [r7, #23]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d109      	bne.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80096dc:	4b56      	ldr	r3, [pc, #344]	; (8009838 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80096de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096e8:	4953      	ldr	r1, [pc, #332]	; (8009838 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80096ea:	4313      	orrs	r3, r2
 80096ec:	64cb      	str	r3, [r1, #76]	; 0x4c
 80096ee:	e001      	b.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096f0:	7dfb      	ldrb	r3, [r7, #23]
 80096f2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d00a      	beq.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	3324      	adds	r3, #36	; 0x24
 8009704:	2102      	movs	r1, #2
 8009706:	4618      	mov	r0, r3
 8009708:	f001 f97e 	bl	800aa08 <RCCEx_PLL3_Config>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d001      	beq.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8009712:	2301      	movs	r3, #1
 8009714:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800971e:	2b00      	cmp	r3, #0
 8009720:	d030      	beq.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009726:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800972a:	d017      	beq.n	800975c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800972c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009730:	d811      	bhi.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8009732:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009736:	d013      	beq.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8009738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800973c:	d80b      	bhi.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800973e:	2b00      	cmp	r3, #0
 8009740:	d010      	beq.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8009742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009746:	d106      	bne.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009748:	4b3b      	ldr	r3, [pc, #236]	; (8009838 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800974a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800974c:	4a3a      	ldr	r2, [pc, #232]	; (8009838 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800974e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009752:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009754:	e007      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	75fb      	strb	r3, [r7, #23]
      break;
 800975a:	e004      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800975c:	bf00      	nop
 800975e:	e002      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8009760:	bf00      	nop
 8009762:	e000      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8009764:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009766:	7dfb      	ldrb	r3, [r7, #23]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d109      	bne.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800976c:	4b32      	ldr	r3, [pc, #200]	; (8009838 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800976e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009770:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009778:	492f      	ldr	r1, [pc, #188]	; (8009838 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800977a:	4313      	orrs	r3, r2
 800977c:	654b      	str	r3, [r1, #84]	; 0x54
 800977e:	e001      	b.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009780:	7dfb      	ldrb	r3, [r7, #23]
 8009782:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800978c:	2b00      	cmp	r3, #0
 800978e:	d008      	beq.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009790:	4b29      	ldr	r3, [pc, #164]	; (8009838 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009794:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800979c:	4926      	ldr	r1, [pc, #152]	; (8009838 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800979e:	4313      	orrs	r3, r2
 80097a0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d008      	beq.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80097ae:	4b22      	ldr	r3, [pc, #136]	; (8009838 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80097b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097b2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097ba:	491f      	ldr	r1, [pc, #124]	; (8009838 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80097bc:	4313      	orrs	r3, r2
 80097be:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00d      	beq.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80097cc:	4b1a      	ldr	r3, [pc, #104]	; (8009838 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	4a19      	ldr	r2, [pc, #100]	; (8009838 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80097d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80097d6:	6113      	str	r3, [r2, #16]
 80097d8:	4b17      	ldr	r3, [pc, #92]	; (8009838 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80097da:	691a      	ldr	r2, [r3, #16]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80097e2:	4915      	ldr	r1, [pc, #84]	; (8009838 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80097e4:	4313      	orrs	r3, r2
 80097e6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	da08      	bge.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80097f0:	4b11      	ldr	r3, [pc, #68]	; (8009838 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80097f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097fc:	490e      	ldr	r1, [pc, #56]	; (8009838 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80097fe:	4313      	orrs	r3, r2
 8009800:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800980a:	2b00      	cmp	r3, #0
 800980c:	d009      	beq.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800980e:	4b0a      	ldr	r3, [pc, #40]	; (8009838 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009812:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800981c:	4906      	ldr	r1, [pc, #24]	; (8009838 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800981e:	4313      	orrs	r3, r2
 8009820:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009822:	7dbb      	ldrb	r3, [r7, #22]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d101      	bne.n	800982c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8009828:	2300      	movs	r3, #0
 800982a:	e000      	b.n	800982e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800982c:	2301      	movs	r3, #1
}
 800982e:	4618      	mov	r0, r3
 8009830:	3718      	adds	r7, #24
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	58024400 	.word	0x58024400

0800983c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b090      	sub	sp, #64	; 0x40
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800984a:	f040 8089 	bne.w	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800984e:	4b95      	ldr	r3, [pc, #596]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009852:	f003 0307 	and.w	r3, r3, #7
 8009856:	633b      	str	r3, [r7, #48]	; 0x30
 8009858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800985a:	2b04      	cmp	r3, #4
 800985c:	d87d      	bhi.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800985e:	a201      	add	r2, pc, #4	; (adr r2, 8009864 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8009860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009864:	08009879 	.word	0x08009879
 8009868:	0800989d 	.word	0x0800989d
 800986c:	080098c1 	.word	0x080098c1
 8009870:	08009955 	.word	0x08009955
 8009874:	080098e5 	.word	0x080098e5

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009878:	4b8a      	ldr	r3, [pc, #552]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009880:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009884:	d107      	bne.n	8009896 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800988a:	4618      	mov	r0, r3
 800988c:	f000 feb8 	bl	800a600 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8009890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009892:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009894:	e3ed      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009896:	2300      	movs	r3, #0
 8009898:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800989a:	e3ea      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800989c:	4b81      	ldr	r3, [pc, #516]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80098a8:	d107      	bne.n	80098ba <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098aa:	f107 0318 	add.w	r3, r7, #24
 80098ae:	4618      	mov	r0, r3
 80098b0:	f000 fbfe 	bl	800a0b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80098b4:	69bb      	ldr	r3, [r7, #24]
 80098b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80098b8:	e3db      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80098ba:	2300      	movs	r3, #0
 80098bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098be:	e3d8      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80098c0:	4b78      	ldr	r3, [pc, #480]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098cc:	d107      	bne.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098ce:	f107 030c 	add.w	r3, r7, #12
 80098d2:	4618      	mov	r0, r3
 80098d4:	f000 fd40 	bl	800a358 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80098dc:	e3c9      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80098de:	2300      	movs	r3, #0
 80098e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098e2:	e3c6      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80098e4:	4b6f      	ldr	r3, [pc, #444]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80098e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80098ec:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80098ee:	4b6d      	ldr	r3, [pc, #436]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f003 0304 	and.w	r3, r3, #4
 80098f6:	2b04      	cmp	r3, #4
 80098f8:	d10c      	bne.n	8009914 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80098fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d109      	bne.n	8009914 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009900:	4b68      	ldr	r3, [pc, #416]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	08db      	lsrs	r3, r3, #3
 8009906:	f003 0303 	and.w	r3, r3, #3
 800990a:	4a67      	ldr	r2, [pc, #412]	; (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800990c:	fa22 f303 	lsr.w	r3, r2, r3
 8009910:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009912:	e01e      	b.n	8009952 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009914:	4b63      	ldr	r3, [pc, #396]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800991c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009920:	d106      	bne.n	8009930 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009924:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009928:	d102      	bne.n	8009930 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800992a:	4b60      	ldr	r3, [pc, #384]	; (8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800992c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800992e:	e010      	b.n	8009952 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009930:	4b5c      	ldr	r3, [pc, #368]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009938:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800993c:	d106      	bne.n	800994c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800993e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009940:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009944:	d102      	bne.n	800994c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009946:	4b5a      	ldr	r3, [pc, #360]	; (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009948:	63fb      	str	r3, [r7, #60]	; 0x3c
 800994a:	e002      	b.n	8009952 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800994c:	2300      	movs	r3, #0
 800994e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009950:	e38f      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009952:	e38e      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009954:	4b57      	ldr	r3, [pc, #348]	; (8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009956:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009958:	e38b      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800995a:	2300      	movs	r3, #0
 800995c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800995e:	e388      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009966:	f040 80a7 	bne.w	8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800996a:	4b4e      	ldr	r3, [pc, #312]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800996c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800996e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009972:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009976:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800997a:	d054      	beq.n	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800997c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800997e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009982:	f200 808b 	bhi.w	8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8009986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009988:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800998c:	f000 8083 	beq.w	8009a96 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009992:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009996:	f200 8081 	bhi.w	8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800999a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800999c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80099a0:	d02f      	beq.n	8009a02 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 80099a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80099a8:	d878      	bhi.n	8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80099aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d004      	beq.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 80099b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80099b6:	d012      	beq.n	80099de <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80099b8:	e070      	b.n	8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80099ba:	4b3a      	ldr	r3, [pc, #232]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099c6:	d107      	bne.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80099c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099cc:	4618      	mov	r0, r3
 80099ce:	f000 fe17 	bl	800a600 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80099d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80099d6:	e34c      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80099d8:	2300      	movs	r3, #0
 80099da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099dc:	e349      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099de:	4b31      	ldr	r3, [pc, #196]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80099ea:	d107      	bne.n	80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099ec:	f107 0318 	add.w	r3, r7, #24
 80099f0:	4618      	mov	r0, r3
 80099f2:	f000 fb5d 	bl	800a0b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80099f6:	69bb      	ldr	r3, [r7, #24]
 80099f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80099fa:	e33a      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80099fc:	2300      	movs	r3, #0
 80099fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a00:	e337      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009a02:	4b28      	ldr	r3, [pc, #160]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a0e:	d107      	bne.n	8009a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a10:	f107 030c 	add.w	r3, r7, #12
 8009a14:	4618      	mov	r0, r3
 8009a16:	f000 fc9f 	bl	800a358 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009a1e:	e328      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009a20:	2300      	movs	r3, #0
 8009a22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a24:	e325      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009a26:	4b1f      	ldr	r3, [pc, #124]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009a2e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a30:	4b1c      	ldr	r3, [pc, #112]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f003 0304 	and.w	r3, r3, #4
 8009a38:	2b04      	cmp	r3, #4
 8009a3a:	d10c      	bne.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8009a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d109      	bne.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a42:	4b18      	ldr	r3, [pc, #96]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	08db      	lsrs	r3, r3, #3
 8009a48:	f003 0303 	and.w	r3, r3, #3
 8009a4c:	4a16      	ldr	r2, [pc, #88]	; (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8009a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a54:	e01e      	b.n	8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a56:	4b13      	ldr	r3, [pc, #76]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a62:	d106      	bne.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8009a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a6a:	d102      	bne.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009a6c:	4b0f      	ldr	r3, [pc, #60]	; (8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a70:	e010      	b.n	8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a72:	4b0c      	ldr	r3, [pc, #48]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a7e:	d106      	bne.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8009a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a86:	d102      	bne.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009a88:	4b09      	ldr	r3, [pc, #36]	; (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a8c:	e002      	b.n	8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009a92:	e2ee      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009a94:	e2ed      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009a96:	4b07      	ldr	r3, [pc, #28]	; (8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009a98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a9a:	e2ea      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009aa0:	e2e7      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009aa2:	bf00      	nop
 8009aa4:	58024400 	.word	0x58024400
 8009aa8:	03d09000 	.word	0x03d09000
 8009aac:	003d0900 	.word	0x003d0900
 8009ab0:	007a1200 	.word	0x007a1200
 8009ab4:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009abe:	f040 809c 	bne.w	8009bfa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009ac2:	4b9e      	ldr	r3, [pc, #632]	; (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ac6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009aca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ace:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009ad2:	d054      	beq.n	8009b7e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8009ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009ada:	f200 808b 	bhi.w	8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8009ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009ae4:	f000 8083 	beq.w	8009bee <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009aee:	f200 8081 	bhi.w	8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8009af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009af8:	d02f      	beq.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8009afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009afc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b00:	d878      	bhi.n	8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8009b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d004      	beq.n	8009b12 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8009b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b0e:	d012      	beq.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8009b10:	e070      	b.n	8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009b12:	4b8a      	ldr	r3, [pc, #552]	; (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b1e:	d107      	bne.n	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b24:	4618      	mov	r0, r3
 8009b26:	f000 fd6b 	bl	800a600 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009b2e:	e2a0      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009b30:	2300      	movs	r3, #0
 8009b32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b34:	e29d      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b36:	4b81      	ldr	r3, [pc, #516]	; (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b42:	d107      	bne.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b44:	f107 0318 	add.w	r3, r7, #24
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f000 fab1 	bl	800a0b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009b4e:	69bb      	ldr	r3, [r7, #24]
 8009b50:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8009b52:	e28e      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009b54:	2300      	movs	r3, #0
 8009b56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b58:	e28b      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b5a:	4b78      	ldr	r3, [pc, #480]	; (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b66:	d107      	bne.n	8009b78 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b68:	f107 030c 	add.w	r3, r7, #12
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f000 fbf3 	bl	800a358 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009b76:	e27c      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b7c:	e279      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009b7e:	4b6f      	ldr	r3, [pc, #444]	; (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009b86:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b88:	4b6c      	ldr	r3, [pc, #432]	; (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f003 0304 	and.w	r3, r3, #4
 8009b90:	2b04      	cmp	r3, #4
 8009b92:	d10c      	bne.n	8009bae <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d109      	bne.n	8009bae <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b9a:	4b68      	ldr	r3, [pc, #416]	; (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	08db      	lsrs	r3, r3, #3
 8009ba0:	f003 0303 	and.w	r3, r3, #3
 8009ba4:	4a66      	ldr	r2, [pc, #408]	; (8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8009baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bac:	e01e      	b.n	8009bec <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009bae:	4b63      	ldr	r3, [pc, #396]	; (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bba:	d106      	bne.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8009bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009bc2:	d102      	bne.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009bc4:	4b5f      	ldr	r3, [pc, #380]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8009bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bc8:	e010      	b.n	8009bec <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009bca:	4b5c      	ldr	r3, [pc, #368]	; (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bd6:	d106      	bne.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8009bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bde:	d102      	bne.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009be0:	4b59      	ldr	r3, [pc, #356]	; (8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8009be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009be4:	e002      	b.n	8009bec <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009be6:	2300      	movs	r3, #0
 8009be8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009bea:	e242      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009bec:	e241      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009bee:	4b57      	ldr	r3, [pc, #348]	; (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8009bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009bf2:	e23e      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009bf8:	e23b      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c00:	f040 80a6 	bne.w	8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009c04:	4b4d      	ldr	r3, [pc, #308]	; (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c08:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009c0c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c14:	d054      	beq.n	8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8009c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c1c:	f200 808b 	bhi.w	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c26:	f000 8083 	beq.w	8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8009c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c30:	f200 8081 	bhi.w	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c3a:	d02f      	beq.n	8009c9c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8009c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c42:	d878      	bhi.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d004      	beq.n	8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8009c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c50:	d012      	beq.n	8009c78 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8009c52:	e070      	b.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c54:	4b39      	ldr	r3, [pc, #228]	; (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c60:	d107      	bne.n	8009c72 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c66:	4618      	mov	r0, r3
 8009c68:	f000 fcca 	bl	800a600 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009c70:	e1ff      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009c72:	2300      	movs	r3, #0
 8009c74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c76:	e1fc      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c78:	4b30      	ldr	r3, [pc, #192]	; (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c84:	d107      	bne.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c86:	f107 0318 	add.w	r3, r7, #24
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f000 fa10 	bl	800a0b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009c94:	e1ed      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009c96:	2300      	movs	r3, #0
 8009c98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c9a:	e1ea      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009c9c:	4b27      	ldr	r3, [pc, #156]	; (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ca8:	d107      	bne.n	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009caa:	f107 030c 	add.w	r3, r7, #12
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f000 fb52 	bl	800a358 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009cb8:	e1db      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009cbe:	e1d8      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009cc0:	4b1e      	ldr	r3, [pc, #120]	; (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009cc8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009cca:	4b1c      	ldr	r3, [pc, #112]	; (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f003 0304 	and.w	r3, r3, #4
 8009cd2:	2b04      	cmp	r3, #4
 8009cd4:	d10c      	bne.n	8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8009cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d109      	bne.n	8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009cdc:	4b17      	ldr	r3, [pc, #92]	; (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	08db      	lsrs	r3, r3, #3
 8009ce2:	f003 0303 	and.w	r3, r3, #3
 8009ce6:	4a16      	ldr	r2, [pc, #88]	; (8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8009cec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cee:	e01e      	b.n	8009d2e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009cf0:	4b12      	ldr	r3, [pc, #72]	; (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cfc:	d106      	bne.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8009cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d04:	d102      	bne.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009d06:	4b0f      	ldr	r3, [pc, #60]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8009d08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d0a:	e010      	b.n	8009d2e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009d0c:	4b0b      	ldr	r3, [pc, #44]	; (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d18:	d106      	bne.n	8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8009d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d20:	d102      	bne.n	8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009d22:	4b09      	ldr	r3, [pc, #36]	; (8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8009d24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d26:	e002      	b.n	8009d2e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009d2c:	e1a1      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009d2e:	e1a0      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009d30:	4b06      	ldr	r3, [pc, #24]	; (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8009d32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d34:	e19d      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8009d36:	2300      	movs	r3, #0
 8009d38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d3a:	e19a      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009d3c:	58024400 	.word	0x58024400
 8009d40:	03d09000 	.word	0x03d09000
 8009d44:	003d0900 	.word	0x003d0900
 8009d48:	007a1200 	.word	0x007a1200
 8009d4c:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009d56:	d173      	bne.n	8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009d58:	4b9a      	ldr	r3, [pc, #616]	; (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009d60:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d68:	d02f      	beq.n	8009dca <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8009d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d70:	d863      	bhi.n	8009e3a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8009d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d004      	beq.n	8009d82 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8009d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d7e:	d012      	beq.n	8009da6 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8009d80:	e05b      	b.n	8009e3a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d82:	4b90      	ldr	r3, [pc, #576]	; (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d8e:	d107      	bne.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d90:	f107 0318 	add.w	r3, r7, #24
 8009d94:	4618      	mov	r0, r3
 8009d96:	f000 f98b 	bl	800a0b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009d9e:	e168      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009da0:	2300      	movs	r3, #0
 8009da2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009da4:	e165      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009da6:	4b87      	ldr	r3, [pc, #540]	; (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009dae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009db2:	d107      	bne.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009db4:	f107 030c 	add.w	r3, r7, #12
 8009db8:	4618      	mov	r0, r3
 8009dba:	f000 facd 	bl	800a358 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009dc2:	e156      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009dc8:	e153      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009dca:	4b7e      	ldr	r3, [pc, #504]	; (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009dd2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009dd4:	4b7b      	ldr	r3, [pc, #492]	; (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f003 0304 	and.w	r3, r3, #4
 8009ddc:	2b04      	cmp	r3, #4
 8009dde:	d10c      	bne.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8009de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d109      	bne.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009de6:	4b77      	ldr	r3, [pc, #476]	; (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	08db      	lsrs	r3, r3, #3
 8009dec:	f003 0303 	and.w	r3, r3, #3
 8009df0:	4a75      	ldr	r2, [pc, #468]	; (8009fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009df2:	fa22 f303 	lsr.w	r3, r2, r3
 8009df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009df8:	e01e      	b.n	8009e38 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009dfa:	4b72      	ldr	r3, [pc, #456]	; (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e06:	d106      	bne.n	8009e16 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8009e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e0e:	d102      	bne.n	8009e16 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009e10:	4b6e      	ldr	r3, [pc, #440]	; (8009fcc <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8009e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e14:	e010      	b.n	8009e38 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e16:	4b6b      	ldr	r3, [pc, #428]	; (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e22:	d106      	bne.n	8009e32 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8009e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e2a:	d102      	bne.n	8009e32 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009e2c:	4b68      	ldr	r3, [pc, #416]	; (8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8009e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e30:	e002      	b.n	8009e38 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009e32:	2300      	movs	r3, #0
 8009e34:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009e36:	e11c      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009e38:	e11b      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e3e:	e118      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e46:	d133      	bne.n	8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009e48:	4b5e      	ldr	r3, [pc, #376]	; (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e50:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d004      	beq.n	8009e62 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8009e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e5e:	d012      	beq.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8009e60:	e023      	b.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009e62:	4b58      	ldr	r3, [pc, #352]	; (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e6e:	d107      	bne.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e74:	4618      	mov	r0, r3
 8009e76:	f000 fbc3 	bl	800a600 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009e7e:	e0f8      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009e80:	2300      	movs	r3, #0
 8009e82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e84:	e0f5      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e86:	4b4f      	ldr	r3, [pc, #316]	; (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e92:	d107      	bne.n	8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e94:	f107 0318 	add.w	r3, r7, #24
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f000 f909 	bl	800a0b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009e9e:	6a3b      	ldr	r3, [r7, #32]
 8009ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009ea2:	e0e6      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ea8:	e0e3      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009eae:	e0e0      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009eb6:	f040 808d 	bne.w	8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009eba:	4b42      	ldr	r3, [pc, #264]	; (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ebe:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009ec2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009eca:	d06b      	beq.n	8009fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8009ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ece:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ed2:	d874      	bhi.n	8009fbe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8009ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eda:	d056      	beq.n	8009f8a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8009edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ee2:	d86c      	bhi.n	8009fbe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8009ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009eea:	d03b      	beq.n	8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8009eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ef2:	d864      	bhi.n	8009fbe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8009ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009efa:	d021      	beq.n	8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8009efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009efe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f02:	d85c      	bhi.n	8009fbe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8009f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d004      	beq.n	8009f14 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8009f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f10:	d004      	beq.n	8009f1c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8009f12:	e054      	b.n	8009fbe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009f14:	f000 f8b6 	bl	800a084 <HAL_RCCEx_GetD3PCLK1Freq>
 8009f18:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009f1a:	e0aa      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f1c:	4b29      	ldr	r3, [pc, #164]	; (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f28:	d107      	bne.n	8009f3a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f2a:	f107 0318 	add.w	r3, r7, #24
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f000 f8be 	bl	800a0b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009f34:	69fb      	ldr	r3, [r7, #28]
 8009f36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009f38:	e09b      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f3e:	e098      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f40:	4b20      	ldr	r3, [pc, #128]	; (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f4c:	d107      	bne.n	8009f5e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f4e:	f107 030c 	add.w	r3, r7, #12
 8009f52:	4618      	mov	r0, r3
 8009f54:	f000 fa00 	bl	800a358 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009f5c:	e089      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f62:	e086      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009f64:	4b17      	ldr	r3, [pc, #92]	; (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f003 0304 	and.w	r3, r3, #4
 8009f6c:	2b04      	cmp	r3, #4
 8009f6e:	d109      	bne.n	8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f70:	4b14      	ldr	r3, [pc, #80]	; (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	08db      	lsrs	r3, r3, #3
 8009f76:	f003 0303 	and.w	r3, r3, #3
 8009f7a:	4a13      	ldr	r2, [pc, #76]	; (8009fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8009f80:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009f82:	e076      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009f84:	2300      	movs	r3, #0
 8009f86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f88:	e073      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009f8a:	4b0e      	ldr	r3, [pc, #56]	; (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f96:	d102      	bne.n	8009f9e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8009f98:	4b0c      	ldr	r3, [pc, #48]	; (8009fcc <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8009f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009f9c:	e069      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009fa2:	e066      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009fa4:	4b07      	ldr	r3, [pc, #28]	; (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fb0:	d102      	bne.n	8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8009fb2:	4b07      	ldr	r3, [pc, #28]	; (8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8009fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009fb6:	e05c      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009fbc:	e059      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009fc2:	e056      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009fc4:	58024400 	.word	0x58024400
 8009fc8:	03d09000 	.word	0x03d09000
 8009fcc:	003d0900 	.word	0x003d0900
 8009fd0:	007a1200 	.word	0x007a1200
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fda:	d148      	bne.n	800a06e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009fdc:	4b27      	ldr	r3, [pc, #156]	; (800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fe0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009fe4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fec:	d02a      	beq.n	800a044 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8009fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ff4:	d838      	bhi.n	800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8009ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d004      	beq.n	800a006 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8009ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a002:	d00d      	beq.n	800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 800a004:	e030      	b.n	800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a006:	4b1d      	ldr	r3, [pc, #116]	; (800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a00e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a012:	d102      	bne.n	800a01a <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 800a014:	4b1a      	ldr	r3, [pc, #104]	; (800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800a016:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a018:	e02b      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a01a:	2300      	movs	r3, #0
 800a01c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a01e:	e028      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a020:	4b16      	ldr	r3, [pc, #88]	; (800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a028:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a02c:	d107      	bne.n	800a03e <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a02e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a032:	4618      	mov	r0, r3
 800a034:	f000 fae4 	bl	800a600 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a03a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a03c:	e019      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a03e:	2300      	movs	r3, #0
 800a040:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a042:	e016      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a044:	4b0d      	ldr	r3, [pc, #52]	; (800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a04c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a050:	d107      	bne.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a052:	f107 0318 	add.w	r3, r7, #24
 800a056:	4618      	mov	r0, r3
 800a058:	f000 f82a 	bl	800a0b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a05c:	69fb      	ldr	r3, [r7, #28]
 800a05e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a060:	e007      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a062:	2300      	movs	r3, #0
 800a064:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a066:	e004      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800a068:	2300      	movs	r3, #0
 800a06a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a06c:	e001      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800a06e:	2300      	movs	r3, #0
 800a070:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800a072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a074:	4618      	mov	r0, r3
 800a076:	3740      	adds	r7, #64	; 0x40
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	58024400 	.word	0x58024400
 800a080:	007a1200 	.word	0x007a1200

0800a084 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a088:	f7fe fc82 	bl	8008990 <HAL_RCC_GetHCLKFreq>
 800a08c:	4602      	mov	r2, r0
 800a08e:	4b06      	ldr	r3, [pc, #24]	; (800a0a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a090:	6a1b      	ldr	r3, [r3, #32]
 800a092:	091b      	lsrs	r3, r3, #4
 800a094:	f003 0307 	and.w	r3, r3, #7
 800a098:	4904      	ldr	r1, [pc, #16]	; (800a0ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a09a:	5ccb      	ldrb	r3, [r1, r3]
 800a09c:	f003 031f 	and.w	r3, r3, #31
 800a0a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	bd80      	pop	{r7, pc}
 800a0a8:	58024400 	.word	0x58024400
 800a0ac:	0800fb0c 	.word	0x0800fb0c

0800a0b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b089      	sub	sp, #36	; 0x24
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a0b8:	4ba1      	ldr	r3, [pc, #644]	; (800a340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0bc:	f003 0303 	and.w	r3, r3, #3
 800a0c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a0c2:	4b9f      	ldr	r3, [pc, #636]	; (800a340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0c6:	0b1b      	lsrs	r3, r3, #12
 800a0c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a0ce:	4b9c      	ldr	r3, [pc, #624]	; (800a340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d2:	091b      	lsrs	r3, r3, #4
 800a0d4:	f003 0301 	and.w	r3, r3, #1
 800a0d8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a0da:	4b99      	ldr	r3, [pc, #612]	; (800a340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0de:	08db      	lsrs	r3, r3, #3
 800a0e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a0e4:	693a      	ldr	r2, [r7, #16]
 800a0e6:	fb02 f303 	mul.w	r3, r2, r3
 800a0ea:	ee07 3a90 	vmov	s15, r3
 800a0ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	f000 8111 	beq.w	800a320 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a0fe:	69bb      	ldr	r3, [r7, #24]
 800a100:	2b02      	cmp	r3, #2
 800a102:	f000 8083 	beq.w	800a20c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	2b02      	cmp	r3, #2
 800a10a:	f200 80a1 	bhi.w	800a250 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d003      	beq.n	800a11c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a114:	69bb      	ldr	r3, [r7, #24]
 800a116:	2b01      	cmp	r3, #1
 800a118:	d056      	beq.n	800a1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a11a:	e099      	b.n	800a250 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a11c:	4b88      	ldr	r3, [pc, #544]	; (800a340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f003 0320 	and.w	r3, r3, #32
 800a124:	2b00      	cmp	r3, #0
 800a126:	d02d      	beq.n	800a184 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a128:	4b85      	ldr	r3, [pc, #532]	; (800a340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	08db      	lsrs	r3, r3, #3
 800a12e:	f003 0303 	and.w	r3, r3, #3
 800a132:	4a84      	ldr	r2, [pc, #528]	; (800a344 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a134:	fa22 f303 	lsr.w	r3, r2, r3
 800a138:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	ee07 3a90 	vmov	s15, r3
 800a140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	ee07 3a90 	vmov	s15, r3
 800a14a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a14e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a152:	4b7b      	ldr	r3, [pc, #492]	; (800a340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a15a:	ee07 3a90 	vmov	s15, r3
 800a15e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a162:	ed97 6a03 	vldr	s12, [r7, #12]
 800a166:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a348 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a16a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a16e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a17a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a17e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a182:	e087      	b.n	800a294 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	ee07 3a90 	vmov	s15, r3
 800a18a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a18e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a34c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a196:	4b6a      	ldr	r3, [pc, #424]	; (800a340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a19a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a19e:	ee07 3a90 	vmov	s15, r3
 800a1a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a348 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a1ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1c6:	e065      	b.n	800a294 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	ee07 3a90 	vmov	s15, r3
 800a1ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a1d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1da:	4b59      	ldr	r3, [pc, #356]	; (800a340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1e2:	ee07 3a90 	vmov	s15, r3
 800a1e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a348 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a1f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a202:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a206:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a20a:	e043      	b.n	800a294 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	ee07 3a90 	vmov	s15, r3
 800a212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a216:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a354 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a21a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a21e:	4b48      	ldr	r3, [pc, #288]	; (800a340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a226:	ee07 3a90 	vmov	s15, r3
 800a22a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a22e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a232:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a348 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a23a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a23e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a24a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a24e:	e021      	b.n	800a294 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	ee07 3a90 	vmov	s15, r3
 800a256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a25a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a25e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a262:	4b37      	ldr	r3, [pc, #220]	; (800a340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a26a:	ee07 3a90 	vmov	s15, r3
 800a26e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a272:	ed97 6a03 	vldr	s12, [r7, #12]
 800a276:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a348 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a27a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a27e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a28a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a28e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a292:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a294:	4b2a      	ldr	r3, [pc, #168]	; (800a340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a298:	0a5b      	lsrs	r3, r3, #9
 800a29a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a29e:	ee07 3a90 	vmov	s15, r3
 800a2a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a2aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2ba:	ee17 2a90 	vmov	r2, s15
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a2c2:	4b1f      	ldr	r3, [pc, #124]	; (800a340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2c6:	0c1b      	lsrs	r3, r3, #16
 800a2c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2cc:	ee07 3a90 	vmov	s15, r3
 800a2d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a2d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2dc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2e8:	ee17 2a90 	vmov	r2, s15
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a2f0:	4b13      	ldr	r3, [pc, #76]	; (800a340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2f4:	0e1b      	lsrs	r3, r3, #24
 800a2f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2fa:	ee07 3a90 	vmov	s15, r3
 800a2fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a302:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a306:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a30a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a30e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a316:	ee17 2a90 	vmov	r2, s15
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a31e:	e008      	b.n	800a332 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2200      	movs	r2, #0
 800a324:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2200      	movs	r2, #0
 800a32a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	609a      	str	r2, [r3, #8]
}
 800a332:	bf00      	nop
 800a334:	3724      	adds	r7, #36	; 0x24
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr
 800a33e:	bf00      	nop
 800a340:	58024400 	.word	0x58024400
 800a344:	03d09000 	.word	0x03d09000
 800a348:	46000000 	.word	0x46000000
 800a34c:	4c742400 	.word	0x4c742400
 800a350:	4a742400 	.word	0x4a742400
 800a354:	4af42400 	.word	0x4af42400

0800a358 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a358:	b480      	push	{r7}
 800a35a:	b089      	sub	sp, #36	; 0x24
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a360:	4ba1      	ldr	r3, [pc, #644]	; (800a5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a364:	f003 0303 	and.w	r3, r3, #3
 800a368:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a36a:	4b9f      	ldr	r3, [pc, #636]	; (800a5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a36c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a36e:	0d1b      	lsrs	r3, r3, #20
 800a370:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a374:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a376:	4b9c      	ldr	r3, [pc, #624]	; (800a5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37a:	0a1b      	lsrs	r3, r3, #8
 800a37c:	f003 0301 	and.w	r3, r3, #1
 800a380:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a382:	4b99      	ldr	r3, [pc, #612]	; (800a5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a386:	08db      	lsrs	r3, r3, #3
 800a388:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a38c:	693a      	ldr	r2, [r7, #16]
 800a38e:	fb02 f303 	mul.w	r3, r2, r3
 800a392:	ee07 3a90 	vmov	s15, r3
 800a396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a39a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	f000 8111 	beq.w	800a5c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a3a6:	69bb      	ldr	r3, [r7, #24]
 800a3a8:	2b02      	cmp	r3, #2
 800a3aa:	f000 8083 	beq.w	800a4b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a3ae:	69bb      	ldr	r3, [r7, #24]
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	f200 80a1 	bhi.w	800a4f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a3b6:	69bb      	ldr	r3, [r7, #24]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d003      	beq.n	800a3c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d056      	beq.n	800a470 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a3c2:	e099      	b.n	800a4f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3c4:	4b88      	ldr	r3, [pc, #544]	; (800a5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f003 0320 	and.w	r3, r3, #32
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d02d      	beq.n	800a42c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a3d0:	4b85      	ldr	r3, [pc, #532]	; (800a5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	08db      	lsrs	r3, r3, #3
 800a3d6:	f003 0303 	and.w	r3, r3, #3
 800a3da:	4a84      	ldr	r2, [pc, #528]	; (800a5ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a3dc:	fa22 f303 	lsr.w	r3, r2, r3
 800a3e0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	ee07 3a90 	vmov	s15, r3
 800a3e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	ee07 3a90 	vmov	s15, r3
 800a3f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3fa:	4b7b      	ldr	r3, [pc, #492]	; (800a5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a402:	ee07 3a90 	vmov	s15, r3
 800a406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a40a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a40e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a5f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a41a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a41e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a422:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a426:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a42a:	e087      	b.n	800a53c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	ee07 3a90 	vmov	s15, r3
 800a432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a436:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a5f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a43a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a43e:	4b6a      	ldr	r3, [pc, #424]	; (800a5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a446:	ee07 3a90 	vmov	s15, r3
 800a44a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a44e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a452:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a5f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a45a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a45e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a46a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a46e:	e065      	b.n	800a53c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	ee07 3a90 	vmov	s15, r3
 800a476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a47a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a47e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a482:	4b59      	ldr	r3, [pc, #356]	; (800a5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a48a:	ee07 3a90 	vmov	s15, r3
 800a48e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a492:	ed97 6a03 	vldr	s12, [r7, #12]
 800a496:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a5f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a49a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a49e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a4b2:	e043      	b.n	800a53c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	ee07 3a90 	vmov	s15, r3
 800a4ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a5fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a4c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4c6:	4b48      	ldr	r3, [pc, #288]	; (800a5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4ce:	ee07 3a90 	vmov	s15, r3
 800a4d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4da:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a5f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a4de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a4f6:	e021      	b.n	800a53c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	ee07 3a90 	vmov	s15, r3
 800a4fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a502:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a50a:	4b37      	ldr	r3, [pc, #220]	; (800a5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a50c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a50e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a512:	ee07 3a90 	vmov	s15, r3
 800a516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a51a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a51e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a5f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a52a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a52e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a532:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a536:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a53a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a53c:	4b2a      	ldr	r3, [pc, #168]	; (800a5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a53e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a540:	0a5b      	lsrs	r3, r3, #9
 800a542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a546:	ee07 3a90 	vmov	s15, r3
 800a54a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a54e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a552:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a556:	edd7 6a07 	vldr	s13, [r7, #28]
 800a55a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a55e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a562:	ee17 2a90 	vmov	r2, s15
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a56a:	4b1f      	ldr	r3, [pc, #124]	; (800a5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a56c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a56e:	0c1b      	lsrs	r3, r3, #16
 800a570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a574:	ee07 3a90 	vmov	s15, r3
 800a578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a57c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a580:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a584:	edd7 6a07 	vldr	s13, [r7, #28]
 800a588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a58c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a590:	ee17 2a90 	vmov	r2, s15
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a598:	4b13      	ldr	r3, [pc, #76]	; (800a5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a59a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a59c:	0e1b      	lsrs	r3, r3, #24
 800a59e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5a2:	ee07 3a90 	vmov	s15, r3
 800a5a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a5ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a5b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a5b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5be:	ee17 2a90 	vmov	r2, s15
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a5c6:	e008      	b.n	800a5da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	609a      	str	r2, [r3, #8]
}
 800a5da:	bf00      	nop
 800a5dc:	3724      	adds	r7, #36	; 0x24
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr
 800a5e6:	bf00      	nop
 800a5e8:	58024400 	.word	0x58024400
 800a5ec:	03d09000 	.word	0x03d09000
 800a5f0:	46000000 	.word	0x46000000
 800a5f4:	4c742400 	.word	0x4c742400
 800a5f8:	4a742400 	.word	0x4a742400
 800a5fc:	4af42400 	.word	0x4af42400

0800a600 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800a600:	b480      	push	{r7}
 800a602:	b089      	sub	sp, #36	; 0x24
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a608:	4ba0      	ldr	r3, [pc, #640]	; (800a88c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a60a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a60c:	f003 0303 	and.w	r3, r3, #3
 800a610:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a612:	4b9e      	ldr	r3, [pc, #632]	; (800a88c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a616:	091b      	lsrs	r3, r3, #4
 800a618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a61c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a61e:	4b9b      	ldr	r3, [pc, #620]	; (800a88c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a622:	f003 0301 	and.w	r3, r3, #1
 800a626:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a628:	4b98      	ldr	r3, [pc, #608]	; (800a88c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a62a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a62c:	08db      	lsrs	r3, r3, #3
 800a62e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a632:	693a      	ldr	r2, [r7, #16]
 800a634:	fb02 f303 	mul.w	r3, r2, r3
 800a638:	ee07 3a90 	vmov	s15, r3
 800a63c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a640:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	2b00      	cmp	r3, #0
 800a648:	f000 8111 	beq.w	800a86e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a64c:	69bb      	ldr	r3, [r7, #24]
 800a64e:	2b02      	cmp	r3, #2
 800a650:	f000 8083 	beq.w	800a75a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	2b02      	cmp	r3, #2
 800a658:	f200 80a1 	bhi.w	800a79e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a65c:	69bb      	ldr	r3, [r7, #24]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d003      	beq.n	800a66a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a662:	69bb      	ldr	r3, [r7, #24]
 800a664:	2b01      	cmp	r3, #1
 800a666:	d056      	beq.n	800a716 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a668:	e099      	b.n	800a79e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a66a:	4b88      	ldr	r3, [pc, #544]	; (800a88c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f003 0320 	and.w	r3, r3, #32
 800a672:	2b00      	cmp	r3, #0
 800a674:	d02d      	beq.n	800a6d2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a676:	4b85      	ldr	r3, [pc, #532]	; (800a88c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	08db      	lsrs	r3, r3, #3
 800a67c:	f003 0303 	and.w	r3, r3, #3
 800a680:	4a83      	ldr	r2, [pc, #524]	; (800a890 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a682:	fa22 f303 	lsr.w	r3, r2, r3
 800a686:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	ee07 3a90 	vmov	s15, r3
 800a68e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	ee07 3a90 	vmov	s15, r3
 800a698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a69c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6a0:	4b7a      	ldr	r3, [pc, #488]	; (800a88c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6a8:	ee07 3a90 	vmov	s15, r3
 800a6ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6b4:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a894 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a6b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6cc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a6d0:	e087      	b.n	800a7e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	ee07 3a90 	vmov	s15, r3
 800a6d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6dc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a898 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a6e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6e4:	4b69      	ldr	r3, [pc, #420]	; (800a88c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6ec:	ee07 3a90 	vmov	s15, r3
 800a6f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6f8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a894 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a6fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a700:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a704:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a708:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a70c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a710:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a714:	e065      	b.n	800a7e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	ee07 3a90 	vmov	s15, r3
 800a71c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a720:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a89c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a724:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a728:	4b58      	ldr	r3, [pc, #352]	; (800a88c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a72a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a72c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a730:	ee07 3a90 	vmov	s15, r3
 800a734:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a738:	ed97 6a03 	vldr	s12, [r7, #12]
 800a73c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a894 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a740:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a744:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a748:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a74c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a750:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a754:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a758:	e043      	b.n	800a7e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	ee07 3a90 	vmov	s15, r3
 800a760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a764:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a768:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a76c:	4b47      	ldr	r3, [pc, #284]	; (800a88c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a76e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a774:	ee07 3a90 	vmov	s15, r3
 800a778:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a77c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a780:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a894 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a784:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a788:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a78c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a790:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a794:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a798:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a79c:	e021      	b.n	800a7e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	ee07 3a90 	vmov	s15, r3
 800a7a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7a8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a898 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a7ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7b0:	4b36      	ldr	r3, [pc, #216]	; (800a88c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7b8:	ee07 3a90 	vmov	s15, r3
 800a7bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7c0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7c4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a894 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a7c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a7e0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a7e2:	4b2a      	ldr	r3, [pc, #168]	; (800a88c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7e6:	0a5b      	lsrs	r3, r3, #9
 800a7e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7ec:	ee07 3a90 	vmov	s15, r3
 800a7f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a7f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a7fc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a800:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a804:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a808:	ee17 2a90 	vmov	r2, s15
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a810:	4b1e      	ldr	r3, [pc, #120]	; (800a88c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a814:	0c1b      	lsrs	r3, r3, #16
 800a816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a81a:	ee07 3a90 	vmov	s15, r3
 800a81e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a822:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a826:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a82a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a82e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a836:	ee17 2a90 	vmov	r2, s15
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a83e:	4b13      	ldr	r3, [pc, #76]	; (800a88c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a842:	0e1b      	lsrs	r3, r3, #24
 800a844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a848:	ee07 3a90 	vmov	s15, r3
 800a84c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a850:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a854:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a858:	edd7 6a07 	vldr	s13, [r7, #28]
 800a85c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a864:	ee17 2a90 	vmov	r2, s15
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a86c:	e008      	b.n	800a880 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2200      	movs	r2, #0
 800a872:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2200      	movs	r2, #0
 800a878:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2200      	movs	r2, #0
 800a87e:	609a      	str	r2, [r3, #8]
}
 800a880:	bf00      	nop
 800a882:	3724      	adds	r7, #36	; 0x24
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr
 800a88c:	58024400 	.word	0x58024400
 800a890:	03d09000 	.word	0x03d09000
 800a894:	46000000 	.word	0x46000000
 800a898:	4c742400 	.word	0x4c742400
 800a89c:	4a742400 	.word	0x4a742400
 800a8a0:	4af42400 	.word	0x4af42400

0800a8a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a8b2:	4b53      	ldr	r3, [pc, #332]	; (800aa00 <RCCEx_PLL2_Config+0x15c>)
 800a8b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8b6:	f003 0303 	and.w	r3, r3, #3
 800a8ba:	2b03      	cmp	r3, #3
 800a8bc:	d101      	bne.n	800a8c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e099      	b.n	800a9f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a8c2:	4b4f      	ldr	r3, [pc, #316]	; (800aa00 <RCCEx_PLL2_Config+0x15c>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	4a4e      	ldr	r2, [pc, #312]	; (800aa00 <RCCEx_PLL2_Config+0x15c>)
 800a8c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a8cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a8ce:	f7f6 fd93 	bl	80013f8 <HAL_GetTick>
 800a8d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a8d4:	e008      	b.n	800a8e8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a8d6:	f7f6 fd8f 	bl	80013f8 <HAL_GetTick>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	1ad3      	subs	r3, r2, r3
 800a8e0:	2b02      	cmp	r3, #2
 800a8e2:	d901      	bls.n	800a8e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a8e4:	2303      	movs	r3, #3
 800a8e6:	e086      	b.n	800a9f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a8e8:	4b45      	ldr	r3, [pc, #276]	; (800aa00 <RCCEx_PLL2_Config+0x15c>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d1f0      	bne.n	800a8d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a8f4:	4b42      	ldr	r3, [pc, #264]	; (800aa00 <RCCEx_PLL2_Config+0x15c>)
 800a8f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	031b      	lsls	r3, r3, #12
 800a902:	493f      	ldr	r1, [pc, #252]	; (800aa00 <RCCEx_PLL2_Config+0x15c>)
 800a904:	4313      	orrs	r3, r2
 800a906:	628b      	str	r3, [r1, #40]	; 0x28
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	3b01      	subs	r3, #1
 800a90e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	3b01      	subs	r3, #1
 800a918:	025b      	lsls	r3, r3, #9
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	431a      	orrs	r2, r3
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	68db      	ldr	r3, [r3, #12]
 800a922:	3b01      	subs	r3, #1
 800a924:	041b      	lsls	r3, r3, #16
 800a926:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a92a:	431a      	orrs	r2, r3
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	691b      	ldr	r3, [r3, #16]
 800a930:	3b01      	subs	r3, #1
 800a932:	061b      	lsls	r3, r3, #24
 800a934:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a938:	4931      	ldr	r1, [pc, #196]	; (800aa00 <RCCEx_PLL2_Config+0x15c>)
 800a93a:	4313      	orrs	r3, r2
 800a93c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a93e:	4b30      	ldr	r3, [pc, #192]	; (800aa00 <RCCEx_PLL2_Config+0x15c>)
 800a940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a942:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	695b      	ldr	r3, [r3, #20]
 800a94a:	492d      	ldr	r1, [pc, #180]	; (800aa00 <RCCEx_PLL2_Config+0x15c>)
 800a94c:	4313      	orrs	r3, r2
 800a94e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a950:	4b2b      	ldr	r3, [pc, #172]	; (800aa00 <RCCEx_PLL2_Config+0x15c>)
 800a952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a954:	f023 0220 	bic.w	r2, r3, #32
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	699b      	ldr	r3, [r3, #24]
 800a95c:	4928      	ldr	r1, [pc, #160]	; (800aa00 <RCCEx_PLL2_Config+0x15c>)
 800a95e:	4313      	orrs	r3, r2
 800a960:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a962:	4b27      	ldr	r3, [pc, #156]	; (800aa00 <RCCEx_PLL2_Config+0x15c>)
 800a964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a966:	4a26      	ldr	r2, [pc, #152]	; (800aa00 <RCCEx_PLL2_Config+0x15c>)
 800a968:	f023 0310 	bic.w	r3, r3, #16
 800a96c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a96e:	4b24      	ldr	r3, [pc, #144]	; (800aa00 <RCCEx_PLL2_Config+0x15c>)
 800a970:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a972:	4b24      	ldr	r3, [pc, #144]	; (800aa04 <RCCEx_PLL2_Config+0x160>)
 800a974:	4013      	ands	r3, r2
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	69d2      	ldr	r2, [r2, #28]
 800a97a:	00d2      	lsls	r2, r2, #3
 800a97c:	4920      	ldr	r1, [pc, #128]	; (800aa00 <RCCEx_PLL2_Config+0x15c>)
 800a97e:	4313      	orrs	r3, r2
 800a980:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a982:	4b1f      	ldr	r3, [pc, #124]	; (800aa00 <RCCEx_PLL2_Config+0x15c>)
 800a984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a986:	4a1e      	ldr	r2, [pc, #120]	; (800aa00 <RCCEx_PLL2_Config+0x15c>)
 800a988:	f043 0310 	orr.w	r3, r3, #16
 800a98c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d106      	bne.n	800a9a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a994:	4b1a      	ldr	r3, [pc, #104]	; (800aa00 <RCCEx_PLL2_Config+0x15c>)
 800a996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a998:	4a19      	ldr	r2, [pc, #100]	; (800aa00 <RCCEx_PLL2_Config+0x15c>)
 800a99a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a99e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a9a0:	e00f      	b.n	800a9c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	d106      	bne.n	800a9b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a9a8:	4b15      	ldr	r3, [pc, #84]	; (800aa00 <RCCEx_PLL2_Config+0x15c>)
 800a9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ac:	4a14      	ldr	r2, [pc, #80]	; (800aa00 <RCCEx_PLL2_Config+0x15c>)
 800a9ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a9b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a9b4:	e005      	b.n	800a9c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a9b6:	4b12      	ldr	r3, [pc, #72]	; (800aa00 <RCCEx_PLL2_Config+0x15c>)
 800a9b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ba:	4a11      	ldr	r2, [pc, #68]	; (800aa00 <RCCEx_PLL2_Config+0x15c>)
 800a9bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a9c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a9c2:	4b0f      	ldr	r3, [pc, #60]	; (800aa00 <RCCEx_PLL2_Config+0x15c>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4a0e      	ldr	r2, [pc, #56]	; (800aa00 <RCCEx_PLL2_Config+0x15c>)
 800a9c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a9cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9ce:	f7f6 fd13 	bl	80013f8 <HAL_GetTick>
 800a9d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a9d4:	e008      	b.n	800a9e8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a9d6:	f7f6 fd0f 	bl	80013f8 <HAL_GetTick>
 800a9da:	4602      	mov	r2, r0
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	1ad3      	subs	r3, r2, r3
 800a9e0:	2b02      	cmp	r3, #2
 800a9e2:	d901      	bls.n	800a9e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a9e4:	2303      	movs	r3, #3
 800a9e6:	e006      	b.n	800a9f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a9e8:	4b05      	ldr	r3, [pc, #20]	; (800aa00 <RCCEx_PLL2_Config+0x15c>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d0f0      	beq.n	800a9d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a9f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3710      	adds	r7, #16
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	58024400 	.word	0x58024400
 800aa04:	ffff0007 	.word	0xffff0007

0800aa08 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aa12:	2300      	movs	r3, #0
 800aa14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aa16:	4b53      	ldr	r3, [pc, #332]	; (800ab64 <RCCEx_PLL3_Config+0x15c>)
 800aa18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa1a:	f003 0303 	and.w	r3, r3, #3
 800aa1e:	2b03      	cmp	r3, #3
 800aa20:	d101      	bne.n	800aa26 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800aa22:	2301      	movs	r3, #1
 800aa24:	e099      	b.n	800ab5a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800aa26:	4b4f      	ldr	r3, [pc, #316]	; (800ab64 <RCCEx_PLL3_Config+0x15c>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4a4e      	ldr	r2, [pc, #312]	; (800ab64 <RCCEx_PLL3_Config+0x15c>)
 800aa2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa32:	f7f6 fce1 	bl	80013f8 <HAL_GetTick>
 800aa36:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aa38:	e008      	b.n	800aa4c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800aa3a:	f7f6 fcdd 	bl	80013f8 <HAL_GetTick>
 800aa3e:	4602      	mov	r2, r0
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	1ad3      	subs	r3, r2, r3
 800aa44:	2b02      	cmp	r3, #2
 800aa46:	d901      	bls.n	800aa4c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aa48:	2303      	movs	r3, #3
 800aa4a:	e086      	b.n	800ab5a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aa4c:	4b45      	ldr	r3, [pc, #276]	; (800ab64 <RCCEx_PLL3_Config+0x15c>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d1f0      	bne.n	800aa3a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800aa58:	4b42      	ldr	r3, [pc, #264]	; (800ab64 <RCCEx_PLL3_Config+0x15c>)
 800aa5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa5c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	051b      	lsls	r3, r3, #20
 800aa66:	493f      	ldr	r1, [pc, #252]	; (800ab64 <RCCEx_PLL3_Config+0x15c>)
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	628b      	str	r3, [r1, #40]	; 0x28
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	3b01      	subs	r3, #1
 800aa72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	689b      	ldr	r3, [r3, #8]
 800aa7a:	3b01      	subs	r3, #1
 800aa7c:	025b      	lsls	r3, r3, #9
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	431a      	orrs	r2, r3
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	68db      	ldr	r3, [r3, #12]
 800aa86:	3b01      	subs	r3, #1
 800aa88:	041b      	lsls	r3, r3, #16
 800aa8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aa8e:	431a      	orrs	r2, r3
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	691b      	ldr	r3, [r3, #16]
 800aa94:	3b01      	subs	r3, #1
 800aa96:	061b      	lsls	r3, r3, #24
 800aa98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aa9c:	4931      	ldr	r1, [pc, #196]	; (800ab64 <RCCEx_PLL3_Config+0x15c>)
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800aaa2:	4b30      	ldr	r3, [pc, #192]	; (800ab64 <RCCEx_PLL3_Config+0x15c>)
 800aaa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	695b      	ldr	r3, [r3, #20]
 800aaae:	492d      	ldr	r1, [pc, #180]	; (800ab64 <RCCEx_PLL3_Config+0x15c>)
 800aab0:	4313      	orrs	r3, r2
 800aab2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800aab4:	4b2b      	ldr	r3, [pc, #172]	; (800ab64 <RCCEx_PLL3_Config+0x15c>)
 800aab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	699b      	ldr	r3, [r3, #24]
 800aac0:	4928      	ldr	r1, [pc, #160]	; (800ab64 <RCCEx_PLL3_Config+0x15c>)
 800aac2:	4313      	orrs	r3, r2
 800aac4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800aac6:	4b27      	ldr	r3, [pc, #156]	; (800ab64 <RCCEx_PLL3_Config+0x15c>)
 800aac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaca:	4a26      	ldr	r2, [pc, #152]	; (800ab64 <RCCEx_PLL3_Config+0x15c>)
 800aacc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aad0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800aad2:	4b24      	ldr	r3, [pc, #144]	; (800ab64 <RCCEx_PLL3_Config+0x15c>)
 800aad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aad6:	4b24      	ldr	r3, [pc, #144]	; (800ab68 <RCCEx_PLL3_Config+0x160>)
 800aad8:	4013      	ands	r3, r2
 800aada:	687a      	ldr	r2, [r7, #4]
 800aadc:	69d2      	ldr	r2, [r2, #28]
 800aade:	00d2      	lsls	r2, r2, #3
 800aae0:	4920      	ldr	r1, [pc, #128]	; (800ab64 <RCCEx_PLL3_Config+0x15c>)
 800aae2:	4313      	orrs	r3, r2
 800aae4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800aae6:	4b1f      	ldr	r3, [pc, #124]	; (800ab64 <RCCEx_PLL3_Config+0x15c>)
 800aae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaea:	4a1e      	ldr	r2, [pc, #120]	; (800ab64 <RCCEx_PLL3_Config+0x15c>)
 800aaec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aaf0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d106      	bne.n	800ab06 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800aaf8:	4b1a      	ldr	r3, [pc, #104]	; (800ab64 <RCCEx_PLL3_Config+0x15c>)
 800aafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aafc:	4a19      	ldr	r2, [pc, #100]	; (800ab64 <RCCEx_PLL3_Config+0x15c>)
 800aafe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ab02:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ab04:	e00f      	b.n	800ab26 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d106      	bne.n	800ab1a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ab0c:	4b15      	ldr	r3, [pc, #84]	; (800ab64 <RCCEx_PLL3_Config+0x15c>)
 800ab0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab10:	4a14      	ldr	r2, [pc, #80]	; (800ab64 <RCCEx_PLL3_Config+0x15c>)
 800ab12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ab16:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ab18:	e005      	b.n	800ab26 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ab1a:	4b12      	ldr	r3, [pc, #72]	; (800ab64 <RCCEx_PLL3_Config+0x15c>)
 800ab1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab1e:	4a11      	ldr	r2, [pc, #68]	; (800ab64 <RCCEx_PLL3_Config+0x15c>)
 800ab20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ab24:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ab26:	4b0f      	ldr	r3, [pc, #60]	; (800ab64 <RCCEx_PLL3_Config+0x15c>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a0e      	ldr	r2, [pc, #56]	; (800ab64 <RCCEx_PLL3_Config+0x15c>)
 800ab2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab32:	f7f6 fc61 	bl	80013f8 <HAL_GetTick>
 800ab36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ab38:	e008      	b.n	800ab4c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ab3a:	f7f6 fc5d 	bl	80013f8 <HAL_GetTick>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	1ad3      	subs	r3, r2, r3
 800ab44:	2b02      	cmp	r3, #2
 800ab46:	d901      	bls.n	800ab4c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ab48:	2303      	movs	r3, #3
 800ab4a:	e006      	b.n	800ab5a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ab4c:	4b05      	ldr	r3, [pc, #20]	; (800ab64 <RCCEx_PLL3_Config+0x15c>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d0f0      	beq.n	800ab3a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ab58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3710      	adds	r7, #16
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	58024400 	.word	0x58024400
 800ab68:	ffff0007 	.word	0xffff0007

0800ab6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d101      	bne.n	800ab7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	e042      	b.n	800ac04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d106      	bne.n	800ab96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f7f6 fa65 	bl	8001060 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2224      	movs	r2, #36	; 0x24
 800ab9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	681a      	ldr	r2, [r3, #0]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f022 0201 	bic.w	r2, r2, #1
 800abac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f000 f82c 	bl	800ac0c <UART_SetConfig>
 800abb4:	4603      	mov	r3, r0
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d101      	bne.n	800abbe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800abba:	2301      	movs	r3, #1
 800abbc:	e022      	b.n	800ac04 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d002      	beq.n	800abcc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f000 fe7e 	bl	800b8c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	685a      	ldr	r2, [r3, #4]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800abda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	689a      	ldr	r2, [r3, #8]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800abea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	681a      	ldr	r2, [r3, #0]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f042 0201 	orr.w	r2, r2, #1
 800abfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f000 ff05 	bl	800ba0c <UART_CheckIdleState>
 800ac02:	4603      	mov	r3, r0
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3708      	adds	r7, #8
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac0c:	b5b0      	push	{r4, r5, r7, lr}
 800ac0e:	b08e      	sub	sp, #56	; 0x38
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ac14:	2300      	movs	r3, #0
 800ac16:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	689a      	ldr	r2, [r3, #8]
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	691b      	ldr	r3, [r3, #16]
 800ac22:	431a      	orrs	r2, r3
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	695b      	ldr	r3, [r3, #20]
 800ac28:	431a      	orrs	r2, r3
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	69db      	ldr	r3, [r3, #28]
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	4bbf      	ldr	r3, [pc, #764]	; (800af38 <UART_SetConfig+0x32c>)
 800ac3a:	4013      	ands	r3, r2
 800ac3c:	687a      	ldr	r2, [r7, #4]
 800ac3e:	6812      	ldr	r2, [r2, #0]
 800ac40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ac42:	430b      	orrs	r3, r1
 800ac44:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	68da      	ldr	r2, [r3, #12]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	430a      	orrs	r2, r1
 800ac5a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	699b      	ldr	r3, [r3, #24]
 800ac60:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	4ab5      	ldr	r2, [pc, #724]	; (800af3c <UART_SetConfig+0x330>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d004      	beq.n	800ac76 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6a1b      	ldr	r3, [r3, #32]
 800ac70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac72:	4313      	orrs	r3, r2
 800ac74:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	689a      	ldr	r2, [r3, #8]
 800ac7c:	4bb0      	ldr	r3, [pc, #704]	; (800af40 <UART_SetConfig+0x334>)
 800ac7e:	4013      	ands	r3, r2
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	6812      	ldr	r2, [r2, #0]
 800ac84:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ac86:	430b      	orrs	r3, r1
 800ac88:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac90:	f023 010f 	bic.w	r1, r3, #15
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	430a      	orrs	r2, r1
 800ac9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4aa7      	ldr	r2, [pc, #668]	; (800af44 <UART_SetConfig+0x338>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d176      	bne.n	800ad98 <UART_SetConfig+0x18c>
 800acaa:	4ba7      	ldr	r3, [pc, #668]	; (800af48 <UART_SetConfig+0x33c>)
 800acac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800acb2:	2b28      	cmp	r3, #40	; 0x28
 800acb4:	d86c      	bhi.n	800ad90 <UART_SetConfig+0x184>
 800acb6:	a201      	add	r2, pc, #4	; (adr r2, 800acbc <UART_SetConfig+0xb0>)
 800acb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acbc:	0800ad61 	.word	0x0800ad61
 800acc0:	0800ad91 	.word	0x0800ad91
 800acc4:	0800ad91 	.word	0x0800ad91
 800acc8:	0800ad91 	.word	0x0800ad91
 800accc:	0800ad91 	.word	0x0800ad91
 800acd0:	0800ad91 	.word	0x0800ad91
 800acd4:	0800ad91 	.word	0x0800ad91
 800acd8:	0800ad91 	.word	0x0800ad91
 800acdc:	0800ad69 	.word	0x0800ad69
 800ace0:	0800ad91 	.word	0x0800ad91
 800ace4:	0800ad91 	.word	0x0800ad91
 800ace8:	0800ad91 	.word	0x0800ad91
 800acec:	0800ad91 	.word	0x0800ad91
 800acf0:	0800ad91 	.word	0x0800ad91
 800acf4:	0800ad91 	.word	0x0800ad91
 800acf8:	0800ad91 	.word	0x0800ad91
 800acfc:	0800ad71 	.word	0x0800ad71
 800ad00:	0800ad91 	.word	0x0800ad91
 800ad04:	0800ad91 	.word	0x0800ad91
 800ad08:	0800ad91 	.word	0x0800ad91
 800ad0c:	0800ad91 	.word	0x0800ad91
 800ad10:	0800ad91 	.word	0x0800ad91
 800ad14:	0800ad91 	.word	0x0800ad91
 800ad18:	0800ad91 	.word	0x0800ad91
 800ad1c:	0800ad79 	.word	0x0800ad79
 800ad20:	0800ad91 	.word	0x0800ad91
 800ad24:	0800ad91 	.word	0x0800ad91
 800ad28:	0800ad91 	.word	0x0800ad91
 800ad2c:	0800ad91 	.word	0x0800ad91
 800ad30:	0800ad91 	.word	0x0800ad91
 800ad34:	0800ad91 	.word	0x0800ad91
 800ad38:	0800ad91 	.word	0x0800ad91
 800ad3c:	0800ad81 	.word	0x0800ad81
 800ad40:	0800ad91 	.word	0x0800ad91
 800ad44:	0800ad91 	.word	0x0800ad91
 800ad48:	0800ad91 	.word	0x0800ad91
 800ad4c:	0800ad91 	.word	0x0800ad91
 800ad50:	0800ad91 	.word	0x0800ad91
 800ad54:	0800ad91 	.word	0x0800ad91
 800ad58:	0800ad91 	.word	0x0800ad91
 800ad5c:	0800ad89 	.word	0x0800ad89
 800ad60:	2301      	movs	r3, #1
 800ad62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad66:	e326      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800ad68:	2304      	movs	r3, #4
 800ad6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad6e:	e322      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800ad70:	2308      	movs	r3, #8
 800ad72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad76:	e31e      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800ad78:	2310      	movs	r3, #16
 800ad7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad7e:	e31a      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800ad80:	2320      	movs	r3, #32
 800ad82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad86:	e316      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800ad88:	2340      	movs	r3, #64	; 0x40
 800ad8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad8e:	e312      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800ad90:	2380      	movs	r3, #128	; 0x80
 800ad92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad96:	e30e      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4a6b      	ldr	r2, [pc, #428]	; (800af4c <UART_SetConfig+0x340>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d130      	bne.n	800ae04 <UART_SetConfig+0x1f8>
 800ada2:	4b69      	ldr	r3, [pc, #420]	; (800af48 <UART_SetConfig+0x33c>)
 800ada4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ada6:	f003 0307 	and.w	r3, r3, #7
 800adaa:	2b05      	cmp	r3, #5
 800adac:	d826      	bhi.n	800adfc <UART_SetConfig+0x1f0>
 800adae:	a201      	add	r2, pc, #4	; (adr r2, 800adb4 <UART_SetConfig+0x1a8>)
 800adb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb4:	0800adcd 	.word	0x0800adcd
 800adb8:	0800add5 	.word	0x0800add5
 800adbc:	0800addd 	.word	0x0800addd
 800adc0:	0800ade5 	.word	0x0800ade5
 800adc4:	0800aded 	.word	0x0800aded
 800adc8:	0800adf5 	.word	0x0800adf5
 800adcc:	2300      	movs	r3, #0
 800adce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800add2:	e2f0      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800add4:	2304      	movs	r3, #4
 800add6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adda:	e2ec      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800addc:	2308      	movs	r3, #8
 800adde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ade2:	e2e8      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800ade4:	2310      	movs	r3, #16
 800ade6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adea:	e2e4      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800adec:	2320      	movs	r3, #32
 800adee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adf2:	e2e0      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800adf4:	2340      	movs	r3, #64	; 0x40
 800adf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adfa:	e2dc      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800adfc:	2380      	movs	r3, #128	; 0x80
 800adfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae02:	e2d8      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4a51      	ldr	r2, [pc, #324]	; (800af50 <UART_SetConfig+0x344>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d130      	bne.n	800ae70 <UART_SetConfig+0x264>
 800ae0e:	4b4e      	ldr	r3, [pc, #312]	; (800af48 <UART_SetConfig+0x33c>)
 800ae10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae12:	f003 0307 	and.w	r3, r3, #7
 800ae16:	2b05      	cmp	r3, #5
 800ae18:	d826      	bhi.n	800ae68 <UART_SetConfig+0x25c>
 800ae1a:	a201      	add	r2, pc, #4	; (adr r2, 800ae20 <UART_SetConfig+0x214>)
 800ae1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae20:	0800ae39 	.word	0x0800ae39
 800ae24:	0800ae41 	.word	0x0800ae41
 800ae28:	0800ae49 	.word	0x0800ae49
 800ae2c:	0800ae51 	.word	0x0800ae51
 800ae30:	0800ae59 	.word	0x0800ae59
 800ae34:	0800ae61 	.word	0x0800ae61
 800ae38:	2300      	movs	r3, #0
 800ae3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae3e:	e2ba      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800ae40:	2304      	movs	r3, #4
 800ae42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae46:	e2b6      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800ae48:	2308      	movs	r3, #8
 800ae4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae4e:	e2b2      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800ae50:	2310      	movs	r3, #16
 800ae52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae56:	e2ae      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800ae58:	2320      	movs	r3, #32
 800ae5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae5e:	e2aa      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800ae60:	2340      	movs	r3, #64	; 0x40
 800ae62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae66:	e2a6      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800ae68:	2380      	movs	r3, #128	; 0x80
 800ae6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae6e:	e2a2      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4a37      	ldr	r2, [pc, #220]	; (800af54 <UART_SetConfig+0x348>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d130      	bne.n	800aedc <UART_SetConfig+0x2d0>
 800ae7a:	4b33      	ldr	r3, [pc, #204]	; (800af48 <UART_SetConfig+0x33c>)
 800ae7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae7e:	f003 0307 	and.w	r3, r3, #7
 800ae82:	2b05      	cmp	r3, #5
 800ae84:	d826      	bhi.n	800aed4 <UART_SetConfig+0x2c8>
 800ae86:	a201      	add	r2, pc, #4	; (adr r2, 800ae8c <UART_SetConfig+0x280>)
 800ae88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae8c:	0800aea5 	.word	0x0800aea5
 800ae90:	0800aead 	.word	0x0800aead
 800ae94:	0800aeb5 	.word	0x0800aeb5
 800ae98:	0800aebd 	.word	0x0800aebd
 800ae9c:	0800aec5 	.word	0x0800aec5
 800aea0:	0800aecd 	.word	0x0800aecd
 800aea4:	2300      	movs	r3, #0
 800aea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeaa:	e284      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800aeac:	2304      	movs	r3, #4
 800aeae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeb2:	e280      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800aeb4:	2308      	movs	r3, #8
 800aeb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeba:	e27c      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800aebc:	2310      	movs	r3, #16
 800aebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aec2:	e278      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800aec4:	2320      	movs	r3, #32
 800aec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeca:	e274      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800aecc:	2340      	movs	r3, #64	; 0x40
 800aece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aed2:	e270      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800aed4:	2380      	movs	r3, #128	; 0x80
 800aed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeda:	e26c      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4a1d      	ldr	r2, [pc, #116]	; (800af58 <UART_SetConfig+0x34c>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d142      	bne.n	800af6c <UART_SetConfig+0x360>
 800aee6:	4b18      	ldr	r3, [pc, #96]	; (800af48 <UART_SetConfig+0x33c>)
 800aee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeea:	f003 0307 	and.w	r3, r3, #7
 800aeee:	2b05      	cmp	r3, #5
 800aef0:	d838      	bhi.n	800af64 <UART_SetConfig+0x358>
 800aef2:	a201      	add	r2, pc, #4	; (adr r2, 800aef8 <UART_SetConfig+0x2ec>)
 800aef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef8:	0800af11 	.word	0x0800af11
 800aefc:	0800af19 	.word	0x0800af19
 800af00:	0800af21 	.word	0x0800af21
 800af04:	0800af29 	.word	0x0800af29
 800af08:	0800af31 	.word	0x0800af31
 800af0c:	0800af5d 	.word	0x0800af5d
 800af10:	2300      	movs	r3, #0
 800af12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af16:	e24e      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800af18:	2304      	movs	r3, #4
 800af1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af1e:	e24a      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800af20:	2308      	movs	r3, #8
 800af22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af26:	e246      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800af28:	2310      	movs	r3, #16
 800af2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af2e:	e242      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800af30:	2320      	movs	r3, #32
 800af32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af36:	e23e      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800af38:	cfff69f3 	.word	0xcfff69f3
 800af3c:	58000c00 	.word	0x58000c00
 800af40:	11fff4ff 	.word	0x11fff4ff
 800af44:	40011000 	.word	0x40011000
 800af48:	58024400 	.word	0x58024400
 800af4c:	40004400 	.word	0x40004400
 800af50:	40004800 	.word	0x40004800
 800af54:	40004c00 	.word	0x40004c00
 800af58:	40005000 	.word	0x40005000
 800af5c:	2340      	movs	r3, #64	; 0x40
 800af5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af62:	e228      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800af64:	2380      	movs	r3, #128	; 0x80
 800af66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af6a:	e224      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4ab1      	ldr	r2, [pc, #708]	; (800b238 <UART_SetConfig+0x62c>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d176      	bne.n	800b064 <UART_SetConfig+0x458>
 800af76:	4bb1      	ldr	r3, [pc, #708]	; (800b23c <UART_SetConfig+0x630>)
 800af78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af7e:	2b28      	cmp	r3, #40	; 0x28
 800af80:	d86c      	bhi.n	800b05c <UART_SetConfig+0x450>
 800af82:	a201      	add	r2, pc, #4	; (adr r2, 800af88 <UART_SetConfig+0x37c>)
 800af84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af88:	0800b02d 	.word	0x0800b02d
 800af8c:	0800b05d 	.word	0x0800b05d
 800af90:	0800b05d 	.word	0x0800b05d
 800af94:	0800b05d 	.word	0x0800b05d
 800af98:	0800b05d 	.word	0x0800b05d
 800af9c:	0800b05d 	.word	0x0800b05d
 800afa0:	0800b05d 	.word	0x0800b05d
 800afa4:	0800b05d 	.word	0x0800b05d
 800afa8:	0800b035 	.word	0x0800b035
 800afac:	0800b05d 	.word	0x0800b05d
 800afb0:	0800b05d 	.word	0x0800b05d
 800afb4:	0800b05d 	.word	0x0800b05d
 800afb8:	0800b05d 	.word	0x0800b05d
 800afbc:	0800b05d 	.word	0x0800b05d
 800afc0:	0800b05d 	.word	0x0800b05d
 800afc4:	0800b05d 	.word	0x0800b05d
 800afc8:	0800b03d 	.word	0x0800b03d
 800afcc:	0800b05d 	.word	0x0800b05d
 800afd0:	0800b05d 	.word	0x0800b05d
 800afd4:	0800b05d 	.word	0x0800b05d
 800afd8:	0800b05d 	.word	0x0800b05d
 800afdc:	0800b05d 	.word	0x0800b05d
 800afe0:	0800b05d 	.word	0x0800b05d
 800afe4:	0800b05d 	.word	0x0800b05d
 800afe8:	0800b045 	.word	0x0800b045
 800afec:	0800b05d 	.word	0x0800b05d
 800aff0:	0800b05d 	.word	0x0800b05d
 800aff4:	0800b05d 	.word	0x0800b05d
 800aff8:	0800b05d 	.word	0x0800b05d
 800affc:	0800b05d 	.word	0x0800b05d
 800b000:	0800b05d 	.word	0x0800b05d
 800b004:	0800b05d 	.word	0x0800b05d
 800b008:	0800b04d 	.word	0x0800b04d
 800b00c:	0800b05d 	.word	0x0800b05d
 800b010:	0800b05d 	.word	0x0800b05d
 800b014:	0800b05d 	.word	0x0800b05d
 800b018:	0800b05d 	.word	0x0800b05d
 800b01c:	0800b05d 	.word	0x0800b05d
 800b020:	0800b05d 	.word	0x0800b05d
 800b024:	0800b05d 	.word	0x0800b05d
 800b028:	0800b055 	.word	0x0800b055
 800b02c:	2301      	movs	r3, #1
 800b02e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b032:	e1c0      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b034:	2304      	movs	r3, #4
 800b036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b03a:	e1bc      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b03c:	2308      	movs	r3, #8
 800b03e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b042:	e1b8      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b044:	2310      	movs	r3, #16
 800b046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b04a:	e1b4      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b04c:	2320      	movs	r3, #32
 800b04e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b052:	e1b0      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b054:	2340      	movs	r3, #64	; 0x40
 800b056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b05a:	e1ac      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b05c:	2380      	movs	r3, #128	; 0x80
 800b05e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b062:	e1a8      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4a75      	ldr	r2, [pc, #468]	; (800b240 <UART_SetConfig+0x634>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d130      	bne.n	800b0d0 <UART_SetConfig+0x4c4>
 800b06e:	4b73      	ldr	r3, [pc, #460]	; (800b23c <UART_SetConfig+0x630>)
 800b070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b072:	f003 0307 	and.w	r3, r3, #7
 800b076:	2b05      	cmp	r3, #5
 800b078:	d826      	bhi.n	800b0c8 <UART_SetConfig+0x4bc>
 800b07a:	a201      	add	r2, pc, #4	; (adr r2, 800b080 <UART_SetConfig+0x474>)
 800b07c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b080:	0800b099 	.word	0x0800b099
 800b084:	0800b0a1 	.word	0x0800b0a1
 800b088:	0800b0a9 	.word	0x0800b0a9
 800b08c:	0800b0b1 	.word	0x0800b0b1
 800b090:	0800b0b9 	.word	0x0800b0b9
 800b094:	0800b0c1 	.word	0x0800b0c1
 800b098:	2300      	movs	r3, #0
 800b09a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b09e:	e18a      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b0a0:	2304      	movs	r3, #4
 800b0a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0a6:	e186      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b0a8:	2308      	movs	r3, #8
 800b0aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0ae:	e182      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b0b0:	2310      	movs	r3, #16
 800b0b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0b6:	e17e      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b0b8:	2320      	movs	r3, #32
 800b0ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0be:	e17a      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b0c0:	2340      	movs	r3, #64	; 0x40
 800b0c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0c6:	e176      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b0c8:	2380      	movs	r3, #128	; 0x80
 800b0ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0ce:	e172      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4a5b      	ldr	r2, [pc, #364]	; (800b244 <UART_SetConfig+0x638>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d130      	bne.n	800b13c <UART_SetConfig+0x530>
 800b0da:	4b58      	ldr	r3, [pc, #352]	; (800b23c <UART_SetConfig+0x630>)
 800b0dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0de:	f003 0307 	and.w	r3, r3, #7
 800b0e2:	2b05      	cmp	r3, #5
 800b0e4:	d826      	bhi.n	800b134 <UART_SetConfig+0x528>
 800b0e6:	a201      	add	r2, pc, #4	; (adr r2, 800b0ec <UART_SetConfig+0x4e0>)
 800b0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0ec:	0800b105 	.word	0x0800b105
 800b0f0:	0800b10d 	.word	0x0800b10d
 800b0f4:	0800b115 	.word	0x0800b115
 800b0f8:	0800b11d 	.word	0x0800b11d
 800b0fc:	0800b125 	.word	0x0800b125
 800b100:	0800b12d 	.word	0x0800b12d
 800b104:	2300      	movs	r3, #0
 800b106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b10a:	e154      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b10c:	2304      	movs	r3, #4
 800b10e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b112:	e150      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b114:	2308      	movs	r3, #8
 800b116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b11a:	e14c      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b11c:	2310      	movs	r3, #16
 800b11e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b122:	e148      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b124:	2320      	movs	r3, #32
 800b126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b12a:	e144      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b12c:	2340      	movs	r3, #64	; 0x40
 800b12e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b132:	e140      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b134:	2380      	movs	r3, #128	; 0x80
 800b136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b13a:	e13c      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a41      	ldr	r2, [pc, #260]	; (800b248 <UART_SetConfig+0x63c>)
 800b142:	4293      	cmp	r3, r2
 800b144:	f040 8082 	bne.w	800b24c <UART_SetConfig+0x640>
 800b148:	4b3c      	ldr	r3, [pc, #240]	; (800b23c <UART_SetConfig+0x630>)
 800b14a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b14c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b150:	2b28      	cmp	r3, #40	; 0x28
 800b152:	d86d      	bhi.n	800b230 <UART_SetConfig+0x624>
 800b154:	a201      	add	r2, pc, #4	; (adr r2, 800b15c <UART_SetConfig+0x550>)
 800b156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b15a:	bf00      	nop
 800b15c:	0800b201 	.word	0x0800b201
 800b160:	0800b231 	.word	0x0800b231
 800b164:	0800b231 	.word	0x0800b231
 800b168:	0800b231 	.word	0x0800b231
 800b16c:	0800b231 	.word	0x0800b231
 800b170:	0800b231 	.word	0x0800b231
 800b174:	0800b231 	.word	0x0800b231
 800b178:	0800b231 	.word	0x0800b231
 800b17c:	0800b209 	.word	0x0800b209
 800b180:	0800b231 	.word	0x0800b231
 800b184:	0800b231 	.word	0x0800b231
 800b188:	0800b231 	.word	0x0800b231
 800b18c:	0800b231 	.word	0x0800b231
 800b190:	0800b231 	.word	0x0800b231
 800b194:	0800b231 	.word	0x0800b231
 800b198:	0800b231 	.word	0x0800b231
 800b19c:	0800b211 	.word	0x0800b211
 800b1a0:	0800b231 	.word	0x0800b231
 800b1a4:	0800b231 	.word	0x0800b231
 800b1a8:	0800b231 	.word	0x0800b231
 800b1ac:	0800b231 	.word	0x0800b231
 800b1b0:	0800b231 	.word	0x0800b231
 800b1b4:	0800b231 	.word	0x0800b231
 800b1b8:	0800b231 	.word	0x0800b231
 800b1bc:	0800b219 	.word	0x0800b219
 800b1c0:	0800b231 	.word	0x0800b231
 800b1c4:	0800b231 	.word	0x0800b231
 800b1c8:	0800b231 	.word	0x0800b231
 800b1cc:	0800b231 	.word	0x0800b231
 800b1d0:	0800b231 	.word	0x0800b231
 800b1d4:	0800b231 	.word	0x0800b231
 800b1d8:	0800b231 	.word	0x0800b231
 800b1dc:	0800b221 	.word	0x0800b221
 800b1e0:	0800b231 	.word	0x0800b231
 800b1e4:	0800b231 	.word	0x0800b231
 800b1e8:	0800b231 	.word	0x0800b231
 800b1ec:	0800b231 	.word	0x0800b231
 800b1f0:	0800b231 	.word	0x0800b231
 800b1f4:	0800b231 	.word	0x0800b231
 800b1f8:	0800b231 	.word	0x0800b231
 800b1fc:	0800b229 	.word	0x0800b229
 800b200:	2301      	movs	r3, #1
 800b202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b206:	e0d6      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b208:	2304      	movs	r3, #4
 800b20a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b20e:	e0d2      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b210:	2308      	movs	r3, #8
 800b212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b216:	e0ce      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b218:	2310      	movs	r3, #16
 800b21a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b21e:	e0ca      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b220:	2320      	movs	r3, #32
 800b222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b226:	e0c6      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b228:	2340      	movs	r3, #64	; 0x40
 800b22a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b22e:	e0c2      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b230:	2380      	movs	r3, #128	; 0x80
 800b232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b236:	e0be      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b238:	40011400 	.word	0x40011400
 800b23c:	58024400 	.word	0x58024400
 800b240:	40007800 	.word	0x40007800
 800b244:	40007c00 	.word	0x40007c00
 800b248:	40011800 	.word	0x40011800
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4aad      	ldr	r2, [pc, #692]	; (800b508 <UART_SetConfig+0x8fc>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d176      	bne.n	800b344 <UART_SetConfig+0x738>
 800b256:	4bad      	ldr	r3, [pc, #692]	; (800b50c <UART_SetConfig+0x900>)
 800b258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b25a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b25e:	2b28      	cmp	r3, #40	; 0x28
 800b260:	d86c      	bhi.n	800b33c <UART_SetConfig+0x730>
 800b262:	a201      	add	r2, pc, #4	; (adr r2, 800b268 <UART_SetConfig+0x65c>)
 800b264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b268:	0800b30d 	.word	0x0800b30d
 800b26c:	0800b33d 	.word	0x0800b33d
 800b270:	0800b33d 	.word	0x0800b33d
 800b274:	0800b33d 	.word	0x0800b33d
 800b278:	0800b33d 	.word	0x0800b33d
 800b27c:	0800b33d 	.word	0x0800b33d
 800b280:	0800b33d 	.word	0x0800b33d
 800b284:	0800b33d 	.word	0x0800b33d
 800b288:	0800b315 	.word	0x0800b315
 800b28c:	0800b33d 	.word	0x0800b33d
 800b290:	0800b33d 	.word	0x0800b33d
 800b294:	0800b33d 	.word	0x0800b33d
 800b298:	0800b33d 	.word	0x0800b33d
 800b29c:	0800b33d 	.word	0x0800b33d
 800b2a0:	0800b33d 	.word	0x0800b33d
 800b2a4:	0800b33d 	.word	0x0800b33d
 800b2a8:	0800b31d 	.word	0x0800b31d
 800b2ac:	0800b33d 	.word	0x0800b33d
 800b2b0:	0800b33d 	.word	0x0800b33d
 800b2b4:	0800b33d 	.word	0x0800b33d
 800b2b8:	0800b33d 	.word	0x0800b33d
 800b2bc:	0800b33d 	.word	0x0800b33d
 800b2c0:	0800b33d 	.word	0x0800b33d
 800b2c4:	0800b33d 	.word	0x0800b33d
 800b2c8:	0800b325 	.word	0x0800b325
 800b2cc:	0800b33d 	.word	0x0800b33d
 800b2d0:	0800b33d 	.word	0x0800b33d
 800b2d4:	0800b33d 	.word	0x0800b33d
 800b2d8:	0800b33d 	.word	0x0800b33d
 800b2dc:	0800b33d 	.word	0x0800b33d
 800b2e0:	0800b33d 	.word	0x0800b33d
 800b2e4:	0800b33d 	.word	0x0800b33d
 800b2e8:	0800b32d 	.word	0x0800b32d
 800b2ec:	0800b33d 	.word	0x0800b33d
 800b2f0:	0800b33d 	.word	0x0800b33d
 800b2f4:	0800b33d 	.word	0x0800b33d
 800b2f8:	0800b33d 	.word	0x0800b33d
 800b2fc:	0800b33d 	.word	0x0800b33d
 800b300:	0800b33d 	.word	0x0800b33d
 800b304:	0800b33d 	.word	0x0800b33d
 800b308:	0800b335 	.word	0x0800b335
 800b30c:	2301      	movs	r3, #1
 800b30e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b312:	e050      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b314:	2304      	movs	r3, #4
 800b316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b31a:	e04c      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b31c:	2308      	movs	r3, #8
 800b31e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b322:	e048      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b324:	2310      	movs	r3, #16
 800b326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b32a:	e044      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b32c:	2320      	movs	r3, #32
 800b32e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b332:	e040      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b334:	2340      	movs	r3, #64	; 0x40
 800b336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b33a:	e03c      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b33c:	2380      	movs	r3, #128	; 0x80
 800b33e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b342:	e038      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4a71      	ldr	r2, [pc, #452]	; (800b510 <UART_SetConfig+0x904>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d130      	bne.n	800b3b0 <UART_SetConfig+0x7a4>
 800b34e:	4b6f      	ldr	r3, [pc, #444]	; (800b50c <UART_SetConfig+0x900>)
 800b350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b352:	f003 0307 	and.w	r3, r3, #7
 800b356:	2b05      	cmp	r3, #5
 800b358:	d826      	bhi.n	800b3a8 <UART_SetConfig+0x79c>
 800b35a:	a201      	add	r2, pc, #4	; (adr r2, 800b360 <UART_SetConfig+0x754>)
 800b35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b360:	0800b379 	.word	0x0800b379
 800b364:	0800b381 	.word	0x0800b381
 800b368:	0800b389 	.word	0x0800b389
 800b36c:	0800b391 	.word	0x0800b391
 800b370:	0800b399 	.word	0x0800b399
 800b374:	0800b3a1 	.word	0x0800b3a1
 800b378:	2302      	movs	r3, #2
 800b37a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b37e:	e01a      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b380:	2304      	movs	r3, #4
 800b382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b386:	e016      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b388:	2308      	movs	r3, #8
 800b38a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b38e:	e012      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b390:	2310      	movs	r3, #16
 800b392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b396:	e00e      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b398:	2320      	movs	r3, #32
 800b39a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b39e:	e00a      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b3a0:	2340      	movs	r3, #64	; 0x40
 800b3a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3a6:	e006      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b3a8:	2380      	movs	r3, #128	; 0x80
 800b3aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3ae:	e002      	b.n	800b3b6 <UART_SetConfig+0x7aa>
 800b3b0:	2380      	movs	r3, #128	; 0x80
 800b3b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4a55      	ldr	r2, [pc, #340]	; (800b510 <UART_SetConfig+0x904>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	f040 80f0 	bne.w	800b5a2 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b3c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b3c6:	2b20      	cmp	r3, #32
 800b3c8:	dc46      	bgt.n	800b458 <UART_SetConfig+0x84c>
 800b3ca:	2b02      	cmp	r3, #2
 800b3cc:	db75      	blt.n	800b4ba <UART_SetConfig+0x8ae>
 800b3ce:	3b02      	subs	r3, #2
 800b3d0:	2b1e      	cmp	r3, #30
 800b3d2:	d872      	bhi.n	800b4ba <UART_SetConfig+0x8ae>
 800b3d4:	a201      	add	r2, pc, #4	; (adr r2, 800b3dc <UART_SetConfig+0x7d0>)
 800b3d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3da:	bf00      	nop
 800b3dc:	0800b45f 	.word	0x0800b45f
 800b3e0:	0800b4bb 	.word	0x0800b4bb
 800b3e4:	0800b467 	.word	0x0800b467
 800b3e8:	0800b4bb 	.word	0x0800b4bb
 800b3ec:	0800b4bb 	.word	0x0800b4bb
 800b3f0:	0800b4bb 	.word	0x0800b4bb
 800b3f4:	0800b477 	.word	0x0800b477
 800b3f8:	0800b4bb 	.word	0x0800b4bb
 800b3fc:	0800b4bb 	.word	0x0800b4bb
 800b400:	0800b4bb 	.word	0x0800b4bb
 800b404:	0800b4bb 	.word	0x0800b4bb
 800b408:	0800b4bb 	.word	0x0800b4bb
 800b40c:	0800b4bb 	.word	0x0800b4bb
 800b410:	0800b4bb 	.word	0x0800b4bb
 800b414:	0800b487 	.word	0x0800b487
 800b418:	0800b4bb 	.word	0x0800b4bb
 800b41c:	0800b4bb 	.word	0x0800b4bb
 800b420:	0800b4bb 	.word	0x0800b4bb
 800b424:	0800b4bb 	.word	0x0800b4bb
 800b428:	0800b4bb 	.word	0x0800b4bb
 800b42c:	0800b4bb 	.word	0x0800b4bb
 800b430:	0800b4bb 	.word	0x0800b4bb
 800b434:	0800b4bb 	.word	0x0800b4bb
 800b438:	0800b4bb 	.word	0x0800b4bb
 800b43c:	0800b4bb 	.word	0x0800b4bb
 800b440:	0800b4bb 	.word	0x0800b4bb
 800b444:	0800b4bb 	.word	0x0800b4bb
 800b448:	0800b4bb 	.word	0x0800b4bb
 800b44c:	0800b4bb 	.word	0x0800b4bb
 800b450:	0800b4bb 	.word	0x0800b4bb
 800b454:	0800b4ad 	.word	0x0800b4ad
 800b458:	2b40      	cmp	r3, #64	; 0x40
 800b45a:	d02a      	beq.n	800b4b2 <UART_SetConfig+0x8a6>
 800b45c:	e02d      	b.n	800b4ba <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b45e:	f7fe fe11 	bl	800a084 <HAL_RCCEx_GetD3PCLK1Freq>
 800b462:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b464:	e02f      	b.n	800b4c6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b466:	f107 0314 	add.w	r3, r7, #20
 800b46a:	4618      	mov	r0, r3
 800b46c:	f7fe fe20 	bl	800a0b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b470:	69bb      	ldr	r3, [r7, #24]
 800b472:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b474:	e027      	b.n	800b4c6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b476:	f107 0308 	add.w	r3, r7, #8
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7fe ff6c 	bl	800a358 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b484:	e01f      	b.n	800b4c6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b486:	4b21      	ldr	r3, [pc, #132]	; (800b50c <UART_SetConfig+0x900>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f003 0320 	and.w	r3, r3, #32
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d009      	beq.n	800b4a6 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b492:	4b1e      	ldr	r3, [pc, #120]	; (800b50c <UART_SetConfig+0x900>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	08db      	lsrs	r3, r3, #3
 800b498:	f003 0303 	and.w	r3, r3, #3
 800b49c:	4a1d      	ldr	r2, [pc, #116]	; (800b514 <UART_SetConfig+0x908>)
 800b49e:	fa22 f303 	lsr.w	r3, r2, r3
 800b4a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b4a4:	e00f      	b.n	800b4c6 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800b4a6:	4b1b      	ldr	r3, [pc, #108]	; (800b514 <UART_SetConfig+0x908>)
 800b4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4aa:	e00c      	b.n	800b4c6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b4ac:	4b1a      	ldr	r3, [pc, #104]	; (800b518 <UART_SetConfig+0x90c>)
 800b4ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4b0:	e009      	b.n	800b4c6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b4b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b4b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4b8:	e005      	b.n	800b4c6 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b4c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	f000 81e6 	beq.w	800b89a <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d2:	4a12      	ldr	r2, [pc, #72]	; (800b51c <UART_SetConfig+0x910>)
 800b4d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4d8:	461a      	mov	r2, r3
 800b4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4e0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	685a      	ldr	r2, [r3, #4]
 800b4e6:	4613      	mov	r3, r2
 800b4e8:	005b      	lsls	r3, r3, #1
 800b4ea:	4413      	add	r3, r2
 800b4ec:	6a3a      	ldr	r2, [r7, #32]
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d305      	bcc.n	800b4fe <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b4f8:	6a3a      	ldr	r2, [r7, #32]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d910      	bls.n	800b520 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800b4fe:	2301      	movs	r3, #1
 800b500:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b504:	e1c9      	b.n	800b89a <UART_SetConfig+0xc8e>
 800b506:	bf00      	nop
 800b508:	40011c00 	.word	0x40011c00
 800b50c:	58024400 	.word	0x58024400
 800b510:	58000c00 	.word	0x58000c00
 800b514:	03d09000 	.word	0x03d09000
 800b518:	003d0900 	.word	0x003d0900
 800b51c:	0800fb24 	.word	0x0800fb24
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b522:	4618      	mov	r0, r3
 800b524:	f04f 0100 	mov.w	r1, #0
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52c:	4ac1      	ldr	r2, [pc, #772]	; (800b834 <UART_SetConfig+0xc28>)
 800b52e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b532:	b29a      	uxth	r2, r3
 800b534:	f04f 0300 	mov.w	r3, #0
 800b538:	f7f4 fee8 	bl	800030c <__aeabi_uldivmod>
 800b53c:	4602      	mov	r2, r0
 800b53e:	460b      	mov	r3, r1
 800b540:	4610      	mov	r0, r2
 800b542:	4619      	mov	r1, r3
 800b544:	f04f 0200 	mov.w	r2, #0
 800b548:	f04f 0300 	mov.w	r3, #0
 800b54c:	020b      	lsls	r3, r1, #8
 800b54e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b552:	0202      	lsls	r2, r0, #8
 800b554:	6879      	ldr	r1, [r7, #4]
 800b556:	6849      	ldr	r1, [r1, #4]
 800b558:	0849      	lsrs	r1, r1, #1
 800b55a:	4608      	mov	r0, r1
 800b55c:	f04f 0100 	mov.w	r1, #0
 800b560:	1814      	adds	r4, r2, r0
 800b562:	eb43 0501 	adc.w	r5, r3, r1
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	461a      	mov	r2, r3
 800b56c:	f04f 0300 	mov.w	r3, #0
 800b570:	4620      	mov	r0, r4
 800b572:	4629      	mov	r1, r5
 800b574:	f7f4 feca 	bl	800030c <__aeabi_uldivmod>
 800b578:	4602      	mov	r2, r0
 800b57a:	460b      	mov	r3, r1
 800b57c:	4613      	mov	r3, r2
 800b57e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b582:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b586:	d308      	bcc.n	800b59a <UART_SetConfig+0x98e>
 800b588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b58a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b58e:	d204      	bcs.n	800b59a <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b596:	60da      	str	r2, [r3, #12]
 800b598:	e17f      	b.n	800b89a <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800b59a:	2301      	movs	r3, #1
 800b59c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b5a0:	e17b      	b.n	800b89a <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	69db      	ldr	r3, [r3, #28]
 800b5a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5aa:	f040 80bd 	bne.w	800b728 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800b5ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b5b2:	2b20      	cmp	r3, #32
 800b5b4:	dc48      	bgt.n	800b648 <UART_SetConfig+0xa3c>
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	db7b      	blt.n	800b6b2 <UART_SetConfig+0xaa6>
 800b5ba:	2b20      	cmp	r3, #32
 800b5bc:	d879      	bhi.n	800b6b2 <UART_SetConfig+0xaa6>
 800b5be:	a201      	add	r2, pc, #4	; (adr r2, 800b5c4 <UART_SetConfig+0x9b8>)
 800b5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5c4:	0800b64f 	.word	0x0800b64f
 800b5c8:	0800b657 	.word	0x0800b657
 800b5cc:	0800b6b3 	.word	0x0800b6b3
 800b5d0:	0800b6b3 	.word	0x0800b6b3
 800b5d4:	0800b65f 	.word	0x0800b65f
 800b5d8:	0800b6b3 	.word	0x0800b6b3
 800b5dc:	0800b6b3 	.word	0x0800b6b3
 800b5e0:	0800b6b3 	.word	0x0800b6b3
 800b5e4:	0800b66f 	.word	0x0800b66f
 800b5e8:	0800b6b3 	.word	0x0800b6b3
 800b5ec:	0800b6b3 	.word	0x0800b6b3
 800b5f0:	0800b6b3 	.word	0x0800b6b3
 800b5f4:	0800b6b3 	.word	0x0800b6b3
 800b5f8:	0800b6b3 	.word	0x0800b6b3
 800b5fc:	0800b6b3 	.word	0x0800b6b3
 800b600:	0800b6b3 	.word	0x0800b6b3
 800b604:	0800b67f 	.word	0x0800b67f
 800b608:	0800b6b3 	.word	0x0800b6b3
 800b60c:	0800b6b3 	.word	0x0800b6b3
 800b610:	0800b6b3 	.word	0x0800b6b3
 800b614:	0800b6b3 	.word	0x0800b6b3
 800b618:	0800b6b3 	.word	0x0800b6b3
 800b61c:	0800b6b3 	.word	0x0800b6b3
 800b620:	0800b6b3 	.word	0x0800b6b3
 800b624:	0800b6b3 	.word	0x0800b6b3
 800b628:	0800b6b3 	.word	0x0800b6b3
 800b62c:	0800b6b3 	.word	0x0800b6b3
 800b630:	0800b6b3 	.word	0x0800b6b3
 800b634:	0800b6b3 	.word	0x0800b6b3
 800b638:	0800b6b3 	.word	0x0800b6b3
 800b63c:	0800b6b3 	.word	0x0800b6b3
 800b640:	0800b6b3 	.word	0x0800b6b3
 800b644:	0800b6a5 	.word	0x0800b6a5
 800b648:	2b40      	cmp	r3, #64	; 0x40
 800b64a:	d02e      	beq.n	800b6aa <UART_SetConfig+0xa9e>
 800b64c:	e031      	b.n	800b6b2 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b64e:	f7fd f9cf 	bl	80089f0 <HAL_RCC_GetPCLK1Freq>
 800b652:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b654:	e033      	b.n	800b6be <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b656:	f7fd f9e1 	bl	8008a1c <HAL_RCC_GetPCLK2Freq>
 800b65a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b65c:	e02f      	b.n	800b6be <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b65e:	f107 0314 	add.w	r3, r7, #20
 800b662:	4618      	mov	r0, r3
 800b664:	f7fe fd24 	bl	800a0b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b668:	69bb      	ldr	r3, [r7, #24]
 800b66a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b66c:	e027      	b.n	800b6be <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b66e:	f107 0308 	add.w	r3, r7, #8
 800b672:	4618      	mov	r0, r3
 800b674:	f7fe fe70 	bl	800a358 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b67c:	e01f      	b.n	800b6be <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b67e:	4b6e      	ldr	r3, [pc, #440]	; (800b838 <UART_SetConfig+0xc2c>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f003 0320 	and.w	r3, r3, #32
 800b686:	2b00      	cmp	r3, #0
 800b688:	d009      	beq.n	800b69e <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b68a:	4b6b      	ldr	r3, [pc, #428]	; (800b838 <UART_SetConfig+0xc2c>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	08db      	lsrs	r3, r3, #3
 800b690:	f003 0303 	and.w	r3, r3, #3
 800b694:	4a69      	ldr	r2, [pc, #420]	; (800b83c <UART_SetConfig+0xc30>)
 800b696:	fa22 f303 	lsr.w	r3, r2, r3
 800b69a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b69c:	e00f      	b.n	800b6be <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800b69e:	4b67      	ldr	r3, [pc, #412]	; (800b83c <UART_SetConfig+0xc30>)
 800b6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6a2:	e00c      	b.n	800b6be <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b6a4:	4b66      	ldr	r3, [pc, #408]	; (800b840 <UART_SetConfig+0xc34>)
 800b6a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6a8:	e009      	b.n	800b6be <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6b0:	e005      	b.n	800b6be <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b6bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	f000 80ea 	beq.w	800b89a <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ca:	4a5a      	ldr	r2, [pc, #360]	; (800b834 <UART_SetConfig+0xc28>)
 800b6cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6d8:	005a      	lsls	r2, r3, #1
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	085b      	lsrs	r3, r3, #1
 800b6e0:	441a      	add	r2, r3
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6ea:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ee:	2b0f      	cmp	r3, #15
 800b6f0:	d916      	bls.n	800b720 <UART_SetConfig+0xb14>
 800b6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6f8:	d212      	bcs.n	800b720 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6fc:	b29b      	uxth	r3, r3
 800b6fe:	f023 030f 	bic.w	r3, r3, #15
 800b702:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b706:	085b      	lsrs	r3, r3, #1
 800b708:	b29b      	uxth	r3, r3
 800b70a:	f003 0307 	and.w	r3, r3, #7
 800b70e:	b29a      	uxth	r2, r3
 800b710:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b712:	4313      	orrs	r3, r2
 800b714:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b71c:	60da      	str	r2, [r3, #12]
 800b71e:	e0bc      	b.n	800b89a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800b720:	2301      	movs	r3, #1
 800b722:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b726:	e0b8      	b.n	800b89a <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b728:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b72c:	2b20      	cmp	r3, #32
 800b72e:	dc4b      	bgt.n	800b7c8 <UART_SetConfig+0xbbc>
 800b730:	2b00      	cmp	r3, #0
 800b732:	f2c0 8087 	blt.w	800b844 <UART_SetConfig+0xc38>
 800b736:	2b20      	cmp	r3, #32
 800b738:	f200 8084 	bhi.w	800b844 <UART_SetConfig+0xc38>
 800b73c:	a201      	add	r2, pc, #4	; (adr r2, 800b744 <UART_SetConfig+0xb38>)
 800b73e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b742:	bf00      	nop
 800b744:	0800b7cf 	.word	0x0800b7cf
 800b748:	0800b7d7 	.word	0x0800b7d7
 800b74c:	0800b845 	.word	0x0800b845
 800b750:	0800b845 	.word	0x0800b845
 800b754:	0800b7df 	.word	0x0800b7df
 800b758:	0800b845 	.word	0x0800b845
 800b75c:	0800b845 	.word	0x0800b845
 800b760:	0800b845 	.word	0x0800b845
 800b764:	0800b7ef 	.word	0x0800b7ef
 800b768:	0800b845 	.word	0x0800b845
 800b76c:	0800b845 	.word	0x0800b845
 800b770:	0800b845 	.word	0x0800b845
 800b774:	0800b845 	.word	0x0800b845
 800b778:	0800b845 	.word	0x0800b845
 800b77c:	0800b845 	.word	0x0800b845
 800b780:	0800b845 	.word	0x0800b845
 800b784:	0800b7ff 	.word	0x0800b7ff
 800b788:	0800b845 	.word	0x0800b845
 800b78c:	0800b845 	.word	0x0800b845
 800b790:	0800b845 	.word	0x0800b845
 800b794:	0800b845 	.word	0x0800b845
 800b798:	0800b845 	.word	0x0800b845
 800b79c:	0800b845 	.word	0x0800b845
 800b7a0:	0800b845 	.word	0x0800b845
 800b7a4:	0800b845 	.word	0x0800b845
 800b7a8:	0800b845 	.word	0x0800b845
 800b7ac:	0800b845 	.word	0x0800b845
 800b7b0:	0800b845 	.word	0x0800b845
 800b7b4:	0800b845 	.word	0x0800b845
 800b7b8:	0800b845 	.word	0x0800b845
 800b7bc:	0800b845 	.word	0x0800b845
 800b7c0:	0800b845 	.word	0x0800b845
 800b7c4:	0800b825 	.word	0x0800b825
 800b7c8:	2b40      	cmp	r3, #64	; 0x40
 800b7ca:	d02e      	beq.n	800b82a <UART_SetConfig+0xc1e>
 800b7cc:	e03a      	b.n	800b844 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7ce:	f7fd f90f 	bl	80089f0 <HAL_RCC_GetPCLK1Freq>
 800b7d2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b7d4:	e03c      	b.n	800b850 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b7d6:	f7fd f921 	bl	8008a1c <HAL_RCC_GetPCLK2Freq>
 800b7da:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b7dc:	e038      	b.n	800b850 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7de:	f107 0314 	add.w	r3, r7, #20
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7fe fc64 	bl	800a0b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7ec:	e030      	b.n	800b850 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7ee:	f107 0308 	add.w	r3, r7, #8
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7fe fdb0 	bl	800a358 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7fc:	e028      	b.n	800b850 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7fe:	4b0e      	ldr	r3, [pc, #56]	; (800b838 <UART_SetConfig+0xc2c>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f003 0320 	and.w	r3, r3, #32
 800b806:	2b00      	cmp	r3, #0
 800b808:	d009      	beq.n	800b81e <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b80a:	4b0b      	ldr	r3, [pc, #44]	; (800b838 <UART_SetConfig+0xc2c>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	08db      	lsrs	r3, r3, #3
 800b810:	f003 0303 	and.w	r3, r3, #3
 800b814:	4a09      	ldr	r2, [pc, #36]	; (800b83c <UART_SetConfig+0xc30>)
 800b816:	fa22 f303 	lsr.w	r3, r2, r3
 800b81a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b81c:	e018      	b.n	800b850 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800b81e:	4b07      	ldr	r3, [pc, #28]	; (800b83c <UART_SetConfig+0xc30>)
 800b820:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b822:	e015      	b.n	800b850 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b824:	4b06      	ldr	r3, [pc, #24]	; (800b840 <UART_SetConfig+0xc34>)
 800b826:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b828:	e012      	b.n	800b850 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b82a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b82e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b830:	e00e      	b.n	800b850 <UART_SetConfig+0xc44>
 800b832:	bf00      	nop
 800b834:	0800fb24 	.word	0x0800fb24
 800b838:	58024400 	.word	0x58024400
 800b83c:	03d09000 	.word	0x03d09000
 800b840:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800b844:	2300      	movs	r3, #0
 800b846:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b848:	2301      	movs	r3, #1
 800b84a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b84e:	bf00      	nop
    }

    if (pclk != 0U)
 800b850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b852:	2b00      	cmp	r3, #0
 800b854:	d021      	beq.n	800b89a <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85a:	4a1a      	ldr	r2, [pc, #104]	; (800b8c4 <UART_SetConfig+0xcb8>)
 800b85c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b860:	461a      	mov	r2, r3
 800b862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b864:	fbb3 f2f2 	udiv	r2, r3, r2
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	085b      	lsrs	r3, r3, #1
 800b86e:	441a      	add	r2, r3
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	685b      	ldr	r3, [r3, #4]
 800b874:	fbb2 f3f3 	udiv	r3, r2, r3
 800b878:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87c:	2b0f      	cmp	r3, #15
 800b87e:	d909      	bls.n	800b894 <UART_SetConfig+0xc88>
 800b880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b886:	d205      	bcs.n	800b894 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88a:	b29a      	uxth	r2, r3
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	60da      	str	r2, [r3, #12]
 800b892:	e002      	b.n	800b89a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800b894:	2301      	movs	r3, #1
 800b896:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2201      	movs	r2, #1
 800b89e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2201      	movs	r2, #1
 800b8a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b8b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3738      	adds	r7, #56	; 0x38
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bdb0      	pop	{r4, r5, r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	0800fb24 	.word	0x0800fb24

0800b8c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b083      	sub	sp, #12
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8d4:	f003 0301 	and.w	r3, r3, #1
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d00a      	beq.n	800b8f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	685b      	ldr	r3, [r3, #4]
 800b8e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	430a      	orrs	r2, r1
 800b8f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8f6:	f003 0302 	and.w	r3, r3, #2
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d00a      	beq.n	800b914 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	430a      	orrs	r2, r1
 800b912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b918:	f003 0304 	and.w	r3, r3, #4
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d00a      	beq.n	800b936 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	430a      	orrs	r2, r1
 800b934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b93a:	f003 0308 	and.w	r3, r3, #8
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d00a      	beq.n	800b958 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	430a      	orrs	r2, r1
 800b956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b95c:	f003 0310 	and.w	r3, r3, #16
 800b960:	2b00      	cmp	r3, #0
 800b962:	d00a      	beq.n	800b97a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	689b      	ldr	r3, [r3, #8]
 800b96a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	430a      	orrs	r2, r1
 800b978:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b97e:	f003 0320 	and.w	r3, r3, #32
 800b982:	2b00      	cmp	r3, #0
 800b984:	d00a      	beq.n	800b99c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	689b      	ldr	r3, [r3, #8]
 800b98c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	430a      	orrs	r2, r1
 800b99a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d01a      	beq.n	800b9de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	430a      	orrs	r2, r1
 800b9bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9c6:	d10a      	bne.n	800b9de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	430a      	orrs	r2, r1
 800b9dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d00a      	beq.n	800ba00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	685b      	ldr	r3, [r3, #4]
 800b9f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	430a      	orrs	r2, r1
 800b9fe:	605a      	str	r2, [r3, #4]
  }
}
 800ba00:	bf00      	nop
 800ba02:	370c      	adds	r7, #12
 800ba04:	46bd      	mov	sp, r7
 800ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0a:	4770      	bx	lr

0800ba0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b086      	sub	sp, #24
 800ba10:	af02      	add	r7, sp, #8
 800ba12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2200      	movs	r2, #0
 800ba18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ba1c:	f7f5 fcec 	bl	80013f8 <HAL_GetTick>
 800ba20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f003 0308 	and.w	r3, r3, #8
 800ba2c:	2b08      	cmp	r3, #8
 800ba2e:	d10e      	bne.n	800ba4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ba34:	9300      	str	r3, [sp, #0]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f000 f82f 	bl	800baa2 <UART_WaitOnFlagUntilTimeout>
 800ba44:	4603      	mov	r3, r0
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d001      	beq.n	800ba4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba4a:	2303      	movs	r3, #3
 800ba4c:	e025      	b.n	800ba9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f003 0304 	and.w	r3, r3, #4
 800ba58:	2b04      	cmp	r3, #4
 800ba5a:	d10e      	bne.n	800ba7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ba60:	9300      	str	r3, [sp, #0]
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2200      	movs	r2, #0
 800ba66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f000 f819 	bl	800baa2 <UART_WaitOnFlagUntilTimeout>
 800ba70:	4603      	mov	r3, r0
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d001      	beq.n	800ba7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba76:	2303      	movs	r3, #3
 800ba78:	e00f      	b.n	800ba9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2220      	movs	r2, #32
 800ba7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2220      	movs	r2, #32
 800ba86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2200      	movs	r2, #0
 800ba94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ba98:	2300      	movs	r3, #0
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3710      	adds	r7, #16
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}

0800baa2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800baa2:	b580      	push	{r7, lr}
 800baa4:	b09c      	sub	sp, #112	; 0x70
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	60f8      	str	r0, [r7, #12]
 800baaa:	60b9      	str	r1, [r7, #8]
 800baac:	603b      	str	r3, [r7, #0]
 800baae:	4613      	mov	r3, r2
 800bab0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bab2:	e0a9      	b.n	800bc08 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bab4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baba:	f000 80a5 	beq.w	800bc08 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800babe:	f7f5 fc9b 	bl	80013f8 <HAL_GetTick>
 800bac2:	4602      	mov	r2, r0
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	1ad3      	subs	r3, r2, r3
 800bac8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800baca:	429a      	cmp	r2, r3
 800bacc:	d302      	bcc.n	800bad4 <UART_WaitOnFlagUntilTimeout+0x32>
 800bace:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d140      	bne.n	800bb56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800badc:	e853 3f00 	ldrex	r3, [r3]
 800bae0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bae4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bae8:	667b      	str	r3, [r7, #100]	; 0x64
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	461a      	mov	r2, r3
 800baf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800baf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800baf4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800baf8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bafa:	e841 2300 	strex	r3, r2, [r1]
 800bafe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bb00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d1e6      	bne.n	800bad4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	3308      	adds	r3, #8
 800bb0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb10:	e853 3f00 	ldrex	r3, [r3]
 800bb14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bb16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb18:	f023 0301 	bic.w	r3, r3, #1
 800bb1c:	663b      	str	r3, [r7, #96]	; 0x60
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	3308      	adds	r3, #8
 800bb24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bb26:	64ba      	str	r2, [r7, #72]	; 0x48
 800bb28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bb2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb2e:	e841 2300 	strex	r3, r2, [r1]
 800bb32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bb34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d1e5      	bne.n	800bb06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	2220      	movs	r2, #32
 800bb3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	2220      	movs	r2, #32
 800bb46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800bb52:	2303      	movs	r3, #3
 800bb54:	e069      	b.n	800bc2a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f003 0304 	and.w	r3, r3, #4
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d051      	beq.n	800bc08 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	69db      	ldr	r3, [r3, #28]
 800bb6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb72:	d149      	bne.n	800bc08 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bb7c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb86:	e853 3f00 	ldrex	r3, [r3]
 800bb8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bb92:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	461a      	mov	r2, r3
 800bb9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb9c:	637b      	str	r3, [r7, #52]	; 0x34
 800bb9e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bba0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bba2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bba4:	e841 2300 	strex	r3, r2, [r1]
 800bba8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bbaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d1e6      	bne.n	800bb7e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	3308      	adds	r3, #8
 800bbb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	e853 3f00 	ldrex	r3, [r3]
 800bbbe:	613b      	str	r3, [r7, #16]
   return(result);
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	f023 0301 	bic.w	r3, r3, #1
 800bbc6:	66bb      	str	r3, [r7, #104]	; 0x68
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	3308      	adds	r3, #8
 800bbce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bbd0:	623a      	str	r2, [r7, #32]
 800bbd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbd4:	69f9      	ldr	r1, [r7, #28]
 800bbd6:	6a3a      	ldr	r2, [r7, #32]
 800bbd8:	e841 2300 	strex	r3, r2, [r1]
 800bbdc:	61bb      	str	r3, [r7, #24]
   return(result);
 800bbde:	69bb      	ldr	r3, [r7, #24]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d1e5      	bne.n	800bbb0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	2220      	movs	r2, #32
 800bbe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2220      	movs	r2, #32
 800bbf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2220      	movs	r2, #32
 800bbf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800bc04:	2303      	movs	r3, #3
 800bc06:	e010      	b.n	800bc2a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	69da      	ldr	r2, [r3, #28]
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	4013      	ands	r3, r2
 800bc12:	68ba      	ldr	r2, [r7, #8]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	bf0c      	ite	eq
 800bc18:	2301      	moveq	r3, #1
 800bc1a:	2300      	movne	r3, #0
 800bc1c:	b2db      	uxtb	r3, r3
 800bc1e:	461a      	mov	r2, r3
 800bc20:	79fb      	ldrb	r3, [r7, #7]
 800bc22:	429a      	cmp	r2, r3
 800bc24:	f43f af46 	beq.w	800bab4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bc28:	2300      	movs	r3, #0
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3770      	adds	r7, #112	; 0x70
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}

0800bc32 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bc32:	b480      	push	{r7}
 800bc34:	b085      	sub	sp, #20
 800bc36:	af00      	add	r7, sp, #0
 800bc38:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	d101      	bne.n	800bc48 <HAL_UARTEx_DisableFifoMode+0x16>
 800bc44:	2302      	movs	r3, #2
 800bc46:	e027      	b.n	800bc98 <HAL_UARTEx_DisableFifoMode+0x66>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2224      	movs	r2, #36	; 0x24
 800bc54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	681a      	ldr	r2, [r3, #0]
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f022 0201 	bic.w	r2, r2, #1
 800bc6e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bc76:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	68fa      	ldr	r2, [r7, #12]
 800bc84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2220      	movs	r2, #32
 800bc8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2200      	movs	r2, #0
 800bc92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bc96:	2300      	movs	r3, #0
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3714      	adds	r7, #20
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr

0800bca4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b084      	sub	sp, #16
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d101      	bne.n	800bcbc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bcb8:	2302      	movs	r3, #2
 800bcba:	e02d      	b.n	800bd18 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2224      	movs	r2, #36	; 0x24
 800bcc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	681a      	ldr	r2, [r3, #0]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f022 0201 	bic.w	r2, r2, #1
 800bce2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	689b      	ldr	r3, [r3, #8]
 800bcea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	683a      	ldr	r2, [r7, #0]
 800bcf4:	430a      	orrs	r2, r1
 800bcf6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 f84f 	bl	800bd9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	68fa      	ldr	r2, [r7, #12]
 800bd04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2220      	movs	r2, #32
 800bd0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2200      	movs	r2, #0
 800bd12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bd16:	2300      	movs	r3, #0
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3710      	adds	r7, #16
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	d101      	bne.n	800bd38 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bd34:	2302      	movs	r3, #2
 800bd36:	e02d      	b.n	800bd94 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2224      	movs	r2, #36	; 0x24
 800bd44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	681a      	ldr	r2, [r3, #0]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f022 0201 	bic.w	r2, r2, #1
 800bd5e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	689b      	ldr	r3, [r3, #8]
 800bd66:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	683a      	ldr	r2, [r7, #0]
 800bd70:	430a      	orrs	r2, r1
 800bd72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f000 f811 	bl	800bd9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	68fa      	ldr	r2, [r7, #12]
 800bd80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2220      	movs	r2, #32
 800bd86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bd92:	2300      	movs	r3, #0
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3710      	adds	r7, #16
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}

0800bd9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b085      	sub	sp, #20
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d108      	bne.n	800bdbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2201      	movs	r2, #1
 800bdb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bdbc:	e031      	b.n	800be22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bdbe:	2310      	movs	r3, #16
 800bdc0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bdc2:	2310      	movs	r3, #16
 800bdc4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	689b      	ldr	r3, [r3, #8]
 800bdcc:	0e5b      	lsrs	r3, r3, #25
 800bdce:	b2db      	uxtb	r3, r3
 800bdd0:	f003 0307 	and.w	r3, r3, #7
 800bdd4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	689b      	ldr	r3, [r3, #8]
 800bddc:	0f5b      	lsrs	r3, r3, #29
 800bdde:	b2db      	uxtb	r3, r3
 800bde0:	f003 0307 	and.w	r3, r3, #7
 800bde4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bde6:	7bbb      	ldrb	r3, [r7, #14]
 800bde8:	7b3a      	ldrb	r2, [r7, #12]
 800bdea:	4911      	ldr	r1, [pc, #68]	; (800be30 <UARTEx_SetNbDataToProcess+0x94>)
 800bdec:	5c8a      	ldrb	r2, [r1, r2]
 800bdee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bdf2:	7b3a      	ldrb	r2, [r7, #12]
 800bdf4:	490f      	ldr	r1, [pc, #60]	; (800be34 <UARTEx_SetNbDataToProcess+0x98>)
 800bdf6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bdf8:	fb93 f3f2 	sdiv	r3, r3, r2
 800bdfc:	b29a      	uxth	r2, r3
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be04:	7bfb      	ldrb	r3, [r7, #15]
 800be06:	7b7a      	ldrb	r2, [r7, #13]
 800be08:	4909      	ldr	r1, [pc, #36]	; (800be30 <UARTEx_SetNbDataToProcess+0x94>)
 800be0a:	5c8a      	ldrb	r2, [r1, r2]
 800be0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800be10:	7b7a      	ldrb	r2, [r7, #13]
 800be12:	4908      	ldr	r1, [pc, #32]	; (800be34 <UARTEx_SetNbDataToProcess+0x98>)
 800be14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be16:	fb93 f3f2 	sdiv	r3, r3, r2
 800be1a:	b29a      	uxth	r2, r3
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800be22:	bf00      	nop
 800be24:	3714      	adds	r7, #20
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr
 800be2e:	bf00      	nop
 800be30:	0800fb3c 	.word	0x0800fb3c
 800be34:	0800fb44 	.word	0x0800fb44

0800be38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800be38:	b084      	sub	sp, #16
 800be3a:	b580      	push	{r7, lr}
 800be3c:	b084      	sub	sp, #16
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
 800be42:	f107 001c 	add.w	r0, r7, #28
 800be46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800be4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d120      	bne.n	800be92 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	68da      	ldr	r2, [r3, #12]
 800be60:	4b2a      	ldr	r3, [pc, #168]	; (800bf0c <USB_CoreInit+0xd4>)
 800be62:	4013      	ands	r3, r2
 800be64:	687a      	ldr	r2, [r7, #4]
 800be66:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	68db      	ldr	r3, [r3, #12]
 800be6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800be74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be76:	2b01      	cmp	r3, #1
 800be78:	d105      	bne.n	800be86 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	68db      	ldr	r3, [r3, #12]
 800be7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f001 fb4e 	bl	800d528 <USB_CoreReset>
 800be8c:	4603      	mov	r3, r0
 800be8e:	73fb      	strb	r3, [r7, #15]
 800be90:	e01a      	b.n	800bec8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	68db      	ldr	r3, [r3, #12]
 800be96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f001 fb42 	bl	800d528 <USB_CoreReset>
 800bea4:	4603      	mov	r3, r0
 800bea6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d106      	bne.n	800bebc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	639a      	str	r2, [r3, #56]	; 0x38
 800beba:	e005      	b.n	800bec8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bec0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beca:	2b01      	cmp	r3, #1
 800becc:	d116      	bne.n	800befc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bed2:	b29a      	uxth	r2, r3
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bedc:	4b0c      	ldr	r3, [pc, #48]	; (800bf10 <USB_CoreInit+0xd8>)
 800bede:	4313      	orrs	r3, r2
 800bee0:	687a      	ldr	r2, [r7, #4]
 800bee2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	689b      	ldr	r3, [r3, #8]
 800bee8:	f043 0206 	orr.w	r2, r3, #6
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	689b      	ldr	r3, [r3, #8]
 800bef4:	f043 0220 	orr.w	r2, r3, #32
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800befc:	7bfb      	ldrb	r3, [r7, #15]
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3710      	adds	r7, #16
 800bf02:	46bd      	mov	sp, r7
 800bf04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bf08:	b004      	add	sp, #16
 800bf0a:	4770      	bx	lr
 800bf0c:	ffbdffbf 	.word	0xffbdffbf
 800bf10:	03ee0000 	.word	0x03ee0000

0800bf14 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b087      	sub	sp, #28
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	60f8      	str	r0, [r7, #12]
 800bf1c:	60b9      	str	r1, [r7, #8]
 800bf1e:	4613      	mov	r3, r2
 800bf20:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bf22:	79fb      	ldrb	r3, [r7, #7]
 800bf24:	2b02      	cmp	r3, #2
 800bf26:	d165      	bne.n	800bff4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	4a41      	ldr	r2, [pc, #260]	; (800c030 <USB_SetTurnaroundTime+0x11c>)
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d906      	bls.n	800bf3e <USB_SetTurnaroundTime+0x2a>
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	4a40      	ldr	r2, [pc, #256]	; (800c034 <USB_SetTurnaroundTime+0x120>)
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d202      	bcs.n	800bf3e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bf38:	230f      	movs	r3, #15
 800bf3a:	617b      	str	r3, [r7, #20]
 800bf3c:	e062      	b.n	800c004 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	4a3c      	ldr	r2, [pc, #240]	; (800c034 <USB_SetTurnaroundTime+0x120>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d306      	bcc.n	800bf54 <USB_SetTurnaroundTime+0x40>
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	4a3b      	ldr	r2, [pc, #236]	; (800c038 <USB_SetTurnaroundTime+0x124>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d202      	bcs.n	800bf54 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bf4e:	230e      	movs	r3, #14
 800bf50:	617b      	str	r3, [r7, #20]
 800bf52:	e057      	b.n	800c004 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	4a38      	ldr	r2, [pc, #224]	; (800c038 <USB_SetTurnaroundTime+0x124>)
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	d306      	bcc.n	800bf6a <USB_SetTurnaroundTime+0x56>
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	4a37      	ldr	r2, [pc, #220]	; (800c03c <USB_SetTurnaroundTime+0x128>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d202      	bcs.n	800bf6a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800bf64:	230d      	movs	r3, #13
 800bf66:	617b      	str	r3, [r7, #20]
 800bf68:	e04c      	b.n	800c004 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	4a33      	ldr	r2, [pc, #204]	; (800c03c <USB_SetTurnaroundTime+0x128>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d306      	bcc.n	800bf80 <USB_SetTurnaroundTime+0x6c>
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	4a32      	ldr	r2, [pc, #200]	; (800c040 <USB_SetTurnaroundTime+0x12c>)
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d802      	bhi.n	800bf80 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800bf7a:	230c      	movs	r3, #12
 800bf7c:	617b      	str	r3, [r7, #20]
 800bf7e:	e041      	b.n	800c004 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	4a2f      	ldr	r2, [pc, #188]	; (800c040 <USB_SetTurnaroundTime+0x12c>)
 800bf84:	4293      	cmp	r3, r2
 800bf86:	d906      	bls.n	800bf96 <USB_SetTurnaroundTime+0x82>
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	4a2e      	ldr	r2, [pc, #184]	; (800c044 <USB_SetTurnaroundTime+0x130>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d802      	bhi.n	800bf96 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bf90:	230b      	movs	r3, #11
 800bf92:	617b      	str	r3, [r7, #20]
 800bf94:	e036      	b.n	800c004 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	4a2a      	ldr	r2, [pc, #168]	; (800c044 <USB_SetTurnaroundTime+0x130>)
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d906      	bls.n	800bfac <USB_SetTurnaroundTime+0x98>
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	4a29      	ldr	r2, [pc, #164]	; (800c048 <USB_SetTurnaroundTime+0x134>)
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d802      	bhi.n	800bfac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800bfa6:	230a      	movs	r3, #10
 800bfa8:	617b      	str	r3, [r7, #20]
 800bfaa:	e02b      	b.n	800c004 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	4a26      	ldr	r2, [pc, #152]	; (800c048 <USB_SetTurnaroundTime+0x134>)
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	d906      	bls.n	800bfc2 <USB_SetTurnaroundTime+0xae>
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	4a25      	ldr	r2, [pc, #148]	; (800c04c <USB_SetTurnaroundTime+0x138>)
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d202      	bcs.n	800bfc2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bfbc:	2309      	movs	r3, #9
 800bfbe:	617b      	str	r3, [r7, #20]
 800bfc0:	e020      	b.n	800c004 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	4a21      	ldr	r2, [pc, #132]	; (800c04c <USB_SetTurnaroundTime+0x138>)
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	d306      	bcc.n	800bfd8 <USB_SetTurnaroundTime+0xc4>
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	4a20      	ldr	r2, [pc, #128]	; (800c050 <USB_SetTurnaroundTime+0x13c>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d802      	bhi.n	800bfd8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800bfd2:	2308      	movs	r3, #8
 800bfd4:	617b      	str	r3, [r7, #20]
 800bfd6:	e015      	b.n	800c004 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	4a1d      	ldr	r2, [pc, #116]	; (800c050 <USB_SetTurnaroundTime+0x13c>)
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d906      	bls.n	800bfee <USB_SetTurnaroundTime+0xda>
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	4a1c      	ldr	r2, [pc, #112]	; (800c054 <USB_SetTurnaroundTime+0x140>)
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	d202      	bcs.n	800bfee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bfe8:	2307      	movs	r3, #7
 800bfea:	617b      	str	r3, [r7, #20]
 800bfec:	e00a      	b.n	800c004 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bfee:	2306      	movs	r3, #6
 800bff0:	617b      	str	r3, [r7, #20]
 800bff2:	e007      	b.n	800c004 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800bff4:	79fb      	ldrb	r3, [r7, #7]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d102      	bne.n	800c000 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800bffa:	2309      	movs	r3, #9
 800bffc:	617b      	str	r3, [r7, #20]
 800bffe:	e001      	b.n	800c004 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c000:	2309      	movs	r3, #9
 800c002:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	68db      	ldr	r3, [r3, #12]
 800c008:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	68da      	ldr	r2, [r3, #12]
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	029b      	lsls	r3, r3, #10
 800c018:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c01c:	431a      	orrs	r2, r3
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c022:	2300      	movs	r3, #0
}
 800c024:	4618      	mov	r0, r3
 800c026:	371c      	adds	r7, #28
 800c028:	46bd      	mov	sp, r7
 800c02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02e:	4770      	bx	lr
 800c030:	00d8acbf 	.word	0x00d8acbf
 800c034:	00e4e1c0 	.word	0x00e4e1c0
 800c038:	00f42400 	.word	0x00f42400
 800c03c:	01067380 	.word	0x01067380
 800c040:	011a499f 	.word	0x011a499f
 800c044:	01312cff 	.word	0x01312cff
 800c048:	014ca43f 	.word	0x014ca43f
 800c04c:	016e3600 	.word	0x016e3600
 800c050:	01a6ab1f 	.word	0x01a6ab1f
 800c054:	01e84800 	.word	0x01e84800

0800c058 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c058:	b480      	push	{r7}
 800c05a:	b083      	sub	sp, #12
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	689b      	ldr	r3, [r3, #8]
 800c064:	f043 0201 	orr.w	r2, r3, #1
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c06c:	2300      	movs	r3, #0
}
 800c06e:	4618      	mov	r0, r3
 800c070:	370c      	adds	r7, #12
 800c072:	46bd      	mov	sp, r7
 800c074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c078:	4770      	bx	lr

0800c07a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c07a:	b480      	push	{r7}
 800c07c:	b083      	sub	sp, #12
 800c07e:	af00      	add	r7, sp, #0
 800c080:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	689b      	ldr	r3, [r3, #8]
 800c086:	f023 0201 	bic.w	r2, r3, #1
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c08e:	2300      	movs	r3, #0
}
 800c090:	4618      	mov	r0, r3
 800c092:	370c      	adds	r7, #12
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr

0800c09c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b084      	sub	sp, #16
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	68db      	ldr	r3, [r3, #12]
 800c0b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c0b8:	78fb      	ldrb	r3, [r7, #3]
 800c0ba:	2b01      	cmp	r3, #1
 800c0bc:	d115      	bne.n	800c0ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	68db      	ldr	r3, [r3, #12]
 800c0c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c0ca:	2001      	movs	r0, #1
 800c0cc:	f7f5 f9a0 	bl	8001410 <HAL_Delay>
      ms++;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	3301      	adds	r3, #1
 800c0d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f001 f995 	bl	800d406 <USB_GetMode>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	2b01      	cmp	r3, #1
 800c0e0:	d01e      	beq.n	800c120 <USB_SetCurrentMode+0x84>
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2b31      	cmp	r3, #49	; 0x31
 800c0e6:	d9f0      	bls.n	800c0ca <USB_SetCurrentMode+0x2e>
 800c0e8:	e01a      	b.n	800c120 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c0ea:	78fb      	ldrb	r3, [r7, #3]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d115      	bne.n	800c11c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	68db      	ldr	r3, [r3, #12]
 800c0f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c0fc:	2001      	movs	r0, #1
 800c0fe:	f7f5 f987 	bl	8001410 <HAL_Delay>
      ms++;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	3301      	adds	r3, #1
 800c106:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f001 f97c 	bl	800d406 <USB_GetMode>
 800c10e:	4603      	mov	r3, r0
 800c110:	2b00      	cmp	r3, #0
 800c112:	d005      	beq.n	800c120 <USB_SetCurrentMode+0x84>
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	2b31      	cmp	r3, #49	; 0x31
 800c118:	d9f0      	bls.n	800c0fc <USB_SetCurrentMode+0x60>
 800c11a:	e001      	b.n	800c120 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c11c:	2301      	movs	r3, #1
 800c11e:	e005      	b.n	800c12c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2b32      	cmp	r3, #50	; 0x32
 800c124:	d101      	bne.n	800c12a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c126:	2301      	movs	r3, #1
 800c128:	e000      	b.n	800c12c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c12a:	2300      	movs	r3, #0
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3710      	adds	r7, #16
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c134:	b084      	sub	sp, #16
 800c136:	b580      	push	{r7, lr}
 800c138:	b086      	sub	sp, #24
 800c13a:	af00      	add	r7, sp, #0
 800c13c:	6078      	str	r0, [r7, #4]
 800c13e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c142:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c146:	2300      	movs	r3, #0
 800c148:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c14e:	2300      	movs	r3, #0
 800c150:	613b      	str	r3, [r7, #16]
 800c152:	e009      	b.n	800c168 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c154:	687a      	ldr	r2, [r7, #4]
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	3340      	adds	r3, #64	; 0x40
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	4413      	add	r3, r2
 800c15e:	2200      	movs	r2, #0
 800c160:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	3301      	adds	r3, #1
 800c166:	613b      	str	r3, [r7, #16]
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	2b0e      	cmp	r3, #14
 800c16c:	d9f2      	bls.n	800c154 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c16e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c170:	2b00      	cmp	r3, #0
 800c172:	d11c      	bne.n	800c1ae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	68fa      	ldr	r2, [r7, #12]
 800c17e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c182:	f043 0302 	orr.w	r3, r3, #2
 800c186:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c18c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	601a      	str	r2, [r3, #0]
 800c1ac:	e005      	b.n	800c1ba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c1c0:	461a      	mov	r2, r3
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1cc:	4619      	mov	r1, r3
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1d4:	461a      	mov	r2, r3
 800c1d6:	680b      	ldr	r3, [r1, #0]
 800c1d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	d10c      	bne.n	800c1fa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d104      	bne.n	800c1f0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c1e6:	2100      	movs	r1, #0
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f000 f961 	bl	800c4b0 <USB_SetDevSpeed>
 800c1ee:	e008      	b.n	800c202 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c1f0:	2101      	movs	r1, #1
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f000 f95c 	bl	800c4b0 <USB_SetDevSpeed>
 800c1f8:	e003      	b.n	800c202 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c1fa:	2103      	movs	r1, #3
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f000 f957 	bl	800c4b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c202:	2110      	movs	r1, #16
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f000 f8f3 	bl	800c3f0 <USB_FlushTxFifo>
 800c20a:	4603      	mov	r3, r0
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d001      	beq.n	800c214 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c210:	2301      	movs	r3, #1
 800c212:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 f91d 	bl	800c454 <USB_FlushRxFifo>
 800c21a:	4603      	mov	r3, r0
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d001      	beq.n	800c224 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c220:	2301      	movs	r3, #1
 800c222:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c22a:	461a      	mov	r2, r3
 800c22c:	2300      	movs	r3, #0
 800c22e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c236:	461a      	mov	r2, r3
 800c238:	2300      	movs	r3, #0
 800c23a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c242:	461a      	mov	r2, r3
 800c244:	2300      	movs	r3, #0
 800c246:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c248:	2300      	movs	r3, #0
 800c24a:	613b      	str	r3, [r7, #16]
 800c24c:	e043      	b.n	800c2d6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	015a      	lsls	r2, r3, #5
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	4413      	add	r3, r2
 800c256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c260:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c264:	d118      	bne.n	800c298 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d10a      	bne.n	800c282 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	015a      	lsls	r2, r3, #5
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	4413      	add	r3, r2
 800c274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c278:	461a      	mov	r2, r3
 800c27a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c27e:	6013      	str	r3, [r2, #0]
 800c280:	e013      	b.n	800c2aa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	015a      	lsls	r2, r3, #5
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	4413      	add	r3, r2
 800c28a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c28e:	461a      	mov	r2, r3
 800c290:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c294:	6013      	str	r3, [r2, #0]
 800c296:	e008      	b.n	800c2aa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	015a      	lsls	r2, r3, #5
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	4413      	add	r3, r2
 800c2a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2a4:	461a      	mov	r2, r3
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	015a      	lsls	r2, r3, #5
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	4413      	add	r3, r2
 800c2b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	015a      	lsls	r2, r3, #5
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	4413      	add	r3, r2
 800c2c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c2ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	613b      	str	r3, [r7, #16]
 800c2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d8:	693a      	ldr	r2, [r7, #16]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d3b7      	bcc.n	800c24e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c2de:	2300      	movs	r3, #0
 800c2e0:	613b      	str	r3, [r7, #16]
 800c2e2:	e043      	b.n	800c36c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	015a      	lsls	r2, r3, #5
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	4413      	add	r3, r2
 800c2ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c2f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c2fa:	d118      	bne.n	800c32e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d10a      	bne.n	800c318 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	015a      	lsls	r2, r3, #5
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	4413      	add	r3, r2
 800c30a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c30e:	461a      	mov	r2, r3
 800c310:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c314:	6013      	str	r3, [r2, #0]
 800c316:	e013      	b.n	800c340 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	015a      	lsls	r2, r3, #5
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	4413      	add	r3, r2
 800c320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c324:	461a      	mov	r2, r3
 800c326:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c32a:	6013      	str	r3, [r2, #0]
 800c32c:	e008      	b.n	800c340 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	015a      	lsls	r2, r3, #5
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	4413      	add	r3, r2
 800c336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c33a:	461a      	mov	r2, r3
 800c33c:	2300      	movs	r3, #0
 800c33e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	015a      	lsls	r2, r3, #5
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	4413      	add	r3, r2
 800c348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c34c:	461a      	mov	r2, r3
 800c34e:	2300      	movs	r3, #0
 800c350:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	015a      	lsls	r2, r3, #5
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	4413      	add	r3, r2
 800c35a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c35e:	461a      	mov	r2, r3
 800c360:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c364:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	3301      	adds	r3, #1
 800c36a:	613b      	str	r3, [r7, #16]
 800c36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36e:	693a      	ldr	r2, [r7, #16]
 800c370:	429a      	cmp	r2, r3
 800c372:	d3b7      	bcc.n	800c2e4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c37a:	691b      	ldr	r3, [r3, #16]
 800c37c:	68fa      	ldr	r2, [r7, #12]
 800c37e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c382:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c386:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2200      	movs	r2, #0
 800c38c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c394:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d105      	bne.n	800c3a8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	699b      	ldr	r3, [r3, #24]
 800c3a0:	f043 0210 	orr.w	r2, r3, #16
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	699a      	ldr	r2, [r3, #24]
 800c3ac:	4b0e      	ldr	r3, [pc, #56]	; (800c3e8 <USB_DevInit+0x2b4>)
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	687a      	ldr	r2, [r7, #4]
 800c3b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c3b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d005      	beq.n	800c3c6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	699b      	ldr	r3, [r3, #24]
 800c3be:	f043 0208 	orr.w	r2, r3, #8
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c3c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3c8:	2b01      	cmp	r3, #1
 800c3ca:	d105      	bne.n	800c3d8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	699a      	ldr	r2, [r3, #24]
 800c3d0:	4b06      	ldr	r3, [pc, #24]	; (800c3ec <USB_DevInit+0x2b8>)
 800c3d2:	4313      	orrs	r3, r2
 800c3d4:	687a      	ldr	r2, [r7, #4]
 800c3d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c3d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3718      	adds	r7, #24
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c3e4:	b004      	add	sp, #16
 800c3e6:	4770      	bx	lr
 800c3e8:	803c3800 	.word	0x803c3800
 800c3ec:	40000004 	.word	0x40000004

0800c3f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b085      	sub	sp, #20
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	3301      	adds	r3, #1
 800c402:	60fb      	str	r3, [r7, #12]
 800c404:	4a12      	ldr	r2, [pc, #72]	; (800c450 <USB_FlushTxFifo+0x60>)
 800c406:	4293      	cmp	r3, r2
 800c408:	d901      	bls.n	800c40e <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c40a:	2303      	movs	r3, #3
 800c40c:	e01a      	b.n	800c444 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	691b      	ldr	r3, [r3, #16]
 800c412:	2b00      	cmp	r3, #0
 800c414:	daf3      	bge.n	800c3fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c416:	2300      	movs	r3, #0
 800c418:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	019b      	lsls	r3, r3, #6
 800c41e:	f043 0220 	orr.w	r2, r3, #32
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	3301      	adds	r3, #1
 800c42a:	60fb      	str	r3, [r7, #12]
 800c42c:	4a08      	ldr	r2, [pc, #32]	; (800c450 <USB_FlushTxFifo+0x60>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d901      	bls.n	800c436 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800c432:	2303      	movs	r3, #3
 800c434:	e006      	b.n	800c444 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	691b      	ldr	r3, [r3, #16]
 800c43a:	f003 0320 	and.w	r3, r3, #32
 800c43e:	2b20      	cmp	r3, #32
 800c440:	d0f1      	beq.n	800c426 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800c442:	2300      	movs	r3, #0
}
 800c444:	4618      	mov	r0, r3
 800c446:	3714      	adds	r7, #20
 800c448:	46bd      	mov	sp, r7
 800c44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44e:	4770      	bx	lr
 800c450:	00030d40 	.word	0x00030d40

0800c454 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c454:	b480      	push	{r7}
 800c456:	b085      	sub	sp, #20
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c45c:	2300      	movs	r3, #0
 800c45e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	3301      	adds	r3, #1
 800c464:	60fb      	str	r3, [r7, #12]
 800c466:	4a11      	ldr	r2, [pc, #68]	; (800c4ac <USB_FlushRxFifo+0x58>)
 800c468:	4293      	cmp	r3, r2
 800c46a:	d901      	bls.n	800c470 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800c46c:	2303      	movs	r3, #3
 800c46e:	e017      	b.n	800c4a0 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	691b      	ldr	r3, [r3, #16]
 800c474:	2b00      	cmp	r3, #0
 800c476:	daf3      	bge.n	800c460 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c478:	2300      	movs	r3, #0
 800c47a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2210      	movs	r2, #16
 800c480:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	3301      	adds	r3, #1
 800c486:	60fb      	str	r3, [r7, #12]
 800c488:	4a08      	ldr	r2, [pc, #32]	; (800c4ac <USB_FlushRxFifo+0x58>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d901      	bls.n	800c492 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800c48e:	2303      	movs	r3, #3
 800c490:	e006      	b.n	800c4a0 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	691b      	ldr	r3, [r3, #16]
 800c496:	f003 0310 	and.w	r3, r3, #16
 800c49a:	2b10      	cmp	r3, #16
 800c49c:	d0f1      	beq.n	800c482 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800c49e:	2300      	movs	r3, #0
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3714      	adds	r7, #20
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4aa:	4770      	bx	lr
 800c4ac:	00030d40 	.word	0x00030d40

0800c4b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b085      	sub	sp, #20
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	460b      	mov	r3, r1
 800c4ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4c6:	681a      	ldr	r2, [r3, #0]
 800c4c8:	78fb      	ldrb	r3, [r7, #3]
 800c4ca:	68f9      	ldr	r1, [r7, #12]
 800c4cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c4d0:	4313      	orrs	r3, r2
 800c4d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c4d4:	2300      	movs	r3, #0
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3714      	adds	r7, #20
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e0:	4770      	bx	lr

0800c4e2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c4e2:	b480      	push	{r7}
 800c4e4:	b087      	sub	sp, #28
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4f4:	689b      	ldr	r3, [r3, #8]
 800c4f6:	f003 0306 	and.w	r3, r3, #6
 800c4fa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d102      	bne.n	800c508 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c502:	2300      	movs	r3, #0
 800c504:	75fb      	strb	r3, [r7, #23]
 800c506:	e00a      	b.n	800c51e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	2b02      	cmp	r3, #2
 800c50c:	d002      	beq.n	800c514 <USB_GetDevSpeed+0x32>
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2b06      	cmp	r3, #6
 800c512:	d102      	bne.n	800c51a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c514:	2302      	movs	r3, #2
 800c516:	75fb      	strb	r3, [r7, #23]
 800c518:	e001      	b.n	800c51e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c51a:	230f      	movs	r3, #15
 800c51c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c51e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c520:	4618      	mov	r0, r3
 800c522:	371c      	adds	r7, #28
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr

0800c52c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b085      	sub	sp, #20
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	781b      	ldrb	r3, [r3, #0]
 800c53e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	785b      	ldrb	r3, [r3, #1]
 800c544:	2b01      	cmp	r3, #1
 800c546:	d139      	bne.n	800c5bc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c54e:	69da      	ldr	r2, [r3, #28]
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	781b      	ldrb	r3, [r3, #0]
 800c554:	f003 030f 	and.w	r3, r3, #15
 800c558:	2101      	movs	r1, #1
 800c55a:	fa01 f303 	lsl.w	r3, r1, r3
 800c55e:	b29b      	uxth	r3, r3
 800c560:	68f9      	ldr	r1, [r7, #12]
 800c562:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c566:	4313      	orrs	r3, r2
 800c568:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	015a      	lsls	r2, r3, #5
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	4413      	add	r3, r2
 800c572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d153      	bne.n	800c628 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	015a      	lsls	r2, r3, #5
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	4413      	add	r3, r2
 800c588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c58c:	681a      	ldr	r2, [r3, #0]
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	689b      	ldr	r3, [r3, #8]
 800c592:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	78db      	ldrb	r3, [r3, #3]
 800c59a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c59c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	059b      	lsls	r3, r3, #22
 800c5a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c5a4:	431a      	orrs	r2, r3
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	0159      	lsls	r1, r3, #5
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	440b      	add	r3, r1
 800c5ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	4b20      	ldr	r3, [pc, #128]	; (800c638 <USB_ActivateEndpoint+0x10c>)
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	600b      	str	r3, [r1, #0]
 800c5ba:	e035      	b.n	800c628 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5c2:	69da      	ldr	r2, [r3, #28]
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	781b      	ldrb	r3, [r3, #0]
 800c5c8:	f003 030f 	and.w	r3, r3, #15
 800c5cc:	2101      	movs	r1, #1
 800c5ce:	fa01 f303 	lsl.w	r3, r1, r3
 800c5d2:	041b      	lsls	r3, r3, #16
 800c5d4:	68f9      	ldr	r1, [r7, #12]
 800c5d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c5da:	4313      	orrs	r3, r2
 800c5dc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	015a      	lsls	r2, r3, #5
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	4413      	add	r3, r2
 800c5e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d119      	bne.n	800c628 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	015a      	lsls	r2, r3, #5
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	4413      	add	r3, r2
 800c5fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c600:	681a      	ldr	r2, [r3, #0]
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	689b      	ldr	r3, [r3, #8]
 800c606:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	78db      	ldrb	r3, [r3, #3]
 800c60e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c610:	430b      	orrs	r3, r1
 800c612:	431a      	orrs	r2, r3
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	0159      	lsls	r1, r3, #5
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	440b      	add	r3, r1
 800c61c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c620:	4619      	mov	r1, r3
 800c622:	4b05      	ldr	r3, [pc, #20]	; (800c638 <USB_ActivateEndpoint+0x10c>)
 800c624:	4313      	orrs	r3, r2
 800c626:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c628:	2300      	movs	r3, #0
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3714      	adds	r7, #20
 800c62e:	46bd      	mov	sp, r7
 800c630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c634:	4770      	bx	lr
 800c636:	bf00      	nop
 800c638:	10008000 	.word	0x10008000

0800c63c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b085      	sub	sp, #20
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	781b      	ldrb	r3, [r3, #0]
 800c64e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	785b      	ldrb	r3, [r3, #1]
 800c654:	2b01      	cmp	r3, #1
 800c656:	d161      	bne.n	800c71c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	015a      	lsls	r2, r3, #5
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	4413      	add	r3, r2
 800c660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c66a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c66e:	d11f      	bne.n	800c6b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	015a      	lsls	r2, r3, #5
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	4413      	add	r3, r2
 800c678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	68ba      	ldr	r2, [r7, #8]
 800c680:	0151      	lsls	r1, r2, #5
 800c682:	68fa      	ldr	r2, [r7, #12]
 800c684:	440a      	add	r2, r1
 800c686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c68a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c68e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	015a      	lsls	r2, r3, #5
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	4413      	add	r3, r2
 800c698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	68ba      	ldr	r2, [r7, #8]
 800c6a0:	0151      	lsls	r1, r2, #5
 800c6a2:	68fa      	ldr	r2, [r7, #12]
 800c6a4:	440a      	add	r2, r1
 800c6a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c6ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	f003 030f 	and.w	r3, r3, #15
 800c6c0:	2101      	movs	r1, #1
 800c6c2:	fa01 f303 	lsl.w	r3, r1, r3
 800c6c6:	b29b      	uxth	r3, r3
 800c6c8:	43db      	mvns	r3, r3
 800c6ca:	68f9      	ldr	r1, [r7, #12]
 800c6cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c6d0:	4013      	ands	r3, r2
 800c6d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6da:	69da      	ldr	r2, [r3, #28]
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	781b      	ldrb	r3, [r3, #0]
 800c6e0:	f003 030f 	and.w	r3, r3, #15
 800c6e4:	2101      	movs	r1, #1
 800c6e6:	fa01 f303 	lsl.w	r3, r1, r3
 800c6ea:	b29b      	uxth	r3, r3
 800c6ec:	43db      	mvns	r3, r3
 800c6ee:	68f9      	ldr	r1, [r7, #12]
 800c6f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c6f4:	4013      	ands	r3, r2
 800c6f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	015a      	lsls	r2, r3, #5
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	4413      	add	r3, r2
 800c700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c704:	681a      	ldr	r2, [r3, #0]
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	0159      	lsls	r1, r3, #5
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	440b      	add	r3, r1
 800c70e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c712:	4619      	mov	r1, r3
 800c714:	4b35      	ldr	r3, [pc, #212]	; (800c7ec <USB_DeactivateEndpoint+0x1b0>)
 800c716:	4013      	ands	r3, r2
 800c718:	600b      	str	r3, [r1, #0]
 800c71a:	e060      	b.n	800c7de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	015a      	lsls	r2, r3, #5
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	4413      	add	r3, r2
 800c724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c72e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c732:	d11f      	bne.n	800c774 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	015a      	lsls	r2, r3, #5
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	4413      	add	r3, r2
 800c73c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	68ba      	ldr	r2, [r7, #8]
 800c744:	0151      	lsls	r1, r2, #5
 800c746:	68fa      	ldr	r2, [r7, #12]
 800c748:	440a      	add	r2, r1
 800c74a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c74e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c752:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	015a      	lsls	r2, r3, #5
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	4413      	add	r3, r2
 800c75c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	68ba      	ldr	r2, [r7, #8]
 800c764:	0151      	lsls	r1, r2, #5
 800c766:	68fa      	ldr	r2, [r7, #12]
 800c768:	440a      	add	r2, r1
 800c76a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c76e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c772:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c77a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	f003 030f 	and.w	r3, r3, #15
 800c784:	2101      	movs	r1, #1
 800c786:	fa01 f303 	lsl.w	r3, r1, r3
 800c78a:	041b      	lsls	r3, r3, #16
 800c78c:	43db      	mvns	r3, r3
 800c78e:	68f9      	ldr	r1, [r7, #12]
 800c790:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c794:	4013      	ands	r3, r2
 800c796:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c79e:	69da      	ldr	r2, [r3, #28]
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	f003 030f 	and.w	r3, r3, #15
 800c7a8:	2101      	movs	r1, #1
 800c7aa:	fa01 f303 	lsl.w	r3, r1, r3
 800c7ae:	041b      	lsls	r3, r3, #16
 800c7b0:	43db      	mvns	r3, r3
 800c7b2:	68f9      	ldr	r1, [r7, #12]
 800c7b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c7b8:	4013      	ands	r3, r2
 800c7ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	015a      	lsls	r2, r3, #5
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	4413      	add	r3, r2
 800c7c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7c8:	681a      	ldr	r2, [r3, #0]
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	0159      	lsls	r1, r3, #5
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	440b      	add	r3, r1
 800c7d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	4b05      	ldr	r3, [pc, #20]	; (800c7f0 <USB_DeactivateEndpoint+0x1b4>)
 800c7da:	4013      	ands	r3, r2
 800c7dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c7de:	2300      	movs	r3, #0
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3714      	adds	r7, #20
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ea:	4770      	bx	lr
 800c7ec:	ec337800 	.word	0xec337800
 800c7f0:	eff37800 	.word	0xeff37800

0800c7f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b08a      	sub	sp, #40	; 0x28
 800c7f8:	af02      	add	r7, sp, #8
 800c7fa:	60f8      	str	r0, [r7, #12]
 800c7fc:	60b9      	str	r1, [r7, #8]
 800c7fe:	4613      	mov	r3, r2
 800c800:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	781b      	ldrb	r3, [r3, #0]
 800c80a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	785b      	ldrb	r3, [r3, #1]
 800c810:	2b01      	cmp	r3, #1
 800c812:	f040 8163 	bne.w	800cadc <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	695b      	ldr	r3, [r3, #20]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d132      	bne.n	800c884 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c81e:	69bb      	ldr	r3, [r7, #24]
 800c820:	015a      	lsls	r2, r3, #5
 800c822:	69fb      	ldr	r3, [r7, #28]
 800c824:	4413      	add	r3, r2
 800c826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c82a:	691a      	ldr	r2, [r3, #16]
 800c82c:	69bb      	ldr	r3, [r7, #24]
 800c82e:	0159      	lsls	r1, r3, #5
 800c830:	69fb      	ldr	r3, [r7, #28]
 800c832:	440b      	add	r3, r1
 800c834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c838:	4619      	mov	r1, r3
 800c83a:	4ba5      	ldr	r3, [pc, #660]	; (800cad0 <USB_EPStartXfer+0x2dc>)
 800c83c:	4013      	ands	r3, r2
 800c83e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c840:	69bb      	ldr	r3, [r7, #24]
 800c842:	015a      	lsls	r2, r3, #5
 800c844:	69fb      	ldr	r3, [r7, #28]
 800c846:	4413      	add	r3, r2
 800c848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c84c:	691b      	ldr	r3, [r3, #16]
 800c84e:	69ba      	ldr	r2, [r7, #24]
 800c850:	0151      	lsls	r1, r2, #5
 800c852:	69fa      	ldr	r2, [r7, #28]
 800c854:	440a      	add	r2, r1
 800c856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c85a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c85e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c860:	69bb      	ldr	r3, [r7, #24]
 800c862:	015a      	lsls	r2, r3, #5
 800c864:	69fb      	ldr	r3, [r7, #28]
 800c866:	4413      	add	r3, r2
 800c868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c86c:	691a      	ldr	r2, [r3, #16]
 800c86e:	69bb      	ldr	r3, [r7, #24]
 800c870:	0159      	lsls	r1, r3, #5
 800c872:	69fb      	ldr	r3, [r7, #28]
 800c874:	440b      	add	r3, r1
 800c876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c87a:	4619      	mov	r1, r3
 800c87c:	4b95      	ldr	r3, [pc, #596]	; (800cad4 <USB_EPStartXfer+0x2e0>)
 800c87e:	4013      	ands	r3, r2
 800c880:	610b      	str	r3, [r1, #16]
 800c882:	e074      	b.n	800c96e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c884:	69bb      	ldr	r3, [r7, #24]
 800c886:	015a      	lsls	r2, r3, #5
 800c888:	69fb      	ldr	r3, [r7, #28]
 800c88a:	4413      	add	r3, r2
 800c88c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c890:	691a      	ldr	r2, [r3, #16]
 800c892:	69bb      	ldr	r3, [r7, #24]
 800c894:	0159      	lsls	r1, r3, #5
 800c896:	69fb      	ldr	r3, [r7, #28]
 800c898:	440b      	add	r3, r1
 800c89a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c89e:	4619      	mov	r1, r3
 800c8a0:	4b8c      	ldr	r3, [pc, #560]	; (800cad4 <USB_EPStartXfer+0x2e0>)
 800c8a2:	4013      	ands	r3, r2
 800c8a4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c8a6:	69bb      	ldr	r3, [r7, #24]
 800c8a8:	015a      	lsls	r2, r3, #5
 800c8aa:	69fb      	ldr	r3, [r7, #28]
 800c8ac:	4413      	add	r3, r2
 800c8ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8b2:	691a      	ldr	r2, [r3, #16]
 800c8b4:	69bb      	ldr	r3, [r7, #24]
 800c8b6:	0159      	lsls	r1, r3, #5
 800c8b8:	69fb      	ldr	r3, [r7, #28]
 800c8ba:	440b      	add	r3, r1
 800c8bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	4b83      	ldr	r3, [pc, #524]	; (800cad0 <USB_EPStartXfer+0x2dc>)
 800c8c4:	4013      	ands	r3, r2
 800c8c6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c8c8:	69bb      	ldr	r3, [r7, #24]
 800c8ca:	015a      	lsls	r2, r3, #5
 800c8cc:	69fb      	ldr	r3, [r7, #28]
 800c8ce:	4413      	add	r3, r2
 800c8d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8d4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	6959      	ldr	r1, [r3, #20]
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	689b      	ldr	r3, [r3, #8]
 800c8de:	440b      	add	r3, r1
 800c8e0:	1e59      	subs	r1, r3, #1
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	689b      	ldr	r3, [r3, #8]
 800c8e6:	fbb1 f3f3 	udiv	r3, r1, r3
 800c8ea:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c8ec:	4b7a      	ldr	r3, [pc, #488]	; (800cad8 <USB_EPStartXfer+0x2e4>)
 800c8ee:	400b      	ands	r3, r1
 800c8f0:	69b9      	ldr	r1, [r7, #24]
 800c8f2:	0148      	lsls	r0, r1, #5
 800c8f4:	69f9      	ldr	r1, [r7, #28]
 800c8f6:	4401      	add	r1, r0
 800c8f8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c8fc:	4313      	orrs	r3, r2
 800c8fe:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c900:	69bb      	ldr	r3, [r7, #24]
 800c902:	015a      	lsls	r2, r3, #5
 800c904:	69fb      	ldr	r3, [r7, #28]
 800c906:	4413      	add	r3, r2
 800c908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c90c:	691a      	ldr	r2, [r3, #16]
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	695b      	ldr	r3, [r3, #20]
 800c912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c916:	69b9      	ldr	r1, [r7, #24]
 800c918:	0148      	lsls	r0, r1, #5
 800c91a:	69f9      	ldr	r1, [r7, #28]
 800c91c:	4401      	add	r1, r0
 800c91e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c922:	4313      	orrs	r3, r2
 800c924:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	78db      	ldrb	r3, [r3, #3]
 800c92a:	2b01      	cmp	r3, #1
 800c92c:	d11f      	bne.n	800c96e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c92e:	69bb      	ldr	r3, [r7, #24]
 800c930:	015a      	lsls	r2, r3, #5
 800c932:	69fb      	ldr	r3, [r7, #28]
 800c934:	4413      	add	r3, r2
 800c936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c93a:	691b      	ldr	r3, [r3, #16]
 800c93c:	69ba      	ldr	r2, [r7, #24]
 800c93e:	0151      	lsls	r1, r2, #5
 800c940:	69fa      	ldr	r2, [r7, #28]
 800c942:	440a      	add	r2, r1
 800c944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c948:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c94c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c94e:	69bb      	ldr	r3, [r7, #24]
 800c950:	015a      	lsls	r2, r3, #5
 800c952:	69fb      	ldr	r3, [r7, #28]
 800c954:	4413      	add	r3, r2
 800c956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c95a:	691b      	ldr	r3, [r3, #16]
 800c95c:	69ba      	ldr	r2, [r7, #24]
 800c95e:	0151      	lsls	r1, r2, #5
 800c960:	69fa      	ldr	r2, [r7, #28]
 800c962:	440a      	add	r2, r1
 800c964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c968:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c96c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c96e:	79fb      	ldrb	r3, [r7, #7]
 800c970:	2b01      	cmp	r3, #1
 800c972:	d14b      	bne.n	800ca0c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	691b      	ldr	r3, [r3, #16]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d009      	beq.n	800c990 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c97c:	69bb      	ldr	r3, [r7, #24]
 800c97e:	015a      	lsls	r2, r3, #5
 800c980:	69fb      	ldr	r3, [r7, #28]
 800c982:	4413      	add	r3, r2
 800c984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c988:	461a      	mov	r2, r3
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	691b      	ldr	r3, [r3, #16]
 800c98e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	78db      	ldrb	r3, [r3, #3]
 800c994:	2b01      	cmp	r3, #1
 800c996:	d128      	bne.n	800c9ea <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c998:	69fb      	ldr	r3, [r7, #28]
 800c99a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c99e:	689b      	ldr	r3, [r3, #8]
 800c9a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d110      	bne.n	800c9ca <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c9a8:	69bb      	ldr	r3, [r7, #24]
 800c9aa:	015a      	lsls	r2, r3, #5
 800c9ac:	69fb      	ldr	r3, [r7, #28]
 800c9ae:	4413      	add	r3, r2
 800c9b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	69ba      	ldr	r2, [r7, #24]
 800c9b8:	0151      	lsls	r1, r2, #5
 800c9ba:	69fa      	ldr	r2, [r7, #28]
 800c9bc:	440a      	add	r2, r1
 800c9be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c9c6:	6013      	str	r3, [r2, #0]
 800c9c8:	e00f      	b.n	800c9ea <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c9ca:	69bb      	ldr	r3, [r7, #24]
 800c9cc:	015a      	lsls	r2, r3, #5
 800c9ce:	69fb      	ldr	r3, [r7, #28]
 800c9d0:	4413      	add	r3, r2
 800c9d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	69ba      	ldr	r2, [r7, #24]
 800c9da:	0151      	lsls	r1, r2, #5
 800c9dc:	69fa      	ldr	r2, [r7, #28]
 800c9de:	440a      	add	r2, r1
 800c9e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c9e8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c9ea:	69bb      	ldr	r3, [r7, #24]
 800c9ec:	015a      	lsls	r2, r3, #5
 800c9ee:	69fb      	ldr	r3, [r7, #28]
 800c9f0:	4413      	add	r3, r2
 800c9f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	69ba      	ldr	r2, [r7, #24]
 800c9fa:	0151      	lsls	r1, r2, #5
 800c9fc:	69fa      	ldr	r2, [r7, #28]
 800c9fe:	440a      	add	r2, r1
 800ca00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ca08:	6013      	str	r3, [r2, #0]
 800ca0a:	e133      	b.n	800cc74 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ca0c:	69bb      	ldr	r3, [r7, #24]
 800ca0e:	015a      	lsls	r2, r3, #5
 800ca10:	69fb      	ldr	r3, [r7, #28]
 800ca12:	4413      	add	r3, r2
 800ca14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	69ba      	ldr	r2, [r7, #24]
 800ca1c:	0151      	lsls	r1, r2, #5
 800ca1e:	69fa      	ldr	r2, [r7, #28]
 800ca20:	440a      	add	r2, r1
 800ca22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ca2a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	78db      	ldrb	r3, [r3, #3]
 800ca30:	2b01      	cmp	r3, #1
 800ca32:	d015      	beq.n	800ca60 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	695b      	ldr	r3, [r3, #20]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	f000 811b 	beq.w	800cc74 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ca3e:	69fb      	ldr	r3, [r7, #28]
 800ca40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	f003 030f 	and.w	r3, r3, #15
 800ca4e:	2101      	movs	r1, #1
 800ca50:	fa01 f303 	lsl.w	r3, r1, r3
 800ca54:	69f9      	ldr	r1, [r7, #28]
 800ca56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca5a:	4313      	orrs	r3, r2
 800ca5c:	634b      	str	r3, [r1, #52]	; 0x34
 800ca5e:	e109      	b.n	800cc74 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ca60:	69fb      	ldr	r3, [r7, #28]
 800ca62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca66:	689b      	ldr	r3, [r3, #8]
 800ca68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d110      	bne.n	800ca92 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ca70:	69bb      	ldr	r3, [r7, #24]
 800ca72:	015a      	lsls	r2, r3, #5
 800ca74:	69fb      	ldr	r3, [r7, #28]
 800ca76:	4413      	add	r3, r2
 800ca78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	69ba      	ldr	r2, [r7, #24]
 800ca80:	0151      	lsls	r1, r2, #5
 800ca82:	69fa      	ldr	r2, [r7, #28]
 800ca84:	440a      	add	r2, r1
 800ca86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ca8e:	6013      	str	r3, [r2, #0]
 800ca90:	e00f      	b.n	800cab2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ca92:	69bb      	ldr	r3, [r7, #24]
 800ca94:	015a      	lsls	r2, r3, #5
 800ca96:	69fb      	ldr	r3, [r7, #28]
 800ca98:	4413      	add	r3, r2
 800ca9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	69ba      	ldr	r2, [r7, #24]
 800caa2:	0151      	lsls	r1, r2, #5
 800caa4:	69fa      	ldr	r2, [r7, #28]
 800caa6:	440a      	add	r2, r1
 800caa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800caac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cab0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	68d9      	ldr	r1, [r3, #12]
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	781a      	ldrb	r2, [r3, #0]
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	695b      	ldr	r3, [r3, #20]
 800cabe:	b298      	uxth	r0, r3
 800cac0:	79fb      	ldrb	r3, [r7, #7]
 800cac2:	9300      	str	r3, [sp, #0]
 800cac4:	4603      	mov	r3, r0
 800cac6:	68f8      	ldr	r0, [r7, #12]
 800cac8:	f000 fa38 	bl	800cf3c <USB_WritePacket>
 800cacc:	e0d2      	b.n	800cc74 <USB_EPStartXfer+0x480>
 800cace:	bf00      	nop
 800cad0:	e007ffff 	.word	0xe007ffff
 800cad4:	fff80000 	.word	0xfff80000
 800cad8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cadc:	69bb      	ldr	r3, [r7, #24]
 800cade:	015a      	lsls	r2, r3, #5
 800cae0:	69fb      	ldr	r3, [r7, #28]
 800cae2:	4413      	add	r3, r2
 800cae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cae8:	691a      	ldr	r2, [r3, #16]
 800caea:	69bb      	ldr	r3, [r7, #24]
 800caec:	0159      	lsls	r1, r3, #5
 800caee:	69fb      	ldr	r3, [r7, #28]
 800caf0:	440b      	add	r3, r1
 800caf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caf6:	4619      	mov	r1, r3
 800caf8:	4b61      	ldr	r3, [pc, #388]	; (800cc80 <USB_EPStartXfer+0x48c>)
 800cafa:	4013      	ands	r3, r2
 800cafc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cafe:	69bb      	ldr	r3, [r7, #24]
 800cb00:	015a      	lsls	r2, r3, #5
 800cb02:	69fb      	ldr	r3, [r7, #28]
 800cb04:	4413      	add	r3, r2
 800cb06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb0a:	691a      	ldr	r2, [r3, #16]
 800cb0c:	69bb      	ldr	r3, [r7, #24]
 800cb0e:	0159      	lsls	r1, r3, #5
 800cb10:	69fb      	ldr	r3, [r7, #28]
 800cb12:	440b      	add	r3, r1
 800cb14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb18:	4619      	mov	r1, r3
 800cb1a:	4b5a      	ldr	r3, [pc, #360]	; (800cc84 <USB_EPStartXfer+0x490>)
 800cb1c:	4013      	ands	r3, r2
 800cb1e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	695b      	ldr	r3, [r3, #20]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d123      	bne.n	800cb70 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800cb28:	69bb      	ldr	r3, [r7, #24]
 800cb2a:	015a      	lsls	r2, r3, #5
 800cb2c:	69fb      	ldr	r3, [r7, #28]
 800cb2e:	4413      	add	r3, r2
 800cb30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb34:	691a      	ldr	r2, [r3, #16]
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	689b      	ldr	r3, [r3, #8]
 800cb3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cb3e:	69b9      	ldr	r1, [r7, #24]
 800cb40:	0148      	lsls	r0, r1, #5
 800cb42:	69f9      	ldr	r1, [r7, #28]
 800cb44:	4401      	add	r1, r0
 800cb46:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cb4a:	4313      	orrs	r3, r2
 800cb4c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cb4e:	69bb      	ldr	r3, [r7, #24]
 800cb50:	015a      	lsls	r2, r3, #5
 800cb52:	69fb      	ldr	r3, [r7, #28]
 800cb54:	4413      	add	r3, r2
 800cb56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb5a:	691b      	ldr	r3, [r3, #16]
 800cb5c:	69ba      	ldr	r2, [r7, #24]
 800cb5e:	0151      	lsls	r1, r2, #5
 800cb60:	69fa      	ldr	r2, [r7, #28]
 800cb62:	440a      	add	r2, r1
 800cb64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cb6c:	6113      	str	r3, [r2, #16]
 800cb6e:	e033      	b.n	800cbd8 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	695a      	ldr	r2, [r3, #20]
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	689b      	ldr	r3, [r3, #8]
 800cb78:	4413      	add	r3, r2
 800cb7a:	1e5a      	subs	r2, r3, #1
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	689b      	ldr	r3, [r3, #8]
 800cb80:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb84:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800cb86:	69bb      	ldr	r3, [r7, #24]
 800cb88:	015a      	lsls	r2, r3, #5
 800cb8a:	69fb      	ldr	r3, [r7, #28]
 800cb8c:	4413      	add	r3, r2
 800cb8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb92:	691a      	ldr	r2, [r3, #16]
 800cb94:	8afb      	ldrh	r3, [r7, #22]
 800cb96:	04d9      	lsls	r1, r3, #19
 800cb98:	4b3b      	ldr	r3, [pc, #236]	; (800cc88 <USB_EPStartXfer+0x494>)
 800cb9a:	400b      	ands	r3, r1
 800cb9c:	69b9      	ldr	r1, [r7, #24]
 800cb9e:	0148      	lsls	r0, r1, #5
 800cba0:	69f9      	ldr	r1, [r7, #28]
 800cba2:	4401      	add	r1, r0
 800cba4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cba8:	4313      	orrs	r3, r2
 800cbaa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800cbac:	69bb      	ldr	r3, [r7, #24]
 800cbae:	015a      	lsls	r2, r3, #5
 800cbb0:	69fb      	ldr	r3, [r7, #28]
 800cbb2:	4413      	add	r3, r2
 800cbb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbb8:	691a      	ldr	r2, [r3, #16]
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	689b      	ldr	r3, [r3, #8]
 800cbbe:	8af9      	ldrh	r1, [r7, #22]
 800cbc0:	fb01 f303 	mul.w	r3, r1, r3
 800cbc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cbc8:	69b9      	ldr	r1, [r7, #24]
 800cbca:	0148      	lsls	r0, r1, #5
 800cbcc:	69f9      	ldr	r1, [r7, #28]
 800cbce:	4401      	add	r1, r0
 800cbd0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800cbd8:	79fb      	ldrb	r3, [r7, #7]
 800cbda:	2b01      	cmp	r3, #1
 800cbdc:	d10d      	bne.n	800cbfa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	68db      	ldr	r3, [r3, #12]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d009      	beq.n	800cbfa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	68d9      	ldr	r1, [r3, #12]
 800cbea:	69bb      	ldr	r3, [r7, #24]
 800cbec:	015a      	lsls	r2, r3, #5
 800cbee:	69fb      	ldr	r3, [r7, #28]
 800cbf0:	4413      	add	r3, r2
 800cbf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbf6:	460a      	mov	r2, r1
 800cbf8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	78db      	ldrb	r3, [r3, #3]
 800cbfe:	2b01      	cmp	r3, #1
 800cc00:	d128      	bne.n	800cc54 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cc02:	69fb      	ldr	r3, [r7, #28]
 800cc04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc08:	689b      	ldr	r3, [r3, #8]
 800cc0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d110      	bne.n	800cc34 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800cc12:	69bb      	ldr	r3, [r7, #24]
 800cc14:	015a      	lsls	r2, r3, #5
 800cc16:	69fb      	ldr	r3, [r7, #28]
 800cc18:	4413      	add	r3, r2
 800cc1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	69ba      	ldr	r2, [r7, #24]
 800cc22:	0151      	lsls	r1, r2, #5
 800cc24:	69fa      	ldr	r2, [r7, #28]
 800cc26:	440a      	add	r2, r1
 800cc28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cc30:	6013      	str	r3, [r2, #0]
 800cc32:	e00f      	b.n	800cc54 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800cc34:	69bb      	ldr	r3, [r7, #24]
 800cc36:	015a      	lsls	r2, r3, #5
 800cc38:	69fb      	ldr	r3, [r7, #28]
 800cc3a:	4413      	add	r3, r2
 800cc3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	69ba      	ldr	r2, [r7, #24]
 800cc44:	0151      	lsls	r1, r2, #5
 800cc46:	69fa      	ldr	r2, [r7, #28]
 800cc48:	440a      	add	r2, r1
 800cc4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc52:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cc54:	69bb      	ldr	r3, [r7, #24]
 800cc56:	015a      	lsls	r2, r3, #5
 800cc58:	69fb      	ldr	r3, [r7, #28]
 800cc5a:	4413      	add	r3, r2
 800cc5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	69ba      	ldr	r2, [r7, #24]
 800cc64:	0151      	lsls	r1, r2, #5
 800cc66:	69fa      	ldr	r2, [r7, #28]
 800cc68:	440a      	add	r2, r1
 800cc6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cc72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cc74:	2300      	movs	r3, #0
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3720      	adds	r7, #32
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	fff80000 	.word	0xfff80000
 800cc84:	e007ffff 	.word	0xe007ffff
 800cc88:	1ff80000 	.word	0x1ff80000

0800cc8c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b087      	sub	sp, #28
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	60f8      	str	r0, [r7, #12]
 800cc94:	60b9      	str	r1, [r7, #8]
 800cc96:	4613      	mov	r3, r2
 800cc98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	781b      	ldrb	r3, [r3, #0]
 800cca2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	785b      	ldrb	r3, [r3, #1]
 800cca8:	2b01      	cmp	r3, #1
 800ccaa:	f040 80cd 	bne.w	800ce48 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	695b      	ldr	r3, [r3, #20]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d132      	bne.n	800cd1c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ccb6:	693b      	ldr	r3, [r7, #16]
 800ccb8:	015a      	lsls	r2, r3, #5
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	4413      	add	r3, r2
 800ccbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccc2:	691a      	ldr	r2, [r3, #16]
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	0159      	lsls	r1, r3, #5
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	440b      	add	r3, r1
 800cccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccd0:	4619      	mov	r1, r3
 800ccd2:	4b98      	ldr	r3, [pc, #608]	; (800cf34 <USB_EP0StartXfer+0x2a8>)
 800ccd4:	4013      	ands	r3, r2
 800ccd6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	015a      	lsls	r2, r3, #5
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	4413      	add	r3, r2
 800cce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cce4:	691b      	ldr	r3, [r3, #16]
 800cce6:	693a      	ldr	r2, [r7, #16]
 800cce8:	0151      	lsls	r1, r2, #5
 800ccea:	697a      	ldr	r2, [r7, #20]
 800ccec:	440a      	add	r2, r1
 800ccee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ccf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ccf6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	015a      	lsls	r2, r3, #5
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	4413      	add	r3, r2
 800cd00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd04:	691a      	ldr	r2, [r3, #16]
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	0159      	lsls	r1, r3, #5
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	440b      	add	r3, r1
 800cd0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd12:	4619      	mov	r1, r3
 800cd14:	4b88      	ldr	r3, [pc, #544]	; (800cf38 <USB_EP0StartXfer+0x2ac>)
 800cd16:	4013      	ands	r3, r2
 800cd18:	610b      	str	r3, [r1, #16]
 800cd1a:	e04e      	b.n	800cdba <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cd1c:	693b      	ldr	r3, [r7, #16]
 800cd1e:	015a      	lsls	r2, r3, #5
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	4413      	add	r3, r2
 800cd24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd28:	691a      	ldr	r2, [r3, #16]
 800cd2a:	693b      	ldr	r3, [r7, #16]
 800cd2c:	0159      	lsls	r1, r3, #5
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	440b      	add	r3, r1
 800cd32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd36:	4619      	mov	r1, r3
 800cd38:	4b7f      	ldr	r3, [pc, #508]	; (800cf38 <USB_EP0StartXfer+0x2ac>)
 800cd3a:	4013      	ands	r3, r2
 800cd3c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	015a      	lsls	r2, r3, #5
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	4413      	add	r3, r2
 800cd46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd4a:	691a      	ldr	r2, [r3, #16]
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	0159      	lsls	r1, r3, #5
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	440b      	add	r3, r1
 800cd54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd58:	4619      	mov	r1, r3
 800cd5a:	4b76      	ldr	r3, [pc, #472]	; (800cf34 <USB_EP0StartXfer+0x2a8>)
 800cd5c:	4013      	ands	r3, r2
 800cd5e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	695a      	ldr	r2, [r3, #20]
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	689b      	ldr	r3, [r3, #8]
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	d903      	bls.n	800cd74 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	689a      	ldr	r2, [r3, #8]
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cd74:	693b      	ldr	r3, [r7, #16]
 800cd76:	015a      	lsls	r2, r3, #5
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	4413      	add	r3, r2
 800cd7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd80:	691b      	ldr	r3, [r3, #16]
 800cd82:	693a      	ldr	r2, [r7, #16]
 800cd84:	0151      	lsls	r1, r2, #5
 800cd86:	697a      	ldr	r2, [r7, #20]
 800cd88:	440a      	add	r2, r1
 800cd8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cd92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	015a      	lsls	r2, r3, #5
 800cd98:	697b      	ldr	r3, [r7, #20]
 800cd9a:	4413      	add	r3, r2
 800cd9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cda0:	691a      	ldr	r2, [r3, #16]
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	695b      	ldr	r3, [r3, #20]
 800cda6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cdaa:	6939      	ldr	r1, [r7, #16]
 800cdac:	0148      	lsls	r0, r1, #5
 800cdae:	6979      	ldr	r1, [r7, #20]
 800cdb0:	4401      	add	r1, r0
 800cdb2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cdb6:	4313      	orrs	r3, r2
 800cdb8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800cdba:	79fb      	ldrb	r3, [r7, #7]
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	d11e      	bne.n	800cdfe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	691b      	ldr	r3, [r3, #16]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d009      	beq.n	800cddc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800cdc8:	693b      	ldr	r3, [r7, #16]
 800cdca:	015a      	lsls	r2, r3, #5
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	4413      	add	r3, r2
 800cdd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdd4:	461a      	mov	r2, r3
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	691b      	ldr	r3, [r3, #16]
 800cdda:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cddc:	693b      	ldr	r3, [r7, #16]
 800cdde:	015a      	lsls	r2, r3, #5
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	4413      	add	r3, r2
 800cde4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	693a      	ldr	r2, [r7, #16]
 800cdec:	0151      	lsls	r1, r2, #5
 800cdee:	697a      	ldr	r2, [r7, #20]
 800cdf0:	440a      	add	r2, r1
 800cdf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdf6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cdfa:	6013      	str	r3, [r2, #0]
 800cdfc:	e092      	b.n	800cf24 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	015a      	lsls	r2, r3, #5
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	4413      	add	r3, r2
 800ce06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	693a      	ldr	r2, [r7, #16]
 800ce0e:	0151      	lsls	r1, r2, #5
 800ce10:	697a      	ldr	r2, [r7, #20]
 800ce12:	440a      	add	r2, r1
 800ce14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ce1c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	695b      	ldr	r3, [r3, #20]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d07e      	beq.n	800cf24 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	f003 030f 	and.w	r3, r3, #15
 800ce36:	2101      	movs	r1, #1
 800ce38:	fa01 f303 	lsl.w	r3, r1, r3
 800ce3c:	6979      	ldr	r1, [r7, #20]
 800ce3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce42:	4313      	orrs	r3, r2
 800ce44:	634b      	str	r3, [r1, #52]	; 0x34
 800ce46:	e06d      	b.n	800cf24 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	015a      	lsls	r2, r3, #5
 800ce4c:	697b      	ldr	r3, [r7, #20]
 800ce4e:	4413      	add	r3, r2
 800ce50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce54:	691a      	ldr	r2, [r3, #16]
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	0159      	lsls	r1, r3, #5
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	440b      	add	r3, r1
 800ce5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce62:	4619      	mov	r1, r3
 800ce64:	4b34      	ldr	r3, [pc, #208]	; (800cf38 <USB_EP0StartXfer+0x2ac>)
 800ce66:	4013      	ands	r3, r2
 800ce68:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	015a      	lsls	r2, r3, #5
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	4413      	add	r3, r2
 800ce72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce76:	691a      	ldr	r2, [r3, #16]
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	0159      	lsls	r1, r3, #5
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	440b      	add	r3, r1
 800ce80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce84:	4619      	mov	r1, r3
 800ce86:	4b2b      	ldr	r3, [pc, #172]	; (800cf34 <USB_EP0StartXfer+0x2a8>)
 800ce88:	4013      	ands	r3, r2
 800ce8a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	695b      	ldr	r3, [r3, #20]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d003      	beq.n	800ce9c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	689a      	ldr	r2, [r3, #8]
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	015a      	lsls	r2, r3, #5
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	4413      	add	r3, r2
 800cea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cea8:	691b      	ldr	r3, [r3, #16]
 800ceaa:	693a      	ldr	r2, [r7, #16]
 800ceac:	0151      	lsls	r1, r2, #5
 800ceae:	697a      	ldr	r2, [r7, #20]
 800ceb0:	440a      	add	r2, r1
 800ceb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ceb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ceba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800cebc:	693b      	ldr	r3, [r7, #16]
 800cebe:	015a      	lsls	r2, r3, #5
 800cec0:	697b      	ldr	r3, [r7, #20]
 800cec2:	4413      	add	r3, r2
 800cec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cec8:	691a      	ldr	r2, [r3, #16]
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	689b      	ldr	r3, [r3, #8]
 800cece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ced2:	6939      	ldr	r1, [r7, #16]
 800ced4:	0148      	lsls	r0, r1, #5
 800ced6:	6979      	ldr	r1, [r7, #20]
 800ced8:	4401      	add	r1, r0
 800ceda:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cede:	4313      	orrs	r3, r2
 800cee0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800cee2:	79fb      	ldrb	r3, [r7, #7]
 800cee4:	2b01      	cmp	r3, #1
 800cee6:	d10d      	bne.n	800cf04 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	68db      	ldr	r3, [r3, #12]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d009      	beq.n	800cf04 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	68d9      	ldr	r1, [r3, #12]
 800cef4:	693b      	ldr	r3, [r7, #16]
 800cef6:	015a      	lsls	r2, r3, #5
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	4413      	add	r3, r2
 800cefc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf00:	460a      	mov	r2, r1
 800cf02:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	015a      	lsls	r2, r3, #5
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	4413      	add	r3, r2
 800cf0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	693a      	ldr	r2, [r7, #16]
 800cf14:	0151      	lsls	r1, r2, #5
 800cf16:	697a      	ldr	r2, [r7, #20]
 800cf18:	440a      	add	r2, r1
 800cf1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cf22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cf24:	2300      	movs	r3, #0
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	371c      	adds	r7, #28
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf30:	4770      	bx	lr
 800cf32:	bf00      	nop
 800cf34:	e007ffff 	.word	0xe007ffff
 800cf38:	fff80000 	.word	0xfff80000

0800cf3c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b089      	sub	sp, #36	; 0x24
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	60f8      	str	r0, [r7, #12]
 800cf44:	60b9      	str	r1, [r7, #8]
 800cf46:	4611      	mov	r1, r2
 800cf48:	461a      	mov	r2, r3
 800cf4a:	460b      	mov	r3, r1
 800cf4c:	71fb      	strb	r3, [r7, #7]
 800cf4e:	4613      	mov	r3, r2
 800cf50:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800cf5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d123      	bne.n	800cfaa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cf62:	88bb      	ldrh	r3, [r7, #4]
 800cf64:	3303      	adds	r3, #3
 800cf66:	089b      	lsrs	r3, r3, #2
 800cf68:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	61bb      	str	r3, [r7, #24]
 800cf6e:	e018      	b.n	800cfa2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cf70:	79fb      	ldrb	r3, [r7, #7]
 800cf72:	031a      	lsls	r2, r3, #12
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	4413      	add	r3, r2
 800cf78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf7c:	461a      	mov	r2, r3
 800cf7e:	69fb      	ldr	r3, [r7, #28]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cf84:	69fb      	ldr	r3, [r7, #28]
 800cf86:	3301      	adds	r3, #1
 800cf88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cf8a:	69fb      	ldr	r3, [r7, #28]
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cf90:	69fb      	ldr	r3, [r7, #28]
 800cf92:	3301      	adds	r3, #1
 800cf94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cf96:	69fb      	ldr	r3, [r7, #28]
 800cf98:	3301      	adds	r3, #1
 800cf9a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cf9c:	69bb      	ldr	r3, [r7, #24]
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	61bb      	str	r3, [r7, #24]
 800cfa2:	69ba      	ldr	r2, [r7, #24]
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d3e2      	bcc.n	800cf70 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cfaa:	2300      	movs	r3, #0
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3724      	adds	r7, #36	; 0x24
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr

0800cfb8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b08b      	sub	sp, #44	; 0x2c
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	60f8      	str	r0, [r7, #12]
 800cfc0:	60b9      	str	r1, [r7, #8]
 800cfc2:	4613      	mov	r3, r2
 800cfc4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cfce:	88fb      	ldrh	r3, [r7, #6]
 800cfd0:	089b      	lsrs	r3, r3, #2
 800cfd2:	b29b      	uxth	r3, r3
 800cfd4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cfd6:	88fb      	ldrh	r3, [r7, #6]
 800cfd8:	f003 0303 	and.w	r3, r3, #3
 800cfdc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cfde:	2300      	movs	r3, #0
 800cfe0:	623b      	str	r3, [r7, #32]
 800cfe2:	e014      	b.n	800d00e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cfe4:	69bb      	ldr	r3, [r7, #24]
 800cfe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfea:	681a      	ldr	r2, [r3, #0]
 800cfec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfee:	601a      	str	r2, [r3, #0]
    pDest++;
 800cff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff2:	3301      	adds	r3, #1
 800cff4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff8:	3301      	adds	r3, #1
 800cffa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffe:	3301      	adds	r3, #1
 800d000:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d004:	3301      	adds	r3, #1
 800d006:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800d008:	6a3b      	ldr	r3, [r7, #32]
 800d00a:	3301      	adds	r3, #1
 800d00c:	623b      	str	r3, [r7, #32]
 800d00e:	6a3a      	ldr	r2, [r7, #32]
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	429a      	cmp	r2, r3
 800d014:	d3e6      	bcc.n	800cfe4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d016:	8bfb      	ldrh	r3, [r7, #30]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d01e      	beq.n	800d05a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d01c:	2300      	movs	r3, #0
 800d01e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d020:	69bb      	ldr	r3, [r7, #24]
 800d022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d026:	461a      	mov	r2, r3
 800d028:	f107 0310 	add.w	r3, r7, #16
 800d02c:	6812      	ldr	r2, [r2, #0]
 800d02e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d030:	693a      	ldr	r2, [r7, #16]
 800d032:	6a3b      	ldr	r3, [r7, #32]
 800d034:	b2db      	uxtb	r3, r3
 800d036:	00db      	lsls	r3, r3, #3
 800d038:	fa22 f303 	lsr.w	r3, r2, r3
 800d03c:	b2da      	uxtb	r2, r3
 800d03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d040:	701a      	strb	r2, [r3, #0]
      i++;
 800d042:	6a3b      	ldr	r3, [r7, #32]
 800d044:	3301      	adds	r3, #1
 800d046:	623b      	str	r3, [r7, #32]
      pDest++;
 800d048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d04a:	3301      	adds	r3, #1
 800d04c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800d04e:	8bfb      	ldrh	r3, [r7, #30]
 800d050:	3b01      	subs	r3, #1
 800d052:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d054:	8bfb      	ldrh	r3, [r7, #30]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d1ea      	bne.n	800d030 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	372c      	adds	r7, #44	; 0x2c
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr

0800d068 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d068:	b480      	push	{r7}
 800d06a:	b085      	sub	sp, #20
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	781b      	ldrb	r3, [r3, #0]
 800d07a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	785b      	ldrb	r3, [r3, #1]
 800d080:	2b01      	cmp	r3, #1
 800d082:	d12c      	bne.n	800d0de <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	015a      	lsls	r2, r3, #5
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	4413      	add	r3, r2
 800d08c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	2b00      	cmp	r3, #0
 800d094:	db12      	blt.n	800d0bc <USB_EPSetStall+0x54>
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d00f      	beq.n	800d0bc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	015a      	lsls	r2, r3, #5
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	4413      	add	r3, r2
 800d0a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	68ba      	ldr	r2, [r7, #8]
 800d0ac:	0151      	lsls	r1, r2, #5
 800d0ae:	68fa      	ldr	r2, [r7, #12]
 800d0b0:	440a      	add	r2, r1
 800d0b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d0ba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	015a      	lsls	r2, r3, #5
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	4413      	add	r3, r2
 800d0c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	68ba      	ldr	r2, [r7, #8]
 800d0cc:	0151      	lsls	r1, r2, #5
 800d0ce:	68fa      	ldr	r2, [r7, #12]
 800d0d0:	440a      	add	r2, r1
 800d0d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d0da:	6013      	str	r3, [r2, #0]
 800d0dc:	e02b      	b.n	800d136 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	015a      	lsls	r2, r3, #5
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	4413      	add	r3, r2
 800d0e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	db12      	blt.n	800d116 <USB_EPSetStall+0xae>
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d00f      	beq.n	800d116 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	015a      	lsls	r2, r3, #5
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	4413      	add	r3, r2
 800d0fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	68ba      	ldr	r2, [r7, #8]
 800d106:	0151      	lsls	r1, r2, #5
 800d108:	68fa      	ldr	r2, [r7, #12]
 800d10a:	440a      	add	r2, r1
 800d10c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d110:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d114:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	015a      	lsls	r2, r3, #5
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	4413      	add	r3, r2
 800d11e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	68ba      	ldr	r2, [r7, #8]
 800d126:	0151      	lsls	r1, r2, #5
 800d128:	68fa      	ldr	r2, [r7, #12]
 800d12a:	440a      	add	r2, r1
 800d12c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d130:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d134:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d136:	2300      	movs	r3, #0
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3714      	adds	r7, #20
 800d13c:	46bd      	mov	sp, r7
 800d13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d142:	4770      	bx	lr

0800d144 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d144:	b480      	push	{r7}
 800d146:	b085      	sub	sp, #20
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	781b      	ldrb	r3, [r3, #0]
 800d156:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	785b      	ldrb	r3, [r3, #1]
 800d15c:	2b01      	cmp	r3, #1
 800d15e:	d128      	bne.n	800d1b2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	015a      	lsls	r2, r3, #5
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	4413      	add	r3, r2
 800d168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	68ba      	ldr	r2, [r7, #8]
 800d170:	0151      	lsls	r1, r2, #5
 800d172:	68fa      	ldr	r2, [r7, #12]
 800d174:	440a      	add	r2, r1
 800d176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d17a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d17e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	78db      	ldrb	r3, [r3, #3]
 800d184:	2b03      	cmp	r3, #3
 800d186:	d003      	beq.n	800d190 <USB_EPClearStall+0x4c>
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	78db      	ldrb	r3, [r3, #3]
 800d18c:	2b02      	cmp	r3, #2
 800d18e:	d138      	bne.n	800d202 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	015a      	lsls	r2, r3, #5
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	4413      	add	r3, r2
 800d198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	68ba      	ldr	r2, [r7, #8]
 800d1a0:	0151      	lsls	r1, r2, #5
 800d1a2:	68fa      	ldr	r2, [r7, #12]
 800d1a4:	440a      	add	r2, r1
 800d1a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d1ae:	6013      	str	r3, [r2, #0]
 800d1b0:	e027      	b.n	800d202 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	015a      	lsls	r2, r3, #5
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	4413      	add	r3, r2
 800d1ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	68ba      	ldr	r2, [r7, #8]
 800d1c2:	0151      	lsls	r1, r2, #5
 800d1c4:	68fa      	ldr	r2, [r7, #12]
 800d1c6:	440a      	add	r2, r1
 800d1c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d1d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	78db      	ldrb	r3, [r3, #3]
 800d1d6:	2b03      	cmp	r3, #3
 800d1d8:	d003      	beq.n	800d1e2 <USB_EPClearStall+0x9e>
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	78db      	ldrb	r3, [r3, #3]
 800d1de:	2b02      	cmp	r3, #2
 800d1e0:	d10f      	bne.n	800d202 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	015a      	lsls	r2, r3, #5
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	4413      	add	r3, r2
 800d1ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	68ba      	ldr	r2, [r7, #8]
 800d1f2:	0151      	lsls	r1, r2, #5
 800d1f4:	68fa      	ldr	r2, [r7, #12]
 800d1f6:	440a      	add	r2, r1
 800d1f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d200:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d202:	2300      	movs	r3, #0
}
 800d204:	4618      	mov	r0, r3
 800d206:	3714      	adds	r7, #20
 800d208:	46bd      	mov	sp, r7
 800d20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20e:	4770      	bx	lr

0800d210 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d210:	b480      	push	{r7}
 800d212:	b085      	sub	sp, #20
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
 800d218:	460b      	mov	r3, r1
 800d21a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	68fa      	ldr	r2, [r7, #12]
 800d22a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d22e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d232:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d23a:	681a      	ldr	r2, [r3, #0]
 800d23c:	78fb      	ldrb	r3, [r7, #3]
 800d23e:	011b      	lsls	r3, r3, #4
 800d240:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d244:	68f9      	ldr	r1, [r7, #12]
 800d246:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d24a:	4313      	orrs	r3, r2
 800d24c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d24e:	2300      	movs	r3, #0
}
 800d250:	4618      	mov	r0, r3
 800d252:	3714      	adds	r7, #20
 800d254:	46bd      	mov	sp, r7
 800d256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25a:	4770      	bx	lr

0800d25c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d25c:	b480      	push	{r7}
 800d25e:	b085      	sub	sp, #20
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	68fa      	ldr	r2, [r7, #12]
 800d272:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d276:	f023 0303 	bic.w	r3, r3, #3
 800d27a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d282:	685b      	ldr	r3, [r3, #4]
 800d284:	68fa      	ldr	r2, [r7, #12]
 800d286:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d28a:	f023 0302 	bic.w	r3, r3, #2
 800d28e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d290:	2300      	movs	r3, #0
}
 800d292:	4618      	mov	r0, r3
 800d294:	3714      	adds	r7, #20
 800d296:	46bd      	mov	sp, r7
 800d298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29c:	4770      	bx	lr

0800d29e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d29e:	b480      	push	{r7}
 800d2a0:	b085      	sub	sp, #20
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	68fa      	ldr	r2, [r7, #12]
 800d2b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d2b8:	f023 0303 	bic.w	r3, r3, #3
 800d2bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2c4:	685b      	ldr	r3, [r3, #4]
 800d2c6:	68fa      	ldr	r2, [r7, #12]
 800d2c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d2cc:	f043 0302 	orr.w	r3, r3, #2
 800d2d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d2d2:	2300      	movs	r3, #0
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3714      	adds	r7, #20
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2de:	4770      	bx	lr

0800d2e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d2e0:	b480      	push	{r7}
 800d2e2:	b085      	sub	sp, #20
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	695b      	ldr	r3, [r3, #20]
 800d2ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	699b      	ldr	r3, [r3, #24]
 800d2f2:	68fa      	ldr	r2, [r7, #12]
 800d2f4:	4013      	ands	r3, r2
 800d2f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3714      	adds	r7, #20
 800d2fe:	46bd      	mov	sp, r7
 800d300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d304:	4770      	bx	lr

0800d306 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d306:	b480      	push	{r7}
 800d308:	b085      	sub	sp, #20
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d318:	699b      	ldr	r3, [r3, #24]
 800d31a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d322:	69db      	ldr	r3, [r3, #28]
 800d324:	68ba      	ldr	r2, [r7, #8]
 800d326:	4013      	ands	r3, r2
 800d328:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	0c1b      	lsrs	r3, r3, #16
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3714      	adds	r7, #20
 800d332:	46bd      	mov	sp, r7
 800d334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d338:	4770      	bx	lr

0800d33a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d33a:	b480      	push	{r7}
 800d33c:	b085      	sub	sp, #20
 800d33e:	af00      	add	r7, sp, #0
 800d340:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d34c:	699b      	ldr	r3, [r3, #24]
 800d34e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d356:	69db      	ldr	r3, [r3, #28]
 800d358:	68ba      	ldr	r2, [r7, #8]
 800d35a:	4013      	ands	r3, r2
 800d35c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	b29b      	uxth	r3, r3
}
 800d362:	4618      	mov	r0, r3
 800d364:	3714      	adds	r7, #20
 800d366:	46bd      	mov	sp, r7
 800d368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36c:	4770      	bx	lr

0800d36e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d36e:	b480      	push	{r7}
 800d370:	b085      	sub	sp, #20
 800d372:	af00      	add	r7, sp, #0
 800d374:	6078      	str	r0, [r7, #4]
 800d376:	460b      	mov	r3, r1
 800d378:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d37e:	78fb      	ldrb	r3, [r7, #3]
 800d380:	015a      	lsls	r2, r3, #5
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	4413      	add	r3, r2
 800d386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d38a:	689b      	ldr	r3, [r3, #8]
 800d38c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d394:	695b      	ldr	r3, [r3, #20]
 800d396:	68ba      	ldr	r2, [r7, #8]
 800d398:	4013      	ands	r3, r2
 800d39a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d39c:	68bb      	ldr	r3, [r7, #8]
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3714      	adds	r7, #20
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a8:	4770      	bx	lr

0800d3aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d3aa:	b480      	push	{r7}
 800d3ac:	b087      	sub	sp, #28
 800d3ae:	af00      	add	r7, sp, #0
 800d3b0:	6078      	str	r0, [r7, #4]
 800d3b2:	460b      	mov	r3, r1
 800d3b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d3ba:	697b      	ldr	r3, [r7, #20]
 800d3bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3c0:	691b      	ldr	r3, [r3, #16]
 800d3c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d3ce:	78fb      	ldrb	r3, [r7, #3]
 800d3d0:	f003 030f 	and.w	r3, r3, #15
 800d3d4:	68fa      	ldr	r2, [r7, #12]
 800d3d6:	fa22 f303 	lsr.w	r3, r2, r3
 800d3da:	01db      	lsls	r3, r3, #7
 800d3dc:	b2db      	uxtb	r3, r3
 800d3de:	693a      	ldr	r2, [r7, #16]
 800d3e0:	4313      	orrs	r3, r2
 800d3e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d3e4:	78fb      	ldrb	r3, [r7, #3]
 800d3e6:	015a      	lsls	r2, r3, #5
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	4413      	add	r3, r2
 800d3ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3f0:	689b      	ldr	r3, [r3, #8]
 800d3f2:	693a      	ldr	r2, [r7, #16]
 800d3f4:	4013      	ands	r3, r2
 800d3f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d3f8:	68bb      	ldr	r3, [r7, #8]
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	371c      	adds	r7, #28
 800d3fe:	46bd      	mov	sp, r7
 800d400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d404:	4770      	bx	lr

0800d406 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d406:	b480      	push	{r7}
 800d408:	b083      	sub	sp, #12
 800d40a:	af00      	add	r7, sp, #0
 800d40c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	695b      	ldr	r3, [r3, #20]
 800d412:	f003 0301 	and.w	r3, r3, #1
}
 800d416:	4618      	mov	r0, r3
 800d418:	370c      	adds	r7, #12
 800d41a:	46bd      	mov	sp, r7
 800d41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d420:	4770      	bx	lr
	...

0800d424 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d424:	b480      	push	{r7}
 800d426:	b085      	sub	sp, #20
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d436:	681a      	ldr	r2, [r3, #0]
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d43e:	4619      	mov	r1, r3
 800d440:	4b09      	ldr	r3, [pc, #36]	; (800d468 <USB_ActivateSetup+0x44>)
 800d442:	4013      	ands	r3, r2
 800d444:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d44c:	685b      	ldr	r3, [r3, #4]
 800d44e:	68fa      	ldr	r2, [r7, #12]
 800d450:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d458:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d45a:	2300      	movs	r3, #0
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3714      	adds	r7, #20
 800d460:	46bd      	mov	sp, r7
 800d462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d466:	4770      	bx	lr
 800d468:	fffff800 	.word	0xfffff800

0800d46c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d46c:	b480      	push	{r7}
 800d46e:	b087      	sub	sp, #28
 800d470:	af00      	add	r7, sp, #0
 800d472:	60f8      	str	r0, [r7, #12]
 800d474:	460b      	mov	r3, r1
 800d476:	607a      	str	r2, [r7, #4]
 800d478:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	333c      	adds	r3, #60	; 0x3c
 800d482:	3304      	adds	r3, #4
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	4a26      	ldr	r2, [pc, #152]	; (800d524 <USB_EP0_OutStart+0xb8>)
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d90a      	bls.n	800d4a6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d490:	697b      	ldr	r3, [r7, #20]
 800d492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d49c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d4a0:	d101      	bne.n	800d4a6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	e037      	b.n	800d516 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4ac:	461a      	mov	r2, r3
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4b8:	691b      	ldr	r3, [r3, #16]
 800d4ba:	697a      	ldr	r2, [r7, #20]
 800d4bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d4c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4cc:	691b      	ldr	r3, [r3, #16]
 800d4ce:	697a      	ldr	r2, [r7, #20]
 800d4d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4d4:	f043 0318 	orr.w	r3, r3, #24
 800d4d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4e0:	691b      	ldr	r3, [r3, #16]
 800d4e2:	697a      	ldr	r2, [r7, #20]
 800d4e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4e8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d4ec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d4ee:	7afb      	ldrb	r3, [r7, #11]
 800d4f0:	2b01      	cmp	r3, #1
 800d4f2:	d10f      	bne.n	800d514 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4fa:	461a      	mov	r2, r3
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d500:	697b      	ldr	r3, [r7, #20]
 800d502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	697a      	ldr	r2, [r7, #20]
 800d50a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d50e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d512:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d514:	2300      	movs	r3, #0
}
 800d516:	4618      	mov	r0, r3
 800d518:	371c      	adds	r7, #28
 800d51a:	46bd      	mov	sp, r7
 800d51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d520:	4770      	bx	lr
 800d522:	bf00      	nop
 800d524:	4f54300a 	.word	0x4f54300a

0800d528 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d528:	b480      	push	{r7}
 800d52a:	b085      	sub	sp, #20
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d530:	2300      	movs	r3, #0
 800d532:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	3301      	adds	r3, #1
 800d538:	60fb      	str	r3, [r7, #12]
 800d53a:	4a13      	ldr	r2, [pc, #76]	; (800d588 <USB_CoreReset+0x60>)
 800d53c:	4293      	cmp	r3, r2
 800d53e:	d901      	bls.n	800d544 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800d540:	2303      	movs	r3, #3
 800d542:	e01a      	b.n	800d57a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	691b      	ldr	r3, [r3, #16]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	daf3      	bge.n	800d534 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d54c:	2300      	movs	r3, #0
 800d54e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	691b      	ldr	r3, [r3, #16]
 800d554:	f043 0201 	orr.w	r2, r3, #1
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	3301      	adds	r3, #1
 800d560:	60fb      	str	r3, [r7, #12]
 800d562:	4a09      	ldr	r2, [pc, #36]	; (800d588 <USB_CoreReset+0x60>)
 800d564:	4293      	cmp	r3, r2
 800d566:	d901      	bls.n	800d56c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800d568:	2303      	movs	r3, #3
 800d56a:	e006      	b.n	800d57a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	691b      	ldr	r3, [r3, #16]
 800d570:	f003 0301 	and.w	r3, r3, #1
 800d574:	2b01      	cmp	r3, #1
 800d576:	d0f1      	beq.n	800d55c <USB_CoreReset+0x34>

  return HAL_OK;
 800d578:	2300      	movs	r3, #0
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	3714      	adds	r7, #20
 800d57e:	46bd      	mov	sp, r7
 800d580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d584:	4770      	bx	lr
 800d586:	bf00      	nop
 800d588:	00030d40 	.word	0x00030d40

0800d58c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b084      	sub	sp, #16
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	460b      	mov	r3, r1
 800d596:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d598:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d59c:	f002 f9ac 	bl	800f8f8 <USBD_static_malloc>
 800d5a0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d105      	bne.n	800d5b4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800d5b0:	2302      	movs	r3, #2
 800d5b2:	e066      	b.n	800d682 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	68fa      	ldr	r2, [r7, #12]
 800d5b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	7c1b      	ldrb	r3, [r3, #16]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d119      	bne.n	800d5f8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d5c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d5c8:	2202      	movs	r2, #2
 800d5ca:	2181      	movs	r1, #129	; 0x81
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f002 f870 	bl	800f6b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2201      	movs	r2, #1
 800d5d6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d5d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d5dc:	2202      	movs	r2, #2
 800d5de:	2101      	movs	r1, #1
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f002 f866 	bl	800f6b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2201      	movs	r2, #1
 800d5ea:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2210      	movs	r2, #16
 800d5f2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800d5f6:	e016      	b.n	800d626 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d5f8:	2340      	movs	r3, #64	; 0x40
 800d5fa:	2202      	movs	r2, #2
 800d5fc:	2181      	movs	r1, #129	; 0x81
 800d5fe:	6878      	ldr	r0, [r7, #4]
 800d600:	f002 f857 	bl	800f6b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2201      	movs	r2, #1
 800d608:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d60a:	2340      	movs	r3, #64	; 0x40
 800d60c:	2202      	movs	r2, #2
 800d60e:	2101      	movs	r1, #1
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f002 f84e 	bl	800f6b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2201      	movs	r2, #1
 800d61a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2210      	movs	r2, #16
 800d622:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d626:	2308      	movs	r3, #8
 800d628:	2203      	movs	r2, #3
 800d62a:	2182      	movs	r1, #130	; 0x82
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f002 f840 	bl	800f6b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2201      	movs	r2, #1
 800d636:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	2200      	movs	r2, #0
 800d648:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	2200      	movs	r2, #0
 800d650:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	7c1b      	ldrb	r3, [r3, #16]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d109      	bne.n	800d670 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d662:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d666:	2101      	movs	r1, #1
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f002 f911 	bl	800f890 <USBD_LL_PrepareReceive>
 800d66e:	e007      	b.n	800d680 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d676:	2340      	movs	r3, #64	; 0x40
 800d678:	2101      	movs	r1, #1
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f002 f908 	bl	800f890 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d680:	2300      	movs	r3, #0
}
 800d682:	4618      	mov	r0, r3
 800d684:	3710      	adds	r7, #16
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}

0800d68a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d68a:	b580      	push	{r7, lr}
 800d68c:	b082      	sub	sp, #8
 800d68e:	af00      	add	r7, sp, #0
 800d690:	6078      	str	r0, [r7, #4]
 800d692:	460b      	mov	r3, r1
 800d694:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d696:	2181      	movs	r1, #129	; 0x81
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f002 f830 	bl	800f6fe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d6a4:	2101      	movs	r1, #1
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f002 f829 	bl	800f6fe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d6b4:	2182      	movs	r1, #130	; 0x82
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f002 f821 	bl	800f6fe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d00e      	beq.n	800d6f4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d6dc:	685b      	ldr	r3, [r3, #4]
 800d6de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f002 f914 	bl	800f914 <USBD_static_free>
    pdev->pClassData = NULL;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d6f4:	2300      	movs	r3, #0
}
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	3708      	adds	r7, #8
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
	...

0800d700 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b086      	sub	sp, #24
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
 800d708:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d710:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d712:	2300      	movs	r3, #0
 800d714:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d716:	2300      	movs	r3, #0
 800d718:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d71a:	2300      	movs	r3, #0
 800d71c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d101      	bne.n	800d728 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800d724:	2303      	movs	r3, #3
 800d726:	e0af      	b.n	800d888 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d730:	2b00      	cmp	r3, #0
 800d732:	d03f      	beq.n	800d7b4 <USBD_CDC_Setup+0xb4>
 800d734:	2b20      	cmp	r3, #32
 800d736:	f040 809f 	bne.w	800d878 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	88db      	ldrh	r3, [r3, #6]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d02e      	beq.n	800d7a0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	781b      	ldrb	r3, [r3, #0]
 800d746:	b25b      	sxtb	r3, r3
 800d748:	2b00      	cmp	r3, #0
 800d74a:	da16      	bge.n	800d77a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d752:	689b      	ldr	r3, [r3, #8]
 800d754:	683a      	ldr	r2, [r7, #0]
 800d756:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800d758:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d75a:	683a      	ldr	r2, [r7, #0]
 800d75c:	88d2      	ldrh	r2, [r2, #6]
 800d75e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	88db      	ldrh	r3, [r3, #6]
 800d764:	2b07      	cmp	r3, #7
 800d766:	bf28      	it	cs
 800d768:	2307      	movcs	r3, #7
 800d76a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	89fa      	ldrh	r2, [r7, #14]
 800d770:	4619      	mov	r1, r3
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	f001 fb19 	bl	800edaa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800d778:	e085      	b.n	800d886 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	785a      	ldrb	r2, [r3, #1]
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	88db      	ldrh	r3, [r3, #6]
 800d788:	b2da      	uxtb	r2, r3
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d790:	6939      	ldr	r1, [r7, #16]
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	88db      	ldrh	r3, [r3, #6]
 800d796:	461a      	mov	r2, r3
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f001 fb32 	bl	800ee02 <USBD_CtlPrepareRx>
      break;
 800d79e:	e072      	b.n	800d886 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d7a6:	689b      	ldr	r3, [r3, #8]
 800d7a8:	683a      	ldr	r2, [r7, #0]
 800d7aa:	7850      	ldrb	r0, [r2, #1]
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	6839      	ldr	r1, [r7, #0]
 800d7b0:	4798      	blx	r3
      break;
 800d7b2:	e068      	b.n	800d886 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	785b      	ldrb	r3, [r3, #1]
 800d7b8:	2b0b      	cmp	r3, #11
 800d7ba:	d852      	bhi.n	800d862 <USBD_CDC_Setup+0x162>
 800d7bc:	a201      	add	r2, pc, #4	; (adr r2, 800d7c4 <USBD_CDC_Setup+0xc4>)
 800d7be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7c2:	bf00      	nop
 800d7c4:	0800d7f5 	.word	0x0800d7f5
 800d7c8:	0800d871 	.word	0x0800d871
 800d7cc:	0800d863 	.word	0x0800d863
 800d7d0:	0800d863 	.word	0x0800d863
 800d7d4:	0800d863 	.word	0x0800d863
 800d7d8:	0800d863 	.word	0x0800d863
 800d7dc:	0800d863 	.word	0x0800d863
 800d7e0:	0800d863 	.word	0x0800d863
 800d7e4:	0800d863 	.word	0x0800d863
 800d7e8:	0800d863 	.word	0x0800d863
 800d7ec:	0800d81f 	.word	0x0800d81f
 800d7f0:	0800d849 	.word	0x0800d849
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7fa:	b2db      	uxtb	r3, r3
 800d7fc:	2b03      	cmp	r3, #3
 800d7fe:	d107      	bne.n	800d810 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d800:	f107 030a 	add.w	r3, r7, #10
 800d804:	2202      	movs	r2, #2
 800d806:	4619      	mov	r1, r3
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f001 face 	bl	800edaa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d80e:	e032      	b.n	800d876 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d810:	6839      	ldr	r1, [r7, #0]
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f001 fa58 	bl	800ecc8 <USBD_CtlError>
            ret = USBD_FAIL;
 800d818:	2303      	movs	r3, #3
 800d81a:	75fb      	strb	r3, [r7, #23]
          break;
 800d81c:	e02b      	b.n	800d876 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d824:	b2db      	uxtb	r3, r3
 800d826:	2b03      	cmp	r3, #3
 800d828:	d107      	bne.n	800d83a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d82a:	f107 030d 	add.w	r3, r7, #13
 800d82e:	2201      	movs	r2, #1
 800d830:	4619      	mov	r1, r3
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	f001 fab9 	bl	800edaa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d838:	e01d      	b.n	800d876 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d83a:	6839      	ldr	r1, [r7, #0]
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f001 fa43 	bl	800ecc8 <USBD_CtlError>
            ret = USBD_FAIL;
 800d842:	2303      	movs	r3, #3
 800d844:	75fb      	strb	r3, [r7, #23]
          break;
 800d846:	e016      	b.n	800d876 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d84e:	b2db      	uxtb	r3, r3
 800d850:	2b03      	cmp	r3, #3
 800d852:	d00f      	beq.n	800d874 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800d854:	6839      	ldr	r1, [r7, #0]
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	f001 fa36 	bl	800ecc8 <USBD_CtlError>
            ret = USBD_FAIL;
 800d85c:	2303      	movs	r3, #3
 800d85e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d860:	e008      	b.n	800d874 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d862:	6839      	ldr	r1, [r7, #0]
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f001 fa2f 	bl	800ecc8 <USBD_CtlError>
          ret = USBD_FAIL;
 800d86a:	2303      	movs	r3, #3
 800d86c:	75fb      	strb	r3, [r7, #23]
          break;
 800d86e:	e002      	b.n	800d876 <USBD_CDC_Setup+0x176>
          break;
 800d870:	bf00      	nop
 800d872:	e008      	b.n	800d886 <USBD_CDC_Setup+0x186>
          break;
 800d874:	bf00      	nop
      }
      break;
 800d876:	e006      	b.n	800d886 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800d878:	6839      	ldr	r1, [r7, #0]
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f001 fa24 	bl	800ecc8 <USBD_CtlError>
      ret = USBD_FAIL;
 800d880:	2303      	movs	r3, #3
 800d882:	75fb      	strb	r3, [r7, #23]
      break;
 800d884:	bf00      	nop
  }

  return (uint8_t)ret;
 800d886:	7dfb      	ldrb	r3, [r7, #23]
}
 800d888:	4618      	mov	r0, r3
 800d88a:	3718      	adds	r7, #24
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}

0800d890 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b084      	sub	sp, #16
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
 800d898:	460b      	mov	r3, r1
 800d89a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d8a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d101      	bne.n	800d8b2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d8ae:	2303      	movs	r3, #3
 800d8b0:	e04f      	b.n	800d952 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d8b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d8ba:	78fa      	ldrb	r2, [r7, #3]
 800d8bc:	6879      	ldr	r1, [r7, #4]
 800d8be:	4613      	mov	r3, r2
 800d8c0:	009b      	lsls	r3, r3, #2
 800d8c2:	4413      	add	r3, r2
 800d8c4:	009b      	lsls	r3, r3, #2
 800d8c6:	440b      	add	r3, r1
 800d8c8:	3318      	adds	r3, #24
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d029      	beq.n	800d924 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d8d0:	78fa      	ldrb	r2, [r7, #3]
 800d8d2:	6879      	ldr	r1, [r7, #4]
 800d8d4:	4613      	mov	r3, r2
 800d8d6:	009b      	lsls	r3, r3, #2
 800d8d8:	4413      	add	r3, r2
 800d8da:	009b      	lsls	r3, r3, #2
 800d8dc:	440b      	add	r3, r1
 800d8de:	3318      	adds	r3, #24
 800d8e0:	681a      	ldr	r2, [r3, #0]
 800d8e2:	78f9      	ldrb	r1, [r7, #3]
 800d8e4:	68f8      	ldr	r0, [r7, #12]
 800d8e6:	460b      	mov	r3, r1
 800d8e8:	00db      	lsls	r3, r3, #3
 800d8ea:	1a5b      	subs	r3, r3, r1
 800d8ec:	009b      	lsls	r3, r3, #2
 800d8ee:	4403      	add	r3, r0
 800d8f0:	3344      	adds	r3, #68	; 0x44
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	fbb2 f1f3 	udiv	r1, r2, r3
 800d8f8:	fb03 f301 	mul.w	r3, r3, r1
 800d8fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d110      	bne.n	800d924 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800d902:	78fa      	ldrb	r2, [r7, #3]
 800d904:	6879      	ldr	r1, [r7, #4]
 800d906:	4613      	mov	r3, r2
 800d908:	009b      	lsls	r3, r3, #2
 800d90a:	4413      	add	r3, r2
 800d90c:	009b      	lsls	r3, r3, #2
 800d90e:	440b      	add	r3, r1
 800d910:	3318      	adds	r3, #24
 800d912:	2200      	movs	r2, #0
 800d914:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d916:	78f9      	ldrb	r1, [r7, #3]
 800d918:	2300      	movs	r3, #0
 800d91a:	2200      	movs	r2, #0
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f001 ff96 	bl	800f84e <USBD_LL_Transmit>
 800d922:	e015      	b.n	800d950 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	2200      	movs	r2, #0
 800d928:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d932:	691b      	ldr	r3, [r3, #16]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d00b      	beq.n	800d950 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d93e:	691b      	ldr	r3, [r3, #16]
 800d940:	68ba      	ldr	r2, [r7, #8]
 800d942:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d946:	68ba      	ldr	r2, [r7, #8]
 800d948:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d94c:	78fa      	ldrb	r2, [r7, #3]
 800d94e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d950:	2300      	movs	r3, #0
}
 800d952:	4618      	mov	r0, r3
 800d954:	3710      	adds	r7, #16
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}

0800d95a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d95a:	b580      	push	{r7, lr}
 800d95c:	b084      	sub	sp, #16
 800d95e:	af00      	add	r7, sp, #0
 800d960:	6078      	str	r0, [r7, #4]
 800d962:	460b      	mov	r3, r1
 800d964:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d96c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d974:	2b00      	cmp	r3, #0
 800d976:	d101      	bne.n	800d97c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d978:	2303      	movs	r3, #3
 800d97a:	e015      	b.n	800d9a8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d97c:	78fb      	ldrb	r3, [r7, #3]
 800d97e:	4619      	mov	r1, r3
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f001 ffa6 	bl	800f8d2 <USBD_LL_GetRxDataSize>
 800d986:	4602      	mov	r2, r0
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d994:	68db      	ldr	r3, [r3, #12]
 800d996:	68fa      	ldr	r2, [r7, #12]
 800d998:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d99c:	68fa      	ldr	r2, [r7, #12]
 800d99e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d9a2:	4611      	mov	r1, r2
 800d9a4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d9a6:	2300      	movs	r3, #0
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3710      	adds	r7, #16
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}

0800d9b0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b084      	sub	sp, #16
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d9be:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d101      	bne.n	800d9ca <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800d9c6:	2303      	movs	r3, #3
 800d9c8:	e01b      	b.n	800da02 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d015      	beq.n	800da00 <USBD_CDC_EP0_RxReady+0x50>
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d9da:	2bff      	cmp	r3, #255	; 0xff
 800d9dc:	d010      	beq.n	800da00 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d9e4:	689b      	ldr	r3, [r3, #8]
 800d9e6:	68fa      	ldr	r2, [r7, #12]
 800d9e8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800d9ec:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d9ee:	68fa      	ldr	r2, [r7, #12]
 800d9f0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d9f4:	b292      	uxth	r2, r2
 800d9f6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	22ff      	movs	r2, #255	; 0xff
 800d9fc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800da00:	2300      	movs	r3, #0
}
 800da02:	4618      	mov	r0, r3
 800da04:	3710      	adds	r7, #16
 800da06:	46bd      	mov	sp, r7
 800da08:	bd80      	pop	{r7, pc}
	...

0800da0c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800da0c:	b480      	push	{r7}
 800da0e:	b083      	sub	sp, #12
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2243      	movs	r2, #67	; 0x43
 800da18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800da1a:	4b03      	ldr	r3, [pc, #12]	; (800da28 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	370c      	adds	r7, #12
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	4770      	bx	lr
 800da28:	24000098 	.word	0x24000098

0800da2c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800da2c:	b480      	push	{r7}
 800da2e:	b083      	sub	sp, #12
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2243      	movs	r2, #67	; 0x43
 800da38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800da3a:	4b03      	ldr	r3, [pc, #12]	; (800da48 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	370c      	adds	r7, #12
 800da40:	46bd      	mov	sp, r7
 800da42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da46:	4770      	bx	lr
 800da48:	24000054 	.word	0x24000054

0800da4c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800da4c:	b480      	push	{r7}
 800da4e:	b083      	sub	sp, #12
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2243      	movs	r2, #67	; 0x43
 800da58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800da5a:	4b03      	ldr	r3, [pc, #12]	; (800da68 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	370c      	adds	r7, #12
 800da60:	46bd      	mov	sp, r7
 800da62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da66:	4770      	bx	lr
 800da68:	240000dc 	.word	0x240000dc

0800da6c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800da6c:	b480      	push	{r7}
 800da6e:	b083      	sub	sp, #12
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	220a      	movs	r2, #10
 800da78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800da7a:	4b03      	ldr	r3, [pc, #12]	; (800da88 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	370c      	adds	r7, #12
 800da80:	46bd      	mov	sp, r7
 800da82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da86:	4770      	bx	lr
 800da88:	24000010 	.word	0x24000010

0800da8c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800da8c:	b480      	push	{r7}
 800da8e:	b083      	sub	sp, #12
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d101      	bne.n	800daa0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800da9c:	2303      	movs	r3, #3
 800da9e:	e004      	b.n	800daaa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	683a      	ldr	r2, [r7, #0]
 800daa4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800daa8:	2300      	movs	r3, #0
}
 800daaa:	4618      	mov	r0, r3
 800daac:	370c      	adds	r7, #12
 800daae:	46bd      	mov	sp, r7
 800dab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab4:	4770      	bx	lr

0800dab6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800dab6:	b480      	push	{r7}
 800dab8:	b087      	sub	sp, #28
 800daba:	af00      	add	r7, sp, #0
 800dabc:	60f8      	str	r0, [r7, #12]
 800dabe:	60b9      	str	r1, [r7, #8]
 800dac0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dac8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d101      	bne.n	800dad4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800dad0:	2303      	movs	r3, #3
 800dad2:	e008      	b.n	800dae6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	68ba      	ldr	r2, [r7, #8]
 800dad8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	687a      	ldr	r2, [r7, #4]
 800dae0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800dae4:	2300      	movs	r3, #0
}
 800dae6:	4618      	mov	r0, r3
 800dae8:	371c      	adds	r7, #28
 800daea:	46bd      	mov	sp, r7
 800daec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf0:	4770      	bx	lr

0800daf2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800daf2:	b480      	push	{r7}
 800daf4:	b085      	sub	sp, #20
 800daf6:	af00      	add	r7, sp, #0
 800daf8:	6078      	str	r0, [r7, #4]
 800dafa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db02:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d101      	bne.n	800db0e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800db0a:	2303      	movs	r3, #3
 800db0c:	e004      	b.n	800db18 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	683a      	ldr	r2, [r7, #0]
 800db12:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800db16:	2300      	movs	r3, #0
}
 800db18:	4618      	mov	r0, r3
 800db1a:	3714      	adds	r7, #20
 800db1c:	46bd      	mov	sp, r7
 800db1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db22:	4770      	bx	lr

0800db24 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b084      	sub	sp, #16
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db32:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800db34:	2301      	movs	r3, #1
 800db36:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d101      	bne.n	800db46 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800db42:	2303      	movs	r3, #3
 800db44:	e01a      	b.n	800db7c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800db46:	68bb      	ldr	r3, [r7, #8]
 800db48:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d114      	bne.n	800db7a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	2201      	movs	r2, #1
 800db54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800db6e:	2181      	movs	r1, #129	; 0x81
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f001 fe6c 	bl	800f84e <USBD_LL_Transmit>

    ret = USBD_OK;
 800db76:	2300      	movs	r3, #0
 800db78:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800db7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800db7c:	4618      	mov	r0, r3
 800db7e:	3710      	adds	r7, #16
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}

0800db84 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b084      	sub	sp, #16
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db92:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d101      	bne.n	800dba2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800db9e:	2303      	movs	r3, #3
 800dba0:	e016      	b.n	800dbd0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	7c1b      	ldrb	r3, [r3, #16]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d109      	bne.n	800dbbe <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dbb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dbb4:	2101      	movs	r1, #1
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f001 fe6a 	bl	800f890 <USBD_LL_PrepareReceive>
 800dbbc:	e007      	b.n	800dbce <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dbc4:	2340      	movs	r3, #64	; 0x40
 800dbc6:	2101      	movs	r1, #1
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	f001 fe61 	bl	800f890 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dbce:	2300      	movs	r3, #0
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3710      	adds	r7, #16
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}

0800dbd8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b086      	sub	sp, #24
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	60f8      	str	r0, [r7, #12]
 800dbe0:	60b9      	str	r1, [r7, #8]
 800dbe2:	4613      	mov	r3, r2
 800dbe4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d101      	bne.n	800dbf0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800dbec:	2303      	movs	r3, #3
 800dbee:	e01f      	b.n	800dc30 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	2200      	movs	r2, #0
 800dc04:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d003      	beq.n	800dc16 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	68ba      	ldr	r2, [r7, #8]
 800dc12:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	2201      	movs	r2, #1
 800dc1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	79fa      	ldrb	r2, [r7, #7]
 800dc22:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800dc24:	68f8      	ldr	r0, [r7, #12]
 800dc26:	f001 fcd3 	bl	800f5d0 <USBD_LL_Init>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800dc2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc30:	4618      	mov	r0, r3
 800dc32:	3718      	adds	r7, #24
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}

0800dc38 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b084      	sub	sp, #16
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
 800dc40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dc42:	2300      	movs	r3, #0
 800dc44:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d101      	bne.n	800dc50 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800dc4c:	2303      	movs	r3, #3
 800dc4e:	e016      	b.n	800dc7e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	683a      	ldr	r2, [r7, #0]
 800dc54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d00b      	beq.n	800dc7c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc6c:	f107 020e 	add.w	r2, r7, #14
 800dc70:	4610      	mov	r0, r2
 800dc72:	4798      	blx	r3
 800dc74:	4602      	mov	r2, r0
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800dc7c:	2300      	movs	r3, #0
}
 800dc7e:	4618      	mov	r0, r3
 800dc80:	3710      	adds	r7, #16
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}

0800dc86 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800dc86:	b580      	push	{r7, lr}
 800dc88:	b082      	sub	sp, #8
 800dc8a:	af00      	add	r7, sp, #0
 800dc8c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f001 fcf4 	bl	800f67c <USBD_LL_Start>
 800dc94:	4603      	mov	r3, r0
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3708      	adds	r7, #8
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}

0800dc9e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800dc9e:	b480      	push	{r7}
 800dca0:	b083      	sub	sp, #12
 800dca2:	af00      	add	r7, sp, #0
 800dca4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dca6:	2300      	movs	r3, #0
}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	370c      	adds	r7, #12
 800dcac:	46bd      	mov	sp, r7
 800dcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb2:	4770      	bx	lr

0800dcb4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b084      	sub	sp, #16
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
 800dcbc:	460b      	mov	r3, r1
 800dcbe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800dcc0:	2303      	movs	r3, #3
 800dcc2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d009      	beq.n	800dce2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	78fa      	ldrb	r2, [r7, #3]
 800dcd8:	4611      	mov	r1, r2
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	4798      	blx	r3
 800dcde:	4603      	mov	r3, r0
 800dce0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800dce2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3710      	adds	r7, #16
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b082      	sub	sp, #8
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	460b      	mov	r3, r1
 800dcf6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d007      	beq.n	800dd12 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd08:	685b      	ldr	r3, [r3, #4]
 800dd0a:	78fa      	ldrb	r2, [r7, #3]
 800dd0c:	4611      	mov	r1, r2
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	4798      	blx	r3
  }

  return USBD_OK;
 800dd12:	2300      	movs	r3, #0
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	3708      	adds	r7, #8
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}

0800dd1c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b084      	sub	sp, #16
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
 800dd24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dd2c:	6839      	ldr	r1, [r7, #0]
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f000 ff90 	bl	800ec54 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2201      	movs	r2, #1
 800dd38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800dd42:	461a      	mov	r2, r3
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dd50:	f003 031f 	and.w	r3, r3, #31
 800dd54:	2b02      	cmp	r3, #2
 800dd56:	d01a      	beq.n	800dd8e <USBD_LL_SetupStage+0x72>
 800dd58:	2b02      	cmp	r3, #2
 800dd5a:	d822      	bhi.n	800dda2 <USBD_LL_SetupStage+0x86>
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d002      	beq.n	800dd66 <USBD_LL_SetupStage+0x4a>
 800dd60:	2b01      	cmp	r3, #1
 800dd62:	d00a      	beq.n	800dd7a <USBD_LL_SetupStage+0x5e>
 800dd64:	e01d      	b.n	800dda2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f000 fa62 	bl	800e238 <USBD_StdDevReq>
 800dd74:	4603      	mov	r3, r0
 800dd76:	73fb      	strb	r3, [r7, #15]
      break;
 800dd78:	e020      	b.n	800ddbc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dd80:	4619      	mov	r1, r3
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	f000 fac6 	bl	800e314 <USBD_StdItfReq>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	73fb      	strb	r3, [r7, #15]
      break;
 800dd8c:	e016      	b.n	800ddbc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dd94:	4619      	mov	r1, r3
 800dd96:	6878      	ldr	r0, [r7, #4]
 800dd98:	f000 fb05 	bl	800e3a6 <USBD_StdEPReq>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	73fb      	strb	r3, [r7, #15]
      break;
 800dda0:	e00c      	b.n	800ddbc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dda8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ddac:	b2db      	uxtb	r3, r3
 800ddae:	4619      	mov	r1, r3
 800ddb0:	6878      	ldr	r0, [r7, #4]
 800ddb2:	f001 fcc3 	bl	800f73c <USBD_LL_StallEP>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	73fb      	strb	r3, [r7, #15]
      break;
 800ddba:	bf00      	nop
  }

  return ret;
 800ddbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	3710      	adds	r7, #16
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}

0800ddc6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ddc6:	b580      	push	{r7, lr}
 800ddc8:	b086      	sub	sp, #24
 800ddca:	af00      	add	r7, sp, #0
 800ddcc:	60f8      	str	r0, [r7, #12]
 800ddce:	460b      	mov	r3, r1
 800ddd0:	607a      	str	r2, [r7, #4]
 800ddd2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ddd4:	7afb      	ldrb	r3, [r7, #11]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d138      	bne.n	800de4c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800dde0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dde8:	2b03      	cmp	r3, #3
 800ddea:	d14a      	bne.n	800de82 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	689a      	ldr	r2, [r3, #8]
 800ddf0:	693b      	ldr	r3, [r7, #16]
 800ddf2:	68db      	ldr	r3, [r3, #12]
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	d913      	bls.n	800de20 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	689a      	ldr	r2, [r3, #8]
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	68db      	ldr	r3, [r3, #12]
 800de00:	1ad2      	subs	r2, r2, r3
 800de02:	693b      	ldr	r3, [r7, #16]
 800de04:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	68da      	ldr	r2, [r3, #12]
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	689b      	ldr	r3, [r3, #8]
 800de0e:	4293      	cmp	r3, r2
 800de10:	bf28      	it	cs
 800de12:	4613      	movcs	r3, r2
 800de14:	461a      	mov	r2, r3
 800de16:	6879      	ldr	r1, [r7, #4]
 800de18:	68f8      	ldr	r0, [r7, #12]
 800de1a:	f001 f80f 	bl	800ee3c <USBD_CtlContinueRx>
 800de1e:	e030      	b.n	800de82 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de26:	b2db      	uxtb	r3, r3
 800de28:	2b03      	cmp	r3, #3
 800de2a:	d10b      	bne.n	800de44 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de32:	691b      	ldr	r3, [r3, #16]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d005      	beq.n	800de44 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de3e:	691b      	ldr	r3, [r3, #16]
 800de40:	68f8      	ldr	r0, [r7, #12]
 800de42:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800de44:	68f8      	ldr	r0, [r7, #12]
 800de46:	f001 f80a 	bl	800ee5e <USBD_CtlSendStatus>
 800de4a:	e01a      	b.n	800de82 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de52:	b2db      	uxtb	r3, r3
 800de54:	2b03      	cmp	r3, #3
 800de56:	d114      	bne.n	800de82 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de5e:	699b      	ldr	r3, [r3, #24]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d00e      	beq.n	800de82 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de6a:	699b      	ldr	r3, [r3, #24]
 800de6c:	7afa      	ldrb	r2, [r7, #11]
 800de6e:	4611      	mov	r1, r2
 800de70:	68f8      	ldr	r0, [r7, #12]
 800de72:	4798      	blx	r3
 800de74:	4603      	mov	r3, r0
 800de76:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800de78:	7dfb      	ldrb	r3, [r7, #23]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d001      	beq.n	800de82 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800de7e:	7dfb      	ldrb	r3, [r7, #23]
 800de80:	e000      	b.n	800de84 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800de82:	2300      	movs	r3, #0
}
 800de84:	4618      	mov	r0, r3
 800de86:	3718      	adds	r7, #24
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}

0800de8c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b086      	sub	sp, #24
 800de90:	af00      	add	r7, sp, #0
 800de92:	60f8      	str	r0, [r7, #12]
 800de94:	460b      	mov	r3, r1
 800de96:	607a      	str	r2, [r7, #4]
 800de98:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800de9a:	7afb      	ldrb	r3, [r7, #11]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d16b      	bne.n	800df78 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	3314      	adds	r3, #20
 800dea4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800deac:	2b02      	cmp	r3, #2
 800deae:	d156      	bne.n	800df5e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800deb0:	693b      	ldr	r3, [r7, #16]
 800deb2:	689a      	ldr	r2, [r3, #8]
 800deb4:	693b      	ldr	r3, [r7, #16]
 800deb6:	68db      	ldr	r3, [r3, #12]
 800deb8:	429a      	cmp	r2, r3
 800deba:	d914      	bls.n	800dee6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800debc:	693b      	ldr	r3, [r7, #16]
 800debe:	689a      	ldr	r2, [r3, #8]
 800dec0:	693b      	ldr	r3, [r7, #16]
 800dec2:	68db      	ldr	r3, [r3, #12]
 800dec4:	1ad2      	subs	r2, r2, r3
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800deca:	693b      	ldr	r3, [r7, #16]
 800decc:	689b      	ldr	r3, [r3, #8]
 800dece:	461a      	mov	r2, r3
 800ded0:	6879      	ldr	r1, [r7, #4]
 800ded2:	68f8      	ldr	r0, [r7, #12]
 800ded4:	f000 ff84 	bl	800ede0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ded8:	2300      	movs	r3, #0
 800deda:	2200      	movs	r2, #0
 800dedc:	2100      	movs	r1, #0
 800dede:	68f8      	ldr	r0, [r7, #12]
 800dee0:	f001 fcd6 	bl	800f890 <USBD_LL_PrepareReceive>
 800dee4:	e03b      	b.n	800df5e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dee6:	693b      	ldr	r3, [r7, #16]
 800dee8:	68da      	ldr	r2, [r3, #12]
 800deea:	693b      	ldr	r3, [r7, #16]
 800deec:	689b      	ldr	r3, [r3, #8]
 800deee:	429a      	cmp	r2, r3
 800def0:	d11c      	bne.n	800df2c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800def2:	693b      	ldr	r3, [r7, #16]
 800def4:	685a      	ldr	r2, [r3, #4]
 800def6:	693b      	ldr	r3, [r7, #16]
 800def8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800defa:	429a      	cmp	r2, r3
 800defc:	d316      	bcc.n	800df2c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800defe:	693b      	ldr	r3, [r7, #16]
 800df00:	685a      	ldr	r2, [r3, #4]
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800df08:	429a      	cmp	r2, r3
 800df0a:	d20f      	bcs.n	800df2c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800df0c:	2200      	movs	r2, #0
 800df0e:	2100      	movs	r1, #0
 800df10:	68f8      	ldr	r0, [r7, #12]
 800df12:	f000 ff65 	bl	800ede0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	2200      	movs	r2, #0
 800df1a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800df1e:	2300      	movs	r3, #0
 800df20:	2200      	movs	r2, #0
 800df22:	2100      	movs	r1, #0
 800df24:	68f8      	ldr	r0, [r7, #12]
 800df26:	f001 fcb3 	bl	800f890 <USBD_LL_PrepareReceive>
 800df2a:	e018      	b.n	800df5e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df32:	b2db      	uxtb	r3, r3
 800df34:	2b03      	cmp	r3, #3
 800df36:	d10b      	bne.n	800df50 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df3e:	68db      	ldr	r3, [r3, #12]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d005      	beq.n	800df50 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df4a:	68db      	ldr	r3, [r3, #12]
 800df4c:	68f8      	ldr	r0, [r7, #12]
 800df4e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800df50:	2180      	movs	r1, #128	; 0x80
 800df52:	68f8      	ldr	r0, [r7, #12]
 800df54:	f001 fbf2 	bl	800f73c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800df58:	68f8      	ldr	r0, [r7, #12]
 800df5a:	f000 ff93 	bl	800ee84 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800df64:	2b01      	cmp	r3, #1
 800df66:	d122      	bne.n	800dfae <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800df68:	68f8      	ldr	r0, [r7, #12]
 800df6a:	f7ff fe98 	bl	800dc9e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	2200      	movs	r2, #0
 800df72:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800df76:	e01a      	b.n	800dfae <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df7e:	b2db      	uxtb	r3, r3
 800df80:	2b03      	cmp	r3, #3
 800df82:	d114      	bne.n	800dfae <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df8a:	695b      	ldr	r3, [r3, #20]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d00e      	beq.n	800dfae <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df96:	695b      	ldr	r3, [r3, #20]
 800df98:	7afa      	ldrb	r2, [r7, #11]
 800df9a:	4611      	mov	r1, r2
 800df9c:	68f8      	ldr	r0, [r7, #12]
 800df9e:	4798      	blx	r3
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800dfa4:	7dfb      	ldrb	r3, [r7, #23]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d001      	beq.n	800dfae <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800dfaa:	7dfb      	ldrb	r3, [r7, #23]
 800dfac:	e000      	b.n	800dfb0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800dfae:	2300      	movs	r3, #0
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3718      	adds	r7, #24
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}

0800dfb8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b082      	sub	sp, #8
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2201      	movs	r2, #1
 800dfc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d101      	bne.n	800dfec <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800dfe8:	2303      	movs	r3, #3
 800dfea:	e02f      	b.n	800e04c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d00f      	beq.n	800e016 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dffc:	685b      	ldr	r3, [r3, #4]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d009      	beq.n	800e016 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e008:	685b      	ldr	r3, [r3, #4]
 800e00a:	687a      	ldr	r2, [r7, #4]
 800e00c:	6852      	ldr	r2, [r2, #4]
 800e00e:	b2d2      	uxtb	r2, r2
 800e010:	4611      	mov	r1, r2
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e016:	2340      	movs	r3, #64	; 0x40
 800e018:	2200      	movs	r2, #0
 800e01a:	2100      	movs	r1, #0
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	f001 fb48 	bl	800f6b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2201      	movs	r2, #1
 800e026:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2240      	movs	r2, #64	; 0x40
 800e02e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e032:	2340      	movs	r3, #64	; 0x40
 800e034:	2200      	movs	r2, #0
 800e036:	2180      	movs	r1, #128	; 0x80
 800e038:	6878      	ldr	r0, [r7, #4]
 800e03a:	f001 fb3a 	bl	800f6b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2201      	movs	r2, #1
 800e042:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2240      	movs	r2, #64	; 0x40
 800e048:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e04a:	2300      	movs	r3, #0
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	3708      	adds	r7, #8
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}

0800e054 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e054:	b480      	push	{r7}
 800e056:	b083      	sub	sp, #12
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	460b      	mov	r3, r1
 800e05e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	78fa      	ldrb	r2, [r7, #3]
 800e064:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e066:	2300      	movs	r3, #0
}
 800e068:	4618      	mov	r0, r3
 800e06a:	370c      	adds	r7, #12
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr

0800e074 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e074:	b480      	push	{r7}
 800e076:	b083      	sub	sp, #12
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e082:	b2da      	uxtb	r2, r3
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2204      	movs	r2, #4
 800e08e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e092:	2300      	movs	r3, #0
}
 800e094:	4618      	mov	r0, r3
 800e096:	370c      	adds	r7, #12
 800e098:	46bd      	mov	sp, r7
 800e09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09e:	4770      	bx	lr

0800e0a0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e0a0:	b480      	push	{r7}
 800e0a2:	b083      	sub	sp, #12
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0ae:	b2db      	uxtb	r3, r3
 800e0b0:	2b04      	cmp	r3, #4
 800e0b2:	d106      	bne.n	800e0c2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e0ba:	b2da      	uxtb	r2, r3
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e0c2:	2300      	movs	r3, #0
}
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	370c      	adds	r7, #12
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ce:	4770      	bx	lr

0800e0d0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b082      	sub	sp, #8
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d101      	bne.n	800e0e6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800e0e2:	2303      	movs	r3, #3
 800e0e4:	e012      	b.n	800e10c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0ec:	b2db      	uxtb	r3, r3
 800e0ee:	2b03      	cmp	r3, #3
 800e0f0:	d10b      	bne.n	800e10a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0f8:	69db      	ldr	r3, [r3, #28]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d005      	beq.n	800e10a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e104:	69db      	ldr	r3, [r3, #28]
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e10a:	2300      	movs	r3, #0
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	3708      	adds	r7, #8
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}

0800e114 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b082      	sub	sp, #8
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
 800e11c:	460b      	mov	r3, r1
 800e11e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e126:	2b00      	cmp	r3, #0
 800e128:	d101      	bne.n	800e12e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800e12a:	2303      	movs	r3, #3
 800e12c:	e014      	b.n	800e158 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e134:	b2db      	uxtb	r3, r3
 800e136:	2b03      	cmp	r3, #3
 800e138:	d10d      	bne.n	800e156 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e140:	6a1b      	ldr	r3, [r3, #32]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d007      	beq.n	800e156 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e14c:	6a1b      	ldr	r3, [r3, #32]
 800e14e:	78fa      	ldrb	r2, [r7, #3]
 800e150:	4611      	mov	r1, r2
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e156:	2300      	movs	r3, #0
}
 800e158:	4618      	mov	r0, r3
 800e15a:	3708      	adds	r7, #8
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd80      	pop	{r7, pc}

0800e160 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b082      	sub	sp, #8
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
 800e168:	460b      	mov	r3, r1
 800e16a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e172:	2b00      	cmp	r3, #0
 800e174:	d101      	bne.n	800e17a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800e176:	2303      	movs	r3, #3
 800e178:	e014      	b.n	800e1a4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e180:	b2db      	uxtb	r3, r3
 800e182:	2b03      	cmp	r3, #3
 800e184:	d10d      	bne.n	800e1a2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d007      	beq.n	800e1a2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e19a:	78fa      	ldrb	r2, [r7, #3]
 800e19c:	4611      	mov	r1, r2
 800e19e:	6878      	ldr	r0, [r7, #4]
 800e1a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e1a2:	2300      	movs	r3, #0
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3708      	adds	r7, #8
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}

0800e1ac <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	b083      	sub	sp, #12
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e1b4:	2300      	movs	r3, #0
}
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	370c      	adds	r7, #12
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c0:	4770      	bx	lr

0800e1c2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e1c2:	b580      	push	{r7, lr}
 800e1c4:	b082      	sub	sp, #8
 800e1c6:	af00      	add	r7, sp, #0
 800e1c8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	2201      	movs	r2, #1
 800e1ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d009      	beq.n	800e1f0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1e2:	685b      	ldr	r3, [r3, #4]
 800e1e4:	687a      	ldr	r2, [r7, #4]
 800e1e6:	6852      	ldr	r2, [r2, #4]
 800e1e8:	b2d2      	uxtb	r2, r2
 800e1ea:	4611      	mov	r1, r2
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	4798      	blx	r3
  }

  return USBD_OK;
 800e1f0:	2300      	movs	r3, #0
}
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	3708      	adds	r7, #8
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd80      	pop	{r7, pc}

0800e1fa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e1fa:	b480      	push	{r7}
 800e1fc:	b087      	sub	sp, #28
 800e1fe:	af00      	add	r7, sp, #0
 800e200:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	781b      	ldrb	r3, [r3, #0]
 800e20a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e20c:	697b      	ldr	r3, [r7, #20]
 800e20e:	3301      	adds	r3, #1
 800e210:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	781b      	ldrb	r3, [r3, #0]
 800e216:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e218:	8a3b      	ldrh	r3, [r7, #16]
 800e21a:	021b      	lsls	r3, r3, #8
 800e21c:	b21a      	sxth	r2, r3
 800e21e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e222:	4313      	orrs	r3, r2
 800e224:	b21b      	sxth	r3, r3
 800e226:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e228:	89fb      	ldrh	r3, [r7, #14]
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	371c      	adds	r7, #28
 800e22e:	46bd      	mov	sp, r7
 800e230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e234:	4770      	bx	lr
	...

0800e238 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b084      	sub	sp, #16
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e242:	2300      	movs	r3, #0
 800e244:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	781b      	ldrb	r3, [r3, #0]
 800e24a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e24e:	2b40      	cmp	r3, #64	; 0x40
 800e250:	d005      	beq.n	800e25e <USBD_StdDevReq+0x26>
 800e252:	2b40      	cmp	r3, #64	; 0x40
 800e254:	d853      	bhi.n	800e2fe <USBD_StdDevReq+0xc6>
 800e256:	2b00      	cmp	r3, #0
 800e258:	d00b      	beq.n	800e272 <USBD_StdDevReq+0x3a>
 800e25a:	2b20      	cmp	r3, #32
 800e25c:	d14f      	bne.n	800e2fe <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e264:	689b      	ldr	r3, [r3, #8]
 800e266:	6839      	ldr	r1, [r7, #0]
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	4798      	blx	r3
 800e26c:	4603      	mov	r3, r0
 800e26e:	73fb      	strb	r3, [r7, #15]
      break;
 800e270:	e04a      	b.n	800e308 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	785b      	ldrb	r3, [r3, #1]
 800e276:	2b09      	cmp	r3, #9
 800e278:	d83b      	bhi.n	800e2f2 <USBD_StdDevReq+0xba>
 800e27a:	a201      	add	r2, pc, #4	; (adr r2, 800e280 <USBD_StdDevReq+0x48>)
 800e27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e280:	0800e2d5 	.word	0x0800e2d5
 800e284:	0800e2e9 	.word	0x0800e2e9
 800e288:	0800e2f3 	.word	0x0800e2f3
 800e28c:	0800e2df 	.word	0x0800e2df
 800e290:	0800e2f3 	.word	0x0800e2f3
 800e294:	0800e2b3 	.word	0x0800e2b3
 800e298:	0800e2a9 	.word	0x0800e2a9
 800e29c:	0800e2f3 	.word	0x0800e2f3
 800e2a0:	0800e2cb 	.word	0x0800e2cb
 800e2a4:	0800e2bd 	.word	0x0800e2bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e2a8:	6839      	ldr	r1, [r7, #0]
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f000 f9de 	bl	800e66c <USBD_GetDescriptor>
          break;
 800e2b0:	e024      	b.n	800e2fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e2b2:	6839      	ldr	r1, [r7, #0]
 800e2b4:	6878      	ldr	r0, [r7, #4]
 800e2b6:	f000 fb43 	bl	800e940 <USBD_SetAddress>
          break;
 800e2ba:	e01f      	b.n	800e2fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e2bc:	6839      	ldr	r1, [r7, #0]
 800e2be:	6878      	ldr	r0, [r7, #4]
 800e2c0:	f000 fb82 	bl	800e9c8 <USBD_SetConfig>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	73fb      	strb	r3, [r7, #15]
          break;
 800e2c8:	e018      	b.n	800e2fc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e2ca:	6839      	ldr	r1, [r7, #0]
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f000 fc21 	bl	800eb14 <USBD_GetConfig>
          break;
 800e2d2:	e013      	b.n	800e2fc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e2d4:	6839      	ldr	r1, [r7, #0]
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f000 fc52 	bl	800eb80 <USBD_GetStatus>
          break;
 800e2dc:	e00e      	b.n	800e2fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e2de:	6839      	ldr	r1, [r7, #0]
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f000 fc81 	bl	800ebe8 <USBD_SetFeature>
          break;
 800e2e6:	e009      	b.n	800e2fc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e2e8:	6839      	ldr	r1, [r7, #0]
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f000 fc90 	bl	800ec10 <USBD_ClrFeature>
          break;
 800e2f0:	e004      	b.n	800e2fc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800e2f2:	6839      	ldr	r1, [r7, #0]
 800e2f4:	6878      	ldr	r0, [r7, #4]
 800e2f6:	f000 fce7 	bl	800ecc8 <USBD_CtlError>
          break;
 800e2fa:	bf00      	nop
      }
      break;
 800e2fc:	e004      	b.n	800e308 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800e2fe:	6839      	ldr	r1, [r7, #0]
 800e300:	6878      	ldr	r0, [r7, #4]
 800e302:	f000 fce1 	bl	800ecc8 <USBD_CtlError>
      break;
 800e306:	bf00      	nop
  }

  return ret;
 800e308:	7bfb      	ldrb	r3, [r7, #15]
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3710      	adds	r7, #16
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
 800e312:	bf00      	nop

0800e314 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b084      	sub	sp, #16
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
 800e31c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e31e:	2300      	movs	r3, #0
 800e320:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	781b      	ldrb	r3, [r3, #0]
 800e326:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e32a:	2b40      	cmp	r3, #64	; 0x40
 800e32c:	d005      	beq.n	800e33a <USBD_StdItfReq+0x26>
 800e32e:	2b40      	cmp	r3, #64	; 0x40
 800e330:	d82f      	bhi.n	800e392 <USBD_StdItfReq+0x7e>
 800e332:	2b00      	cmp	r3, #0
 800e334:	d001      	beq.n	800e33a <USBD_StdItfReq+0x26>
 800e336:	2b20      	cmp	r3, #32
 800e338:	d12b      	bne.n	800e392 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e340:	b2db      	uxtb	r3, r3
 800e342:	3b01      	subs	r3, #1
 800e344:	2b02      	cmp	r3, #2
 800e346:	d81d      	bhi.n	800e384 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	889b      	ldrh	r3, [r3, #4]
 800e34c:	b2db      	uxtb	r3, r3
 800e34e:	2b01      	cmp	r3, #1
 800e350:	d813      	bhi.n	800e37a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e358:	689b      	ldr	r3, [r3, #8]
 800e35a:	6839      	ldr	r1, [r7, #0]
 800e35c:	6878      	ldr	r0, [r7, #4]
 800e35e:	4798      	blx	r3
 800e360:	4603      	mov	r3, r0
 800e362:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	88db      	ldrh	r3, [r3, #6]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d110      	bne.n	800e38e <USBD_StdItfReq+0x7a>
 800e36c:	7bfb      	ldrb	r3, [r7, #15]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d10d      	bne.n	800e38e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f000 fd73 	bl	800ee5e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e378:	e009      	b.n	800e38e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800e37a:	6839      	ldr	r1, [r7, #0]
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f000 fca3 	bl	800ecc8 <USBD_CtlError>
          break;
 800e382:	e004      	b.n	800e38e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800e384:	6839      	ldr	r1, [r7, #0]
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	f000 fc9e 	bl	800ecc8 <USBD_CtlError>
          break;
 800e38c:	e000      	b.n	800e390 <USBD_StdItfReq+0x7c>
          break;
 800e38e:	bf00      	nop
      }
      break;
 800e390:	e004      	b.n	800e39c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800e392:	6839      	ldr	r1, [r7, #0]
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f000 fc97 	bl	800ecc8 <USBD_CtlError>
      break;
 800e39a:	bf00      	nop
  }

  return ret;
 800e39c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e39e:	4618      	mov	r0, r3
 800e3a0:	3710      	adds	r7, #16
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	bd80      	pop	{r7, pc}

0800e3a6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3a6:	b580      	push	{r7, lr}
 800e3a8:	b084      	sub	sp, #16
 800e3aa:	af00      	add	r7, sp, #0
 800e3ac:	6078      	str	r0, [r7, #4]
 800e3ae:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	889b      	ldrh	r3, [r3, #4]
 800e3b8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	781b      	ldrb	r3, [r3, #0]
 800e3be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e3c2:	2b40      	cmp	r3, #64	; 0x40
 800e3c4:	d007      	beq.n	800e3d6 <USBD_StdEPReq+0x30>
 800e3c6:	2b40      	cmp	r3, #64	; 0x40
 800e3c8:	f200 8145 	bhi.w	800e656 <USBD_StdEPReq+0x2b0>
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d00c      	beq.n	800e3ea <USBD_StdEPReq+0x44>
 800e3d0:	2b20      	cmp	r3, #32
 800e3d2:	f040 8140 	bne.w	800e656 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3dc:	689b      	ldr	r3, [r3, #8]
 800e3de:	6839      	ldr	r1, [r7, #0]
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	4798      	blx	r3
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	73fb      	strb	r3, [r7, #15]
      break;
 800e3e8:	e13a      	b.n	800e660 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	785b      	ldrb	r3, [r3, #1]
 800e3ee:	2b03      	cmp	r3, #3
 800e3f0:	d007      	beq.n	800e402 <USBD_StdEPReq+0x5c>
 800e3f2:	2b03      	cmp	r3, #3
 800e3f4:	f300 8129 	bgt.w	800e64a <USBD_StdEPReq+0x2a4>
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d07f      	beq.n	800e4fc <USBD_StdEPReq+0x156>
 800e3fc:	2b01      	cmp	r3, #1
 800e3fe:	d03c      	beq.n	800e47a <USBD_StdEPReq+0xd4>
 800e400:	e123      	b.n	800e64a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e408:	b2db      	uxtb	r3, r3
 800e40a:	2b02      	cmp	r3, #2
 800e40c:	d002      	beq.n	800e414 <USBD_StdEPReq+0x6e>
 800e40e:	2b03      	cmp	r3, #3
 800e410:	d016      	beq.n	800e440 <USBD_StdEPReq+0x9a>
 800e412:	e02c      	b.n	800e46e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e414:	7bbb      	ldrb	r3, [r7, #14]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d00d      	beq.n	800e436 <USBD_StdEPReq+0x90>
 800e41a:	7bbb      	ldrb	r3, [r7, #14]
 800e41c:	2b80      	cmp	r3, #128	; 0x80
 800e41e:	d00a      	beq.n	800e436 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e420:	7bbb      	ldrb	r3, [r7, #14]
 800e422:	4619      	mov	r1, r3
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f001 f989 	bl	800f73c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e42a:	2180      	movs	r1, #128	; 0x80
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f001 f985 	bl	800f73c <USBD_LL_StallEP>
 800e432:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e434:	e020      	b.n	800e478 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800e436:	6839      	ldr	r1, [r7, #0]
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	f000 fc45 	bl	800ecc8 <USBD_CtlError>
              break;
 800e43e:	e01b      	b.n	800e478 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	885b      	ldrh	r3, [r3, #2]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d10e      	bne.n	800e466 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e448:	7bbb      	ldrb	r3, [r7, #14]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d00b      	beq.n	800e466 <USBD_StdEPReq+0xc0>
 800e44e:	7bbb      	ldrb	r3, [r7, #14]
 800e450:	2b80      	cmp	r3, #128	; 0x80
 800e452:	d008      	beq.n	800e466 <USBD_StdEPReq+0xc0>
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	88db      	ldrh	r3, [r3, #6]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d104      	bne.n	800e466 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e45c:	7bbb      	ldrb	r3, [r7, #14]
 800e45e:	4619      	mov	r1, r3
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f001 f96b 	bl	800f73c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f000 fcf9 	bl	800ee5e <USBD_CtlSendStatus>

              break;
 800e46c:	e004      	b.n	800e478 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800e46e:	6839      	ldr	r1, [r7, #0]
 800e470:	6878      	ldr	r0, [r7, #4]
 800e472:	f000 fc29 	bl	800ecc8 <USBD_CtlError>
              break;
 800e476:	bf00      	nop
          }
          break;
 800e478:	e0ec      	b.n	800e654 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e480:	b2db      	uxtb	r3, r3
 800e482:	2b02      	cmp	r3, #2
 800e484:	d002      	beq.n	800e48c <USBD_StdEPReq+0xe6>
 800e486:	2b03      	cmp	r3, #3
 800e488:	d016      	beq.n	800e4b8 <USBD_StdEPReq+0x112>
 800e48a:	e030      	b.n	800e4ee <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e48c:	7bbb      	ldrb	r3, [r7, #14]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d00d      	beq.n	800e4ae <USBD_StdEPReq+0x108>
 800e492:	7bbb      	ldrb	r3, [r7, #14]
 800e494:	2b80      	cmp	r3, #128	; 0x80
 800e496:	d00a      	beq.n	800e4ae <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e498:	7bbb      	ldrb	r3, [r7, #14]
 800e49a:	4619      	mov	r1, r3
 800e49c:	6878      	ldr	r0, [r7, #4]
 800e49e:	f001 f94d 	bl	800f73c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e4a2:	2180      	movs	r1, #128	; 0x80
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	f001 f949 	bl	800f73c <USBD_LL_StallEP>
 800e4aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e4ac:	e025      	b.n	800e4fa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800e4ae:	6839      	ldr	r1, [r7, #0]
 800e4b0:	6878      	ldr	r0, [r7, #4]
 800e4b2:	f000 fc09 	bl	800ecc8 <USBD_CtlError>
              break;
 800e4b6:	e020      	b.n	800e4fa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	885b      	ldrh	r3, [r3, #2]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d11b      	bne.n	800e4f8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e4c0:	7bbb      	ldrb	r3, [r7, #14]
 800e4c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d004      	beq.n	800e4d4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e4ca:	7bbb      	ldrb	r3, [r7, #14]
 800e4cc:	4619      	mov	r1, r3
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f001 f953 	bl	800f77a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f000 fcc2 	bl	800ee5e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4e0:	689b      	ldr	r3, [r3, #8]
 800e4e2:	6839      	ldr	r1, [r7, #0]
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	4798      	blx	r3
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800e4ec:	e004      	b.n	800e4f8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800e4ee:	6839      	ldr	r1, [r7, #0]
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f000 fbe9 	bl	800ecc8 <USBD_CtlError>
              break;
 800e4f6:	e000      	b.n	800e4fa <USBD_StdEPReq+0x154>
              break;
 800e4f8:	bf00      	nop
          }
          break;
 800e4fa:	e0ab      	b.n	800e654 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e502:	b2db      	uxtb	r3, r3
 800e504:	2b02      	cmp	r3, #2
 800e506:	d002      	beq.n	800e50e <USBD_StdEPReq+0x168>
 800e508:	2b03      	cmp	r3, #3
 800e50a:	d032      	beq.n	800e572 <USBD_StdEPReq+0x1cc>
 800e50c:	e097      	b.n	800e63e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e50e:	7bbb      	ldrb	r3, [r7, #14]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d007      	beq.n	800e524 <USBD_StdEPReq+0x17e>
 800e514:	7bbb      	ldrb	r3, [r7, #14]
 800e516:	2b80      	cmp	r3, #128	; 0x80
 800e518:	d004      	beq.n	800e524 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800e51a:	6839      	ldr	r1, [r7, #0]
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	f000 fbd3 	bl	800ecc8 <USBD_CtlError>
                break;
 800e522:	e091      	b.n	800e648 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e524:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	da0b      	bge.n	800e544 <USBD_StdEPReq+0x19e>
 800e52c:	7bbb      	ldrb	r3, [r7, #14]
 800e52e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e532:	4613      	mov	r3, r2
 800e534:	009b      	lsls	r3, r3, #2
 800e536:	4413      	add	r3, r2
 800e538:	009b      	lsls	r3, r3, #2
 800e53a:	3310      	adds	r3, #16
 800e53c:	687a      	ldr	r2, [r7, #4]
 800e53e:	4413      	add	r3, r2
 800e540:	3304      	adds	r3, #4
 800e542:	e00b      	b.n	800e55c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e544:	7bbb      	ldrb	r3, [r7, #14]
 800e546:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e54a:	4613      	mov	r3, r2
 800e54c:	009b      	lsls	r3, r3, #2
 800e54e:	4413      	add	r3, r2
 800e550:	009b      	lsls	r3, r3, #2
 800e552:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e556:	687a      	ldr	r2, [r7, #4]
 800e558:	4413      	add	r3, r2
 800e55a:	3304      	adds	r3, #4
 800e55c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e55e:	68bb      	ldr	r3, [r7, #8]
 800e560:	2200      	movs	r2, #0
 800e562:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e564:	68bb      	ldr	r3, [r7, #8]
 800e566:	2202      	movs	r2, #2
 800e568:	4619      	mov	r1, r3
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f000 fc1d 	bl	800edaa <USBD_CtlSendData>
              break;
 800e570:	e06a      	b.n	800e648 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e572:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e576:	2b00      	cmp	r3, #0
 800e578:	da11      	bge.n	800e59e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e57a:	7bbb      	ldrb	r3, [r7, #14]
 800e57c:	f003 020f 	and.w	r2, r3, #15
 800e580:	6879      	ldr	r1, [r7, #4]
 800e582:	4613      	mov	r3, r2
 800e584:	009b      	lsls	r3, r3, #2
 800e586:	4413      	add	r3, r2
 800e588:	009b      	lsls	r3, r3, #2
 800e58a:	440b      	add	r3, r1
 800e58c:	3324      	adds	r3, #36	; 0x24
 800e58e:	881b      	ldrh	r3, [r3, #0]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d117      	bne.n	800e5c4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e594:	6839      	ldr	r1, [r7, #0]
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f000 fb96 	bl	800ecc8 <USBD_CtlError>
                  break;
 800e59c:	e054      	b.n	800e648 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e59e:	7bbb      	ldrb	r3, [r7, #14]
 800e5a0:	f003 020f 	and.w	r2, r3, #15
 800e5a4:	6879      	ldr	r1, [r7, #4]
 800e5a6:	4613      	mov	r3, r2
 800e5a8:	009b      	lsls	r3, r3, #2
 800e5aa:	4413      	add	r3, r2
 800e5ac:	009b      	lsls	r3, r3, #2
 800e5ae:	440b      	add	r3, r1
 800e5b0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e5b4:	881b      	ldrh	r3, [r3, #0]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d104      	bne.n	800e5c4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e5ba:	6839      	ldr	r1, [r7, #0]
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f000 fb83 	bl	800ecc8 <USBD_CtlError>
                  break;
 800e5c2:	e041      	b.n	800e648 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e5c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	da0b      	bge.n	800e5e4 <USBD_StdEPReq+0x23e>
 800e5cc:	7bbb      	ldrb	r3, [r7, #14]
 800e5ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e5d2:	4613      	mov	r3, r2
 800e5d4:	009b      	lsls	r3, r3, #2
 800e5d6:	4413      	add	r3, r2
 800e5d8:	009b      	lsls	r3, r3, #2
 800e5da:	3310      	adds	r3, #16
 800e5dc:	687a      	ldr	r2, [r7, #4]
 800e5de:	4413      	add	r3, r2
 800e5e0:	3304      	adds	r3, #4
 800e5e2:	e00b      	b.n	800e5fc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e5e4:	7bbb      	ldrb	r3, [r7, #14]
 800e5e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e5ea:	4613      	mov	r3, r2
 800e5ec:	009b      	lsls	r3, r3, #2
 800e5ee:	4413      	add	r3, r2
 800e5f0:	009b      	lsls	r3, r3, #2
 800e5f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e5f6:	687a      	ldr	r2, [r7, #4]
 800e5f8:	4413      	add	r3, r2
 800e5fa:	3304      	adds	r3, #4
 800e5fc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e5fe:	7bbb      	ldrb	r3, [r7, #14]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d002      	beq.n	800e60a <USBD_StdEPReq+0x264>
 800e604:	7bbb      	ldrb	r3, [r7, #14]
 800e606:	2b80      	cmp	r3, #128	; 0x80
 800e608:	d103      	bne.n	800e612 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	2200      	movs	r2, #0
 800e60e:	601a      	str	r2, [r3, #0]
 800e610:	e00e      	b.n	800e630 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e612:	7bbb      	ldrb	r3, [r7, #14]
 800e614:	4619      	mov	r1, r3
 800e616:	6878      	ldr	r0, [r7, #4]
 800e618:	f001 f8ce 	bl	800f7b8 <USBD_LL_IsStallEP>
 800e61c:	4603      	mov	r3, r0
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d003      	beq.n	800e62a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800e622:	68bb      	ldr	r3, [r7, #8]
 800e624:	2201      	movs	r2, #1
 800e626:	601a      	str	r2, [r3, #0]
 800e628:	e002      	b.n	800e630 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	2200      	movs	r2, #0
 800e62e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	2202      	movs	r2, #2
 800e634:	4619      	mov	r1, r3
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f000 fbb7 	bl	800edaa <USBD_CtlSendData>
              break;
 800e63c:	e004      	b.n	800e648 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800e63e:	6839      	ldr	r1, [r7, #0]
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f000 fb41 	bl	800ecc8 <USBD_CtlError>
              break;
 800e646:	bf00      	nop
          }
          break;
 800e648:	e004      	b.n	800e654 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800e64a:	6839      	ldr	r1, [r7, #0]
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f000 fb3b 	bl	800ecc8 <USBD_CtlError>
          break;
 800e652:	bf00      	nop
      }
      break;
 800e654:	e004      	b.n	800e660 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800e656:	6839      	ldr	r1, [r7, #0]
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f000 fb35 	bl	800ecc8 <USBD_CtlError>
      break;
 800e65e:	bf00      	nop
  }

  return ret;
 800e660:	7bfb      	ldrb	r3, [r7, #15]
}
 800e662:	4618      	mov	r0, r3
 800e664:	3710      	adds	r7, #16
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}
	...

0800e66c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b084      	sub	sp, #16
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
 800e674:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e676:	2300      	movs	r3, #0
 800e678:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e67a:	2300      	movs	r3, #0
 800e67c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e67e:	2300      	movs	r3, #0
 800e680:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	885b      	ldrh	r3, [r3, #2]
 800e686:	0a1b      	lsrs	r3, r3, #8
 800e688:	b29b      	uxth	r3, r3
 800e68a:	3b01      	subs	r3, #1
 800e68c:	2b06      	cmp	r3, #6
 800e68e:	f200 8128 	bhi.w	800e8e2 <USBD_GetDescriptor+0x276>
 800e692:	a201      	add	r2, pc, #4	; (adr r2, 800e698 <USBD_GetDescriptor+0x2c>)
 800e694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e698:	0800e6b5 	.word	0x0800e6b5
 800e69c:	0800e6cd 	.word	0x0800e6cd
 800e6a0:	0800e70d 	.word	0x0800e70d
 800e6a4:	0800e8e3 	.word	0x0800e8e3
 800e6a8:	0800e8e3 	.word	0x0800e8e3
 800e6ac:	0800e883 	.word	0x0800e883
 800e6b0:	0800e8af 	.word	0x0800e8af
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	687a      	ldr	r2, [r7, #4]
 800e6be:	7c12      	ldrb	r2, [r2, #16]
 800e6c0:	f107 0108 	add.w	r1, r7, #8
 800e6c4:	4610      	mov	r0, r2
 800e6c6:	4798      	blx	r3
 800e6c8:	60f8      	str	r0, [r7, #12]
      break;
 800e6ca:	e112      	b.n	800e8f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	7c1b      	ldrb	r3, [r3, #16]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d10d      	bne.n	800e6f0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6dc:	f107 0208 	add.w	r2, r7, #8
 800e6e0:	4610      	mov	r0, r2
 800e6e2:	4798      	blx	r3
 800e6e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	3301      	adds	r3, #1
 800e6ea:	2202      	movs	r2, #2
 800e6ec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e6ee:	e100      	b.n	800e8f2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6f8:	f107 0208 	add.w	r2, r7, #8
 800e6fc:	4610      	mov	r0, r2
 800e6fe:	4798      	blx	r3
 800e700:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	3301      	adds	r3, #1
 800e706:	2202      	movs	r2, #2
 800e708:	701a      	strb	r2, [r3, #0]
      break;
 800e70a:	e0f2      	b.n	800e8f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	885b      	ldrh	r3, [r3, #2]
 800e710:	b2db      	uxtb	r3, r3
 800e712:	2b05      	cmp	r3, #5
 800e714:	f200 80ac 	bhi.w	800e870 <USBD_GetDescriptor+0x204>
 800e718:	a201      	add	r2, pc, #4	; (adr r2, 800e720 <USBD_GetDescriptor+0xb4>)
 800e71a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e71e:	bf00      	nop
 800e720:	0800e739 	.word	0x0800e739
 800e724:	0800e76d 	.word	0x0800e76d
 800e728:	0800e7a1 	.word	0x0800e7a1
 800e72c:	0800e7d5 	.word	0x0800e7d5
 800e730:	0800e809 	.word	0x0800e809
 800e734:	0800e83d 	.word	0x0800e83d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e73e:	685b      	ldr	r3, [r3, #4]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d00b      	beq.n	800e75c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e74a:	685b      	ldr	r3, [r3, #4]
 800e74c:	687a      	ldr	r2, [r7, #4]
 800e74e:	7c12      	ldrb	r2, [r2, #16]
 800e750:	f107 0108 	add.w	r1, r7, #8
 800e754:	4610      	mov	r0, r2
 800e756:	4798      	blx	r3
 800e758:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e75a:	e091      	b.n	800e880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e75c:	6839      	ldr	r1, [r7, #0]
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f000 fab2 	bl	800ecc8 <USBD_CtlError>
            err++;
 800e764:	7afb      	ldrb	r3, [r7, #11]
 800e766:	3301      	adds	r3, #1
 800e768:	72fb      	strb	r3, [r7, #11]
          break;
 800e76a:	e089      	b.n	800e880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e772:	689b      	ldr	r3, [r3, #8]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d00b      	beq.n	800e790 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e77e:	689b      	ldr	r3, [r3, #8]
 800e780:	687a      	ldr	r2, [r7, #4]
 800e782:	7c12      	ldrb	r2, [r2, #16]
 800e784:	f107 0108 	add.w	r1, r7, #8
 800e788:	4610      	mov	r0, r2
 800e78a:	4798      	blx	r3
 800e78c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e78e:	e077      	b.n	800e880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e790:	6839      	ldr	r1, [r7, #0]
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f000 fa98 	bl	800ecc8 <USBD_CtlError>
            err++;
 800e798:	7afb      	ldrb	r3, [r7, #11]
 800e79a:	3301      	adds	r3, #1
 800e79c:	72fb      	strb	r3, [r7, #11]
          break;
 800e79e:	e06f      	b.n	800e880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7a6:	68db      	ldr	r3, [r3, #12]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d00b      	beq.n	800e7c4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7b2:	68db      	ldr	r3, [r3, #12]
 800e7b4:	687a      	ldr	r2, [r7, #4]
 800e7b6:	7c12      	ldrb	r2, [r2, #16]
 800e7b8:	f107 0108 	add.w	r1, r7, #8
 800e7bc:	4610      	mov	r0, r2
 800e7be:	4798      	blx	r3
 800e7c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e7c2:	e05d      	b.n	800e880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e7c4:	6839      	ldr	r1, [r7, #0]
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	f000 fa7e 	bl	800ecc8 <USBD_CtlError>
            err++;
 800e7cc:	7afb      	ldrb	r3, [r7, #11]
 800e7ce:	3301      	adds	r3, #1
 800e7d0:	72fb      	strb	r3, [r7, #11]
          break;
 800e7d2:	e055      	b.n	800e880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7da:	691b      	ldr	r3, [r3, #16]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d00b      	beq.n	800e7f8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7e6:	691b      	ldr	r3, [r3, #16]
 800e7e8:	687a      	ldr	r2, [r7, #4]
 800e7ea:	7c12      	ldrb	r2, [r2, #16]
 800e7ec:	f107 0108 	add.w	r1, r7, #8
 800e7f0:	4610      	mov	r0, r2
 800e7f2:	4798      	blx	r3
 800e7f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e7f6:	e043      	b.n	800e880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e7f8:	6839      	ldr	r1, [r7, #0]
 800e7fa:	6878      	ldr	r0, [r7, #4]
 800e7fc:	f000 fa64 	bl	800ecc8 <USBD_CtlError>
            err++;
 800e800:	7afb      	ldrb	r3, [r7, #11]
 800e802:	3301      	adds	r3, #1
 800e804:	72fb      	strb	r3, [r7, #11]
          break;
 800e806:	e03b      	b.n	800e880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e80e:	695b      	ldr	r3, [r3, #20]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d00b      	beq.n	800e82c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e81a:	695b      	ldr	r3, [r3, #20]
 800e81c:	687a      	ldr	r2, [r7, #4]
 800e81e:	7c12      	ldrb	r2, [r2, #16]
 800e820:	f107 0108 	add.w	r1, r7, #8
 800e824:	4610      	mov	r0, r2
 800e826:	4798      	blx	r3
 800e828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e82a:	e029      	b.n	800e880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e82c:	6839      	ldr	r1, [r7, #0]
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	f000 fa4a 	bl	800ecc8 <USBD_CtlError>
            err++;
 800e834:	7afb      	ldrb	r3, [r7, #11]
 800e836:	3301      	adds	r3, #1
 800e838:	72fb      	strb	r3, [r7, #11]
          break;
 800e83a:	e021      	b.n	800e880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e842:	699b      	ldr	r3, [r3, #24]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d00b      	beq.n	800e860 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e84e:	699b      	ldr	r3, [r3, #24]
 800e850:	687a      	ldr	r2, [r7, #4]
 800e852:	7c12      	ldrb	r2, [r2, #16]
 800e854:	f107 0108 	add.w	r1, r7, #8
 800e858:	4610      	mov	r0, r2
 800e85a:	4798      	blx	r3
 800e85c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e85e:	e00f      	b.n	800e880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e860:	6839      	ldr	r1, [r7, #0]
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f000 fa30 	bl	800ecc8 <USBD_CtlError>
            err++;
 800e868:	7afb      	ldrb	r3, [r7, #11]
 800e86a:	3301      	adds	r3, #1
 800e86c:	72fb      	strb	r3, [r7, #11]
          break;
 800e86e:	e007      	b.n	800e880 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e870:	6839      	ldr	r1, [r7, #0]
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f000 fa28 	bl	800ecc8 <USBD_CtlError>
          err++;
 800e878:	7afb      	ldrb	r3, [r7, #11]
 800e87a:	3301      	adds	r3, #1
 800e87c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800e87e:	bf00      	nop
      }
      break;
 800e880:	e037      	b.n	800e8f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	7c1b      	ldrb	r3, [r3, #16]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d109      	bne.n	800e89e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e892:	f107 0208 	add.w	r2, r7, #8
 800e896:	4610      	mov	r0, r2
 800e898:	4798      	blx	r3
 800e89a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e89c:	e029      	b.n	800e8f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e89e:	6839      	ldr	r1, [r7, #0]
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f000 fa11 	bl	800ecc8 <USBD_CtlError>
        err++;
 800e8a6:	7afb      	ldrb	r3, [r7, #11]
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	72fb      	strb	r3, [r7, #11]
      break;
 800e8ac:	e021      	b.n	800e8f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	7c1b      	ldrb	r3, [r3, #16]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d10d      	bne.n	800e8d2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8be:	f107 0208 	add.w	r2, r7, #8
 800e8c2:	4610      	mov	r0, r2
 800e8c4:	4798      	blx	r3
 800e8c6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	3301      	adds	r3, #1
 800e8cc:	2207      	movs	r2, #7
 800e8ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e8d0:	e00f      	b.n	800e8f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e8d2:	6839      	ldr	r1, [r7, #0]
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f000 f9f7 	bl	800ecc8 <USBD_CtlError>
        err++;
 800e8da:	7afb      	ldrb	r3, [r7, #11]
 800e8dc:	3301      	adds	r3, #1
 800e8de:	72fb      	strb	r3, [r7, #11]
      break;
 800e8e0:	e007      	b.n	800e8f2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e8e2:	6839      	ldr	r1, [r7, #0]
 800e8e4:	6878      	ldr	r0, [r7, #4]
 800e8e6:	f000 f9ef 	bl	800ecc8 <USBD_CtlError>
      err++;
 800e8ea:	7afb      	ldrb	r3, [r7, #11]
 800e8ec:	3301      	adds	r3, #1
 800e8ee:	72fb      	strb	r3, [r7, #11]
      break;
 800e8f0:	bf00      	nop
  }

  if (err != 0U)
 800e8f2:	7afb      	ldrb	r3, [r7, #11]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d11e      	bne.n	800e936 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	88db      	ldrh	r3, [r3, #6]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d016      	beq.n	800e92e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e900:	893b      	ldrh	r3, [r7, #8]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d00e      	beq.n	800e924 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	88da      	ldrh	r2, [r3, #6]
 800e90a:	893b      	ldrh	r3, [r7, #8]
 800e90c:	4293      	cmp	r3, r2
 800e90e:	bf28      	it	cs
 800e910:	4613      	movcs	r3, r2
 800e912:	b29b      	uxth	r3, r3
 800e914:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e916:	893b      	ldrh	r3, [r7, #8]
 800e918:	461a      	mov	r2, r3
 800e91a:	68f9      	ldr	r1, [r7, #12]
 800e91c:	6878      	ldr	r0, [r7, #4]
 800e91e:	f000 fa44 	bl	800edaa <USBD_CtlSendData>
 800e922:	e009      	b.n	800e938 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e924:	6839      	ldr	r1, [r7, #0]
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f000 f9ce 	bl	800ecc8 <USBD_CtlError>
 800e92c:	e004      	b.n	800e938 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e92e:	6878      	ldr	r0, [r7, #4]
 800e930:	f000 fa95 	bl	800ee5e <USBD_CtlSendStatus>
 800e934:	e000      	b.n	800e938 <USBD_GetDescriptor+0x2cc>
    return;
 800e936:	bf00      	nop
  }
}
 800e938:	3710      	adds	r7, #16
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bd80      	pop	{r7, pc}
 800e93e:	bf00      	nop

0800e940 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b084      	sub	sp, #16
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
 800e948:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e94a:	683b      	ldr	r3, [r7, #0]
 800e94c:	889b      	ldrh	r3, [r3, #4]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d131      	bne.n	800e9b6 <USBD_SetAddress+0x76>
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	88db      	ldrh	r3, [r3, #6]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d12d      	bne.n	800e9b6 <USBD_SetAddress+0x76>
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	885b      	ldrh	r3, [r3, #2]
 800e95e:	2b7f      	cmp	r3, #127	; 0x7f
 800e960:	d829      	bhi.n	800e9b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	885b      	ldrh	r3, [r3, #2]
 800e966:	b2db      	uxtb	r3, r3
 800e968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e96c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e974:	b2db      	uxtb	r3, r3
 800e976:	2b03      	cmp	r3, #3
 800e978:	d104      	bne.n	800e984 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e97a:	6839      	ldr	r1, [r7, #0]
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f000 f9a3 	bl	800ecc8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e982:	e01d      	b.n	800e9c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	7bfa      	ldrb	r2, [r7, #15]
 800e988:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e98c:	7bfb      	ldrb	r3, [r7, #15]
 800e98e:	4619      	mov	r1, r3
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f000 ff3d 	bl	800f810 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e996:	6878      	ldr	r0, [r7, #4]
 800e998:	f000 fa61 	bl	800ee5e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e99c:	7bfb      	ldrb	r3, [r7, #15]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d004      	beq.n	800e9ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2202      	movs	r2, #2
 800e9a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9aa:	e009      	b.n	800e9c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2201      	movs	r2, #1
 800e9b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9b4:	e004      	b.n	800e9c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e9b6:	6839      	ldr	r1, [r7, #0]
 800e9b8:	6878      	ldr	r0, [r7, #4]
 800e9ba:	f000 f985 	bl	800ecc8 <USBD_CtlError>
  }
}
 800e9be:	bf00      	nop
 800e9c0:	bf00      	nop
 800e9c2:	3710      	adds	r7, #16
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}

0800e9c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b084      	sub	sp, #16
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
 800e9d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	885b      	ldrh	r3, [r3, #2]
 800e9da:	b2da      	uxtb	r2, r3
 800e9dc:	4b4c      	ldr	r3, [pc, #304]	; (800eb10 <USBD_SetConfig+0x148>)
 800e9de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e9e0:	4b4b      	ldr	r3, [pc, #300]	; (800eb10 <USBD_SetConfig+0x148>)
 800e9e2:	781b      	ldrb	r3, [r3, #0]
 800e9e4:	2b01      	cmp	r3, #1
 800e9e6:	d905      	bls.n	800e9f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e9e8:	6839      	ldr	r1, [r7, #0]
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f000 f96c 	bl	800ecc8 <USBD_CtlError>
    return USBD_FAIL;
 800e9f0:	2303      	movs	r3, #3
 800e9f2:	e088      	b.n	800eb06 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9fa:	b2db      	uxtb	r3, r3
 800e9fc:	2b02      	cmp	r3, #2
 800e9fe:	d002      	beq.n	800ea06 <USBD_SetConfig+0x3e>
 800ea00:	2b03      	cmp	r3, #3
 800ea02:	d025      	beq.n	800ea50 <USBD_SetConfig+0x88>
 800ea04:	e071      	b.n	800eaea <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ea06:	4b42      	ldr	r3, [pc, #264]	; (800eb10 <USBD_SetConfig+0x148>)
 800ea08:	781b      	ldrb	r3, [r3, #0]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d01c      	beq.n	800ea48 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ea0e:	4b40      	ldr	r3, [pc, #256]	; (800eb10 <USBD_SetConfig+0x148>)
 800ea10:	781b      	ldrb	r3, [r3, #0]
 800ea12:	461a      	mov	r2, r3
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ea18:	4b3d      	ldr	r3, [pc, #244]	; (800eb10 <USBD_SetConfig+0x148>)
 800ea1a:	781b      	ldrb	r3, [r3, #0]
 800ea1c:	4619      	mov	r1, r3
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	f7ff f948 	bl	800dcb4 <USBD_SetClassConfig>
 800ea24:	4603      	mov	r3, r0
 800ea26:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ea28:	7bfb      	ldrb	r3, [r7, #15]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d004      	beq.n	800ea38 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ea2e:	6839      	ldr	r1, [r7, #0]
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f000 f949 	bl	800ecc8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ea36:	e065      	b.n	800eb04 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ea38:	6878      	ldr	r0, [r7, #4]
 800ea3a:	f000 fa10 	bl	800ee5e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	2203      	movs	r2, #3
 800ea42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ea46:	e05d      	b.n	800eb04 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	f000 fa08 	bl	800ee5e <USBD_CtlSendStatus>
      break;
 800ea4e:	e059      	b.n	800eb04 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ea50:	4b2f      	ldr	r3, [pc, #188]	; (800eb10 <USBD_SetConfig+0x148>)
 800ea52:	781b      	ldrb	r3, [r3, #0]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d112      	bne.n	800ea7e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2202      	movs	r2, #2
 800ea5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ea60:	4b2b      	ldr	r3, [pc, #172]	; (800eb10 <USBD_SetConfig+0x148>)
 800ea62:	781b      	ldrb	r3, [r3, #0]
 800ea64:	461a      	mov	r2, r3
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ea6a:	4b29      	ldr	r3, [pc, #164]	; (800eb10 <USBD_SetConfig+0x148>)
 800ea6c:	781b      	ldrb	r3, [r3, #0]
 800ea6e:	4619      	mov	r1, r3
 800ea70:	6878      	ldr	r0, [r7, #4]
 800ea72:	f7ff f93b 	bl	800dcec <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ea76:	6878      	ldr	r0, [r7, #4]
 800ea78:	f000 f9f1 	bl	800ee5e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ea7c:	e042      	b.n	800eb04 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800ea7e:	4b24      	ldr	r3, [pc, #144]	; (800eb10 <USBD_SetConfig+0x148>)
 800ea80:	781b      	ldrb	r3, [r3, #0]
 800ea82:	461a      	mov	r2, r3
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	685b      	ldr	r3, [r3, #4]
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	d02a      	beq.n	800eae2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	685b      	ldr	r3, [r3, #4]
 800ea90:	b2db      	uxtb	r3, r3
 800ea92:	4619      	mov	r1, r3
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f7ff f929 	bl	800dcec <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ea9a:	4b1d      	ldr	r3, [pc, #116]	; (800eb10 <USBD_SetConfig+0x148>)
 800ea9c:	781b      	ldrb	r3, [r3, #0]
 800ea9e:	461a      	mov	r2, r3
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800eaa4:	4b1a      	ldr	r3, [pc, #104]	; (800eb10 <USBD_SetConfig+0x148>)
 800eaa6:	781b      	ldrb	r3, [r3, #0]
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f7ff f902 	bl	800dcb4 <USBD_SetClassConfig>
 800eab0:	4603      	mov	r3, r0
 800eab2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800eab4:	7bfb      	ldrb	r3, [r7, #15]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d00f      	beq.n	800eada <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800eaba:	6839      	ldr	r1, [r7, #0]
 800eabc:	6878      	ldr	r0, [r7, #4]
 800eabe:	f000 f903 	bl	800ecc8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	685b      	ldr	r3, [r3, #4]
 800eac6:	b2db      	uxtb	r3, r3
 800eac8:	4619      	mov	r1, r3
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f7ff f90e 	bl	800dcec <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2202      	movs	r2, #2
 800ead4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ead8:	e014      	b.n	800eb04 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f000 f9bf 	bl	800ee5e <USBD_CtlSendStatus>
      break;
 800eae0:	e010      	b.n	800eb04 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800eae2:	6878      	ldr	r0, [r7, #4]
 800eae4:	f000 f9bb 	bl	800ee5e <USBD_CtlSendStatus>
      break;
 800eae8:	e00c      	b.n	800eb04 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800eaea:	6839      	ldr	r1, [r7, #0]
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f000 f8eb 	bl	800ecc8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800eaf2:	4b07      	ldr	r3, [pc, #28]	; (800eb10 <USBD_SetConfig+0x148>)
 800eaf4:	781b      	ldrb	r3, [r3, #0]
 800eaf6:	4619      	mov	r1, r3
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f7ff f8f7 	bl	800dcec <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800eafe:	2303      	movs	r3, #3
 800eb00:	73fb      	strb	r3, [r7, #15]
      break;
 800eb02:	bf00      	nop
  }

  return ret;
 800eb04:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	3710      	adds	r7, #16
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}
 800eb0e:	bf00      	nop
 800eb10:	2400026a 	.word	0x2400026a

0800eb14 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b082      	sub	sp, #8
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
 800eb1c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	88db      	ldrh	r3, [r3, #6]
 800eb22:	2b01      	cmp	r3, #1
 800eb24:	d004      	beq.n	800eb30 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800eb26:	6839      	ldr	r1, [r7, #0]
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f000 f8cd 	bl	800ecc8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800eb2e:	e023      	b.n	800eb78 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb36:	b2db      	uxtb	r3, r3
 800eb38:	2b02      	cmp	r3, #2
 800eb3a:	dc02      	bgt.n	800eb42 <USBD_GetConfig+0x2e>
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	dc03      	bgt.n	800eb48 <USBD_GetConfig+0x34>
 800eb40:	e015      	b.n	800eb6e <USBD_GetConfig+0x5a>
 800eb42:	2b03      	cmp	r3, #3
 800eb44:	d00b      	beq.n	800eb5e <USBD_GetConfig+0x4a>
 800eb46:	e012      	b.n	800eb6e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	3308      	adds	r3, #8
 800eb52:	2201      	movs	r2, #1
 800eb54:	4619      	mov	r1, r3
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f000 f927 	bl	800edaa <USBD_CtlSendData>
        break;
 800eb5c:	e00c      	b.n	800eb78 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	3304      	adds	r3, #4
 800eb62:	2201      	movs	r2, #1
 800eb64:	4619      	mov	r1, r3
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f000 f91f 	bl	800edaa <USBD_CtlSendData>
        break;
 800eb6c:	e004      	b.n	800eb78 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800eb6e:	6839      	ldr	r1, [r7, #0]
 800eb70:	6878      	ldr	r0, [r7, #4]
 800eb72:	f000 f8a9 	bl	800ecc8 <USBD_CtlError>
        break;
 800eb76:	bf00      	nop
}
 800eb78:	bf00      	nop
 800eb7a:	3708      	adds	r7, #8
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd80      	pop	{r7, pc}

0800eb80 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b082      	sub	sp, #8
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
 800eb88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb90:	b2db      	uxtb	r3, r3
 800eb92:	3b01      	subs	r3, #1
 800eb94:	2b02      	cmp	r3, #2
 800eb96:	d81e      	bhi.n	800ebd6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	88db      	ldrh	r3, [r3, #6]
 800eb9c:	2b02      	cmp	r3, #2
 800eb9e:	d004      	beq.n	800ebaa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800eba0:	6839      	ldr	r1, [r7, #0]
 800eba2:	6878      	ldr	r0, [r7, #4]
 800eba4:	f000 f890 	bl	800ecc8 <USBD_CtlError>
        break;
 800eba8:	e01a      	b.n	800ebe0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2201      	movs	r2, #1
 800ebae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d005      	beq.n	800ebc6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	68db      	ldr	r3, [r3, #12]
 800ebbe:	f043 0202 	orr.w	r2, r3, #2
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	330c      	adds	r3, #12
 800ebca:	2202      	movs	r2, #2
 800ebcc:	4619      	mov	r1, r3
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f000 f8eb 	bl	800edaa <USBD_CtlSendData>
      break;
 800ebd4:	e004      	b.n	800ebe0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ebd6:	6839      	ldr	r1, [r7, #0]
 800ebd8:	6878      	ldr	r0, [r7, #4]
 800ebda:	f000 f875 	bl	800ecc8 <USBD_CtlError>
      break;
 800ebde:	bf00      	nop
  }
}
 800ebe0:	bf00      	nop
 800ebe2:	3708      	adds	r7, #8
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd80      	pop	{r7, pc}

0800ebe8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b082      	sub	sp, #8
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
 800ebf0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ebf2:	683b      	ldr	r3, [r7, #0]
 800ebf4:	885b      	ldrh	r3, [r3, #2]
 800ebf6:	2b01      	cmp	r3, #1
 800ebf8:	d106      	bne.n	800ec08 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	2201      	movs	r2, #1
 800ebfe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f000 f92b 	bl	800ee5e <USBD_CtlSendStatus>
  }
}
 800ec08:	bf00      	nop
 800ec0a:	3708      	adds	r7, #8
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}

0800ec10 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b082      	sub	sp, #8
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
 800ec18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec20:	b2db      	uxtb	r3, r3
 800ec22:	3b01      	subs	r3, #1
 800ec24:	2b02      	cmp	r3, #2
 800ec26:	d80b      	bhi.n	800ec40 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	885b      	ldrh	r3, [r3, #2]
 800ec2c:	2b01      	cmp	r3, #1
 800ec2e:	d10c      	bne.n	800ec4a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2200      	movs	r2, #0
 800ec34:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ec38:	6878      	ldr	r0, [r7, #4]
 800ec3a:	f000 f910 	bl	800ee5e <USBD_CtlSendStatus>
      }
      break;
 800ec3e:	e004      	b.n	800ec4a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ec40:	6839      	ldr	r1, [r7, #0]
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	f000 f840 	bl	800ecc8 <USBD_CtlError>
      break;
 800ec48:	e000      	b.n	800ec4c <USBD_ClrFeature+0x3c>
      break;
 800ec4a:	bf00      	nop
  }
}
 800ec4c:	bf00      	nop
 800ec4e:	3708      	adds	r7, #8
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}

0800ec54 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b084      	sub	sp, #16
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
 800ec5c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	781a      	ldrb	r2, [r3, #0]
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	3301      	adds	r3, #1
 800ec6e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	781a      	ldrb	r2, [r3, #0]
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	3301      	adds	r3, #1
 800ec7c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ec7e:	68f8      	ldr	r0, [r7, #12]
 800ec80:	f7ff fabb 	bl	800e1fa <SWAPBYTE>
 800ec84:	4603      	mov	r3, r0
 800ec86:	461a      	mov	r2, r3
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	3301      	adds	r3, #1
 800ec90:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	3301      	adds	r3, #1
 800ec96:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ec98:	68f8      	ldr	r0, [r7, #12]
 800ec9a:	f7ff faae 	bl	800e1fa <SWAPBYTE>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	461a      	mov	r2, r3
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	3301      	adds	r3, #1
 800ecaa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	3301      	adds	r3, #1
 800ecb0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ecb2:	68f8      	ldr	r0, [r7, #12]
 800ecb4:	f7ff faa1 	bl	800e1fa <SWAPBYTE>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	461a      	mov	r2, r3
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	80da      	strh	r2, [r3, #6]
}
 800ecc0:	bf00      	nop
 800ecc2:	3710      	adds	r7, #16
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}

0800ecc8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b082      	sub	sp, #8
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ecd2:	2180      	movs	r1, #128	; 0x80
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f000 fd31 	bl	800f73c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ecda:	2100      	movs	r1, #0
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f000 fd2d 	bl	800f73c <USBD_LL_StallEP>
}
 800ece2:	bf00      	nop
 800ece4:	3708      	adds	r7, #8
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}

0800ecea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ecea:	b580      	push	{r7, lr}
 800ecec:	b086      	sub	sp, #24
 800ecee:	af00      	add	r7, sp, #0
 800ecf0:	60f8      	str	r0, [r7, #12]
 800ecf2:	60b9      	str	r1, [r7, #8]
 800ecf4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d036      	beq.n	800ed6e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ed04:	6938      	ldr	r0, [r7, #16]
 800ed06:	f000 f836 	bl	800ed76 <USBD_GetLen>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	3301      	adds	r3, #1
 800ed0e:	b29b      	uxth	r3, r3
 800ed10:	005b      	lsls	r3, r3, #1
 800ed12:	b29a      	uxth	r2, r3
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ed18:	7dfb      	ldrb	r3, [r7, #23]
 800ed1a:	68ba      	ldr	r2, [r7, #8]
 800ed1c:	4413      	add	r3, r2
 800ed1e:	687a      	ldr	r2, [r7, #4]
 800ed20:	7812      	ldrb	r2, [r2, #0]
 800ed22:	701a      	strb	r2, [r3, #0]
  idx++;
 800ed24:	7dfb      	ldrb	r3, [r7, #23]
 800ed26:	3301      	adds	r3, #1
 800ed28:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ed2a:	7dfb      	ldrb	r3, [r7, #23]
 800ed2c:	68ba      	ldr	r2, [r7, #8]
 800ed2e:	4413      	add	r3, r2
 800ed30:	2203      	movs	r2, #3
 800ed32:	701a      	strb	r2, [r3, #0]
  idx++;
 800ed34:	7dfb      	ldrb	r3, [r7, #23]
 800ed36:	3301      	adds	r3, #1
 800ed38:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ed3a:	e013      	b.n	800ed64 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ed3c:	7dfb      	ldrb	r3, [r7, #23]
 800ed3e:	68ba      	ldr	r2, [r7, #8]
 800ed40:	4413      	add	r3, r2
 800ed42:	693a      	ldr	r2, [r7, #16]
 800ed44:	7812      	ldrb	r2, [r2, #0]
 800ed46:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ed48:	693b      	ldr	r3, [r7, #16]
 800ed4a:	3301      	adds	r3, #1
 800ed4c:	613b      	str	r3, [r7, #16]
    idx++;
 800ed4e:	7dfb      	ldrb	r3, [r7, #23]
 800ed50:	3301      	adds	r3, #1
 800ed52:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ed54:	7dfb      	ldrb	r3, [r7, #23]
 800ed56:	68ba      	ldr	r2, [r7, #8]
 800ed58:	4413      	add	r3, r2
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	701a      	strb	r2, [r3, #0]
    idx++;
 800ed5e:	7dfb      	ldrb	r3, [r7, #23]
 800ed60:	3301      	adds	r3, #1
 800ed62:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ed64:	693b      	ldr	r3, [r7, #16]
 800ed66:	781b      	ldrb	r3, [r3, #0]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d1e7      	bne.n	800ed3c <USBD_GetString+0x52>
 800ed6c:	e000      	b.n	800ed70 <USBD_GetString+0x86>
    return;
 800ed6e:	bf00      	nop
  }
}
 800ed70:	3718      	adds	r7, #24
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}

0800ed76 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ed76:	b480      	push	{r7}
 800ed78:	b085      	sub	sp, #20
 800ed7a:	af00      	add	r7, sp, #0
 800ed7c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ed86:	e005      	b.n	800ed94 <USBD_GetLen+0x1e>
  {
    len++;
 800ed88:	7bfb      	ldrb	r3, [r7, #15]
 800ed8a:	3301      	adds	r3, #1
 800ed8c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	3301      	adds	r3, #1
 800ed92:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	781b      	ldrb	r3, [r3, #0]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d1f5      	bne.n	800ed88 <USBD_GetLen+0x12>
  }

  return len;
 800ed9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed9e:	4618      	mov	r0, r3
 800eda0:	3714      	adds	r7, #20
 800eda2:	46bd      	mov	sp, r7
 800eda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda8:	4770      	bx	lr

0800edaa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800edaa:	b580      	push	{r7, lr}
 800edac:	b084      	sub	sp, #16
 800edae:	af00      	add	r7, sp, #0
 800edb0:	60f8      	str	r0, [r7, #12]
 800edb2:	60b9      	str	r1, [r7, #8]
 800edb4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	2202      	movs	r2, #2
 800edba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	687a      	ldr	r2, [r7, #4]
 800edc2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	687a      	ldr	r2, [r7, #4]
 800edc8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	68ba      	ldr	r2, [r7, #8]
 800edce:	2100      	movs	r1, #0
 800edd0:	68f8      	ldr	r0, [r7, #12]
 800edd2:	f000 fd3c 	bl	800f84e <USBD_LL_Transmit>

  return USBD_OK;
 800edd6:	2300      	movs	r3, #0
}
 800edd8:	4618      	mov	r0, r3
 800edda:	3710      	adds	r7, #16
 800eddc:	46bd      	mov	sp, r7
 800edde:	bd80      	pop	{r7, pc}

0800ede0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b084      	sub	sp, #16
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	60f8      	str	r0, [r7, #12]
 800ede8:	60b9      	str	r1, [r7, #8]
 800edea:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	68ba      	ldr	r2, [r7, #8]
 800edf0:	2100      	movs	r1, #0
 800edf2:	68f8      	ldr	r0, [r7, #12]
 800edf4:	f000 fd2b 	bl	800f84e <USBD_LL_Transmit>

  return USBD_OK;
 800edf8:	2300      	movs	r3, #0
}
 800edfa:	4618      	mov	r0, r3
 800edfc:	3710      	adds	r7, #16
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}

0800ee02 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ee02:	b580      	push	{r7, lr}
 800ee04:	b084      	sub	sp, #16
 800ee06:	af00      	add	r7, sp, #0
 800ee08:	60f8      	str	r0, [r7, #12]
 800ee0a:	60b9      	str	r1, [r7, #8]
 800ee0c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	2203      	movs	r2, #3
 800ee12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	687a      	ldr	r2, [r7, #4]
 800ee1a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	687a      	ldr	r2, [r7, #4]
 800ee22:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	68ba      	ldr	r2, [r7, #8]
 800ee2a:	2100      	movs	r1, #0
 800ee2c:	68f8      	ldr	r0, [r7, #12]
 800ee2e:	f000 fd2f 	bl	800f890 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ee32:	2300      	movs	r3, #0
}
 800ee34:	4618      	mov	r0, r3
 800ee36:	3710      	adds	r7, #16
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	bd80      	pop	{r7, pc}

0800ee3c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b084      	sub	sp, #16
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	60f8      	str	r0, [r7, #12]
 800ee44:	60b9      	str	r1, [r7, #8]
 800ee46:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	68ba      	ldr	r2, [r7, #8]
 800ee4c:	2100      	movs	r1, #0
 800ee4e:	68f8      	ldr	r0, [r7, #12]
 800ee50:	f000 fd1e 	bl	800f890 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ee54:	2300      	movs	r3, #0
}
 800ee56:	4618      	mov	r0, r3
 800ee58:	3710      	adds	r7, #16
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bd80      	pop	{r7, pc}

0800ee5e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ee5e:	b580      	push	{r7, lr}
 800ee60:	b082      	sub	sp, #8
 800ee62:	af00      	add	r7, sp, #0
 800ee64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	2204      	movs	r2, #4
 800ee6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ee6e:	2300      	movs	r3, #0
 800ee70:	2200      	movs	r2, #0
 800ee72:	2100      	movs	r1, #0
 800ee74:	6878      	ldr	r0, [r7, #4]
 800ee76:	f000 fcea 	bl	800f84e <USBD_LL_Transmit>

  return USBD_OK;
 800ee7a:	2300      	movs	r3, #0
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	3708      	adds	r7, #8
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}

0800ee84 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b082      	sub	sp, #8
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2205      	movs	r2, #5
 800ee90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ee94:	2300      	movs	r3, #0
 800ee96:	2200      	movs	r2, #0
 800ee98:	2100      	movs	r1, #0
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f000 fcf8 	bl	800f890 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eea0:	2300      	movs	r3, #0
}
 800eea2:	4618      	mov	r0, r3
 800eea4:	3708      	adds	r7, #8
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd80      	pop	{r7, pc}
	...

0800eeac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800eeb0:	2201      	movs	r2, #1
 800eeb2:	4913      	ldr	r1, [pc, #76]	; (800ef00 <MX_USB_DEVICE_Init+0x54>)
 800eeb4:	4813      	ldr	r0, [pc, #76]	; (800ef04 <MX_USB_DEVICE_Init+0x58>)
 800eeb6:	f7fe fe8f 	bl	800dbd8 <USBD_Init>
 800eeba:	4603      	mov	r3, r0
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d001      	beq.n	800eec4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800eec0:	f7f1 fef6 	bl	8000cb0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800eec4:	4910      	ldr	r1, [pc, #64]	; (800ef08 <MX_USB_DEVICE_Init+0x5c>)
 800eec6:	480f      	ldr	r0, [pc, #60]	; (800ef04 <MX_USB_DEVICE_Init+0x58>)
 800eec8:	f7fe feb6 	bl	800dc38 <USBD_RegisterClass>
 800eecc:	4603      	mov	r3, r0
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d001      	beq.n	800eed6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800eed2:	f7f1 feed 	bl	8000cb0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800eed6:	490d      	ldr	r1, [pc, #52]	; (800ef0c <MX_USB_DEVICE_Init+0x60>)
 800eed8:	480a      	ldr	r0, [pc, #40]	; (800ef04 <MX_USB_DEVICE_Init+0x58>)
 800eeda:	f7fe fdd7 	bl	800da8c <USBD_CDC_RegisterInterface>
 800eede:	4603      	mov	r3, r0
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d001      	beq.n	800eee8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800eee4:	f7f1 fee4 	bl	8000cb0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800eee8:	4806      	ldr	r0, [pc, #24]	; (800ef04 <MX_USB_DEVICE_Init+0x58>)
 800eeea:	f7fe fecc 	bl	800dc86 <USBD_Start>
 800eeee:	4603      	mov	r3, r0
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d001      	beq.n	800eef8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800eef4:	f7f1 fedc 	bl	8000cb0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800eef8:	f7f8 fe5e 	bl	8007bb8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800eefc:	bf00      	nop
 800eefe:	bd80      	pop	{r7, pc}
 800ef00:	24000134 	.word	0x24000134
 800ef04:	24000724 	.word	0x24000724
 800ef08:	2400001c 	.word	0x2400001c
 800ef0c:	24000120 	.word	0x24000120

0800ef10 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800ef14:	2200      	movs	r2, #0
 800ef16:	4905      	ldr	r1, [pc, #20]	; (800ef2c <CDC_Init_HS+0x1c>)
 800ef18:	4805      	ldr	r0, [pc, #20]	; (800ef30 <CDC_Init_HS+0x20>)
 800ef1a:	f7fe fdcc 	bl	800dab6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800ef1e:	4905      	ldr	r1, [pc, #20]	; (800ef34 <CDC_Init_HS+0x24>)
 800ef20:	4803      	ldr	r0, [pc, #12]	; (800ef30 <CDC_Init_HS+0x20>)
 800ef22:	f7fe fde6 	bl	800daf2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ef26:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	bd80      	pop	{r7, pc}
 800ef2c:	240011f4 	.word	0x240011f4
 800ef30:	24000724 	.word	0x24000724
 800ef34:	240009f4 	.word	0x240009f4

0800ef38 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800ef38:	b480      	push	{r7}
 800ef3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800ef3c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	46bd      	mov	sp, r7
 800ef42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef46:	4770      	bx	lr

0800ef48 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ef48:	b480      	push	{r7}
 800ef4a:	b083      	sub	sp, #12
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	4603      	mov	r3, r0
 800ef50:	6039      	str	r1, [r7, #0]
 800ef52:	71fb      	strb	r3, [r7, #7]
 800ef54:	4613      	mov	r3, r2
 800ef56:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800ef58:	79fb      	ldrb	r3, [r7, #7]
 800ef5a:	2b23      	cmp	r3, #35	; 0x23
 800ef5c:	d84a      	bhi.n	800eff4 <CDC_Control_HS+0xac>
 800ef5e:	a201      	add	r2, pc, #4	; (adr r2, 800ef64 <CDC_Control_HS+0x1c>)
 800ef60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef64:	0800eff5 	.word	0x0800eff5
 800ef68:	0800eff5 	.word	0x0800eff5
 800ef6c:	0800eff5 	.word	0x0800eff5
 800ef70:	0800eff5 	.word	0x0800eff5
 800ef74:	0800eff5 	.word	0x0800eff5
 800ef78:	0800eff5 	.word	0x0800eff5
 800ef7c:	0800eff5 	.word	0x0800eff5
 800ef80:	0800eff5 	.word	0x0800eff5
 800ef84:	0800eff5 	.word	0x0800eff5
 800ef88:	0800eff5 	.word	0x0800eff5
 800ef8c:	0800eff5 	.word	0x0800eff5
 800ef90:	0800eff5 	.word	0x0800eff5
 800ef94:	0800eff5 	.word	0x0800eff5
 800ef98:	0800eff5 	.word	0x0800eff5
 800ef9c:	0800eff5 	.word	0x0800eff5
 800efa0:	0800eff5 	.word	0x0800eff5
 800efa4:	0800eff5 	.word	0x0800eff5
 800efa8:	0800eff5 	.word	0x0800eff5
 800efac:	0800eff5 	.word	0x0800eff5
 800efb0:	0800eff5 	.word	0x0800eff5
 800efb4:	0800eff5 	.word	0x0800eff5
 800efb8:	0800eff5 	.word	0x0800eff5
 800efbc:	0800eff5 	.word	0x0800eff5
 800efc0:	0800eff5 	.word	0x0800eff5
 800efc4:	0800eff5 	.word	0x0800eff5
 800efc8:	0800eff5 	.word	0x0800eff5
 800efcc:	0800eff5 	.word	0x0800eff5
 800efd0:	0800eff5 	.word	0x0800eff5
 800efd4:	0800eff5 	.word	0x0800eff5
 800efd8:	0800eff5 	.word	0x0800eff5
 800efdc:	0800eff5 	.word	0x0800eff5
 800efe0:	0800eff5 	.word	0x0800eff5
 800efe4:	0800eff5 	.word	0x0800eff5
 800efe8:	0800eff5 	.word	0x0800eff5
 800efec:	0800eff5 	.word	0x0800eff5
 800eff0:	0800eff5 	.word	0x0800eff5
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800eff4:	bf00      	nop
  }

  return (USBD_OK);
 800eff6:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800eff8:	4618      	mov	r0, r3
 800effa:	370c      	adds	r7, #12
 800effc:	46bd      	mov	sp, r7
 800effe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f002:	4770      	bx	lr

0800f004 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b084      	sub	sp, #16
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
 800f00c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800f00e:	6879      	ldr	r1, [r7, #4]
 800f010:	480f      	ldr	r0, [pc, #60]	; (800f050 <CDC_Receive_HS+0x4c>)
 800f012:	f7fe fd6e 	bl	800daf2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800f016:	480e      	ldr	r0, [pc, #56]	; (800f050 <CDC_Receive_HS+0x4c>)
 800f018:	f7fe fdb4 	bl	800db84 <USBD_CDC_ReceivePacket>

  uint8_t len = (uint8_t) *Len;
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	73fb      	strb	r3, [r7, #15]
  memset (buffer, '\0', 64);
 800f022:	2240      	movs	r2, #64	; 0x40
 800f024:	2100      	movs	r1, #0
 800f026:	480b      	ldr	r0, [pc, #44]	; (800f054 <CDC_Receive_HS+0x50>)
 800f028:	f000 fcf6 	bl	800fa18 <memset>
  memcpy (buffer, Buf, len);
 800f02c:	7bfb      	ldrb	r3, [r7, #15]
 800f02e:	461a      	mov	r2, r3
 800f030:	6879      	ldr	r1, [r7, #4]
 800f032:	4808      	ldr	r0, [pc, #32]	; (800f054 <CDC_Receive_HS+0x50>)
 800f034:	f000 fce2 	bl	800f9fc <memcpy>
  memset (Buf, '\0', len);
 800f038:	7bfb      	ldrb	r3, [r7, #15]
 800f03a:	461a      	mov	r2, r3
 800f03c:	2100      	movs	r1, #0
 800f03e:	6878      	ldr	r0, [r7, #4]
 800f040:	f000 fcea 	bl	800fa18 <memset>
  return (USBD_OK);
 800f044:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800f046:	4618      	mov	r0, r3
 800f048:	3710      	adds	r7, #16
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}
 800f04e:	bf00      	nop
 800f050:	24000724 	.word	0x24000724
 800f054:	240005a0 	.word	0x240005a0

0800f058 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b084      	sub	sp, #16
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
 800f060:	460b      	mov	r3, r1
 800f062:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f064:	2300      	movs	r3, #0
 800f066:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800f068:	4b0d      	ldr	r3, [pc, #52]	; (800f0a0 <CDC_Transmit_HS+0x48>)
 800f06a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f06e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f076:	2b00      	cmp	r3, #0
 800f078:	d001      	beq.n	800f07e <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800f07a:	2301      	movs	r3, #1
 800f07c:	e00b      	b.n	800f096 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800f07e:	887b      	ldrh	r3, [r7, #2]
 800f080:	461a      	mov	r2, r3
 800f082:	6879      	ldr	r1, [r7, #4]
 800f084:	4806      	ldr	r0, [pc, #24]	; (800f0a0 <CDC_Transmit_HS+0x48>)
 800f086:	f7fe fd16 	bl	800dab6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800f08a:	4805      	ldr	r0, [pc, #20]	; (800f0a0 <CDC_Transmit_HS+0x48>)
 800f08c:	f7fe fd4a 	bl	800db24 <USBD_CDC_TransmitPacket>
 800f090:	4603      	mov	r3, r0
 800f092:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800f094:	7bfb      	ldrb	r3, [r7, #15]
}
 800f096:	4618      	mov	r0, r3
 800f098:	3710      	adds	r7, #16
 800f09a:	46bd      	mov	sp, r7
 800f09c:	bd80      	pop	{r7, pc}
 800f09e:	bf00      	nop
 800f0a0:	24000724 	.word	0x24000724

0800f0a4 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f0a4:	b480      	push	{r7}
 800f0a6:	b087      	sub	sp, #28
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	60f8      	str	r0, [r7, #12]
 800f0ac:	60b9      	str	r1, [r7, #8]
 800f0ae:	4613      	mov	r3, r2
 800f0b0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800f0b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	371c      	adds	r7, #28
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c4:	4770      	bx	lr
	...

0800f0c8 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0c8:	b480      	push	{r7}
 800f0ca:	b083      	sub	sp, #12
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	6039      	str	r1, [r7, #0]
 800f0d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	2212      	movs	r2, #18
 800f0d8:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800f0da:	4b03      	ldr	r3, [pc, #12]	; (800f0e8 <USBD_HS_DeviceDescriptor+0x20>)
}
 800f0dc:	4618      	mov	r0, r3
 800f0de:	370c      	adds	r7, #12
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e6:	4770      	bx	lr
 800f0e8:	24000150 	.word	0x24000150

0800f0ec <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b083      	sub	sp, #12
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	6039      	str	r1, [r7, #0]
 800f0f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	2204      	movs	r2, #4
 800f0fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f0fe:	4b03      	ldr	r3, [pc, #12]	; (800f10c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800f100:	4618      	mov	r0, r3
 800f102:	370c      	adds	r7, #12
 800f104:	46bd      	mov	sp, r7
 800f106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10a:	4770      	bx	lr
 800f10c:	24000164 	.word	0x24000164

0800f110 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b082      	sub	sp, #8
 800f114:	af00      	add	r7, sp, #0
 800f116:	4603      	mov	r3, r0
 800f118:	6039      	str	r1, [r7, #0]
 800f11a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f11c:	79fb      	ldrb	r3, [r7, #7]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d105      	bne.n	800f12e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800f122:	683a      	ldr	r2, [r7, #0]
 800f124:	4907      	ldr	r1, [pc, #28]	; (800f144 <USBD_HS_ProductStrDescriptor+0x34>)
 800f126:	4808      	ldr	r0, [pc, #32]	; (800f148 <USBD_HS_ProductStrDescriptor+0x38>)
 800f128:	f7ff fddf 	bl	800ecea <USBD_GetString>
 800f12c:	e004      	b.n	800f138 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800f12e:	683a      	ldr	r2, [r7, #0]
 800f130:	4904      	ldr	r1, [pc, #16]	; (800f144 <USBD_HS_ProductStrDescriptor+0x34>)
 800f132:	4805      	ldr	r0, [pc, #20]	; (800f148 <USBD_HS_ProductStrDescriptor+0x38>)
 800f134:	f7ff fdd9 	bl	800ecea <USBD_GetString>
  }
  return USBD_StrDesc;
 800f138:	4b02      	ldr	r3, [pc, #8]	; (800f144 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800f13a:	4618      	mov	r0, r3
 800f13c:	3708      	adds	r7, #8
 800f13e:	46bd      	mov	sp, r7
 800f140:	bd80      	pop	{r7, pc}
 800f142:	bf00      	nop
 800f144:	240019f4 	.word	0x240019f4
 800f148:	0800fac4 	.word	0x0800fac4

0800f14c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b082      	sub	sp, #8
 800f150:	af00      	add	r7, sp, #0
 800f152:	4603      	mov	r3, r0
 800f154:	6039      	str	r1, [r7, #0]
 800f156:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f158:	683a      	ldr	r2, [r7, #0]
 800f15a:	4904      	ldr	r1, [pc, #16]	; (800f16c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800f15c:	4804      	ldr	r0, [pc, #16]	; (800f170 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800f15e:	f7ff fdc4 	bl	800ecea <USBD_GetString>
  return USBD_StrDesc;
 800f162:	4b02      	ldr	r3, [pc, #8]	; (800f16c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800f164:	4618      	mov	r0, r3
 800f166:	3708      	adds	r7, #8
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}
 800f16c:	240019f4 	.word	0x240019f4
 800f170:	0800fadc 	.word	0x0800fadc

0800f174 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b082      	sub	sp, #8
 800f178:	af00      	add	r7, sp, #0
 800f17a:	4603      	mov	r3, r0
 800f17c:	6039      	str	r1, [r7, #0]
 800f17e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	221a      	movs	r2, #26
 800f184:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f186:	f000 f843 	bl	800f210 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800f18a:	4b02      	ldr	r3, [pc, #8]	; (800f194 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	3708      	adds	r7, #8
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}
 800f194:	24000168 	.word	0x24000168

0800f198 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b082      	sub	sp, #8
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	4603      	mov	r3, r0
 800f1a0:	6039      	str	r1, [r7, #0]
 800f1a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f1a4:	79fb      	ldrb	r3, [r7, #7]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d105      	bne.n	800f1b6 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800f1aa:	683a      	ldr	r2, [r7, #0]
 800f1ac:	4907      	ldr	r1, [pc, #28]	; (800f1cc <USBD_HS_ConfigStrDescriptor+0x34>)
 800f1ae:	4808      	ldr	r0, [pc, #32]	; (800f1d0 <USBD_HS_ConfigStrDescriptor+0x38>)
 800f1b0:	f7ff fd9b 	bl	800ecea <USBD_GetString>
 800f1b4:	e004      	b.n	800f1c0 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800f1b6:	683a      	ldr	r2, [r7, #0]
 800f1b8:	4904      	ldr	r1, [pc, #16]	; (800f1cc <USBD_HS_ConfigStrDescriptor+0x34>)
 800f1ba:	4805      	ldr	r0, [pc, #20]	; (800f1d0 <USBD_HS_ConfigStrDescriptor+0x38>)
 800f1bc:	f7ff fd95 	bl	800ecea <USBD_GetString>
  }
  return USBD_StrDesc;
 800f1c0:	4b02      	ldr	r3, [pc, #8]	; (800f1cc <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	3708      	adds	r7, #8
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}
 800f1ca:	bf00      	nop
 800f1cc:	240019f4 	.word	0x240019f4
 800f1d0:	0800faf0 	.word	0x0800faf0

0800f1d4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b082      	sub	sp, #8
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	4603      	mov	r3, r0
 800f1dc:	6039      	str	r1, [r7, #0]
 800f1de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f1e0:	79fb      	ldrb	r3, [r7, #7]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d105      	bne.n	800f1f2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800f1e6:	683a      	ldr	r2, [r7, #0]
 800f1e8:	4907      	ldr	r1, [pc, #28]	; (800f208 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800f1ea:	4808      	ldr	r0, [pc, #32]	; (800f20c <USBD_HS_InterfaceStrDescriptor+0x38>)
 800f1ec:	f7ff fd7d 	bl	800ecea <USBD_GetString>
 800f1f0:	e004      	b.n	800f1fc <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800f1f2:	683a      	ldr	r2, [r7, #0]
 800f1f4:	4904      	ldr	r1, [pc, #16]	; (800f208 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800f1f6:	4805      	ldr	r0, [pc, #20]	; (800f20c <USBD_HS_InterfaceStrDescriptor+0x38>)
 800f1f8:	f7ff fd77 	bl	800ecea <USBD_GetString>
  }
  return USBD_StrDesc;
 800f1fc:	4b02      	ldr	r3, [pc, #8]	; (800f208 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	3708      	adds	r7, #8
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}
 800f206:	bf00      	nop
 800f208:	240019f4 	.word	0x240019f4
 800f20c:	0800fafc 	.word	0x0800fafc

0800f210 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b084      	sub	sp, #16
 800f214:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f216:	4b0f      	ldr	r3, [pc, #60]	; (800f254 <Get_SerialNum+0x44>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f21c:	4b0e      	ldr	r3, [pc, #56]	; (800f258 <Get_SerialNum+0x48>)
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f222:	4b0e      	ldr	r3, [pc, #56]	; (800f25c <Get_SerialNum+0x4c>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f228:	68fa      	ldr	r2, [r7, #12]
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	4413      	add	r3, r2
 800f22e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d009      	beq.n	800f24a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f236:	2208      	movs	r2, #8
 800f238:	4909      	ldr	r1, [pc, #36]	; (800f260 <Get_SerialNum+0x50>)
 800f23a:	68f8      	ldr	r0, [r7, #12]
 800f23c:	f000 f814 	bl	800f268 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f240:	2204      	movs	r2, #4
 800f242:	4908      	ldr	r1, [pc, #32]	; (800f264 <Get_SerialNum+0x54>)
 800f244:	68b8      	ldr	r0, [r7, #8]
 800f246:	f000 f80f 	bl	800f268 <IntToUnicode>
  }
}
 800f24a:	bf00      	nop
 800f24c:	3710      	adds	r7, #16
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}
 800f252:	bf00      	nop
 800f254:	1ff1e800 	.word	0x1ff1e800
 800f258:	1ff1e804 	.word	0x1ff1e804
 800f25c:	1ff1e808 	.word	0x1ff1e808
 800f260:	2400016a 	.word	0x2400016a
 800f264:	2400017a 	.word	0x2400017a

0800f268 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f268:	b480      	push	{r7}
 800f26a:	b087      	sub	sp, #28
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	60f8      	str	r0, [r7, #12]
 800f270:	60b9      	str	r1, [r7, #8]
 800f272:	4613      	mov	r3, r2
 800f274:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f276:	2300      	movs	r3, #0
 800f278:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f27a:	2300      	movs	r3, #0
 800f27c:	75fb      	strb	r3, [r7, #23]
 800f27e:	e027      	b.n	800f2d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	0f1b      	lsrs	r3, r3, #28
 800f284:	2b09      	cmp	r3, #9
 800f286:	d80b      	bhi.n	800f2a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	0f1b      	lsrs	r3, r3, #28
 800f28c:	b2da      	uxtb	r2, r3
 800f28e:	7dfb      	ldrb	r3, [r7, #23]
 800f290:	005b      	lsls	r3, r3, #1
 800f292:	4619      	mov	r1, r3
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	440b      	add	r3, r1
 800f298:	3230      	adds	r2, #48	; 0x30
 800f29a:	b2d2      	uxtb	r2, r2
 800f29c:	701a      	strb	r2, [r3, #0]
 800f29e:	e00a      	b.n	800f2b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	0f1b      	lsrs	r3, r3, #28
 800f2a4:	b2da      	uxtb	r2, r3
 800f2a6:	7dfb      	ldrb	r3, [r7, #23]
 800f2a8:	005b      	lsls	r3, r3, #1
 800f2aa:	4619      	mov	r1, r3
 800f2ac:	68bb      	ldr	r3, [r7, #8]
 800f2ae:	440b      	add	r3, r1
 800f2b0:	3237      	adds	r2, #55	; 0x37
 800f2b2:	b2d2      	uxtb	r2, r2
 800f2b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	011b      	lsls	r3, r3, #4
 800f2ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f2bc:	7dfb      	ldrb	r3, [r7, #23]
 800f2be:	005b      	lsls	r3, r3, #1
 800f2c0:	3301      	adds	r3, #1
 800f2c2:	68ba      	ldr	r2, [r7, #8]
 800f2c4:	4413      	add	r3, r2
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f2ca:	7dfb      	ldrb	r3, [r7, #23]
 800f2cc:	3301      	adds	r3, #1
 800f2ce:	75fb      	strb	r3, [r7, #23]
 800f2d0:	7dfa      	ldrb	r2, [r7, #23]
 800f2d2:	79fb      	ldrb	r3, [r7, #7]
 800f2d4:	429a      	cmp	r2, r3
 800f2d6:	d3d3      	bcc.n	800f280 <IntToUnicode+0x18>
  }
}
 800f2d8:	bf00      	nop
 800f2da:	bf00      	nop
 800f2dc:	371c      	adds	r7, #28
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e4:	4770      	bx	lr
	...

0800f2e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b0b6      	sub	sp, #216	; 0xd8
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f2f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	601a      	str	r2, [r3, #0]
 800f2f8:	605a      	str	r2, [r3, #4]
 800f2fa:	609a      	str	r2, [r3, #8]
 800f2fc:	60da      	str	r2, [r3, #12]
 800f2fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f300:	f107 0310 	add.w	r3, r7, #16
 800f304:	22b4      	movs	r2, #180	; 0xb4
 800f306:	2100      	movs	r1, #0
 800f308:	4618      	mov	r0, r3
 800f30a:	f000 fb85 	bl	800fa18 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	4a33      	ldr	r2, [pc, #204]	; (800f3e0 <HAL_PCD_MspInit+0xf8>)
 800f314:	4293      	cmp	r3, r2
 800f316:	d15e      	bne.n	800f3d6 <HAL_PCD_MspInit+0xee>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f318:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f31c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f31e:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800f322:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f326:	f107 0310 	add.w	r3, r7, #16
 800f32a:	4618      	mov	r0, r3
 800f32c:	f7f9 fb8c 	bl	8008a48 <HAL_RCCEx_PeriphCLKConfig>
 800f330:	4603      	mov	r3, r0
 800f332:	2b00      	cmp	r3, #0
 800f334:	d001      	beq.n	800f33a <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800f336:	f7f1 fcbb 	bl	8000cb0 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800f33a:	f7f8 fc3d 	bl	8007bb8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f33e:	4b29      	ldr	r3, [pc, #164]	; (800f3e4 <HAL_PCD_MspInit+0xfc>)
 800f340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f344:	4a27      	ldr	r2, [pc, #156]	; (800f3e4 <HAL_PCD_MspInit+0xfc>)
 800f346:	f043 0301 	orr.w	r3, r3, #1
 800f34a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f34e:	4b25      	ldr	r3, [pc, #148]	; (800f3e4 <HAL_PCD_MspInit+0xfc>)
 800f350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f354:	f003 0301 	and.w	r3, r3, #1
 800f358:	60fb      	str	r3, [r7, #12]
 800f35a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    PA10     ------> USB_OTG_HS_ID
    */
    GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800f35c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f360:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f364:	2300      	movs	r3, #0
 800f366:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f36a:	2300      	movs	r3, #0
 800f36c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800f370:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800f374:	4619      	mov	r1, r3
 800f376:	481c      	ldr	r0, [pc, #112]	; (800f3e8 <HAL_PCD_MspInit+0x100>)
 800f378:	f7f7 f83a 	bl	80063f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800f37c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f380:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f384:	2302      	movs	r3, #2
 800f386:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f38a:	2300      	movs	r3, #0
 800f38c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f390:	2300      	movs	r3, #0
 800f392:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800f396:	230a      	movs	r3, #10
 800f398:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800f39c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800f3a0:	4619      	mov	r1, r3
 800f3a2:	4811      	ldr	r0, [pc, #68]	; (800f3e8 <HAL_PCD_MspInit+0x100>)
 800f3a4:	f7f7 f824 	bl	80063f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800f3a8:	4b0e      	ldr	r3, [pc, #56]	; (800f3e4 <HAL_PCD_MspInit+0xfc>)
 800f3aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f3ae:	4a0d      	ldr	r2, [pc, #52]	; (800f3e4 <HAL_PCD_MspInit+0xfc>)
 800f3b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f3b4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f3b8:	4b0a      	ldr	r3, [pc, #40]	; (800f3e4 <HAL_PCD_MspInit+0xfc>)
 800f3ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f3be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f3c2:	60bb      	str	r3, [r7, #8]
 800f3c4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	2100      	movs	r1, #0
 800f3ca:	204d      	movs	r0, #77	; 0x4d
 800f3cc:	f7f4 f927 	bl	800361e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800f3d0:	204d      	movs	r0, #77	; 0x4d
 800f3d2:	f7f4 f93e 	bl	8003652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800f3d6:	bf00      	nop
 800f3d8:	37d8      	adds	r7, #216	; 0xd8
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd80      	pop	{r7, pc}
 800f3de:	bf00      	nop
 800f3e0:	40040000 	.word	0x40040000
 800f3e4:	58024400 	.word	0x58024400
 800f3e8:	58020000 	.word	0x58020000

0800f3ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b082      	sub	sp, #8
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800f400:	4619      	mov	r1, r3
 800f402:	4610      	mov	r0, r2
 800f404:	f7fe fc8a 	bl	800dd1c <USBD_LL_SetupStage>
}
 800f408:	bf00      	nop
 800f40a:	3708      	adds	r7, #8
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}

0800f410 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b082      	sub	sp, #8
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
 800f418:	460b      	mov	r3, r1
 800f41a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f422:	78fa      	ldrb	r2, [r7, #3]
 800f424:	6879      	ldr	r1, [r7, #4]
 800f426:	4613      	mov	r3, r2
 800f428:	00db      	lsls	r3, r3, #3
 800f42a:	1a9b      	subs	r3, r3, r2
 800f42c:	009b      	lsls	r3, r3, #2
 800f42e:	440b      	add	r3, r1
 800f430:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f434:	681a      	ldr	r2, [r3, #0]
 800f436:	78fb      	ldrb	r3, [r7, #3]
 800f438:	4619      	mov	r1, r3
 800f43a:	f7fe fcc4 	bl	800ddc6 <USBD_LL_DataOutStage>
}
 800f43e:	bf00      	nop
 800f440:	3708      	adds	r7, #8
 800f442:	46bd      	mov	sp, r7
 800f444:	bd80      	pop	{r7, pc}

0800f446 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f446:	b580      	push	{r7, lr}
 800f448:	b082      	sub	sp, #8
 800f44a:	af00      	add	r7, sp, #0
 800f44c:	6078      	str	r0, [r7, #4]
 800f44e:	460b      	mov	r3, r1
 800f450:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f458:	78fa      	ldrb	r2, [r7, #3]
 800f45a:	6879      	ldr	r1, [r7, #4]
 800f45c:	4613      	mov	r3, r2
 800f45e:	00db      	lsls	r3, r3, #3
 800f460:	1a9b      	subs	r3, r3, r2
 800f462:	009b      	lsls	r3, r3, #2
 800f464:	440b      	add	r3, r1
 800f466:	3348      	adds	r3, #72	; 0x48
 800f468:	681a      	ldr	r2, [r3, #0]
 800f46a:	78fb      	ldrb	r3, [r7, #3]
 800f46c:	4619      	mov	r1, r3
 800f46e:	f7fe fd0d 	bl	800de8c <USBD_LL_DataInStage>
}
 800f472:	bf00      	nop
 800f474:	3708      	adds	r7, #8
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}

0800f47a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f47a:	b580      	push	{r7, lr}
 800f47c:	b082      	sub	sp, #8
 800f47e:	af00      	add	r7, sp, #0
 800f480:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f488:	4618      	mov	r0, r3
 800f48a:	f7fe fe21 	bl	800e0d0 <USBD_LL_SOF>
}
 800f48e:	bf00      	nop
 800f490:	3708      	adds	r7, #8
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}

0800f496 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f496:	b580      	push	{r7, lr}
 800f498:	b084      	sub	sp, #16
 800f49a:	af00      	add	r7, sp, #0
 800f49c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f49e:	2301      	movs	r3, #1
 800f4a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	68db      	ldr	r3, [r3, #12]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d102      	bne.n	800f4b0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	73fb      	strb	r3, [r7, #15]
 800f4ae:	e008      	b.n	800f4c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	68db      	ldr	r3, [r3, #12]
 800f4b4:	2b02      	cmp	r3, #2
 800f4b6:	d102      	bne.n	800f4be <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f4b8:	2301      	movs	r3, #1
 800f4ba:	73fb      	strb	r3, [r7, #15]
 800f4bc:	e001      	b.n	800f4c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f4be:	f7f1 fbf7 	bl	8000cb0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f4c8:	7bfa      	ldrb	r2, [r7, #15]
 800f4ca:	4611      	mov	r1, r2
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f7fe fdc1 	bl	800e054 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f7fe fd6d 	bl	800dfb8 <USBD_LL_Reset>
}
 800f4de:	bf00      	nop
 800f4e0:	3710      	adds	r7, #16
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bd80      	pop	{r7, pc}
	...

0800f4e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b082      	sub	sp, #8
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f7fe fdbc 	bl	800e074 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	687a      	ldr	r2, [r7, #4]
 800f508:	6812      	ldr	r2, [r2, #0]
 800f50a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f50e:	f043 0301 	orr.w	r3, r3, #1
 800f512:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	6a1b      	ldr	r3, [r3, #32]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d005      	beq.n	800f528 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f51c:	4b04      	ldr	r3, [pc, #16]	; (800f530 <HAL_PCD_SuspendCallback+0x48>)
 800f51e:	691b      	ldr	r3, [r3, #16]
 800f520:	4a03      	ldr	r2, [pc, #12]	; (800f530 <HAL_PCD_SuspendCallback+0x48>)
 800f522:	f043 0306 	orr.w	r3, r3, #6
 800f526:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f528:	bf00      	nop
 800f52a:	3708      	adds	r7, #8
 800f52c:	46bd      	mov	sp, r7
 800f52e:	bd80      	pop	{r7, pc}
 800f530:	e000ed00 	.word	0xe000ed00

0800f534 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b082      	sub	sp, #8
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f542:	4618      	mov	r0, r3
 800f544:	f7fe fdac 	bl	800e0a0 <USBD_LL_Resume>
}
 800f548:	bf00      	nop
 800f54a:	3708      	adds	r7, #8
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}

0800f550 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b082      	sub	sp, #8
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
 800f558:	460b      	mov	r3, r1
 800f55a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f562:	78fa      	ldrb	r2, [r7, #3]
 800f564:	4611      	mov	r1, r2
 800f566:	4618      	mov	r0, r3
 800f568:	f7fe fdfa 	bl	800e160 <USBD_LL_IsoOUTIncomplete>
}
 800f56c:	bf00      	nop
 800f56e:	3708      	adds	r7, #8
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}

0800f574 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b082      	sub	sp, #8
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
 800f57c:	460b      	mov	r3, r1
 800f57e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f586:	78fa      	ldrb	r2, [r7, #3]
 800f588:	4611      	mov	r1, r2
 800f58a:	4618      	mov	r0, r3
 800f58c:	f7fe fdc2 	bl	800e114 <USBD_LL_IsoINIncomplete>
}
 800f590:	bf00      	nop
 800f592:	3708      	adds	r7, #8
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}

0800f598 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b082      	sub	sp, #8
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	f7fe fe00 	bl	800e1ac <USBD_LL_DevConnected>
}
 800f5ac:	bf00      	nop
 800f5ae:	3708      	adds	r7, #8
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bd80      	pop	{r7, pc}

0800f5b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b082      	sub	sp, #8
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f7fe fdfd 	bl	800e1c2 <USBD_LL_DevDisconnected>
}
 800f5c8:	bf00      	nop
 800f5ca:	3708      	adds	r7, #8
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd80      	pop	{r7, pc}

0800f5d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b082      	sub	sp, #8
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	781b      	ldrb	r3, [r3, #0]
 800f5dc:	2b01      	cmp	r3, #1
 800f5de:	d143      	bne.n	800f668 <USBD_LL_Init+0x98>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800f5e0:	4a24      	ldr	r2, [pc, #144]	; (800f674 <USBD_LL_Init+0xa4>)
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_HS;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	4a22      	ldr	r2, [pc, #136]	; (800f674 <USBD_LL_Init+0xa4>)
 800f5ec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800f5f0:	4b20      	ldr	r3, [pc, #128]	; (800f674 <USBD_LL_Init+0xa4>)
 800f5f2:	4a21      	ldr	r2, [pc, #132]	; (800f678 <USBD_LL_Init+0xa8>)
 800f5f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800f5f6:	4b1f      	ldr	r3, [pc, #124]	; (800f674 <USBD_LL_Init+0xa4>)
 800f5f8:	2209      	movs	r2, #9
 800f5fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800f5fc:	4b1d      	ldr	r3, [pc, #116]	; (800f674 <USBD_LL_Init+0xa4>)
 800f5fe:	2202      	movs	r2, #2
 800f600:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800f602:	4b1c      	ldr	r3, [pc, #112]	; (800f674 <USBD_LL_Init+0xa4>)
 800f604:	2200      	movs	r2, #0
 800f606:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800f608:	4b1a      	ldr	r3, [pc, #104]	; (800f674 <USBD_LL_Init+0xa4>)
 800f60a:	2202      	movs	r2, #2
 800f60c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800f60e:	4b19      	ldr	r3, [pc, #100]	; (800f674 <USBD_LL_Init+0xa4>)
 800f610:	2200      	movs	r2, #0
 800f612:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800f614:	4b17      	ldr	r3, [pc, #92]	; (800f674 <USBD_LL_Init+0xa4>)
 800f616:	2200      	movs	r2, #0
 800f618:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800f61a:	4b16      	ldr	r3, [pc, #88]	; (800f674 <USBD_LL_Init+0xa4>)
 800f61c:	2200      	movs	r2, #0
 800f61e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.battery_charging_enable = ENABLE;
 800f620:	4b14      	ldr	r3, [pc, #80]	; (800f674 <USBD_LL_Init+0xa4>)
 800f622:	2201      	movs	r2, #1
 800f624:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 800f626:	4b13      	ldr	r3, [pc, #76]	; (800f674 <USBD_LL_Init+0xa4>)
 800f628:	2201      	movs	r2, #1
 800f62a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800f62c:	4b11      	ldr	r3, [pc, #68]	; (800f674 <USBD_LL_Init+0xa4>)
 800f62e:	2200      	movs	r2, #0
 800f630:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800f632:	4b10      	ldr	r3, [pc, #64]	; (800f674 <USBD_LL_Init+0xa4>)
 800f634:	2200      	movs	r2, #0
 800f636:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800f638:	480e      	ldr	r0, [pc, #56]	; (800f674 <USBD_LL_Init+0xa4>)
 800f63a:	f7f7 f8b4 	bl	80067a6 <HAL_PCD_Init>
 800f63e:	4603      	mov	r3, r0
 800f640:	2b00      	cmp	r3, #0
 800f642:	d001      	beq.n	800f648 <USBD_LL_Init+0x78>
  {
    Error_Handler( );
 800f644:	f7f1 fb34 	bl	8000cb0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800f648:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f64c:	4809      	ldr	r0, [pc, #36]	; (800f674 <USBD_LL_Init+0xa4>)
 800f64e:	f7f8 fa38 	bl	8007ac2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800f652:	2280      	movs	r2, #128	; 0x80
 800f654:	2100      	movs	r1, #0
 800f656:	4807      	ldr	r0, [pc, #28]	; (800f674 <USBD_LL_Init+0xa4>)
 800f658:	f7f8 f9ec 	bl	8007a34 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800f65c:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800f660:	2101      	movs	r1, #1
 800f662:	4804      	ldr	r0, [pc, #16]	; (800f674 <USBD_LL_Init+0xa4>)
 800f664:	f7f8 f9e6 	bl	8007a34 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800f668:	2300      	movs	r3, #0
}
 800f66a:	4618      	mov	r0, r3
 800f66c:	3708      	adds	r7, #8
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}
 800f672:	bf00      	nop
 800f674:	24001bf4 	.word	0x24001bf4
 800f678:	40040000 	.word	0x40040000

0800f67c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b084      	sub	sp, #16
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f684:	2300      	movs	r3, #0
 800f686:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f688:	2300      	movs	r3, #0
 800f68a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f692:	4618      	mov	r0, r3
 800f694:	f7f7 f9ab 	bl	80069ee <HAL_PCD_Start>
 800f698:	4603      	mov	r3, r0
 800f69a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f69c:	7bfb      	ldrb	r3, [r7, #15]
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f000 f942 	bl	800f928 <USBD_Get_USB_Status>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f6a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	3710      	adds	r7, #16
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd80      	pop	{r7, pc}

0800f6b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f6b2:	b580      	push	{r7, lr}
 800f6b4:	b084      	sub	sp, #16
 800f6b6:	af00      	add	r7, sp, #0
 800f6b8:	6078      	str	r0, [r7, #4]
 800f6ba:	4608      	mov	r0, r1
 800f6bc:	4611      	mov	r1, r2
 800f6be:	461a      	mov	r2, r3
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	70fb      	strb	r3, [r7, #3]
 800f6c4:	460b      	mov	r3, r1
 800f6c6:	70bb      	strb	r3, [r7, #2]
 800f6c8:	4613      	mov	r3, r2
 800f6ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f6da:	78bb      	ldrb	r3, [r7, #2]
 800f6dc:	883a      	ldrh	r2, [r7, #0]
 800f6de:	78f9      	ldrb	r1, [r7, #3]
 800f6e0:	f7f7 fdb0 	bl	8007244 <HAL_PCD_EP_Open>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f6e8:	7bfb      	ldrb	r3, [r7, #15]
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f000 f91c 	bl	800f928 <USBD_Get_USB_Status>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f6f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	3710      	adds	r7, #16
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}

0800f6fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f6fe:	b580      	push	{r7, lr}
 800f700:	b084      	sub	sp, #16
 800f702:	af00      	add	r7, sp, #0
 800f704:	6078      	str	r0, [r7, #4]
 800f706:	460b      	mov	r3, r1
 800f708:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f70a:	2300      	movs	r3, #0
 800f70c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f70e:	2300      	movs	r3, #0
 800f710:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f718:	78fa      	ldrb	r2, [r7, #3]
 800f71a:	4611      	mov	r1, r2
 800f71c:	4618      	mov	r0, r3
 800f71e:	f7f7 fdf9 	bl	8007314 <HAL_PCD_EP_Close>
 800f722:	4603      	mov	r3, r0
 800f724:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f726:	7bfb      	ldrb	r3, [r7, #15]
 800f728:	4618      	mov	r0, r3
 800f72a:	f000 f8fd 	bl	800f928 <USBD_Get_USB_Status>
 800f72e:	4603      	mov	r3, r0
 800f730:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f732:	7bbb      	ldrb	r3, [r7, #14]
}
 800f734:	4618      	mov	r0, r3
 800f736:	3710      	adds	r7, #16
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd80      	pop	{r7, pc}

0800f73c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b084      	sub	sp, #16
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
 800f744:	460b      	mov	r3, r1
 800f746:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f748:	2300      	movs	r3, #0
 800f74a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f74c:	2300      	movs	r3, #0
 800f74e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f756:	78fa      	ldrb	r2, [r7, #3]
 800f758:	4611      	mov	r1, r2
 800f75a:	4618      	mov	r0, r3
 800f75c:	f7f7 fed1 	bl	8007502 <HAL_PCD_EP_SetStall>
 800f760:	4603      	mov	r3, r0
 800f762:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f764:	7bfb      	ldrb	r3, [r7, #15]
 800f766:	4618      	mov	r0, r3
 800f768:	f000 f8de 	bl	800f928 <USBD_Get_USB_Status>
 800f76c:	4603      	mov	r3, r0
 800f76e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f770:	7bbb      	ldrb	r3, [r7, #14]
}
 800f772:	4618      	mov	r0, r3
 800f774:	3710      	adds	r7, #16
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}

0800f77a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f77a:	b580      	push	{r7, lr}
 800f77c:	b084      	sub	sp, #16
 800f77e:	af00      	add	r7, sp, #0
 800f780:	6078      	str	r0, [r7, #4]
 800f782:	460b      	mov	r3, r1
 800f784:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f786:	2300      	movs	r3, #0
 800f788:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f78a:	2300      	movs	r3, #0
 800f78c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f794:	78fa      	ldrb	r2, [r7, #3]
 800f796:	4611      	mov	r1, r2
 800f798:	4618      	mov	r0, r3
 800f79a:	f7f7 ff16 	bl	80075ca <HAL_PCD_EP_ClrStall>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f7a2:	7bfb      	ldrb	r3, [r7, #15]
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f000 f8bf 	bl	800f928 <USBD_Get_USB_Status>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f7ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	3710      	adds	r7, #16
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}

0800f7b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f7b8:	b480      	push	{r7}
 800f7ba:	b085      	sub	sp, #20
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
 800f7c0:	460b      	mov	r3, r1
 800f7c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f7ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f7cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	da0b      	bge.n	800f7ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f7d4:	78fb      	ldrb	r3, [r7, #3]
 800f7d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f7da:	68f9      	ldr	r1, [r7, #12]
 800f7dc:	4613      	mov	r3, r2
 800f7de:	00db      	lsls	r3, r3, #3
 800f7e0:	1a9b      	subs	r3, r3, r2
 800f7e2:	009b      	lsls	r3, r3, #2
 800f7e4:	440b      	add	r3, r1
 800f7e6:	333e      	adds	r3, #62	; 0x3e
 800f7e8:	781b      	ldrb	r3, [r3, #0]
 800f7ea:	e00b      	b.n	800f804 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f7ec:	78fb      	ldrb	r3, [r7, #3]
 800f7ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f7f2:	68f9      	ldr	r1, [r7, #12]
 800f7f4:	4613      	mov	r3, r2
 800f7f6:	00db      	lsls	r3, r3, #3
 800f7f8:	1a9b      	subs	r3, r3, r2
 800f7fa:	009b      	lsls	r3, r3, #2
 800f7fc:	440b      	add	r3, r1
 800f7fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f802:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f804:	4618      	mov	r0, r3
 800f806:	3714      	adds	r7, #20
 800f808:	46bd      	mov	sp, r7
 800f80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80e:	4770      	bx	lr

0800f810 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b084      	sub	sp, #16
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
 800f818:	460b      	mov	r3, r1
 800f81a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f81c:	2300      	movs	r3, #0
 800f81e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f820:	2300      	movs	r3, #0
 800f822:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f82a:	78fa      	ldrb	r2, [r7, #3]
 800f82c:	4611      	mov	r1, r2
 800f82e:	4618      	mov	r0, r3
 800f830:	f7f7 fce3 	bl	80071fa <HAL_PCD_SetAddress>
 800f834:	4603      	mov	r3, r0
 800f836:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f838:	7bfb      	ldrb	r3, [r7, #15]
 800f83a:	4618      	mov	r0, r3
 800f83c:	f000 f874 	bl	800f928 <USBD_Get_USB_Status>
 800f840:	4603      	mov	r3, r0
 800f842:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f844:	7bbb      	ldrb	r3, [r7, #14]
}
 800f846:	4618      	mov	r0, r3
 800f848:	3710      	adds	r7, #16
 800f84a:	46bd      	mov	sp, r7
 800f84c:	bd80      	pop	{r7, pc}

0800f84e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f84e:	b580      	push	{r7, lr}
 800f850:	b086      	sub	sp, #24
 800f852:	af00      	add	r7, sp, #0
 800f854:	60f8      	str	r0, [r7, #12]
 800f856:	607a      	str	r2, [r7, #4]
 800f858:	603b      	str	r3, [r7, #0]
 800f85a:	460b      	mov	r3, r1
 800f85c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f85e:	2300      	movs	r3, #0
 800f860:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f862:	2300      	movs	r3, #0
 800f864:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f86c:	7af9      	ldrb	r1, [r7, #11]
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	687a      	ldr	r2, [r7, #4]
 800f872:	f7f7 fdfc 	bl	800746e <HAL_PCD_EP_Transmit>
 800f876:	4603      	mov	r3, r0
 800f878:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f87a:	7dfb      	ldrb	r3, [r7, #23]
 800f87c:	4618      	mov	r0, r3
 800f87e:	f000 f853 	bl	800f928 <USBD_Get_USB_Status>
 800f882:	4603      	mov	r3, r0
 800f884:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f886:	7dbb      	ldrb	r3, [r7, #22]
}
 800f888:	4618      	mov	r0, r3
 800f88a:	3718      	adds	r7, #24
 800f88c:	46bd      	mov	sp, r7
 800f88e:	bd80      	pop	{r7, pc}

0800f890 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b086      	sub	sp, #24
 800f894:	af00      	add	r7, sp, #0
 800f896:	60f8      	str	r0, [r7, #12]
 800f898:	607a      	str	r2, [r7, #4]
 800f89a:	603b      	str	r3, [r7, #0]
 800f89c:	460b      	mov	r3, r1
 800f89e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f8ae:	7af9      	ldrb	r1, [r7, #11]
 800f8b0:	683b      	ldr	r3, [r7, #0]
 800f8b2:	687a      	ldr	r2, [r7, #4]
 800f8b4:	f7f7 fd78 	bl	80073a8 <HAL_PCD_EP_Receive>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f8bc:	7dfb      	ldrb	r3, [r7, #23]
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f000 f832 	bl	800f928 <USBD_Get_USB_Status>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f8c8:	7dbb      	ldrb	r3, [r7, #22]
}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	3718      	adds	r7, #24
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}

0800f8d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f8d2:	b580      	push	{r7, lr}
 800f8d4:	b082      	sub	sp, #8
 800f8d6:	af00      	add	r7, sp, #0
 800f8d8:	6078      	str	r0, [r7, #4]
 800f8da:	460b      	mov	r3, r1
 800f8dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f8e4:	78fa      	ldrb	r2, [r7, #3]
 800f8e6:	4611      	mov	r1, r2
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f7f7 fda8 	bl	800743e <HAL_PCD_EP_GetRxCount>
 800f8ee:	4603      	mov	r3, r0
}
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3708      	adds	r7, #8
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}

0800f8f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f8f8:	b480      	push	{r7}
 800f8fa:	b083      	sub	sp, #12
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f900:	4b03      	ldr	r3, [pc, #12]	; (800f910 <USBD_static_malloc+0x18>)
}
 800f902:	4618      	mov	r0, r3
 800f904:	370c      	adds	r7, #12
 800f906:	46bd      	mov	sp, r7
 800f908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90c:	4770      	bx	lr
 800f90e:	bf00      	nop
 800f910:	2400026c 	.word	0x2400026c

0800f914 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f914:	b480      	push	{r7}
 800f916:	b083      	sub	sp, #12
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]

}
 800f91c:	bf00      	nop
 800f91e:	370c      	adds	r7, #12
 800f920:	46bd      	mov	sp, r7
 800f922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f926:	4770      	bx	lr

0800f928 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f928:	b480      	push	{r7}
 800f92a:	b085      	sub	sp, #20
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	4603      	mov	r3, r0
 800f930:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f932:	2300      	movs	r3, #0
 800f934:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f936:	79fb      	ldrb	r3, [r7, #7]
 800f938:	2b03      	cmp	r3, #3
 800f93a:	d817      	bhi.n	800f96c <USBD_Get_USB_Status+0x44>
 800f93c:	a201      	add	r2, pc, #4	; (adr r2, 800f944 <USBD_Get_USB_Status+0x1c>)
 800f93e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f942:	bf00      	nop
 800f944:	0800f955 	.word	0x0800f955
 800f948:	0800f95b 	.word	0x0800f95b
 800f94c:	0800f961 	.word	0x0800f961
 800f950:	0800f967 	.word	0x0800f967
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f954:	2300      	movs	r3, #0
 800f956:	73fb      	strb	r3, [r7, #15]
    break;
 800f958:	e00b      	b.n	800f972 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f95a:	2303      	movs	r3, #3
 800f95c:	73fb      	strb	r3, [r7, #15]
    break;
 800f95e:	e008      	b.n	800f972 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f960:	2301      	movs	r3, #1
 800f962:	73fb      	strb	r3, [r7, #15]
    break;
 800f964:	e005      	b.n	800f972 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f966:	2303      	movs	r3, #3
 800f968:	73fb      	strb	r3, [r7, #15]
    break;
 800f96a:	e002      	b.n	800f972 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f96c:	2303      	movs	r3, #3
 800f96e:	73fb      	strb	r3, [r7, #15]
    break;
 800f970:	bf00      	nop
  }
  return usb_status;
 800f972:	7bfb      	ldrb	r3, [r7, #15]
}
 800f974:	4618      	mov	r0, r3
 800f976:	3714      	adds	r7, #20
 800f978:	46bd      	mov	sp, r7
 800f97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97e:	4770      	bx	lr

0800f980 <__libc_init_array>:
 800f980:	b570      	push	{r4, r5, r6, lr}
 800f982:	4d0d      	ldr	r5, [pc, #52]	; (800f9b8 <__libc_init_array+0x38>)
 800f984:	4c0d      	ldr	r4, [pc, #52]	; (800f9bc <__libc_init_array+0x3c>)
 800f986:	1b64      	subs	r4, r4, r5
 800f988:	10a4      	asrs	r4, r4, #2
 800f98a:	2600      	movs	r6, #0
 800f98c:	42a6      	cmp	r6, r4
 800f98e:	d109      	bne.n	800f9a4 <__libc_init_array+0x24>
 800f990:	4d0b      	ldr	r5, [pc, #44]	; (800f9c0 <__libc_init_array+0x40>)
 800f992:	4c0c      	ldr	r4, [pc, #48]	; (800f9c4 <__libc_init_array+0x44>)
 800f994:	f000 f88a 	bl	800faac <_init>
 800f998:	1b64      	subs	r4, r4, r5
 800f99a:	10a4      	asrs	r4, r4, #2
 800f99c:	2600      	movs	r6, #0
 800f99e:	42a6      	cmp	r6, r4
 800f9a0:	d105      	bne.n	800f9ae <__libc_init_array+0x2e>
 800f9a2:	bd70      	pop	{r4, r5, r6, pc}
 800f9a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9a8:	4798      	blx	r3
 800f9aa:	3601      	adds	r6, #1
 800f9ac:	e7ee      	b.n	800f98c <__libc_init_array+0xc>
 800f9ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9b2:	4798      	blx	r3
 800f9b4:	3601      	adds	r6, #1
 800f9b6:	e7f2      	b.n	800f99e <__libc_init_array+0x1e>
 800f9b8:	0800fb7c 	.word	0x0800fb7c
 800f9bc:	0800fb7c 	.word	0x0800fb7c
 800f9c0:	0800fb7c 	.word	0x0800fb7c
 800f9c4:	0800fb80 	.word	0x0800fb80

0800f9c8 <__itoa>:
 800f9c8:	1e93      	subs	r3, r2, #2
 800f9ca:	2b22      	cmp	r3, #34	; 0x22
 800f9cc:	b510      	push	{r4, lr}
 800f9ce:	460c      	mov	r4, r1
 800f9d0:	d904      	bls.n	800f9dc <__itoa+0x14>
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	700b      	strb	r3, [r1, #0]
 800f9d6:	461c      	mov	r4, r3
 800f9d8:	4620      	mov	r0, r4
 800f9da:	bd10      	pop	{r4, pc}
 800f9dc:	2a0a      	cmp	r2, #10
 800f9de:	d109      	bne.n	800f9f4 <__itoa+0x2c>
 800f9e0:	2800      	cmp	r0, #0
 800f9e2:	da07      	bge.n	800f9f4 <__itoa+0x2c>
 800f9e4:	232d      	movs	r3, #45	; 0x2d
 800f9e6:	700b      	strb	r3, [r1, #0]
 800f9e8:	4240      	negs	r0, r0
 800f9ea:	2101      	movs	r1, #1
 800f9ec:	4421      	add	r1, r4
 800f9ee:	f000 f81b 	bl	800fa28 <__utoa>
 800f9f2:	e7f1      	b.n	800f9d8 <__itoa+0x10>
 800f9f4:	2100      	movs	r1, #0
 800f9f6:	e7f9      	b.n	800f9ec <__itoa+0x24>

0800f9f8 <itoa>:
 800f9f8:	f7ff bfe6 	b.w	800f9c8 <__itoa>

0800f9fc <memcpy>:
 800f9fc:	440a      	add	r2, r1
 800f9fe:	4291      	cmp	r1, r2
 800fa00:	f100 33ff 	add.w	r3, r0, #4294967295
 800fa04:	d100      	bne.n	800fa08 <memcpy+0xc>
 800fa06:	4770      	bx	lr
 800fa08:	b510      	push	{r4, lr}
 800fa0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fa0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fa12:	4291      	cmp	r1, r2
 800fa14:	d1f9      	bne.n	800fa0a <memcpy+0xe>
 800fa16:	bd10      	pop	{r4, pc}

0800fa18 <memset>:
 800fa18:	4402      	add	r2, r0
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	4293      	cmp	r3, r2
 800fa1e:	d100      	bne.n	800fa22 <memset+0xa>
 800fa20:	4770      	bx	lr
 800fa22:	f803 1b01 	strb.w	r1, [r3], #1
 800fa26:	e7f9      	b.n	800fa1c <memset+0x4>

0800fa28 <__utoa>:
 800fa28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa2a:	4c1f      	ldr	r4, [pc, #124]	; (800faa8 <__utoa+0x80>)
 800fa2c:	b08b      	sub	sp, #44	; 0x2c
 800fa2e:	4605      	mov	r5, r0
 800fa30:	460b      	mov	r3, r1
 800fa32:	466e      	mov	r6, sp
 800fa34:	f104 0c20 	add.w	ip, r4, #32
 800fa38:	6820      	ldr	r0, [r4, #0]
 800fa3a:	6861      	ldr	r1, [r4, #4]
 800fa3c:	4637      	mov	r7, r6
 800fa3e:	c703      	stmia	r7!, {r0, r1}
 800fa40:	3408      	adds	r4, #8
 800fa42:	4564      	cmp	r4, ip
 800fa44:	463e      	mov	r6, r7
 800fa46:	d1f7      	bne.n	800fa38 <__utoa+0x10>
 800fa48:	7921      	ldrb	r1, [r4, #4]
 800fa4a:	7139      	strb	r1, [r7, #4]
 800fa4c:	1e91      	subs	r1, r2, #2
 800fa4e:	6820      	ldr	r0, [r4, #0]
 800fa50:	6038      	str	r0, [r7, #0]
 800fa52:	2922      	cmp	r1, #34	; 0x22
 800fa54:	f04f 0100 	mov.w	r1, #0
 800fa58:	d904      	bls.n	800fa64 <__utoa+0x3c>
 800fa5a:	7019      	strb	r1, [r3, #0]
 800fa5c:	460b      	mov	r3, r1
 800fa5e:	4618      	mov	r0, r3
 800fa60:	b00b      	add	sp, #44	; 0x2c
 800fa62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa64:	1e58      	subs	r0, r3, #1
 800fa66:	4684      	mov	ip, r0
 800fa68:	fbb5 f7f2 	udiv	r7, r5, r2
 800fa6c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800fa70:	fb02 5617 	mls	r6, r2, r7, r5
 800fa74:	4476      	add	r6, lr
 800fa76:	460c      	mov	r4, r1
 800fa78:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800fa7c:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800fa80:	462e      	mov	r6, r5
 800fa82:	42b2      	cmp	r2, r6
 800fa84:	f101 0101 	add.w	r1, r1, #1
 800fa88:	463d      	mov	r5, r7
 800fa8a:	d9ed      	bls.n	800fa68 <__utoa+0x40>
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	545a      	strb	r2, [r3, r1]
 800fa90:	1919      	adds	r1, r3, r4
 800fa92:	1aa5      	subs	r5, r4, r2
 800fa94:	42aa      	cmp	r2, r5
 800fa96:	dae2      	bge.n	800fa5e <__utoa+0x36>
 800fa98:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800fa9c:	780e      	ldrb	r6, [r1, #0]
 800fa9e:	7006      	strb	r6, [r0, #0]
 800faa0:	3201      	adds	r2, #1
 800faa2:	f801 5901 	strb.w	r5, [r1], #-1
 800faa6:	e7f4      	b.n	800fa92 <__utoa+0x6a>
 800faa8:	0800fb4c 	.word	0x0800fb4c

0800faac <_init>:
 800faac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faae:	bf00      	nop
 800fab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fab2:	bc08      	pop	{r3}
 800fab4:	469e      	mov	lr, r3
 800fab6:	4770      	bx	lr

0800fab8 <_fini>:
 800fab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faba:	bf00      	nop
 800fabc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fabe:	bc08      	pop	{r3}
 800fac0:	469e      	mov	lr, r3
 800fac2:	4770      	bx	lr
