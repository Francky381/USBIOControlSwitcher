
USBIOControlSwitcher.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a284  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800a550  0800a550  0001a550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a5e0  0800a5e0  0001a5e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a5e8  0800a5e8  0001a5e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a5ec  0800a5ec  0001a5ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000188  24000000  0800a5f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000188  0800a778  00020188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240001e8  0800a7d8  000201e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cac  24000248  0800a838  00020248  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24001ef4  0800a838  00021ef4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d1e7  00000000  00000000  00020276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047ae  00000000  00000000  0004d45d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  00051c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c8  00000000  00000000  00052f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035d7d  00000000  00000000  000540f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a12f  00000000  00000000  00089e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014a898  00000000  00000000  000a3fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ee83c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fac  00000000  00000000  001ee890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000248 	.word	0x24000248
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800a538 	.word	0x0800a538

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	2400024c 	.word	0x2400024c
 8000308:	0800a538 	.word	0x0800a538

0800030c <strlen>:
 800030c:	4603      	mov	r3, r0
 800030e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000312:	2a00      	cmp	r2, #0
 8000314:	d1fb      	bne.n	800030e <strlen+0x2>
 8000316:	1a18      	subs	r0, r3, r0
 8000318:	3801      	subs	r0, #1
 800031a:	4770      	bx	lr

0800031c <__aeabi_uldivmod>:
 800031c:	b953      	cbnz	r3, 8000334 <__aeabi_uldivmod+0x18>
 800031e:	b94a      	cbnz	r2, 8000334 <__aeabi_uldivmod+0x18>
 8000320:	2900      	cmp	r1, #0
 8000322:	bf08      	it	eq
 8000324:	2800      	cmpeq	r0, #0
 8000326:	bf1c      	itt	ne
 8000328:	f04f 31ff 	movne.w	r1, #4294967295
 800032c:	f04f 30ff 	movne.w	r0, #4294967295
 8000330:	f000 b96e 	b.w	8000610 <__aeabi_idiv0>
 8000334:	f1ad 0c08 	sub.w	ip, sp, #8
 8000338:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033c:	f000 f806 	bl	800034c <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4770      	bx	lr

0800034c <__udivmoddi4>:
 800034c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000350:	9d08      	ldr	r5, [sp, #32]
 8000352:	4604      	mov	r4, r0
 8000354:	468c      	mov	ip, r1
 8000356:	2b00      	cmp	r3, #0
 8000358:	f040 8083 	bne.w	8000462 <__udivmoddi4+0x116>
 800035c:	428a      	cmp	r2, r1
 800035e:	4617      	mov	r7, r2
 8000360:	d947      	bls.n	80003f2 <__udivmoddi4+0xa6>
 8000362:	fab2 f282 	clz	r2, r2
 8000366:	b142      	cbz	r2, 800037a <__udivmoddi4+0x2e>
 8000368:	f1c2 0020 	rsb	r0, r2, #32
 800036c:	fa24 f000 	lsr.w	r0, r4, r0
 8000370:	4091      	lsls	r1, r2
 8000372:	4097      	lsls	r7, r2
 8000374:	ea40 0c01 	orr.w	ip, r0, r1
 8000378:	4094      	lsls	r4, r2
 800037a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800037e:	0c23      	lsrs	r3, r4, #16
 8000380:	fbbc f6f8 	udiv	r6, ip, r8
 8000384:	fa1f fe87 	uxth.w	lr, r7
 8000388:	fb08 c116 	mls	r1, r8, r6, ip
 800038c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000390:	fb06 f10e 	mul.w	r1, r6, lr
 8000394:	4299      	cmp	r1, r3
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x60>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 30ff 	add.w	r0, r6, #4294967295
 800039e:	f080 8119 	bcs.w	80005d4 <__udivmoddi4+0x288>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 8116 	bls.w	80005d4 <__udivmoddi4+0x288>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b2a4      	uxth	r4, r4
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003bc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x8c>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ca:	f080 8105 	bcs.w	80005d8 <__udivmoddi4+0x28c>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	f240 8102 	bls.w	80005d8 <__udivmoddi4+0x28c>
 80003d4:	3802      	subs	r0, #2
 80003d6:	443c      	add	r4, r7
 80003d8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003dc:	eba4 040e 	sub.w	r4, r4, lr
 80003e0:	2600      	movs	r6, #0
 80003e2:	b11d      	cbz	r5, 80003ec <__udivmoddi4+0xa0>
 80003e4:	40d4      	lsrs	r4, r2
 80003e6:	2300      	movs	r3, #0
 80003e8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ec:	4631      	mov	r1, r6
 80003ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xaa>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f282 	clz	r2, r2
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	d150      	bne.n	80004a0 <__udivmoddi4+0x154>
 80003fe:	1bcb      	subs	r3, r1, r7
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	2601      	movs	r6, #1
 800040a:	fbb3 fcfe 	udiv	ip, r3, lr
 800040e:	0c21      	lsrs	r1, r4, #16
 8000410:	fb0e 331c 	mls	r3, lr, ip, r3
 8000414:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000418:	fb08 f30c 	mul.w	r3, r8, ip
 800041c:	428b      	cmp	r3, r1
 800041e:	d907      	bls.n	8000430 <__udivmoddi4+0xe4>
 8000420:	1879      	adds	r1, r7, r1
 8000422:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000426:	d202      	bcs.n	800042e <__udivmoddi4+0xe2>
 8000428:	428b      	cmp	r3, r1
 800042a:	f200 80e9 	bhi.w	8000600 <__udivmoddi4+0x2b4>
 800042e:	4684      	mov	ip, r0
 8000430:	1ac9      	subs	r1, r1, r3
 8000432:	b2a3      	uxth	r3, r4
 8000434:	fbb1 f0fe 	udiv	r0, r1, lr
 8000438:	fb0e 1110 	mls	r1, lr, r0, r1
 800043c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000440:	fb08 f800 	mul.w	r8, r8, r0
 8000444:	45a0      	cmp	r8, r4
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x10c>
 8000448:	193c      	adds	r4, r7, r4
 800044a:	f100 33ff 	add.w	r3, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x10a>
 8000450:	45a0      	cmp	r8, r4
 8000452:	f200 80d9 	bhi.w	8000608 <__udivmoddi4+0x2bc>
 8000456:	4618      	mov	r0, r3
 8000458:	eba4 0408 	sub.w	r4, r4, r8
 800045c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000460:	e7bf      	b.n	80003e2 <__udivmoddi4+0x96>
 8000462:	428b      	cmp	r3, r1
 8000464:	d909      	bls.n	800047a <__udivmoddi4+0x12e>
 8000466:	2d00      	cmp	r5, #0
 8000468:	f000 80b1 	beq.w	80005ce <__udivmoddi4+0x282>
 800046c:	2600      	movs	r6, #0
 800046e:	e9c5 0100 	strd	r0, r1, [r5]
 8000472:	4630      	mov	r0, r6
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	fab3 f683 	clz	r6, r3
 800047e:	2e00      	cmp	r6, #0
 8000480:	d14a      	bne.n	8000518 <__udivmoddi4+0x1cc>
 8000482:	428b      	cmp	r3, r1
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0x140>
 8000486:	4282      	cmp	r2, r0
 8000488:	f200 80b8 	bhi.w	80005fc <__udivmoddi4+0x2b0>
 800048c:	1a84      	subs	r4, r0, r2
 800048e:	eb61 0103 	sbc.w	r1, r1, r3
 8000492:	2001      	movs	r0, #1
 8000494:	468c      	mov	ip, r1
 8000496:	2d00      	cmp	r5, #0
 8000498:	d0a8      	beq.n	80003ec <__udivmoddi4+0xa0>
 800049a:	e9c5 4c00 	strd	r4, ip, [r5]
 800049e:	e7a5      	b.n	80003ec <__udivmoddi4+0xa0>
 80004a0:	f1c2 0320 	rsb	r3, r2, #32
 80004a4:	fa20 f603 	lsr.w	r6, r0, r3
 80004a8:	4097      	lsls	r7, r2
 80004aa:	fa01 f002 	lsl.w	r0, r1, r2
 80004ae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b2:	40d9      	lsrs	r1, r3
 80004b4:	4330      	orrs	r0, r6
 80004b6:	0c03      	lsrs	r3, r0, #16
 80004b8:	fbb1 f6fe 	udiv	r6, r1, lr
 80004bc:	fa1f f887 	uxth.w	r8, r7
 80004c0:	fb0e 1116 	mls	r1, lr, r6, r1
 80004c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c8:	fb06 f108 	mul.w	r1, r6, r8
 80004cc:	4299      	cmp	r1, r3
 80004ce:	fa04 f402 	lsl.w	r4, r4, r2
 80004d2:	d909      	bls.n	80004e8 <__udivmoddi4+0x19c>
 80004d4:	18fb      	adds	r3, r7, r3
 80004d6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004da:	f080 808d 	bcs.w	80005f8 <__udivmoddi4+0x2ac>
 80004de:	4299      	cmp	r1, r3
 80004e0:	f240 808a 	bls.w	80005f8 <__udivmoddi4+0x2ac>
 80004e4:	3e02      	subs	r6, #2
 80004e6:	443b      	add	r3, r7
 80004e8:	1a5b      	subs	r3, r3, r1
 80004ea:	b281      	uxth	r1, r0
 80004ec:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004f8:	fb00 f308 	mul.w	r3, r0, r8
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d907      	bls.n	8000510 <__udivmoddi4+0x1c4>
 8000500:	1879      	adds	r1, r7, r1
 8000502:	f100 3cff 	add.w	ip, r0, #4294967295
 8000506:	d273      	bcs.n	80005f0 <__udivmoddi4+0x2a4>
 8000508:	428b      	cmp	r3, r1
 800050a:	d971      	bls.n	80005f0 <__udivmoddi4+0x2a4>
 800050c:	3802      	subs	r0, #2
 800050e:	4439      	add	r1, r7
 8000510:	1acb      	subs	r3, r1, r3
 8000512:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000516:	e778      	b.n	800040a <__udivmoddi4+0xbe>
 8000518:	f1c6 0c20 	rsb	ip, r6, #32
 800051c:	fa03 f406 	lsl.w	r4, r3, r6
 8000520:	fa22 f30c 	lsr.w	r3, r2, ip
 8000524:	431c      	orrs	r4, r3
 8000526:	fa20 f70c 	lsr.w	r7, r0, ip
 800052a:	fa01 f306 	lsl.w	r3, r1, r6
 800052e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000532:	fa21 f10c 	lsr.w	r1, r1, ip
 8000536:	431f      	orrs	r7, r3
 8000538:	0c3b      	lsrs	r3, r7, #16
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fa1f f884 	uxth.w	r8, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800054a:	fb09 fa08 	mul.w	sl, r9, r8
 800054e:	458a      	cmp	sl, r1
 8000550:	fa02 f206 	lsl.w	r2, r2, r6
 8000554:	fa00 f306 	lsl.w	r3, r0, r6
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x220>
 800055a:	1861      	adds	r1, r4, r1
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	d248      	bcs.n	80005f4 <__udivmoddi4+0x2a8>
 8000562:	458a      	cmp	sl, r1
 8000564:	d946      	bls.n	80005f4 <__udivmoddi4+0x2a8>
 8000566:	f1a9 0902 	sub.w	r9, r9, #2
 800056a:	4421      	add	r1, r4
 800056c:	eba1 010a 	sub.w	r1, r1, sl
 8000570:	b2bf      	uxth	r7, r7
 8000572:	fbb1 f0fe 	udiv	r0, r1, lr
 8000576:	fb0e 1110 	mls	r1, lr, r0, r1
 800057a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800057e:	fb00 f808 	mul.w	r8, r0, r8
 8000582:	45b8      	cmp	r8, r7
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x24a>
 8000586:	19e7      	adds	r7, r4, r7
 8000588:	f100 31ff 	add.w	r1, r0, #4294967295
 800058c:	d22e      	bcs.n	80005ec <__udivmoddi4+0x2a0>
 800058e:	45b8      	cmp	r8, r7
 8000590:	d92c      	bls.n	80005ec <__udivmoddi4+0x2a0>
 8000592:	3802      	subs	r0, #2
 8000594:	4427      	add	r7, r4
 8000596:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059a:	eba7 0708 	sub.w	r7, r7, r8
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	454f      	cmp	r7, r9
 80005a4:	46c6      	mov	lr, r8
 80005a6:	4649      	mov	r1, r9
 80005a8:	d31a      	bcc.n	80005e0 <__udivmoddi4+0x294>
 80005aa:	d017      	beq.n	80005dc <__udivmoddi4+0x290>
 80005ac:	b15d      	cbz	r5, 80005c6 <__udivmoddi4+0x27a>
 80005ae:	ebb3 020e 	subs.w	r2, r3, lr
 80005b2:	eb67 0701 	sbc.w	r7, r7, r1
 80005b6:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ba:	40f2      	lsrs	r2, r6
 80005bc:	ea4c 0202 	orr.w	r2, ip, r2
 80005c0:	40f7      	lsrs	r7, r6
 80005c2:	e9c5 2700 	strd	r2, r7, [r5]
 80005c6:	2600      	movs	r6, #0
 80005c8:	4631      	mov	r1, r6
 80005ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ce:	462e      	mov	r6, r5
 80005d0:	4628      	mov	r0, r5
 80005d2:	e70b      	b.n	80003ec <__udivmoddi4+0xa0>
 80005d4:	4606      	mov	r6, r0
 80005d6:	e6e9      	b.n	80003ac <__udivmoddi4+0x60>
 80005d8:	4618      	mov	r0, r3
 80005da:	e6fd      	b.n	80003d8 <__udivmoddi4+0x8c>
 80005dc:	4543      	cmp	r3, r8
 80005de:	d2e5      	bcs.n	80005ac <__udivmoddi4+0x260>
 80005e0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005e4:	eb69 0104 	sbc.w	r1, r9, r4
 80005e8:	3801      	subs	r0, #1
 80005ea:	e7df      	b.n	80005ac <__udivmoddi4+0x260>
 80005ec:	4608      	mov	r0, r1
 80005ee:	e7d2      	b.n	8000596 <__udivmoddi4+0x24a>
 80005f0:	4660      	mov	r0, ip
 80005f2:	e78d      	b.n	8000510 <__udivmoddi4+0x1c4>
 80005f4:	4681      	mov	r9, r0
 80005f6:	e7b9      	b.n	800056c <__udivmoddi4+0x220>
 80005f8:	4666      	mov	r6, ip
 80005fa:	e775      	b.n	80004e8 <__udivmoddi4+0x19c>
 80005fc:	4630      	mov	r0, r6
 80005fe:	e74a      	b.n	8000496 <__udivmoddi4+0x14a>
 8000600:	f1ac 0c02 	sub.w	ip, ip, #2
 8000604:	4439      	add	r1, r7
 8000606:	e713      	b.n	8000430 <__udivmoddi4+0xe4>
 8000608:	3802      	subs	r0, #2
 800060a:	443c      	add	r4, r7
 800060c:	e724      	b.n	8000458 <__udivmoddi4+0x10c>
 800060e:	bf00      	nop

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b598      	push	{r3, r4, r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000618:	f000 fc2c 	bl	8000e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061c:	f000 f81c 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000620:	f000 f922 	bl	8000868 <MX_GPIO_Init>
  MX_ETH_Init();
 8000624:	f000 f888 	bl	8000738 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000628:	f000 f8d2 	bl	80007d0 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 800062c:	f009 f9e0 	bl	80099f0 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	CDC_Transmit_HS((uint8_t *) data, strlen(data));
 8000630:	4b08      	ldr	r3, [pc, #32]	; (8000654 <main+0x40>)
 8000632:	681c      	ldr	r4, [r3, #0]
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <main+0x40>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff fe67 	bl	800030c <strlen>
 800063e:	4603      	mov	r3, r0
 8000640:	b29b      	uxth	r3, r3
 8000642:	4619      	mov	r1, r3
 8000644:	4620      	mov	r0, r4
 8000646:	f009 faa9 	bl	8009b9c <CDC_Transmit_HS>
	HAL_Delay(1000);
 800064a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800064e:	f000 fca3 	bl	8000f98 <HAL_Delay>
	CDC_Transmit_HS((uint8_t *) data, strlen(data));
 8000652:	e7ed      	b.n	8000630 <main+0x1c>
 8000654:	24000000 	.word	0x24000000

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b09c      	sub	sp, #112	; 0x70
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000662:	224c      	movs	r2, #76	; 0x4c
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f009 ff5e 	bl	800a528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2220      	movs	r2, #32
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f009 ff58 	bl	800a528 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000678:	2002      	movs	r0, #2
 800067a:	f002 fd7b 	bl	8003174 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800067e:	2300      	movs	r3, #0
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	4b2c      	ldr	r3, [pc, #176]	; (8000734 <SystemClock_Config+0xdc>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	4a2b      	ldr	r2, [pc, #172]	; (8000734 <SystemClock_Config+0xdc>)
 8000688:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800068c:	6193      	str	r3, [r2, #24]
 800068e:	4b29      	ldr	r3, [pc, #164]	; (8000734 <SystemClock_Config+0xdc>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800069a:	bf00      	nop
 800069c:	4b25      	ldr	r3, [pc, #148]	; (8000734 <SystemClock_Config+0xdc>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006a8:	d1f8      	bne.n	800069c <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006aa:	2321      	movs	r3, #33	; 0x21
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006ae:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006bc:	2302      	movs	r3, #2
 80006be:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006c0:	2304      	movs	r3, #4
 80006c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80006c4:	f240 1313 	movw	r3, #275	; 0x113
 80006c8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ce:	2304      	movs	r3, #4
 80006d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80006d6:	2304      	movs	r3, #4
 80006d8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006da:	2300      	movs	r3, #0
 80006dc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e6:	4618      	mov	r0, r3
 80006e8:	f002 fd8e 	bl	8003208 <HAL_RCC_OscConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006f2:	f000 f995 	bl	8000a20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	233f      	movs	r3, #63	; 0x3f
 80006f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2303      	movs	r3, #3
 80006fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000702:	2308      	movs	r3, #8
 8000704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000706:	2340      	movs	r3, #64	; 0x40
 8000708:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800070a:	2340      	movs	r3, #64	; 0x40
 800070c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800070e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000712:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000714:	2340      	movs	r3, #64	; 0x40
 8000716:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2103      	movs	r1, #3
 800071c:	4618      	mov	r0, r3
 800071e:	f003 f91f 	bl	8003960 <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000728:	f000 f97a 	bl	8000a20 <Error_Handler>
  }
}
 800072c:	bf00      	nop
 800072e:	3770      	adds	r7, #112	; 0x70
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	58024800 	.word	0x58024800

08000738 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800073c:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <MX_ETH_Init+0x80>)
 800073e:	4a1f      	ldr	r2, [pc, #124]	; (80007bc <MX_ETH_Init+0x84>)
 8000740:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000742:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <MX_ETH_Init+0x88>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000748:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <MX_ETH_Init+0x88>)
 800074a:	2280      	movs	r2, #128	; 0x80
 800074c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800074e:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <MX_ETH_Init+0x88>)
 8000750:	22e1      	movs	r2, #225	; 0xe1
 8000752:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000754:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <MX_ETH_Init+0x88>)
 8000756:	2200      	movs	r2, #0
 8000758:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800075a:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <MX_ETH_Init+0x88>)
 800075c:	2200      	movs	r2, #0
 800075e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <MX_ETH_Init+0x88>)
 8000762:	2200      	movs	r2, #0
 8000764:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_ETH_Init+0x80>)
 8000768:	4a15      	ldr	r2, [pc, #84]	; (80007c0 <MX_ETH_Init+0x88>)
 800076a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_ETH_Init+0x80>)
 800076e:	2201      	movs	r2, #1
 8000770:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_ETH_Init+0x80>)
 8000774:	4a13      	ldr	r2, [pc, #76]	; (80007c4 <MX_ETH_Init+0x8c>)
 8000776:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_ETH_Init+0x80>)
 800077a:	4a13      	ldr	r2, [pc, #76]	; (80007c8 <MX_ETH_Init+0x90>)
 800077c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_ETH_Init+0x80>)
 8000780:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000784:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000786:	480c      	ldr	r0, [pc, #48]	; (80007b8 <MX_ETH_Init+0x80>)
 8000788:	f000 fd4e 	bl	8001228 <HAL_ETH_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000792:	f000 f945 	bl	8000a20 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000796:	2234      	movs	r2, #52	; 0x34
 8000798:	2100      	movs	r1, #0
 800079a:	480c      	ldr	r0, [pc, #48]	; (80007cc <MX_ETH_Init+0x94>)
 800079c:	f009 fec4 	bl	800a528 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <MX_ETH_Init+0x94>)
 80007a2:	2221      	movs	r2, #33	; 0x21
 80007a4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_ETH_Init+0x94>)
 80007a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007ac:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007ae:	4b07      	ldr	r3, [pc, #28]	; (80007cc <MX_ETH_Init+0x94>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	2400055c 	.word	0x2400055c
 80007bc:	40028000 	.word	0x40028000
 80007c0:	24000264 	.word	0x24000264
 80007c4:	240001e8 	.word	0x240001e8
 80007c8:	24000188 	.word	0x24000188
 80007cc:	240005e4 	.word	0x240005e4

080007d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007d4:	4b22      	ldr	r3, [pc, #136]	; (8000860 <MX_USART3_UART_Init+0x90>)
 80007d6:	4a23      	ldr	r2, [pc, #140]	; (8000864 <MX_USART3_UART_Init+0x94>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007da:	4b21      	ldr	r3, [pc, #132]	; (8000860 <MX_USART3_UART_Init+0x90>)
 80007dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <MX_USART3_UART_Init+0x90>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <MX_USART3_UART_Init+0x90>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <MX_USART3_UART_Init+0x90>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <MX_USART3_UART_Init+0x90>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b19      	ldr	r3, [pc, #100]	; (8000860 <MX_USART3_UART_Init+0x90>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <MX_USART3_UART_Init+0x90>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <MX_USART3_UART_Init+0x90>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_USART3_UART_Init+0x90>)
 800080e:	2200      	movs	r2, #0
 8000810:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <MX_USART3_UART_Init+0x90>)
 8000814:	2200      	movs	r2, #0
 8000816:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000818:	4811      	ldr	r0, [pc, #68]	; (8000860 <MX_USART3_UART_Init+0x90>)
 800081a:	f004 ff49 	bl	80056b0 <HAL_UART_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000824:	f000 f8fc 	bl	8000a20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000828:	2100      	movs	r1, #0
 800082a:	480d      	ldr	r0, [pc, #52]	; (8000860 <MX_USART3_UART_Init+0x90>)
 800082c:	f005 ffdc 	bl	80067e8 <HAL_UARTEx_SetTxFifoThreshold>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000836:	f000 f8f3 	bl	8000a20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800083a:	2100      	movs	r1, #0
 800083c:	4808      	ldr	r0, [pc, #32]	; (8000860 <MX_USART3_UART_Init+0x90>)
 800083e:	f006 f811 	bl	8006864 <HAL_UARTEx_SetRxFifoThreshold>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000848:	f000 f8ea 	bl	8000a20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <MX_USART3_UART_Init+0x90>)
 800084e:	f005 ff92 	bl	8006776 <HAL_UARTEx_DisableFifoMode>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000858:	f000 f8e2 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	2400048c 	.word	0x2400048c
 8000864:	40004800 	.word	0x40004800

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08c      	sub	sp, #48	; 0x30
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	4b62      	ldr	r3, [pc, #392]	; (8000a08 <MX_GPIO_Init+0x1a0>)
 8000880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000884:	4a60      	ldr	r2, [pc, #384]	; (8000a08 <MX_GPIO_Init+0x1a0>)
 8000886:	f043 0304 	orr.w	r3, r3, #4
 800088a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800088e:	4b5e      	ldr	r3, [pc, #376]	; (8000a08 <MX_GPIO_Init+0x1a0>)
 8000890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000894:	f003 0304 	and.w	r3, r3, #4
 8000898:	61bb      	str	r3, [r7, #24]
 800089a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089c:	4b5a      	ldr	r3, [pc, #360]	; (8000a08 <MX_GPIO_Init+0x1a0>)
 800089e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a2:	4a59      	ldr	r2, [pc, #356]	; (8000a08 <MX_GPIO_Init+0x1a0>)
 80008a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ac:	4b56      	ldr	r3, [pc, #344]	; (8000a08 <MX_GPIO_Init+0x1a0>)
 80008ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4b53      	ldr	r3, [pc, #332]	; (8000a08 <MX_GPIO_Init+0x1a0>)
 80008bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c0:	4a51      	ldr	r2, [pc, #324]	; (8000a08 <MX_GPIO_Init+0x1a0>)
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ca:	4b4f      	ldr	r3, [pc, #316]	; (8000a08 <MX_GPIO_Init+0x1a0>)
 80008cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d8:	4b4b      	ldr	r3, [pc, #300]	; (8000a08 <MX_GPIO_Init+0x1a0>)
 80008da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008de:	4a4a      	ldr	r2, [pc, #296]	; (8000a08 <MX_GPIO_Init+0x1a0>)
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008e8:	4b47      	ldr	r3, [pc, #284]	; (8000a08 <MX_GPIO_Init+0x1a0>)
 80008ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f6:	4b44      	ldr	r3, [pc, #272]	; (8000a08 <MX_GPIO_Init+0x1a0>)
 80008f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fc:	4a42      	ldr	r2, [pc, #264]	; (8000a08 <MX_GPIO_Init+0x1a0>)
 80008fe:	f043 0308 	orr.w	r3, r3, #8
 8000902:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000906:	4b40      	ldr	r3, [pc, #256]	; (8000a08 <MX_GPIO_Init+0x1a0>)
 8000908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090c:	f003 0308 	and.w	r3, r3, #8
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000914:	4b3c      	ldr	r3, [pc, #240]	; (8000a08 <MX_GPIO_Init+0x1a0>)
 8000916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091a:	4a3b      	ldr	r2, [pc, #236]	; (8000a08 <MX_GPIO_Init+0x1a0>)
 800091c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000920:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000924:	4b38      	ldr	r3, [pc, #224]	; (8000a08 <MX_GPIO_Init+0x1a0>)
 8000926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000932:	4b35      	ldr	r3, [pc, #212]	; (8000a08 <MX_GPIO_Init+0x1a0>)
 8000934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000938:	4a33      	ldr	r2, [pc, #204]	; (8000a08 <MX_GPIO_Init+0x1a0>)
 800093a:	f043 0310 	orr.w	r3, r3, #16
 800093e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000942:	4b31      	ldr	r3, [pc, #196]	; (8000a08 <MX_GPIO_Init+0x1a0>)
 8000944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000948:	f003 0310 	and.w	r3, r3, #16
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	f244 0101 	movw	r1, #16385	; 0x4001
 8000956:	482d      	ldr	r0, [pc, #180]	; (8000a0c <MX_GPIO_Init+0x1a4>)
 8000958:	f001 fa24 	bl	8001da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000962:	482b      	ldr	r0, [pc, #172]	; (8000a10 <MX_GPIO_Init+0x1a8>)
 8000964:	f001 fa1e 	bl	8001da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	2102      	movs	r1, #2
 800096c:	4829      	ldr	r0, [pc, #164]	; (8000a14 <MX_GPIO_Init+0x1ac>)
 800096e:	f001 fa19 	bl	8001da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000972:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	4619      	mov	r1, r3
 8000986:	4824      	ldr	r0, [pc, #144]	; (8000a18 <MX_GPIO_Init+0x1b0>)
 8000988:	f001 f864 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 800098c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	4819      	ldr	r0, [pc, #100]	; (8000a0c <MX_GPIO_Init+0x1a4>)
 80009a6:	f001 f855 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80009aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	4813      	ldr	r0, [pc, #76]	; (8000a10 <MX_GPIO_Init+0x1a8>)
 80009c4:	f001 f846 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80009c8:	2380      	movs	r3, #128	; 0x80
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	480f      	ldr	r0, [pc, #60]	; (8000a1c <MX_GPIO_Init+0x1b4>)
 80009de:	f001 f839 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 80009e2:	2302      	movs	r3, #2
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4806      	ldr	r0, [pc, #24]	; (8000a14 <MX_GPIO_Init+0x1ac>)
 80009fa:	f001 f82b 	bl	8001a54 <HAL_GPIO_Init>

}
 80009fe:	bf00      	nop
 8000a00:	3730      	adds	r7, #48	; 0x30
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	58024400 	.word	0x58024400
 8000a0c:	58020400 	.word	0x58020400
 8000a10:	58020c00 	.word	0x58020c00
 8000a14:	58021000 	.word	0x58021000
 8000a18:	58020800 	.word	0x58020800
 8000a1c:	58021800 	.word	0x58021800

08000a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a24:	b672      	cpsid	i
}
 8000a26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <Error_Handler+0x8>
	...

08000a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a32:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <HAL_MspInit+0x30>)
 8000a34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a38:	4a08      	ldr	r2, [pc, #32]	; (8000a5c <HAL_MspInit+0x30>)
 8000a3a:	f043 0302 	orr.w	r3, r3, #2
 8000a3e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_MspInit+0x30>)
 8000a44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a48:	f003 0302 	and.w	r3, r3, #2
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	58024400 	.word	0x58024400

08000a60 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08e      	sub	sp, #56	; 0x38
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a59      	ldr	r2, [pc, #356]	; (8000be4 <HAL_ETH_MspInit+0x184>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	f040 80ab 	bne.w	8000bda <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000a84:	4b58      	ldr	r3, [pc, #352]	; (8000be8 <HAL_ETH_MspInit+0x188>)
 8000a86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a8a:	4a57      	ldr	r2, [pc, #348]	; (8000be8 <HAL_ETH_MspInit+0x188>)
 8000a8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a90:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a94:	4b54      	ldr	r3, [pc, #336]	; (8000be8 <HAL_ETH_MspInit+0x188>)
 8000a96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a9e:	623b      	str	r3, [r7, #32]
 8000aa0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000aa2:	4b51      	ldr	r3, [pc, #324]	; (8000be8 <HAL_ETH_MspInit+0x188>)
 8000aa4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000aa8:	4a4f      	ldr	r2, [pc, #316]	; (8000be8 <HAL_ETH_MspInit+0x188>)
 8000aaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000aae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ab2:	4b4d      	ldr	r3, [pc, #308]	; (8000be8 <HAL_ETH_MspInit+0x188>)
 8000ab4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000abc:	61fb      	str	r3, [r7, #28]
 8000abe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000ac0:	4b49      	ldr	r3, [pc, #292]	; (8000be8 <HAL_ETH_MspInit+0x188>)
 8000ac2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ac6:	4a48      	ldr	r2, [pc, #288]	; (8000be8 <HAL_ETH_MspInit+0x188>)
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000acc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ad0:	4b45      	ldr	r3, [pc, #276]	; (8000be8 <HAL_ETH_MspInit+0x188>)
 8000ad2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ada:	61bb      	str	r3, [r7, #24]
 8000adc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ade:	4b42      	ldr	r3, [pc, #264]	; (8000be8 <HAL_ETH_MspInit+0x188>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae4:	4a40      	ldr	r2, [pc, #256]	; (8000be8 <HAL_ETH_MspInit+0x188>)
 8000ae6:	f043 0304 	orr.w	r3, r3, #4
 8000aea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aee:	4b3e      	ldr	r3, [pc, #248]	; (8000be8 <HAL_ETH_MspInit+0x188>)
 8000af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af4:	f003 0304 	and.w	r3, r3, #4
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afc:	4b3a      	ldr	r3, [pc, #232]	; (8000be8 <HAL_ETH_MspInit+0x188>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b02:	4a39      	ldr	r2, [pc, #228]	; (8000be8 <HAL_ETH_MspInit+0x188>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b0c:	4b36      	ldr	r3, [pc, #216]	; (8000be8 <HAL_ETH_MspInit+0x188>)
 8000b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	4b33      	ldr	r3, [pc, #204]	; (8000be8 <HAL_ETH_MspInit+0x188>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b20:	4a31      	ldr	r2, [pc, #196]	; (8000be8 <HAL_ETH_MspInit+0x188>)
 8000b22:	f043 0302 	orr.w	r3, r3, #2
 8000b26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b2a:	4b2f      	ldr	r3, [pc, #188]	; (8000be8 <HAL_ETH_MspInit+0x188>)
 8000b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b30:	f003 0302 	and.w	r3, r3, #2
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b38:	4b2b      	ldr	r3, [pc, #172]	; (8000be8 <HAL_ETH_MspInit+0x188>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3e:	4a2a      	ldr	r2, [pc, #168]	; (8000be8 <HAL_ETH_MspInit+0x188>)
 8000b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b48:	4b27      	ldr	r3, [pc, #156]	; (8000be8 <HAL_ETH_MspInit+0x188>)
 8000b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b56:	2332      	movs	r3, #50	; 0x32
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b66:	230b      	movs	r3, #11
 8000b68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6e:	4619      	mov	r1, r3
 8000b70:	481e      	ldr	r0, [pc, #120]	; (8000bec <HAL_ETH_MspInit+0x18c>)
 8000b72:	f000 ff6f 	bl	8001a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b76:	2386      	movs	r3, #134	; 0x86
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b86:	230b      	movs	r3, #11
 8000b88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4817      	ldr	r0, [pc, #92]	; (8000bf0 <HAL_ETH_MspInit+0x190>)
 8000b92:	f000 ff5f 	bl	8001a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ba8:	230b      	movs	r3, #11
 8000baa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4810      	ldr	r0, [pc, #64]	; (8000bf4 <HAL_ETH_MspInit+0x194>)
 8000bb4:	f000 ff4e 	bl	8001a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000bb8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bca:	230b      	movs	r3, #11
 8000bcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <HAL_ETH_MspInit+0x198>)
 8000bd6:	f000 ff3d 	bl	8001a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000bda:	bf00      	nop
 8000bdc:	3738      	adds	r7, #56	; 0x38
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40028000 	.word	0x40028000
 8000be8:	58024400 	.word	0x58024400
 8000bec:	58020800 	.word	0x58020800
 8000bf0:	58020000 	.word	0x58020000
 8000bf4:	58020400 	.word	0x58020400
 8000bf8:	58021800 	.word	0x58021800

08000bfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b0b6      	sub	sp, #216	; 0xd8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c14:	f107 0310 	add.w	r3, r7, #16
 8000c18:	22b4      	movs	r2, #180	; 0xb4
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f009 fc83 	bl	800a528 <memset>
  if(huart->Instance==USART3)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a25      	ldr	r2, [pc, #148]	; (8000cbc <HAL_UART_MspInit+0xc0>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d142      	bne.n	8000cb2 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c36:	f107 0310 	add.w	r3, r7, #16
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f003 fa1c 	bl	8004078 <HAL_RCCEx_PeriphCLKConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c46:	f7ff feeb 	bl	8000a20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c4a:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <HAL_UART_MspInit+0xc4>)
 8000c4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c50:	4a1b      	ldr	r2, [pc, #108]	; (8000cc0 <HAL_UART_MspInit+0xc4>)
 8000c52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c5a:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <HAL_UART_MspInit+0xc4>)
 8000c5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c68:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <HAL_UART_MspInit+0xc4>)
 8000c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6e:	4a14      	ldr	r2, [pc, #80]	; (8000cc0 <HAL_UART_MspInit+0xc4>)
 8000c70:	f043 0308 	orr.w	r3, r3, #8
 8000c74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <HAL_UART_MspInit+0xc4>)
 8000c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7e:	f003 0308 	and.w	r3, r3, #8
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000c86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ca0:	2307      	movs	r3, #7
 8000ca2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <HAL_UART_MspInit+0xc8>)
 8000cae:	f000 fed1 	bl	8001a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cb2:	bf00      	nop
 8000cb4:	37d8      	adds	r7, #216	; 0xd8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40004800 	.word	0x40004800
 8000cc0:	58024400 	.word	0x58024400
 8000cc4:	58020c00 	.word	0x58020c00

08000cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <NMI_Handler+0x4>

08000cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <HardFault_Handler+0x4>

08000cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <MemManage_Handler+0x4>

08000cda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <BusFault_Handler+0x4>

08000ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <UsageFault_Handler+0x4>

08000ce6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d14:	f000 f920 	bl	8000f58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <OTG_HS_IRQHandler+0x10>)
 8000d22:	f001 f9af 	bl	8002084 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	24001aec 	.word	0x24001aec

08000d30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d34:	4b32      	ldr	r3, [pc, #200]	; (8000e00 <SystemInit+0xd0>)
 8000d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d3a:	4a31      	ldr	r2, [pc, #196]	; (8000e00 <SystemInit+0xd0>)
 8000d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d44:	4b2f      	ldr	r3, [pc, #188]	; (8000e04 <SystemInit+0xd4>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 030f 	and.w	r3, r3, #15
 8000d4c:	2b06      	cmp	r3, #6
 8000d4e:	d807      	bhi.n	8000d60 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d50:	4b2c      	ldr	r3, [pc, #176]	; (8000e04 <SystemInit+0xd4>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f023 030f 	bic.w	r3, r3, #15
 8000d58:	4a2a      	ldr	r2, [pc, #168]	; (8000e04 <SystemInit+0xd4>)
 8000d5a:	f043 0307 	orr.w	r3, r3, #7
 8000d5e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d60:	4b29      	ldr	r3, [pc, #164]	; (8000e08 <SystemInit+0xd8>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a28      	ldr	r2, [pc, #160]	; (8000e08 <SystemInit+0xd8>)
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d6c:	4b26      	ldr	r3, [pc, #152]	; (8000e08 <SystemInit+0xd8>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d72:	4b25      	ldr	r3, [pc, #148]	; (8000e08 <SystemInit+0xd8>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	4924      	ldr	r1, [pc, #144]	; (8000e08 <SystemInit+0xd8>)
 8000d78:	4b24      	ldr	r3, [pc, #144]	; (8000e0c <SystemInit+0xdc>)
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d7e:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <SystemInit+0xd4>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 0308 	and.w	r3, r3, #8
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d007      	beq.n	8000d9a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d8a:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <SystemInit+0xd4>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f023 030f 	bic.w	r3, r3, #15
 8000d92:	4a1c      	ldr	r2, [pc, #112]	; (8000e04 <SystemInit+0xd4>)
 8000d94:	f043 0307 	orr.w	r3, r3, #7
 8000d98:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d9a:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <SystemInit+0xd8>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000da0:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <SystemInit+0xd8>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000da6:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <SystemInit+0xd8>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000dac:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <SystemInit+0xd8>)
 8000dae:	4a18      	ldr	r2, [pc, #96]	; (8000e10 <SystemInit+0xe0>)
 8000db0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <SystemInit+0xd8>)
 8000db4:	4a17      	ldr	r2, [pc, #92]	; (8000e14 <SystemInit+0xe4>)
 8000db6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000db8:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <SystemInit+0xd8>)
 8000dba:	4a17      	ldr	r2, [pc, #92]	; (8000e18 <SystemInit+0xe8>)
 8000dbc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <SystemInit+0xd8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000dc4:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <SystemInit+0xd8>)
 8000dc6:	4a14      	ldr	r2, [pc, #80]	; (8000e18 <SystemInit+0xe8>)
 8000dc8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000dca:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <SystemInit+0xd8>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <SystemInit+0xd8>)
 8000dd2:	4a11      	ldr	r2, [pc, #68]	; (8000e18 <SystemInit+0xe8>)
 8000dd4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <SystemInit+0xd8>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <SystemInit+0xd8>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a09      	ldr	r2, [pc, #36]	; (8000e08 <SystemInit+0xd8>)
 8000de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <SystemInit+0xd8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <SystemInit+0xec>)
 8000df0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000df4:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00
 8000e04:	52002000 	.word	0x52002000
 8000e08:	58024400 	.word	0x58024400
 8000e0c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e10:	02020200 	.word	0x02020200
 8000e14:	01ff0000 	.word	0x01ff0000
 8000e18:	01010280 	.word	0x01010280
 8000e1c:	52004000 	.word	0x52004000

08000e20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e24:	f7ff ff84 	bl	8000d30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e28:	480c      	ldr	r0, [pc, #48]	; (8000e5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e2a:	490d      	ldr	r1, [pc, #52]	; (8000e60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	; (8000e64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e30:	e002      	b.n	8000e38 <LoopCopyDataInit>

08000e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e36:	3304      	adds	r3, #4

08000e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e3c:	d3f9      	bcc.n	8000e32 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	; (8000e68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e40:	4c0a      	ldr	r4, [pc, #40]	; (8000e6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e44:	e001      	b.n	8000e4a <LoopFillZerobss>

08000e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e48:	3204      	adds	r2, #4

08000e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e4c:	d3fb      	bcc.n	8000e46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e4e:	f009 fb39 	bl	800a4c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e52:	f7ff fbdf 	bl	8000614 <main>
  bx  lr
 8000e56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e58:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000e5c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e60:	24000188 	.word	0x24000188
  ldr r2, =_sidata
 8000e64:	0800a5f0 	.word	0x0800a5f0
  ldr r2, =_sbss
 8000e68:	24000248 	.word	0x24000248
  ldr r4, =_ebss
 8000e6c:	24001ef4 	.word	0x24001ef4

08000e70 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <ADC3_IRQHandler>
	...

08000e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7a:	2003      	movs	r0, #3
 8000e7c:	f000 f994 	bl	80011a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e80:	f002 ff24 	bl	8003ccc <HAL_RCC_GetSysClockFreq>
 8000e84:	4602      	mov	r2, r0
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <HAL_Init+0x68>)
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	0a1b      	lsrs	r3, r3, #8
 8000e8c:	f003 030f 	and.w	r3, r3, #15
 8000e90:	4913      	ldr	r1, [pc, #76]	; (8000ee0 <HAL_Init+0x6c>)
 8000e92:	5ccb      	ldrb	r3, [r1, r3]
 8000e94:	f003 031f 	and.w	r3, r3, #31
 8000e98:	fa22 f303 	lsr.w	r3, r2, r3
 8000e9c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <HAL_Init+0x68>)
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	f003 030f 	and.w	r3, r3, #15
 8000ea6:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <HAL_Init+0x6c>)
 8000ea8:	5cd3      	ldrb	r3, [r2, r3]
 8000eaa:	f003 031f 	and.w	r3, r3, #31
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000eb4:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <HAL_Init+0x70>)
 8000eb6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000eb8:	4a0b      	ldr	r2, [pc, #44]	; (8000ee8 <HAL_Init+0x74>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	f000 f814 	bl	8000eec <HAL_InitTick>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e002      	b.n	8000ed4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ece:	f7ff fdad 	bl	8000a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	58024400 	.word	0x58024400
 8000ee0:	0800a5a8 	.word	0x0800a5a8
 8000ee4:	24000008 	.word	0x24000008
 8000ee8:	24000004 	.word	0x24000004

08000eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ef4:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <HAL_InitTick+0x60>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d101      	bne.n	8000f00 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e021      	b.n	8000f44 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f00:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <HAL_InitTick+0x64>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <HAL_InitTick+0x60>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 f979 	bl	800120e <HAL_SYSTICK_Config>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e00e      	b.n	8000f44 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b0f      	cmp	r3, #15
 8000f2a:	d80a      	bhi.n	8000f42 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	f04f 30ff 	mov.w	r0, #4294967295
 8000f34:	f000 f943 	bl	80011be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f38:	4a06      	ldr	r2, [pc, #24]	; (8000f54 <HAL_InitTick+0x68>)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	e000      	b.n	8000f44 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	24000010 	.word	0x24000010
 8000f50:	24000004 	.word	0x24000004
 8000f54:	2400000c 	.word	0x2400000c

08000f58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_IncTick+0x20>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_IncTick+0x24>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4413      	add	r3, r2
 8000f68:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <HAL_IncTick+0x24>)
 8000f6a:	6013      	str	r3, [r2, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	24000010 	.word	0x24000010
 8000f7c:	24000618 	.word	0x24000618

08000f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return uwTick;
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <HAL_GetTick+0x14>)
 8000f86:	681b      	ldr	r3, [r3, #0]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	24000618 	.word	0x24000618

08000f98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa0:	f7ff ffee 	bl	8000f80 <HAL_GetTick>
 8000fa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb0:	d005      	beq.n	8000fbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <HAL_Delay+0x44>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4413      	add	r3, r2
 8000fbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fbe:	bf00      	nop
 8000fc0:	f7ff ffde 	bl	8000f80 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d8f7      	bhi.n	8000fc0 <HAL_Delay+0x28>
  {
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	24000010 	.word	0x24000010

08000fe0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8000ff0:	4904      	ldr	r1, [pc, #16]	; (8001004 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	604b      	str	r3, [r1, #4]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	58000400 	.word	0x58000400

08001008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001018:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <__NVIC_SetPriorityGrouping+0x40>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001024:	4013      	ands	r3, r2
 8001026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <__NVIC_SetPriorityGrouping+0x44>)
 8001032:	4313      	orrs	r3, r2
 8001034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001036:	4a04      	ldr	r2, [pc, #16]	; (8001048 <__NVIC_SetPriorityGrouping+0x40>)
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	60d3      	str	r3, [r2, #12]
}
 800103c:	bf00      	nop
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00
 800104c:	05fa0000 	.word	0x05fa0000

08001050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <__NVIC_GetPriorityGrouping+0x18>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	0a1b      	lsrs	r3, r3, #8
 800105a:	f003 0307 	and.w	r3, r3, #7
}
 800105e:	4618      	mov	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001076:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800107a:	2b00      	cmp	r3, #0
 800107c:	db0b      	blt.n	8001096 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	f003 021f 	and.w	r2, r3, #31
 8001084:	4907      	ldr	r1, [pc, #28]	; (80010a4 <__NVIC_EnableIRQ+0x38>)
 8001086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800108a:	095b      	lsrs	r3, r3, #5
 800108c:	2001      	movs	r0, #1
 800108e:	fa00 f202 	lsl.w	r2, r0, r2
 8001092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000e100 	.word	0xe000e100

080010a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	db0a      	blt.n	80010d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	490c      	ldr	r1, [pc, #48]	; (80010f4 <__NVIC_SetPriority+0x4c>)
 80010c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010c6:	0112      	lsls	r2, r2, #4
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	440b      	add	r3, r1
 80010cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d0:	e00a      	b.n	80010e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4908      	ldr	r1, [pc, #32]	; (80010f8 <__NVIC_SetPriority+0x50>)
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	f003 030f 	and.w	r3, r3, #15
 80010de:	3b04      	subs	r3, #4
 80010e0:	0112      	lsls	r2, r2, #4
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	440b      	add	r3, r1
 80010e6:	761a      	strb	r2, [r3, #24]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000e100 	.word	0xe000e100
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f1c3 0307 	rsb	r3, r3, #7
 8001116:	2b04      	cmp	r3, #4
 8001118:	bf28      	it	cs
 800111a:	2304      	movcs	r3, #4
 800111c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3304      	adds	r3, #4
 8001122:	2b06      	cmp	r3, #6
 8001124:	d902      	bls.n	800112c <NVIC_EncodePriority+0x30>
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3b03      	subs	r3, #3
 800112a:	e000      	b.n	800112e <NVIC_EncodePriority+0x32>
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	f04f 32ff 	mov.w	r2, #4294967295
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43da      	mvns	r2, r3
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	401a      	ands	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001144:	f04f 31ff 	mov.w	r1, #4294967295
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	43d9      	mvns	r1, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	4313      	orrs	r3, r2
         );
}
 8001156:	4618      	mov	r0, r3
 8001158:	3724      	adds	r7, #36	; 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001174:	d301      	bcc.n	800117a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001176:	2301      	movs	r3, #1
 8001178:	e00f      	b.n	800119a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <SysTick_Config+0x40>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001182:	210f      	movs	r1, #15
 8001184:	f04f 30ff 	mov.w	r0, #4294967295
 8001188:	f7ff ff8e 	bl	80010a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <SysTick_Config+0x40>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <SysTick_Config+0x40>)
 8001194:	2207      	movs	r2, #7
 8001196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	e000e010 	.word	0xe000e010

080011a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ff29 	bl	8001008 <__NVIC_SetPriorityGrouping>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b086      	sub	sp, #24
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011cc:	f7ff ff40 	bl	8001050 <__NVIC_GetPriorityGrouping>
 80011d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	68b9      	ldr	r1, [r7, #8]
 80011d6:	6978      	ldr	r0, [r7, #20]
 80011d8:	f7ff ff90 	bl	80010fc <NVIC_EncodePriority>
 80011dc:	4602      	mov	r2, r0
 80011de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011e2:	4611      	mov	r1, r2
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff5f 	bl	80010a8 <__NVIC_SetPriority>
}
 80011ea:	bf00      	nop
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff33 	bl	800106c <__NVIC_EnableIRQ>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ffa4 	bl	8001164 <SysTick_Config>
 800121c:	4603      	mov	r3, r0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e0c6      	b.n	80013c8 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800123e:	2b00      	cmp	r3, #0
 8001240:	d102      	bne.n	8001248 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff fc0c 	bl	8000a60 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2223      	movs	r2, #35	; 0x23
 800124c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124e:	4b60      	ldr	r3, [pc, #384]	; (80013d0 <HAL_ETH_Init+0x1a8>)
 8001250:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001254:	4a5e      	ldr	r2, [pc, #376]	; (80013d0 <HAL_ETH_Init+0x1a8>)
 8001256:	f043 0302 	orr.w	r3, r3, #2
 800125a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800125e:	4b5c      	ldr	r3, [pc, #368]	; (80013d0 <HAL_ETH_Init+0x1a8>)
 8001260:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	7a1b      	ldrb	r3, [r3, #8]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d103      	bne.n	800127c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001274:	2000      	movs	r0, #0
 8001276:	f7ff feb3 	bl	8000fe0 <HAL_SYSCFG_ETHInterfaceSelect>
 800127a:	e003      	b.n	8001284 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800127c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001280:	f7ff feae 	bl	8000fe0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f042 0201 	orr.w	r2, r2, #1
 8001296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800129a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800129c:	f7ff fe70 	bl	8000f80 <HAL_GetTick>
 80012a0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80012a2:	e00f      	b.n	80012c4 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80012a4:	f7ff fe6c 	bl	8000f80 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012b2:	d907      	bls.n	80012c4 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2204      	movs	r2, #4
 80012b8:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	22e0      	movs	r2, #224	; 0xe0
 80012be:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e081      	b.n	80013c8 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1e6      	bne.n	80012a4 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 fac0 	bl	800185c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80012dc:	f002 fe70 	bl	8003fc0 <HAL_RCC_GetHCLKFreq>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4a3c      	ldr	r2, [pc, #240]	; (80013d4 <HAL_ETH_Init+0x1ac>)
 80012e4:	fba2 2303 	umull	r2, r3, r2, r3
 80012e8:	0c9a      	lsrs	r2, r3, #18
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	3a01      	subs	r2, #1
 80012f0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f000 fa13 	bl	8001720 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001310:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001314:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d007      	beq.n	8001332 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2201      	movs	r2, #1
 8001326:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	22e0      	movs	r2, #224	; 0xe0
 800132c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e04a      	b.n	80013c8 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	f241 1308 	movw	r3, #4360	; 0x1108
 800133a:	4413      	add	r3, r2
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	4b26      	ldr	r3, [pc, #152]	; (80013d8 <HAL_ETH_Init+0x1b0>)
 8001340:	4013      	ands	r3, r2
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6952      	ldr	r2, [r2, #20]
 8001346:	0052      	lsls	r2, r2, #1
 8001348:	6879      	ldr	r1, [r7, #4]
 800134a:	6809      	ldr	r1, [r1, #0]
 800134c:	431a      	orrs	r2, r3
 800134e:	f241 1308 	movw	r3, #4360	; 0x1108
 8001352:	440b      	add	r3, r1
 8001354:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 fad8 	bl	800190c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 fb1c 	bl	800199a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	3305      	adds	r3, #5
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	021a      	lsls	r2, r3, #8
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	3304      	adds	r3, #4
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	430a      	orrs	r2, r1
 800137c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	3303      	adds	r3, #3
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	061a      	lsls	r2, r3, #24
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	3302      	adds	r3, #2
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	041b      	lsls	r3, r3, #16
 8001394:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	3301      	adds	r3, #1
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80013a0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80013ae:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80013b0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2210      	movs	r2, #16
 80013be:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2210      	movs	r2, #16
 80013c4:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	58024400 	.word	0x58024400
 80013d4:	431bde83 	.word	0x431bde83
 80013d8:	ffff8001 	.word	0xffff8001

080013dc <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80013ee:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	791b      	ldrb	r3, [r3, #4]
 80013f4:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80013f6:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	7b1b      	ldrb	r3, [r3, #12]
 80013fc:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80013fe:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	7b5b      	ldrb	r3, [r3, #13]
 8001404:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001406:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	7b9b      	ldrb	r3, [r3, #14]
 800140c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800140e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	7bdb      	ldrb	r3, [r3, #15]
 8001414:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001416:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	7c12      	ldrb	r2, [r2, #16]
 800141c:	2a00      	cmp	r2, #0
 800141e:	d102      	bne.n	8001426 <ETH_SetMACConfig+0x4a>
 8001420:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001424:	e000      	b.n	8001428 <ETH_SetMACConfig+0x4c>
 8001426:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001428:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	7c52      	ldrb	r2, [r2, #17]
 800142e:	2a00      	cmp	r2, #0
 8001430:	d102      	bne.n	8001438 <ETH_SetMACConfig+0x5c>
 8001432:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001436:	e000      	b.n	800143a <ETH_SetMACConfig+0x5e>
 8001438:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800143a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	7c9b      	ldrb	r3, [r3, #18]
 8001440:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001442:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001448:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800144e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	7f1b      	ldrb	r3, [r3, #28]
 8001454:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001456:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	7f5b      	ldrb	r3, [r3, #29]
 800145c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800145e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	7f92      	ldrb	r2, [r2, #30]
 8001464:	2a00      	cmp	r2, #0
 8001466:	d102      	bne.n	800146e <ETH_SetMACConfig+0x92>
 8001468:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800146c:	e000      	b.n	8001470 <ETH_SetMACConfig+0x94>
 800146e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001470:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	7fdb      	ldrb	r3, [r3, #31]
 8001476:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001478:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001480:	2a00      	cmp	r2, #0
 8001482:	d102      	bne.n	800148a <ETH_SetMACConfig+0xae>
 8001484:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001488:	e000      	b.n	800148c <ETH_SetMACConfig+0xb0>
 800148a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800148c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001492:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800149a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 800149c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80014a2:	4313      	orrs	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b56      	ldr	r3, [pc, #344]	; (8001608 <ETH_SetMACConfig+0x22c>)
 80014ae:	4013      	ands	r3, r2
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	6812      	ldr	r2, [r2, #0]
 80014b4:	68f9      	ldr	r1, [r7, #12]
 80014b6:	430b      	orrs	r3, r1
 80014b8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014be:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014c6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80014c8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014d0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80014d2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80014da:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80014dc:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80014e4:	2a00      	cmp	r2, #0
 80014e6:	d102      	bne.n	80014ee <ETH_SetMACConfig+0x112>
 80014e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014ec:	e000      	b.n	80014f0 <ETH_SetMACConfig+0x114>
 80014ee:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80014f0:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80014f6:	4313      	orrs	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	4b42      	ldr	r3, [pc, #264]	; (800160c <ETH_SetMACConfig+0x230>)
 8001502:	4013      	ands	r3, r2
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	6812      	ldr	r2, [r2, #0]
 8001508:	68f9      	ldr	r1, [r7, #12]
 800150a:	430b      	orrs	r3, r1
 800150c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001514:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800151a:	4313      	orrs	r3, r2
 800151c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	68da      	ldr	r2, [r3, #12]
 8001524:	4b3a      	ldr	r3, [pc, #232]	; (8001610 <ETH_SetMACConfig+0x234>)
 8001526:	4013      	ands	r3, r2
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	6812      	ldr	r2, [r2, #0]
 800152c:	68f9      	ldr	r1, [r7, #12]
 800152e:	430b      	orrs	r3, r1
 8001530:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001538:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800153e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001546:	2a00      	cmp	r2, #0
 8001548:	d101      	bne.n	800154e <ETH_SetMACConfig+0x172>
 800154a:	2280      	movs	r2, #128	; 0x80
 800154c:	e000      	b.n	8001550 <ETH_SetMACConfig+0x174>
 800154e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001550:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001556:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001558:	4313      	orrs	r3, r2
 800155a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001562:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001566:	4013      	ands	r3, r2
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	6812      	ldr	r2, [r2, #0]
 800156c:	68f9      	ldr	r1, [r7, #12]
 800156e:	430b      	orrs	r3, r1
 8001570:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001578:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001580:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001582:	4313      	orrs	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800158e:	f023 0103 	bic.w	r1, r3, #3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	430a      	orrs	r2, r1
 800159a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80015a6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80015c2:	2a00      	cmp	r2, #0
 80015c4:	d101      	bne.n	80015ca <ETH_SetMACConfig+0x1ee>
 80015c6:	2240      	movs	r2, #64	; 0x40
 80015c8:	e000      	b.n	80015cc <ETH_SetMACConfig+0x1f0>
 80015ca:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80015cc:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80015d4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80015d6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80015de:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80015e0:	4313      	orrs	r3, r2
 80015e2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80015ec:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80015fc:	bf00      	nop
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	00048083 	.word	0x00048083
 800160c:	c0f88000 	.word	0xc0f88000
 8001610:	fffffef0 	.word	0xfffffef0

08001614 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b38      	ldr	r3, [pc, #224]	; (800170c <ETH_SetDMAConfig+0xf8>)
 800162a:	4013      	ands	r3, r2
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	6812      	ldr	r2, [r2, #0]
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	6809      	ldr	r1, [r1, #0]
 8001634:	431a      	orrs	r2, r3
 8001636:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800163a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	791b      	ldrb	r3, [r3, #4]
 8001640:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001646:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	7b1b      	ldrb	r3, [r3, #12]
 800164c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800164e:	4313      	orrs	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	f241 0304 	movw	r3, #4100	; 0x1004
 800165a:	4413      	add	r3, r2
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	4b2c      	ldr	r3, [pc, #176]	; (8001710 <ETH_SetDMAConfig+0xfc>)
 8001660:	4013      	ands	r3, r2
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6811      	ldr	r1, [r2, #0]
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	431a      	orrs	r2, r3
 800166a:	f241 0304 	movw	r3, #4100	; 0x1004
 800166e:	440b      	add	r3, r1
 8001670:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	7b5b      	ldrb	r3, [r3, #13]
 8001676:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800167c:	4313      	orrs	r3, r2
 800167e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	4b22      	ldr	r3, [pc, #136]	; (8001714 <ETH_SetDMAConfig+0x100>)
 800168c:	4013      	ands	r3, r2
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6811      	ldr	r1, [r2, #0]
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	431a      	orrs	r2, r3
 8001696:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800169a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	7d1b      	ldrb	r3, [r3, #20]
 80016a4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80016a6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	7f5b      	ldrb	r3, [r3, #29]
 80016ac:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80016ae:	4313      	orrs	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	f241 1304 	movw	r3, #4356	; 0x1104
 80016ba:	4413      	add	r3, r2
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	4b16      	ldr	r3, [pc, #88]	; (8001718 <ETH_SetDMAConfig+0x104>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6811      	ldr	r1, [r2, #0]
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	431a      	orrs	r2, r3
 80016ca:	f241 1304 	movw	r3, #4356	; 0x1104
 80016ce:	440b      	add	r3, r1
 80016d0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	7f1b      	ldrb	r3, [r3, #28]
 80016d6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80016dc:	4313      	orrs	r3, r2
 80016de:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	f241 1308 	movw	r3, #4360	; 0x1108
 80016e8:	4413      	add	r3, r2
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <ETH_SetDMAConfig+0x108>)
 80016ee:	4013      	ands	r3, r2
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6811      	ldr	r1, [r2, #0]
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	431a      	orrs	r2, r3
 80016f8:	f241 1308 	movw	r3, #4360	; 0x1108
 80016fc:	440b      	add	r3, r1
 80016fe:	601a      	str	r2, [r3, #0]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	ffff87fd 	.word	0xffff87fd
 8001710:	ffff2ffe 	.word	0xffff2ffe
 8001714:	fffec000 	.word	0xfffec000
 8001718:	ffc0efef 	.word	0xffc0efef
 800171c:	7fc0ffff 	.word	0x7fc0ffff

08001720 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b0a4      	sub	sp, #144	; 0x90
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001728:	2301      	movs	r3, #1
 800172a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800172e:	2300      	movs	r3, #0
 8001730:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001738:	2300      	movs	r3, #0
 800173a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800173e:	2301      	movs	r3, #1
 8001740:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001744:	2301      	movs	r3, #1
 8001746:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800174a:	2301      	movs	r3, #1
 800174c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001756:	2301      	movs	r3, #1
 8001758:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800175c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001760:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001768:	2300      	movs	r3, #0
 800176a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800176c:	2300      	movs	r3, #0
 800176e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001778:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800177c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001784:	2300      	movs	r3, #0
 8001786:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001788:	2301      	movs	r3, #1
 800178a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800179a:	2300      	movs	r3, #0
 800179c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800179e:	2300      	movs	r3, #0
 80017a0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80017a2:	2300      	movs	r3, #0
 80017a4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80017b2:	2301      	movs	r3, #1
 80017b4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80017b8:	2320      	movs	r3, #32
 80017ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80017be:	2301      	movs	r3, #1
 80017c0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80017ca:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80017d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017d4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80017dc:	2302      	movs	r3, #2
 80017de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80017f4:	2301      	movs	r3, #1
 80017f6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80017fa:	2300      	movs	r3, #0
 80017fc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80017fe:	2301      	movs	r3, #1
 8001800:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001804:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001808:	4619      	mov	r1, r3
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff fde6 	bl	80013dc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001810:	2301      	movs	r3, #1
 8001812:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001814:	2301      	movs	r3, #1
 8001816:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001818:	2300      	movs	r3, #0
 800181a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800181c:	2300      	movs	r3, #0
 800181e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001822:	2300      	movs	r3, #0
 8001824:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001826:	2300      	movs	r3, #0
 8001828:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800182a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800182e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001830:	2300      	movs	r3, #0
 8001832:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001834:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001838:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800183a:	2300      	movs	r3, #0
 800183c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001840:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001846:	f107 0308 	add.w	r3, r7, #8
 800184a:	4619      	mov	r1, r3
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff fee1 	bl	8001614 <ETH_SetDMAConfig>
}
 8001852:	bf00      	nop
 8001854:	3790      	adds	r7, #144	; 0x90
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800186c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001874:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001876:	f002 fba3 	bl	8003fc0 <HAL_RCC_GetHCLKFreq>
 800187a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	4a1e      	ldr	r2, [pc, #120]	; (80018f8 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d908      	bls.n	8001896 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4a1d      	ldr	r2, [pc, #116]	; (80018fc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d804      	bhi.n	8001896 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	e027      	b.n	80018e6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	4a18      	ldr	r2, [pc, #96]	; (80018fc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d908      	bls.n	80018b0 <ETH_MAC_MDIO_ClkConfig+0x54>
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	4a17      	ldr	r2, [pc, #92]	; (8001900 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d204      	bcs.n	80018b0 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	e01a      	b.n	80018e6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	4a13      	ldr	r2, [pc, #76]	; (8001900 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d303      	bcc.n	80018c0 <ETH_MAC_MDIO_ClkConfig+0x64>
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	4a12      	ldr	r2, [pc, #72]	; (8001904 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d911      	bls.n	80018e4 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	4a10      	ldr	r2, [pc, #64]	; (8001904 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d908      	bls.n	80018da <ETH_MAC_MDIO_ClkConfig+0x7e>
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	4a0f      	ldr	r2, [pc, #60]	; (8001908 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d804      	bhi.n	80018da <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	e005      	b.n	80018e6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	e000      	b.n	80018e6 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80018e4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80018f0:	bf00      	nop
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	01312cff 	.word	0x01312cff
 80018fc:	02160ebf 	.word	0x02160ebf
 8001900:	03938700 	.word	0x03938700
 8001904:	05f5e0ff 	.word	0x05f5e0ff
 8001908:	08f0d17f 	.word	0x08f0d17f

0800190c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001914:	2300      	movs	r3, #0
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	e01d      	b.n	8001956 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68d9      	ldr	r1, [r3, #12]
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	4613      	mov	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	4413      	add	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	440b      	add	r3, r1
 800192a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	2200      	movs	r2, #0
 8001936:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	2200      	movs	r2, #0
 8001942:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001944:	68b9      	ldr	r1, [r7, #8]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	3206      	adds	r2, #6
 800194c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	3301      	adds	r3, #1
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2b03      	cmp	r3, #3
 800195a:	d9de      	bls.n	800191a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	f241 132c 	movw	r3, #4396	; 0x112c
 800196a:	4413      	add	r3, r2
 800196c:	2203      	movs	r2, #3
 800196e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68d9      	ldr	r1, [r3, #12]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	f241 1314 	movw	r3, #4372	; 0x1114
 800197c:	4413      	add	r3, r2
 800197e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800198c:	601a      	str	r2, [r3, #0]
}
 800198e:	bf00      	nop
 8001990:	3714      	adds	r7, #20
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800199a:	b480      	push	{r7}
 800199c:	b085      	sub	sp, #20
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	e024      	b.n	80019f2 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6919      	ldr	r1, [r3, #16]
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	4613      	mov	r3, r2
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	440b      	add	r3, r1
 80019b8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	2200      	movs	r2, #0
 80019c4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	2200      	movs	r2, #0
 80019d0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2200      	movs	r2, #0
 80019d6:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	2200      	movs	r2, #0
 80019dc:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	3310      	adds	r3, #16
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	3301      	adds	r3, #1
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2b03      	cmp	r3, #3
 80019f6:	d9d7      	bls.n	80019a8 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	f241 1330 	movw	r3, #4400	; 0x1130
 8001a1e:	4413      	add	r3, r2
 8001a20:	2203      	movs	r2, #3
 8001a22:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6919      	ldr	r1, [r3, #16]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	f241 131c 	movw	r3, #4380	; 0x111c
 8001a30:	4413      	add	r3, r2
 8001a32:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	f241 1328 	movw	r3, #4392	; 0x1128
 8001a44:	4413      	add	r3, r2
 8001a46:	6019      	str	r1, [r3, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b089      	sub	sp, #36	; 0x24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001a62:	4b86      	ldr	r3, [pc, #536]	; (8001c7c <HAL_GPIO_Init+0x228>)
 8001a64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a66:	e18c      	b.n	8001d82 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	fa01 f303 	lsl.w	r3, r1, r3
 8001a74:	4013      	ands	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 817e 	beq.w	8001d7c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d005      	beq.n	8001a98 <HAL_GPIO_Init+0x44>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d130      	bne.n	8001afa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ace:	2201      	movs	r2, #1
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	091b      	lsrs	r3, r3, #4
 8001ae4:	f003 0201 	and.w	r2, r3, #1
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d017      	beq.n	8001b36 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	2203      	movs	r2, #3
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d123      	bne.n	8001b8a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	08da      	lsrs	r2, r3, #3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3208      	adds	r2, #8
 8001b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	220f      	movs	r2, #15
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4013      	ands	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	691a      	ldr	r2, [r3, #16]
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	08da      	lsrs	r2, r3, #3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3208      	adds	r2, #8
 8001b84:	69b9      	ldr	r1, [r7, #24]
 8001b86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	2203      	movs	r2, #3
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 0203 	and.w	r2, r3, #3
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 80d8 	beq.w	8001d7c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bcc:	4b2c      	ldr	r3, [pc, #176]	; (8001c80 <HAL_GPIO_Init+0x22c>)
 8001bce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bd2:	4a2b      	ldr	r2, [pc, #172]	; (8001c80 <HAL_GPIO_Init+0x22c>)
 8001bd4:	f043 0302 	orr.w	r3, r3, #2
 8001bd8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001bdc:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <HAL_GPIO_Init+0x22c>)
 8001bde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bea:	4a26      	ldr	r2, [pc, #152]	; (8001c84 <HAL_GPIO_Init+0x230>)
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	089b      	lsrs	r3, r3, #2
 8001bf0:	3302      	adds	r3, #2
 8001bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	220f      	movs	r2, #15
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a1d      	ldr	r2, [pc, #116]	; (8001c88 <HAL_GPIO_Init+0x234>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d04a      	beq.n	8001cac <HAL_GPIO_Init+0x258>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a1c      	ldr	r2, [pc, #112]	; (8001c8c <HAL_GPIO_Init+0x238>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d02b      	beq.n	8001c76 <HAL_GPIO_Init+0x222>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a1b      	ldr	r2, [pc, #108]	; (8001c90 <HAL_GPIO_Init+0x23c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d025      	beq.n	8001c72 <HAL_GPIO_Init+0x21e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a1a      	ldr	r2, [pc, #104]	; (8001c94 <HAL_GPIO_Init+0x240>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d01f      	beq.n	8001c6e <HAL_GPIO_Init+0x21a>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a19      	ldr	r2, [pc, #100]	; (8001c98 <HAL_GPIO_Init+0x244>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d019      	beq.n	8001c6a <HAL_GPIO_Init+0x216>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a18      	ldr	r2, [pc, #96]	; (8001c9c <HAL_GPIO_Init+0x248>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d013      	beq.n	8001c66 <HAL_GPIO_Init+0x212>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a17      	ldr	r2, [pc, #92]	; (8001ca0 <HAL_GPIO_Init+0x24c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d00d      	beq.n	8001c62 <HAL_GPIO_Init+0x20e>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a16      	ldr	r2, [pc, #88]	; (8001ca4 <HAL_GPIO_Init+0x250>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d007      	beq.n	8001c5e <HAL_GPIO_Init+0x20a>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a15      	ldr	r2, [pc, #84]	; (8001ca8 <HAL_GPIO_Init+0x254>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d101      	bne.n	8001c5a <HAL_GPIO_Init+0x206>
 8001c56:	2309      	movs	r3, #9
 8001c58:	e029      	b.n	8001cae <HAL_GPIO_Init+0x25a>
 8001c5a:	230a      	movs	r3, #10
 8001c5c:	e027      	b.n	8001cae <HAL_GPIO_Init+0x25a>
 8001c5e:	2307      	movs	r3, #7
 8001c60:	e025      	b.n	8001cae <HAL_GPIO_Init+0x25a>
 8001c62:	2306      	movs	r3, #6
 8001c64:	e023      	b.n	8001cae <HAL_GPIO_Init+0x25a>
 8001c66:	2305      	movs	r3, #5
 8001c68:	e021      	b.n	8001cae <HAL_GPIO_Init+0x25a>
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	e01f      	b.n	8001cae <HAL_GPIO_Init+0x25a>
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e01d      	b.n	8001cae <HAL_GPIO_Init+0x25a>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e01b      	b.n	8001cae <HAL_GPIO_Init+0x25a>
 8001c76:	2301      	movs	r3, #1
 8001c78:	e019      	b.n	8001cae <HAL_GPIO_Init+0x25a>
 8001c7a:	bf00      	nop
 8001c7c:	58000080 	.word	0x58000080
 8001c80:	58024400 	.word	0x58024400
 8001c84:	58000400 	.word	0x58000400
 8001c88:	58020000 	.word	0x58020000
 8001c8c:	58020400 	.word	0x58020400
 8001c90:	58020800 	.word	0x58020800
 8001c94:	58020c00 	.word	0x58020c00
 8001c98:	58021000 	.word	0x58021000
 8001c9c:	58021400 	.word	0x58021400
 8001ca0:	58021800 	.word	0x58021800
 8001ca4:	58021c00 	.word	0x58021c00
 8001ca8:	58022400 	.word	0x58022400
 8001cac:	2300      	movs	r3, #0
 8001cae:	69fa      	ldr	r2, [r7, #28]
 8001cb0:	f002 0203 	and.w	r2, r2, #3
 8001cb4:	0092      	lsls	r2, r2, #2
 8001cb6:	4093      	lsls	r3, r2
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cbe:	4938      	ldr	r1, [pc, #224]	; (8001da0 <HAL_GPIO_Init+0x34c>)
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	089b      	lsrs	r3, r3, #2
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001cf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001d20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f47f ae6b 	bne.w	8001a68 <HAL_GPIO_Init+0x14>
  }
}
 8001d92:	bf00      	nop
 8001d94:	bf00      	nop
 8001d96:	3724      	adds	r7, #36	; 0x24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	58000400 	.word	0x58000400

08001da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	807b      	strh	r3, [r7, #2]
 8001db0:	4613      	mov	r3, r2
 8001db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001db4:	787b      	ldrb	r3, [r7, #1]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dba:	887a      	ldrh	r2, [r7, #2]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001dc0:	e003      	b.n	8001dca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001dc2:	887b      	ldrh	r3, [r7, #2]
 8001dc4:	041a      	lsls	r2, r3, #16
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	619a      	str	r2, [r3, #24]
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dd8:	b08f      	sub	sp, #60	; 0x3c
 8001dda:	af0a      	add	r7, sp, #40	; 0x28
 8001ddc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e116      	b.n	8002016 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d106      	bne.n	8001e08 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f008 f812 	bl	8009e2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d102      	bne.n	8001e22 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f004 fec9 	bl	8006bbe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	603b      	str	r3, [r7, #0]
 8001e32:	687e      	ldr	r6, [r7, #4]
 8001e34:	466d      	mov	r5, sp
 8001e36:	f106 0410 	add.w	r4, r6, #16
 8001e3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e46:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e4a:	1d33      	adds	r3, r6, #4
 8001e4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e4e:	6838      	ldr	r0, [r7, #0]
 8001e50:	f004 fd94 	bl	800697c <USB_CoreInit>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d005      	beq.n	8001e66 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e0d7      	b.n	8002016 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f004 feb7 	bl	8006be0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e72:	2300      	movs	r3, #0
 8001e74:	73fb      	strb	r3, [r7, #15]
 8001e76:	e04a      	b.n	8001f0e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e78:	7bfa      	ldrb	r2, [r7, #15]
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	1a9b      	subs	r3, r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	333d      	adds	r3, #61	; 0x3d
 8001e88:	2201      	movs	r2, #1
 8001e8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e8c:	7bfa      	ldrb	r2, [r7, #15]
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	4613      	mov	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	1a9b      	subs	r3, r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	333c      	adds	r3, #60	; 0x3c
 8001e9c:	7bfa      	ldrb	r2, [r7, #15]
 8001e9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ea0:	7bfa      	ldrb	r2, [r7, #15]
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	b298      	uxth	r0, r3
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	1a9b      	subs	r3, r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	3342      	adds	r3, #66	; 0x42
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001eb8:	7bfa      	ldrb	r2, [r7, #15]
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	1a9b      	subs	r3, r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	333f      	adds	r3, #63	; 0x3f
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ecc:	7bfa      	ldrb	r2, [r7, #15]
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	1a9b      	subs	r3, r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	3344      	adds	r3, #68	; 0x44
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ee0:	7bfa      	ldrb	r2, [r7, #15]
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	1a9b      	subs	r3, r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	3348      	adds	r3, #72	; 0x48
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ef4:	7bfa      	ldrb	r2, [r7, #15]
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	1a9b      	subs	r3, r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	3350      	adds	r3, #80	; 0x50
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	73fb      	strb	r3, [r7, #15]
 8001f0e:	7bfa      	ldrb	r2, [r7, #15]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d3af      	bcc.n	8001e78 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f18:	2300      	movs	r3, #0
 8001f1a:	73fb      	strb	r3, [r7, #15]
 8001f1c:	e044      	b.n	8001fa8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f1e:	7bfa      	ldrb	r2, [r7, #15]
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	1a9b      	subs	r3, r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f34:	7bfa      	ldrb	r2, [r7, #15]
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	1a9b      	subs	r3, r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001f46:	7bfa      	ldrb	r2, [r7, #15]
 8001f48:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f4a:	7bfa      	ldrb	r2, [r7, #15]
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	1a9b      	subs	r3, r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	440b      	add	r3, r1
 8001f58:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f60:	7bfa      	ldrb	r2, [r7, #15]
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	4613      	mov	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	1a9b      	subs	r3, r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f76:	7bfa      	ldrb	r2, [r7, #15]
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	1a9b      	subs	r3, r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	440b      	add	r3, r1
 8001f84:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f8c:	7bfa      	ldrb	r2, [r7, #15]
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	1a9b      	subs	r3, r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	73fb      	strb	r3, [r7, #15]
 8001fa8:	7bfa      	ldrb	r2, [r7, #15]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d3b5      	bcc.n	8001f1e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	603b      	str	r3, [r7, #0]
 8001fb8:	687e      	ldr	r6, [r7, #4]
 8001fba:	466d      	mov	r5, sp
 8001fbc:	f106 0410 	add.w	r4, r6, #16
 8001fc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fc8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fcc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fd0:	1d33      	adds	r3, r6, #4
 8001fd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fd4:	6838      	ldr	r0, [r7, #0]
 8001fd6:	f004 fe4f 	bl	8006c78 <USB_DevInit>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d005      	beq.n	8001fec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e014      	b.n	8002016 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	2b01      	cmp	r3, #1
 8002002:	d102      	bne.n	800200a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f001 f885 	bl	8003114 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f005 fee7 	bl	8007de2 <USB_DevDisconnect>

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800201e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b084      	sub	sp, #16
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002032:	2b01      	cmp	r3, #1
 8002034:	d101      	bne.n	800203a <HAL_PCD_Start+0x1c>
 8002036:	2302      	movs	r3, #2
 8002038:	e020      	b.n	800207c <HAL_PCD_Start+0x5e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002046:	2b01      	cmp	r3, #1
 8002048:	d109      	bne.n	800205e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800204e:	2b01      	cmp	r3, #1
 8002050:	d005      	beq.n	800205e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002056:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f004 fd9a 	bl	8006b9c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f005 fe97 	bl	8007da0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002084:	b590      	push	{r4, r7, lr}
 8002086:	b08d      	sub	sp, #52	; 0x34
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002092:	6a3b      	ldr	r3, [r7, #32]
 8002094:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f005 ff55 	bl	8007f4a <USB_GetMode>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f040 83be 	bne.w	8002824 <HAL_PCD_IRQHandler+0x7a0>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f005 feb9 	bl	8007e24 <USB_ReadInterrupts>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 83b4 	beq.w	8002822 <HAL_PCD_IRQHandler+0x79e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f005 feb0 	bl	8007e24 <USB_ReadInterrupts>
 80020c4:	4603      	mov	r3, r0
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d107      	bne.n	80020de <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	695a      	ldr	r2, [r3, #20]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f002 0202 	and.w	r2, r2, #2
 80020dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f005 fe9e 	bl	8007e24 <USB_ReadInterrupts>
 80020e8:	4603      	mov	r3, r0
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	2b10      	cmp	r3, #16
 80020f0:	d161      	bne.n	80021b6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	699a      	ldr	r2, [r3, #24]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0210 	bic.w	r2, r2, #16
 8002100:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	f003 020f 	and.w	r2, r3, #15
 800210e:	4613      	mov	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	1a9b      	subs	r3, r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	3304      	adds	r3, #4
 8002120:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	0c5b      	lsrs	r3, r3, #17
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	2b02      	cmp	r3, #2
 800212c:	d124      	bne.n	8002178 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002134:	4013      	ands	r3, r2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d035      	beq.n	80021a6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	091b      	lsrs	r3, r3, #4
 8002142:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002144:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002148:	b29b      	uxth	r3, r3
 800214a:	461a      	mov	r2, r3
 800214c:	6a38      	ldr	r0, [r7, #32]
 800214e:	f005 fcd5 	bl	8007afc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	091b      	lsrs	r3, r3, #4
 800215a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800215e:	441a      	add	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	699a      	ldr	r2, [r3, #24]
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	091b      	lsrs	r3, r3, #4
 800216c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002170:	441a      	add	r2, r3
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	619a      	str	r2, [r3, #24]
 8002176:	e016      	b.n	80021a6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	0c5b      	lsrs	r3, r3, #17
 800217c:	f003 030f 	and.w	r3, r3, #15
 8002180:	2b06      	cmp	r3, #6
 8002182:	d110      	bne.n	80021a6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800218a:	2208      	movs	r2, #8
 800218c:	4619      	mov	r1, r3
 800218e:	6a38      	ldr	r0, [r7, #32]
 8002190:	f005 fcb4 	bl	8007afc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	699a      	ldr	r2, [r3, #24]
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	091b      	lsrs	r3, r3, #4
 800219c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021a0:	441a      	add	r2, r3
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	699a      	ldr	r2, [r3, #24]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0210 	orr.w	r2, r2, #16
 80021b4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f005 fe32 	bl	8007e24 <USB_ReadInterrupts>
 80021c0:	4603      	mov	r3, r0
 80021c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80021ca:	d16e      	bne.n	80022aa <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f005 fe38 	bl	8007e4a <USB_ReadDevAllOutEpInterrupt>
 80021da:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80021dc:	e062      	b.n	80022a4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80021de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d057      	beq.n	8002298 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	4611      	mov	r1, r2
 80021f2:	4618      	mov	r0, r3
 80021f4:	f005 fe5d 	bl	8007eb2 <USB_ReadDevOutEPInterrupt>
 80021f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00c      	beq.n	800221e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	015a      	lsls	r2, r3, #5
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	4413      	add	r3, r2
 800220c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002210:	461a      	mov	r2, r3
 8002212:	2301      	movs	r3, #1
 8002214:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002216:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 fdd1 	bl	8002dc0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	f003 0308 	and.w	r3, r3, #8
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00c      	beq.n	8002242 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	015a      	lsls	r2, r3, #5
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	4413      	add	r3, r2
 8002230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002234:	461a      	mov	r2, r3
 8002236:	2308      	movs	r3, #8
 8002238:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800223a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 fecb 	bl	8002fd8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	f003 0310 	and.w	r3, r3, #16
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	015a      	lsls	r2, r3, #5
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	4413      	add	r3, r2
 8002254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002258:	461a      	mov	r2, r3
 800225a:	2310      	movs	r3, #16
 800225c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	f003 0320 	and.w	r3, r3, #32
 8002264:	2b00      	cmp	r3, #0
 8002266:	d008      	beq.n	800227a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	015a      	lsls	r2, r3, #5
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	4413      	add	r3, r2
 8002270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002274:	461a      	mov	r2, r3
 8002276:	2320      	movs	r3, #32
 8002278:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d009      	beq.n	8002298 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	015a      	lsls	r2, r3, #5
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	4413      	add	r3, r2
 800228c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002290:	461a      	mov	r2, r3
 8002292:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002296:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	3301      	adds	r3, #1
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800229e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a0:	085b      	lsrs	r3, r3, #1
 80022a2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80022a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d199      	bne.n	80021de <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f005 fdb8 	bl	8007e24 <USB_ReadInterrupts>
 80022b4:	4603      	mov	r3, r0
 80022b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80022be:	f040 80c4 	bne.w	800244a <HAL_PCD_IRQHandler+0x3c6>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f005 fdd9 	bl	8007e7e <USB_ReadDevAllInEpInterrupt>
 80022cc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80022d2:	e0b6      	b.n	8002442 <HAL_PCD_IRQHandler+0x3be>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80022d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 80ab 	beq.w	8002436 <HAL_PCD_IRQHandler+0x3b2>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	4611      	mov	r1, r2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f005 fdff 	bl	8007eee <USB_ReadDevInEPInterrupt>
 80022f0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d057      	beq.n	80023ac <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	2201      	movs	r2, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	43db      	mvns	r3, r3
 8002316:	69f9      	ldr	r1, [r7, #28]
 8002318:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800231c:	4013      	ands	r3, r2
 800231e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	015a      	lsls	r2, r3, #5
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	4413      	add	r3, r2
 8002328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800232c:	461a      	mov	r2, r3
 800232e:	2301      	movs	r3, #1
 8002330:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d132      	bne.n	80023a0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800233e:	4613      	mov	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	1a9b      	subs	r3, r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	440b      	add	r3, r1
 8002348:	3348      	adds	r3, #72	; 0x48
 800234a:	6819      	ldr	r1, [r3, #0]
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002350:	4613      	mov	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	1a9b      	subs	r3, r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4403      	add	r3, r0
 800235a:	3344      	adds	r3, #68	; 0x44
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4419      	add	r1, r3
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002364:	4613      	mov	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	1a9b      	subs	r3, r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4403      	add	r3, r0
 800236e:	3348      	adds	r3, #72	; 0x48
 8002370:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	2b00      	cmp	r3, #0
 8002376:	d113      	bne.n	80023a0 <HAL_PCD_IRQHandler+0x31c>
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800237c:	4613      	mov	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	1a9b      	subs	r3, r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	3350      	adds	r3, #80	; 0x50
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d108      	bne.n	80023a0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6818      	ldr	r0, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002398:	461a      	mov	r2, r3
 800239a:	2101      	movs	r1, #1
 800239c:	f005 fe08 	bl	8007fb0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	4619      	mov	r1, r3
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f007 fdef 	bl	8009f8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	f003 0308 	and.w	r3, r3, #8
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d008      	beq.n	80023c8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	015a      	lsls	r2, r3, #5
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	4413      	add	r3, r2
 80023be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023c2:	461a      	mov	r2, r3
 80023c4:	2308      	movs	r3, #8
 80023c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d008      	beq.n	80023e4 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	015a      	lsls	r2, r3, #5
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	4413      	add	r3, r2
 80023da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023de:	461a      	mov	r2, r3
 80023e0:	2310      	movs	r3, #16
 80023e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d008      	beq.n	8002400 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	015a      	lsls	r2, r3, #5
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	4413      	add	r3, r2
 80023f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023fa:	461a      	mov	r2, r3
 80023fc:	2340      	movs	r3, #64	; 0x40
 80023fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00c      	beq.n	8002424 <HAL_PCD_IRQHandler+0x3a0>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800240a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800240c:	6a38      	ldr	r0, [r7, #32]
 800240e:	f004 fd91 	bl	8006f34 <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	015a      	lsls	r2, r3, #5
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	4413      	add	r3, r2
 800241a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800241e:	461a      	mov	r2, r3
 8002420:	2302      	movs	r3, #2
 8002422:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_PCD_IRQHandler+0x3b2>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800242e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 fc38 	bl	8002ca6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	3301      	adds	r3, #1
 800243a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800243c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243e:	085b      	lsrs	r3, r3, #1
 8002440:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002444:	2b00      	cmp	r3, #0
 8002446:	f47f af45 	bne.w	80022d4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f005 fce8 	bl	8007e24 <USB_ReadInterrupts>
 8002454:	4603      	mov	r3, r0
 8002456:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800245a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800245e:	d122      	bne.n	80024a6 <HAL_PCD_IRQHandler+0x422>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	69fa      	ldr	r2, [r7, #28]
 800246a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800246e:	f023 0301 	bic.w	r3, r3, #1
 8002472:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800247a:	2b01      	cmp	r3, #1
 800247c:	d108      	bne.n	8002490 <HAL_PCD_IRQHandler+0x40c>
      {
        hpcd->LPM_State = LPM_L0;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002486:	2100      	movs	r1, #0
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 fe67 	bl	800315c <HAL_PCDEx_LPM_Callback>
 800248e:	e002      	b.n	8002496 <HAL_PCD_IRQHandler+0x412>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f007 fdf1 	bl	800a078 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	695a      	ldr	r2, [r3, #20]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80024a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f005 fcba 	bl	8007e24 <USB_ReadInterrupts>
 80024b0:	4603      	mov	r3, r0
 80024b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024ba:	d112      	bne.n	80024e2 <HAL_PCD_IRQHandler+0x45e>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d102      	bne.n	80024d2 <HAL_PCD_IRQHandler+0x44e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f007 fdad 	bl	800a02c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	695a      	ldr	r2, [r3, #20]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80024e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f005 fc9c 	bl	8007e24 <USB_ReadInterrupts>
 80024ec:	4603      	mov	r3, r0
 80024ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024f6:	d121      	bne.n	800253c <HAL_PCD_IRQHandler+0x4b8>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695a      	ldr	r2, [r3, #20]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002506:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800250e:	2b00      	cmp	r3, #0
 8002510:	d111      	bne.n	8002536 <HAL_PCD_IRQHandler+0x4b2>
      {
        hpcd->LPM_State = LPM_L1;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002520:	089b      	lsrs	r3, r3, #2
 8002522:	f003 020f 	and.w	r2, r3, #15
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800252c:	2101      	movs	r1, #1
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 fe14 	bl	800315c <HAL_PCDEx_LPM_Callback>
 8002534:	e002      	b.n	800253c <HAL_PCD_IRQHandler+0x4b8>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f007 fd78 	bl	800a02c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f005 fc6f 	bl	8007e24 <USB_ReadInterrupts>
 8002546:	4603      	mov	r3, r0
 8002548:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800254c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002550:	f040 80b7 	bne.w	80026c2 <HAL_PCD_IRQHandler+0x63e>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	69fa      	ldr	r2, [r7, #28]
 800255e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002562:	f023 0301 	bic.w	r3, r3, #1
 8002566:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2110      	movs	r1, #16
 800256e:	4618      	mov	r0, r3
 8002570:	f004 fce0 	bl	8006f34 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002574:	2300      	movs	r3, #0
 8002576:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002578:	e046      	b.n	8002608 <HAL_PCD_IRQHandler+0x584>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800257a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257c:	015a      	lsls	r2, r3, #5
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	4413      	add	r3, r2
 8002582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002586:	461a      	mov	r2, r3
 8002588:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800258c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800258e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002590:	015a      	lsls	r2, r3, #5
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	4413      	add	r3, r2
 8002596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800259e:	0151      	lsls	r1, r2, #5
 80025a0:	69fa      	ldr	r2, [r7, #28]
 80025a2:	440a      	add	r2, r1
 80025a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80025a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80025ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80025ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ba:	461a      	mov	r2, r3
 80025bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80025c0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80025c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c4:	015a      	lsls	r2, r3, #5
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	4413      	add	r3, r2
 80025ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025d2:	0151      	lsls	r1, r2, #5
 80025d4:	69fa      	ldr	r2, [r7, #28]
 80025d6:	440a      	add	r2, r1
 80025d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80025dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80025e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80025e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e4:	015a      	lsls	r2, r3, #5
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	4413      	add	r3, r2
 80025ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025f2:	0151      	lsls	r1, r2, #5
 80025f4:	69fa      	ldr	r2, [r7, #28]
 80025f6:	440a      	add	r2, r1
 80025f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80025fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002600:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002604:	3301      	adds	r3, #1
 8002606:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800260e:	429a      	cmp	r2, r3
 8002610:	d3b3      	bcc.n	800257a <HAL_PCD_IRQHandler+0x4f6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	69fa      	ldr	r2, [r7, #28]
 800261c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002620:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002624:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	2b00      	cmp	r3, #0
 800262c:	d016      	beq.n	800265c <HAL_PCD_IRQHandler+0x5d8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002634:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002638:	69fa      	ldr	r2, [r7, #28]
 800263a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800263e:	f043 030b 	orr.w	r3, r3, #11
 8002642:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	69fa      	ldr	r2, [r7, #28]
 8002650:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002654:	f043 030b 	orr.w	r3, r3, #11
 8002658:	6453      	str	r3, [r2, #68]	; 0x44
 800265a:	e015      	b.n	8002688 <HAL_PCD_IRQHandler+0x604>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002662:	695a      	ldr	r2, [r3, #20]
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800266a:	4619      	mov	r1, r3
 800266c:	f242 032b 	movw	r3, #8235	; 0x202b
 8002670:	4313      	orrs	r3, r2
 8002672:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	69fa      	ldr	r2, [r7, #28]
 800267e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002682:	f043 030b 	orr.w	r3, r3, #11
 8002686:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	69fa      	ldr	r2, [r7, #28]
 8002692:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002696:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800269a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6818      	ldr	r0, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80026ac:	461a      	mov	r2, r3
 80026ae:	f005 fc7f 	bl	8007fb0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695a      	ldr	r2, [r3, #20]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80026c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f005 fbac 	bl	8007e24 <USB_ReadInterrupts>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026d6:	d124      	bne.n	8002722 <HAL_PCD_IRQHandler+0x69e>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f005 fc43 	bl	8007f68 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f004 fc9d 	bl	8007026 <USB_GetDevSpeed>
 80026ec:	4603      	mov	r3, r0
 80026ee:	461a      	mov	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681c      	ldr	r4, [r3, #0]
 80026f8:	f001 fc62 	bl	8003fc0 <HAL_RCC_GetHCLKFreq>
 80026fc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002702:	b2db      	uxtb	r3, r3
 8002704:	461a      	mov	r2, r3
 8002706:	4620      	mov	r0, r4
 8002708:	f004 f9a6 	bl	8006a58 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f007 fc64 	bl	8009fda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695a      	ldr	r2, [r3, #20]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002720:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f005 fb7c 	bl	8007e24 <USB_ReadInterrupts>
 800272c:	4603      	mov	r3, r0
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b08      	cmp	r3, #8
 8002734:	d10a      	bne.n	800274c <HAL_PCD_IRQHandler+0x6c8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f007 fc41 	bl	8009fbe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695a      	ldr	r2, [r3, #20]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f002 0208 	and.w	r2, r2, #8
 800274a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f005 fb67 	bl	8007e24 <USB_ReadInterrupts>
 8002756:	4603      	mov	r3, r0
 8002758:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800275c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002760:	d10f      	bne.n	8002782 <HAL_PCD_IRQHandler+0x6fe>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	b2db      	uxtb	r3, r3
 800276a:	4619      	mov	r1, r3
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f007 fca3 	bl	800a0b8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695a      	ldr	r2, [r3, #20]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002780:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f005 fb4c 	bl	8007e24 <USB_ReadInterrupts>
 800278c:	4603      	mov	r3, r0
 800278e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002792:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002796:	d10f      	bne.n	80027b8 <HAL_PCD_IRQHandler+0x734>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	4619      	mov	r1, r3
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f007 fc76 	bl	800a094 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695a      	ldr	r2, [r3, #20]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80027b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f005 fb31 	bl	8007e24 <USB_ReadInterrupts>
 80027c2:	4603      	mov	r3, r0
 80027c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80027c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027cc:	d10a      	bne.n	80027e4 <HAL_PCD_IRQHandler+0x760>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f007 fc84 	bl	800a0dc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695a      	ldr	r2, [r3, #20]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80027e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f005 fb1b 	bl	8007e24 <USB_ReadInterrupts>
 80027ee:	4603      	mov	r3, r0
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	d115      	bne.n	8002824 <HAL_PCD_IRQHandler+0x7a0>
    {
      temp = hpcd->Instance->GOTGINT;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <HAL_PCD_IRQHandler+0x78c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f007 fc74 	bl	800a0f8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6859      	ldr	r1, [r3, #4]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	430a      	orrs	r2, r1
 800281e:	605a      	str	r2, [r3, #4]
 8002820:	e000      	b.n	8002824 <HAL_PCD_IRQHandler+0x7a0>
      return;
 8002822:	bf00      	nop
    }
  }
}
 8002824:	3734      	adds	r7, #52	; 0x34
 8002826:	46bd      	mov	sp, r7
 8002828:	bd90      	pop	{r4, r7, pc}

0800282a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	460b      	mov	r3, r1
 8002834:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800283c:	2b01      	cmp	r3, #1
 800283e:	d101      	bne.n	8002844 <HAL_PCD_SetAddress+0x1a>
 8002840:	2302      	movs	r3, #2
 8002842:	e013      	b.n	800286c <HAL_PCD_SetAddress+0x42>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	78fa      	ldrb	r2, [r7, #3]
 8002850:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	4611      	mov	r1, r2
 800285c:	4618      	mov	r0, r3
 800285e:	f005 fa79 	bl	8007d54 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	4608      	mov	r0, r1
 800287e:	4611      	mov	r1, r2
 8002880:	461a      	mov	r2, r3
 8002882:	4603      	mov	r3, r0
 8002884:	70fb      	strb	r3, [r7, #3]
 8002886:	460b      	mov	r3, r1
 8002888:	803b      	strh	r3, [r7, #0]
 800288a:	4613      	mov	r3, r2
 800288c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800288e:	2300      	movs	r3, #0
 8002890:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002892:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002896:	2b00      	cmp	r3, #0
 8002898:	da0f      	bge.n	80028ba <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800289a:	78fb      	ldrb	r3, [r7, #3]
 800289c:	f003 020f 	and.w	r2, r3, #15
 80028a0:	4613      	mov	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	1a9b      	subs	r3, r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	3338      	adds	r3, #56	; 0x38
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	4413      	add	r3, r2
 80028ae:	3304      	adds	r3, #4
 80028b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2201      	movs	r2, #1
 80028b6:	705a      	strb	r2, [r3, #1]
 80028b8:	e00f      	b.n	80028da <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028ba:	78fb      	ldrb	r3, [r7, #3]
 80028bc:	f003 020f 	and.w	r2, r3, #15
 80028c0:	4613      	mov	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	4413      	add	r3, r2
 80028d0:	3304      	adds	r3, #4
 80028d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80028da:	78fb      	ldrb	r3, [r7, #3]
 80028dc:	f003 030f 	and.w	r3, r3, #15
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80028e6:	883a      	ldrh	r2, [r7, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	78ba      	ldrb	r2, [r7, #2]
 80028f0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	785b      	ldrb	r3, [r3, #1]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d004      	beq.n	8002904 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002904:	78bb      	ldrb	r3, [r7, #2]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d102      	bne.n	8002910 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_PCD_EP_Open+0xaa>
 800291a:	2302      	movs	r3, #2
 800291c:	e00e      	b.n	800293c <HAL_PCD_EP_Open+0xc8>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68f9      	ldr	r1, [r7, #12]
 800292c:	4618      	mov	r0, r3
 800292e:	f004 fb9f 	bl	8007070 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800293a:	7afb      	ldrb	r3, [r7, #11]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002950:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002954:	2b00      	cmp	r3, #0
 8002956:	da0f      	bge.n	8002978 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002958:	78fb      	ldrb	r3, [r7, #3]
 800295a:	f003 020f 	and.w	r2, r3, #15
 800295e:	4613      	mov	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	1a9b      	subs	r3, r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	3338      	adds	r3, #56	; 0x38
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	4413      	add	r3, r2
 800296c:	3304      	adds	r3, #4
 800296e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2201      	movs	r2, #1
 8002974:	705a      	strb	r2, [r3, #1]
 8002976:	e00f      	b.n	8002998 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002978:	78fb      	ldrb	r3, [r7, #3]
 800297a:	f003 020f 	and.w	r2, r3, #15
 800297e:	4613      	mov	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	1a9b      	subs	r3, r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	4413      	add	r3, r2
 800298e:	3304      	adds	r3, #4
 8002990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002998:	78fb      	ldrb	r3, [r7, #3]
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <HAL_PCD_EP_Close+0x6e>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e00e      	b.n	80029d0 <HAL_PCD_EP_Close+0x8c>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68f9      	ldr	r1, [r7, #12]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f004 fbdd 	bl	8007180 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	607a      	str	r2, [r7, #4]
 80029e2:	603b      	str	r3, [r7, #0]
 80029e4:	460b      	mov	r3, r1
 80029e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029e8:	7afb      	ldrb	r3, [r7, #11]
 80029ea:	f003 020f 	and.w	r2, r3, #15
 80029ee:	4613      	mov	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	1a9b      	subs	r3, r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4413      	add	r3, r2
 80029fe:	3304      	adds	r3, #4
 8002a00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	2200      	movs	r2, #0
 8002a12:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	2200      	movs	r2, #0
 8002a18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a1a:	7afb      	ldrb	r3, [r7, #11]
 8002a1c:	f003 030f 	and.w	r3, r3, #15
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d102      	bne.n	8002a34 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a34:	7afb      	ldrb	r3, [r7, #11]
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d109      	bne.n	8002a52 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	461a      	mov	r2, r3
 8002a4a:	6979      	ldr	r1, [r7, #20]
 8002a4c:	f004 fec0 	bl	80077d0 <USB_EP0StartXfer>
 8002a50:	e008      	b.n	8002a64 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6818      	ldr	r0, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	6979      	ldr	r1, [r7, #20]
 8002a60:	f004 fc6a 	bl	8007338 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
 8002a76:	460b      	mov	r3, r1
 8002a78:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a7a:	78fb      	ldrb	r3, [r7, #3]
 8002a7c:	f003 020f 	and.w	r2, r3, #15
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	1a9b      	subs	r3, r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002a90:	681b      	ldr	r3, [r3, #0]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b086      	sub	sp, #24
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	607a      	str	r2, [r7, #4]
 8002aa8:	603b      	str	r3, [r7, #0]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aae:	7afb      	ldrb	r3, [r7, #11]
 8002ab0:	f003 020f 	and.w	r2, r3, #15
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	1a9b      	subs	r3, r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	3338      	adds	r3, #56	; 0x38
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2201      	movs	r2, #1
 8002adc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ade:	7afb      	ldrb	r3, [r7, #11]
 8002ae0:	f003 030f 	and.w	r3, r3, #15
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d102      	bne.n	8002af8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002af8:	7afb      	ldrb	r3, [r7, #11]
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d109      	bne.n	8002b16 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	6979      	ldr	r1, [r7, #20]
 8002b10:	f004 fe5e 	bl	80077d0 <USB_EP0StartXfer>
 8002b14:	e008      	b.n	8002b28 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	461a      	mov	r2, r3
 8002b22:	6979      	ldr	r1, [r7, #20]
 8002b24:	f004 fc08 	bl	8007338 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b084      	sub	sp, #16
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b3e:	78fb      	ldrb	r3, [r7, #3]
 8002b40:	f003 020f 	and.w	r2, r3, #15
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d901      	bls.n	8002b50 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e050      	b.n	8002bf2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	da0f      	bge.n	8002b78 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b58:	78fb      	ldrb	r3, [r7, #3]
 8002b5a:	f003 020f 	and.w	r2, r3, #15
 8002b5e:	4613      	mov	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	1a9b      	subs	r3, r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	3338      	adds	r3, #56	; 0x38
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2201      	movs	r2, #1
 8002b74:	705a      	strb	r2, [r3, #1]
 8002b76:	e00d      	b.n	8002b94 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b78:	78fa      	ldrb	r2, [r7, #3]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	1a9b      	subs	r3, r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	4413      	add	r3, r2
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2201      	movs	r2, #1
 8002b98:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b9a:	78fb      	ldrb	r3, [r7, #3]
 8002b9c:	f003 030f 	and.w	r3, r3, #15
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <HAL_PCD_EP_SetStall+0x82>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e01e      	b.n	8002bf2 <HAL_PCD_EP_SetStall+0xc0>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68f9      	ldr	r1, [r7, #12]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f004 fff2 	bl	8007bac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10a      	bne.n	8002be8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6818      	ldr	r0, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	b2d9      	uxtb	r1, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002be2:	461a      	mov	r2, r3
 8002be4:	f005 f9e4 	bl	8007fb0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b084      	sub	sp, #16
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	460b      	mov	r3, r1
 8002c04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c06:	78fb      	ldrb	r3, [r7, #3]
 8002c08:	f003 020f 	and.w	r2, r3, #15
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d901      	bls.n	8002c18 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e042      	b.n	8002c9e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	da0f      	bge.n	8002c40 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c20:	78fb      	ldrb	r3, [r7, #3]
 8002c22:	f003 020f 	and.w	r2, r3, #15
 8002c26:	4613      	mov	r3, r2
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	1a9b      	subs	r3, r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	3338      	adds	r3, #56	; 0x38
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	4413      	add	r3, r2
 8002c34:	3304      	adds	r3, #4
 8002c36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	705a      	strb	r2, [r3, #1]
 8002c3e:	e00f      	b.n	8002c60 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c40:	78fb      	ldrb	r3, [r7, #3]
 8002c42:	f003 020f 	and.w	r2, r3, #15
 8002c46:	4613      	mov	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	1a9b      	subs	r3, r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	4413      	add	r3, r2
 8002c56:	3304      	adds	r3, #4
 8002c58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c66:	78fb      	ldrb	r3, [r7, #3]
 8002c68:	f003 030f 	and.w	r3, r3, #15
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_PCD_EP_ClrStall+0x86>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e00e      	b.n	8002c9e <HAL_PCD_EP_ClrStall+0xa4>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68f9      	ldr	r1, [r7, #12]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f004 fffa 	bl	8007c88 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b08a      	sub	sp, #40	; 0x28
 8002caa:	af02      	add	r7, sp, #8
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	1a9b      	subs	r3, r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	3338      	adds	r3, #56	; 0x38
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	4413      	add	r3, r2
 8002cca:	3304      	adds	r3, #4
 8002ccc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	699a      	ldr	r2, [r3, #24]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d901      	bls.n	8002cde <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e06c      	b.n	8002db8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	69fa      	ldr	r2, [r7, #28]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d902      	bls.n	8002cfa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	3303      	adds	r3, #3
 8002cfe:	089b      	lsrs	r3, r3, #2
 8002d00:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d02:	e02b      	b.n	8002d5c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	695a      	ldr	r2, [r3, #20]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	69fa      	ldr	r2, [r7, #28]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d902      	bls.n	8002d20 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	3303      	adds	r3, #3
 8002d24:	089b      	lsrs	r3, r3, #2
 8002d26:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	68d9      	ldr	r1, [r3, #12]
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	6978      	ldr	r0, [r7, #20]
 8002d40:	f004 fe9e 	bl	8007a80 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	441a      	add	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	699a      	ldr	r2, [r3, #24]
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	441a      	add	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	015a      	lsls	r2, r3, #5
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	4413      	add	r3, r2
 8002d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d809      	bhi.n	8002d86 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	699a      	ldr	r2, [r3, #24]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d203      	bcs.n	8002d86 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1be      	bne.n	8002d04 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	695a      	ldr	r2, [r3, #20]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d811      	bhi.n	8002db6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	f003 030f 	and.w	r3, r3, #15
 8002d98:	2201      	movs	r2, #1
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002da6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	43db      	mvns	r3, r3
 8002dac:	6939      	ldr	r1, [r7, #16]
 8002dae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002db2:	4013      	ands	r3, r2
 8002db4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3720      	adds	r7, #32
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	333c      	adds	r3, #60	; 0x3c
 8002dd8:	3304      	adds	r3, #4
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	f040 80a0 	bne.w	8002f38 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d015      	beq.n	8002e2e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4a72      	ldr	r2, [pc, #456]	; (8002fd0 <PCD_EP_OutXfrComplete_int+0x210>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	f240 80dd 	bls.w	8002fc6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 80d7 	beq.w	8002fc6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	015a      	lsls	r2, r3, #5
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	4413      	add	r3, r2
 8002e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e24:	461a      	mov	r2, r3
 8002e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e2a:	6093      	str	r3, [r2, #8]
 8002e2c:	e0cb      	b.n	8002fc6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f003 0320 	and.w	r3, r3, #32
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d009      	beq.n	8002e4c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	015a      	lsls	r2, r3, #5
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	4413      	add	r3, r2
 8002e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e44:	461a      	mov	r2, r3
 8002e46:	2320      	movs	r3, #32
 8002e48:	6093      	str	r3, [r2, #8]
 8002e4a:	e0bc      	b.n	8002fc6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f040 80b7 	bne.w	8002fc6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	4a5d      	ldr	r2, [pc, #372]	; (8002fd0 <PCD_EP_OutXfrComplete_int+0x210>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d90f      	bls.n	8002e80 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00a      	beq.n	8002e80 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	015a      	lsls	r2, r3, #5
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4413      	add	r3, r2
 8002e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e76:	461a      	mov	r2, r3
 8002e78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e7c:	6093      	str	r3, [r2, #8]
 8002e7e:	e0a2      	b.n	8002fc6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	4613      	mov	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	1a9b      	subs	r3, r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002e92:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	0159      	lsls	r1, r3, #5
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	440b      	add	r3, r1
 8002e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002ea6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	4613      	mov	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4403      	add	r3, r0
 8002eb6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002eba:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	1a9b      	subs	r3, r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ece:	6819      	ldr	r1, [r3, #0]
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	1a9b      	subs	r3, r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4403      	add	r3, r0
 8002ede:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4419      	add	r1, r3
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	4613      	mov	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	1a9b      	subs	r3, r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4403      	add	r3, r0
 8002ef4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ef8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d114      	bne.n	8002f2a <PCD_EP_OutXfrComplete_int+0x16a>
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	4613      	mov	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	1a9b      	subs	r3, r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d108      	bne.n	8002f2a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6818      	ldr	r0, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f22:	461a      	mov	r2, r3
 8002f24:	2101      	movs	r1, #1
 8002f26:	f005 f843 	bl	8007fb0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	4619      	mov	r1, r3
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f007 f80f 	bl	8009f54 <HAL_PCD_DataOutStageCallback>
 8002f36:	e046      	b.n	8002fc6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4a26      	ldr	r2, [pc, #152]	; (8002fd4 <PCD_EP_OutXfrComplete_int+0x214>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d124      	bne.n	8002f8a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00a      	beq.n	8002f60 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	015a      	lsls	r2, r3, #5
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4413      	add	r3, r2
 8002f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f56:	461a      	mov	r2, r3
 8002f58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f5c:	6093      	str	r3, [r2, #8]
 8002f5e:	e032      	b.n	8002fc6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f003 0320 	and.w	r3, r3, #32
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d008      	beq.n	8002f7c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f76:	461a      	mov	r2, r3
 8002f78:	2320      	movs	r3, #32
 8002f7a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	4619      	mov	r1, r3
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f006 ffe6 	bl	8009f54 <HAL_PCD_DataOutStageCallback>
 8002f88:	e01d      	b.n	8002fc6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d114      	bne.n	8002fba <PCD_EP_OutXfrComplete_int+0x1fa>
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	4613      	mov	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	1a9b      	subs	r3, r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d108      	bne.n	8002fba <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6818      	ldr	r0, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	f004 fffb 	bl	8007fb0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f006 ffc7 	bl	8009f54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	4f54300a 	.word	0x4f54300a
 8002fd4:	4f54310a 	.word	0x4f54310a

08002fd8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	333c      	adds	r3, #60	; 0x3c
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	015a      	lsls	r2, r3, #5
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	4a15      	ldr	r2, [pc, #84]	; (8003060 <PCD_EP_OutSetupPacket_int+0x88>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d90e      	bls.n	800302c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003014:	2b00      	cmp	r3, #0
 8003016:	d009      	beq.n	800302c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	4413      	add	r3, r2
 8003020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003024:	461a      	mov	r2, r3
 8003026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800302a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f006 ff7f 	bl	8009f30 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4a0a      	ldr	r2, [pc, #40]	; (8003060 <PCD_EP_OutSetupPacket_int+0x88>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d90c      	bls.n	8003054 <PCD_EP_OutSetupPacket_int+0x7c>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d108      	bne.n	8003054 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800304c:	461a      	mov	r2, r3
 800304e:	2101      	movs	r1, #1
 8003050:	f004 ffae 	bl	8007fb0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	4f54300a 	.word	0x4f54300a

08003064 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	70fb      	strb	r3, [r7, #3]
 8003070:	4613      	mov	r3, r2
 8003072:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800307c:	78fb      	ldrb	r3, [r7, #3]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d107      	bne.n	8003092 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003082:	883b      	ldrh	r3, [r7, #0]
 8003084:	0419      	lsls	r1, r3, #16
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	430a      	orrs	r2, r1
 800308e:	629a      	str	r2, [r3, #40]	; 0x28
 8003090:	e028      	b.n	80030e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	0c1b      	lsrs	r3, r3, #16
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	4413      	add	r3, r2
 800309e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80030a0:	2300      	movs	r3, #0
 80030a2:	73fb      	strb	r3, [r7, #15]
 80030a4:	e00d      	b.n	80030c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
 80030ac:	3340      	adds	r3, #64	; 0x40
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	0c1b      	lsrs	r3, r3, #16
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	4413      	add	r3, r2
 80030ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
 80030be:	3301      	adds	r3, #1
 80030c0:	73fb      	strb	r3, [r7, #15]
 80030c2:	7bfa      	ldrb	r2, [r7, #15]
 80030c4:	78fb      	ldrb	r3, [r7, #3]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d3ec      	bcc.n	80030a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80030cc:	883b      	ldrh	r3, [r7, #0]
 80030ce:	0418      	lsls	r0, r3, #16
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6819      	ldr	r1, [r3, #0]
 80030d4:	78fb      	ldrb	r3, [r7, #3]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	4302      	orrs	r2, r0
 80030dc:	3340      	adds	r3, #64	; 0x40
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	460b      	mov	r3, r1
 80030fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	887a      	ldrh	r2, [r7, #2]
 8003104:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003142:	4b05      	ldr	r3, [pc, #20]	; (8003158 <HAL_PCDEx_ActivateLPM+0x44>)
 8003144:	4313      	orrs	r3, r2
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	10000003 	.word	0x10000003

0800315c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	460b      	mov	r3, r1
 8003166:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800317c:	4b19      	ldr	r3, [pc, #100]	; (80031e4 <HAL_PWREx_ConfigSupply+0x70>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b04      	cmp	r3, #4
 8003186:	d00a      	beq.n	800319e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003188:	4b16      	ldr	r3, [pc, #88]	; (80031e4 <HAL_PWREx_ConfigSupply+0x70>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	429a      	cmp	r2, r3
 8003194:	d001      	beq.n	800319a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e01f      	b.n	80031da <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	e01d      	b.n	80031da <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800319e:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <HAL_PWREx_ConfigSupply+0x70>)
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	f023 0207 	bic.w	r2, r3, #7
 80031a6:	490f      	ldr	r1, [pc, #60]	; (80031e4 <HAL_PWREx_ConfigSupply+0x70>)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80031ae:	f7fd fee7 	bl	8000f80 <HAL_GetTick>
 80031b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80031b4:	e009      	b.n	80031ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80031b6:	f7fd fee3 	bl	8000f80 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031c4:	d901      	bls.n	80031ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e007      	b.n	80031da <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80031ca:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <HAL_PWREx_ConfigSupply+0x70>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031d6:	d1ee      	bne.n	80031b6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	58024800 	.word	0x58024800

080031e8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80031ec:	4b05      	ldr	r3, [pc, #20]	; (8003204 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	4a04      	ldr	r2, [pc, #16]	; (8003204 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80031f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031f6:	60d3      	str	r3, [r2, #12]
}
 80031f8:	bf00      	nop
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	58024800 	.word	0x58024800

08003208 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08c      	sub	sp, #48	; 0x30
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e397      	b.n	800394a <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 8087 	beq.w	8003336 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003228:	4b9e      	ldr	r3, [pc, #632]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003230:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003232:	4b9c      	ldr	r3, [pc, #624]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 8003234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003236:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323a:	2b10      	cmp	r3, #16
 800323c:	d007      	beq.n	800324e <HAL_RCC_OscConfig+0x46>
 800323e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003240:	2b18      	cmp	r3, #24
 8003242:	d110      	bne.n	8003266 <HAL_RCC_OscConfig+0x5e>
 8003244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d10b      	bne.n	8003266 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800324e:	4b95      	ldr	r3, [pc, #596]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d06c      	beq.n	8003334 <HAL_RCC_OscConfig+0x12c>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d168      	bne.n	8003334 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e371      	b.n	800394a <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800326e:	d106      	bne.n	800327e <HAL_RCC_OscConfig+0x76>
 8003270:	4b8c      	ldr	r3, [pc, #560]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a8b      	ldr	r2, [pc, #556]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 8003276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	e02e      	b.n	80032dc <HAL_RCC_OscConfig+0xd4>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10c      	bne.n	80032a0 <HAL_RCC_OscConfig+0x98>
 8003286:	4b87      	ldr	r3, [pc, #540]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a86      	ldr	r2, [pc, #536]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 800328c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	4b84      	ldr	r3, [pc, #528]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a83      	ldr	r2, [pc, #524]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 8003298:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	e01d      	b.n	80032dc <HAL_RCC_OscConfig+0xd4>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032a8:	d10c      	bne.n	80032c4 <HAL_RCC_OscConfig+0xbc>
 80032aa:	4b7e      	ldr	r3, [pc, #504]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a7d      	ldr	r2, [pc, #500]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 80032b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	4b7b      	ldr	r3, [pc, #492]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a7a      	ldr	r2, [pc, #488]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 80032bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	e00b      	b.n	80032dc <HAL_RCC_OscConfig+0xd4>
 80032c4:	4b77      	ldr	r3, [pc, #476]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a76      	ldr	r2, [pc, #472]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 80032ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	4b74      	ldr	r3, [pc, #464]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a73      	ldr	r2, [pc, #460]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 80032d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d013      	beq.n	800330c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e4:	f7fd fe4c 	bl	8000f80 <HAL_GetTick>
 80032e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032ec:	f7fd fe48 	bl	8000f80 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b64      	cmp	r3, #100	; 0x64
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e325      	b.n	800394a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032fe:	4b69      	ldr	r3, [pc, #420]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0f0      	beq.n	80032ec <HAL_RCC_OscConfig+0xe4>
 800330a:	e014      	b.n	8003336 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330c:	f7fd fe38 	bl	8000f80 <HAL_GetTick>
 8003310:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003314:	f7fd fe34 	bl	8000f80 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b64      	cmp	r3, #100	; 0x64
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e311      	b.n	800394a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003326:	4b5f      	ldr	r3, [pc, #380]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f0      	bne.n	8003314 <HAL_RCC_OscConfig+0x10c>
 8003332:	e000      	b.n	8003336 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 808a 	beq.w	8003458 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003344:	4b57      	ldr	r3, [pc, #348]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800334c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800334e:	4b55      	ldr	r3, [pc, #340]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 8003350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003352:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d007      	beq.n	800336a <HAL_RCC_OscConfig+0x162>
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	2b18      	cmp	r3, #24
 800335e:	d137      	bne.n	80033d0 <HAL_RCC_OscConfig+0x1c8>
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d132      	bne.n	80033d0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800336a:	4b4e      	ldr	r3, [pc, #312]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b00      	cmp	r3, #0
 8003374:	d005      	beq.n	8003382 <HAL_RCC_OscConfig+0x17a>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e2e3      	b.n	800394a <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003382:	4b48      	ldr	r3, [pc, #288]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f023 0219 	bic.w	r2, r3, #25
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	4945      	ldr	r1, [pc, #276]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 8003390:	4313      	orrs	r3, r2
 8003392:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003394:	f7fd fdf4 	bl	8000f80 <HAL_GetTick>
 8003398:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800339c:	f7fd fdf0 	bl	8000f80 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e2cd      	b.n	800394a <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033ae:	4b3d      	ldr	r3, [pc, #244]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0304 	and.w	r3, r3, #4
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ba:	4b3a      	ldr	r3, [pc, #232]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	061b      	lsls	r3, r3, #24
 80033c8:	4936      	ldr	r1, [pc, #216]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033ce:	e043      	b.n	8003458 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d026      	beq.n	8003426 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80033d8:	4b32      	ldr	r3, [pc, #200]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f023 0219 	bic.w	r2, r3, #25
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	492f      	ldr	r1, [pc, #188]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ea:	f7fd fdc9 	bl	8000f80 <HAL_GetTick>
 80033ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033f2:	f7fd fdc5 	bl	8000f80 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e2a2      	b.n	800394a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003404:	4b27      	ldr	r3, [pc, #156]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0f0      	beq.n	80033f2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003410:	4b24      	ldr	r3, [pc, #144]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	061b      	lsls	r3, r3, #24
 800341e:	4921      	ldr	r1, [pc, #132]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 8003420:	4313      	orrs	r3, r2
 8003422:	604b      	str	r3, [r1, #4]
 8003424:	e018      	b.n	8003458 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003426:	4b1f      	ldr	r3, [pc, #124]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a1e      	ldr	r2, [pc, #120]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 800342c:	f023 0301 	bic.w	r3, r3, #1
 8003430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003432:	f7fd fda5 	bl	8000f80 <HAL_GetTick>
 8003436:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003438:	e008      	b.n	800344c <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800343a:	f7fd fda1 	bl	8000f80 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e27e      	b.n	800394a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800344c:	4b15      	ldr	r3, [pc, #84]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1f0      	bne.n	800343a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0310 	and.w	r3, r3, #16
 8003460:	2b00      	cmp	r3, #0
 8003462:	d06d      	beq.n	8003540 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003464:	4b0f      	ldr	r3, [pc, #60]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800346c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800346e:	4b0d      	ldr	r3, [pc, #52]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 8003470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003472:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	2b08      	cmp	r3, #8
 8003478:	d007      	beq.n	800348a <HAL_RCC_OscConfig+0x282>
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	2b18      	cmp	r3, #24
 800347e:	d11e      	bne.n	80034be <HAL_RCC_OscConfig+0x2b6>
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	2b01      	cmp	r3, #1
 8003488:	d119      	bne.n	80034be <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800348a:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <HAL_RCC_OscConfig+0x29c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003492:	2b00      	cmp	r3, #0
 8003494:	d008      	beq.n	80034a8 <HAL_RCC_OscConfig+0x2a0>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	2b80      	cmp	r3, #128	; 0x80
 800349c:	d004      	beq.n	80034a8 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e253      	b.n	800394a <HAL_RCC_OscConfig+0x742>
 80034a2:	bf00      	nop
 80034a4:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034a8:	4ba3      	ldr	r3, [pc, #652]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	061b      	lsls	r3, r3, #24
 80034b6:	49a0      	ldr	r1, [pc, #640]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034bc:	e040      	b.n	8003540 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d023      	beq.n	800350e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80034c6:	4b9c      	ldr	r3, [pc, #624]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a9b      	ldr	r2, [pc, #620]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 80034cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d2:	f7fd fd55 	bl	8000f80 <HAL_GetTick>
 80034d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80034da:	f7fd fd51 	bl	8000f80 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e22e      	b.n	800394a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034ec:	4b92      	ldr	r3, [pc, #584]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0f0      	beq.n	80034da <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034f8:	4b8f      	ldr	r3, [pc, #572]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	061b      	lsls	r3, r3, #24
 8003506:	498c      	ldr	r1, [pc, #560]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 8003508:	4313      	orrs	r3, r2
 800350a:	60cb      	str	r3, [r1, #12]
 800350c:	e018      	b.n	8003540 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800350e:	4b8a      	ldr	r3, [pc, #552]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a89      	ldr	r2, [pc, #548]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 8003514:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003518:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351a:	f7fd fd31 	bl	8000f80 <HAL_GetTick>
 800351e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003520:	e008      	b.n	8003534 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003522:	f7fd fd2d 	bl	8000f80 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e20a      	b.n	800394a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003534:	4b80      	ldr	r3, [pc, #512]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1f0      	bne.n	8003522 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0308 	and.w	r3, r3, #8
 8003548:	2b00      	cmp	r3, #0
 800354a:	d036      	beq.n	80035ba <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d019      	beq.n	8003588 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003554:	4b78      	ldr	r3, [pc, #480]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 8003556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003558:	4a77      	ldr	r2, [pc, #476]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003560:	f7fd fd0e 	bl	8000f80 <HAL_GetTick>
 8003564:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003568:	f7fd fd0a 	bl	8000f80 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e1e7      	b.n	800394a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800357a:	4b6f      	ldr	r3, [pc, #444]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 800357c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0f0      	beq.n	8003568 <HAL_RCC_OscConfig+0x360>
 8003586:	e018      	b.n	80035ba <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003588:	4b6b      	ldr	r3, [pc, #428]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 800358a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800358c:	4a6a      	ldr	r2, [pc, #424]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 800358e:	f023 0301 	bic.w	r3, r3, #1
 8003592:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003594:	f7fd fcf4 	bl	8000f80 <HAL_GetTick>
 8003598:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800359c:	f7fd fcf0 	bl	8000f80 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e1cd      	b.n	800394a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035ae:	4b62      	ldr	r3, [pc, #392]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 80035b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f0      	bne.n	800359c <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0320 	and.w	r3, r3, #32
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d036      	beq.n	8003634 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d019      	beq.n	8003602 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035ce:	4b5a      	ldr	r3, [pc, #360]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a59      	ldr	r2, [pc, #356]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 80035d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035da:	f7fd fcd1 	bl	8000f80 <HAL_GetTick>
 80035de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80035e2:	f7fd fccd 	bl	8000f80 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e1aa      	b.n	800394a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035f4:	4b50      	ldr	r3, [pc, #320]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0f0      	beq.n	80035e2 <HAL_RCC_OscConfig+0x3da>
 8003600:	e018      	b.n	8003634 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003602:	4b4d      	ldr	r3, [pc, #308]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a4c      	ldr	r2, [pc, #304]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 8003608:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800360c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800360e:	f7fd fcb7 	bl	8000f80 <HAL_GetTick>
 8003612:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003616:	f7fd fcb3 	bl	8000f80 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e190      	b.n	800394a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003628:	4b43      	ldr	r3, [pc, #268]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1f0      	bne.n	8003616 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 8085 	beq.w	800374c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003642:	4b3e      	ldr	r3, [pc, #248]	; (800373c <HAL_RCC_OscConfig+0x534>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a3d      	ldr	r2, [pc, #244]	; (800373c <HAL_RCC_OscConfig+0x534>)
 8003648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800364c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800364e:	f7fd fc97 	bl	8000f80 <HAL_GetTick>
 8003652:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003656:	f7fd fc93 	bl	8000f80 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b64      	cmp	r3, #100	; 0x64
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e170      	b.n	800394a <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003668:	4b34      	ldr	r3, [pc, #208]	; (800373c <HAL_RCC_OscConfig+0x534>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0f0      	beq.n	8003656 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d106      	bne.n	800368a <HAL_RCC_OscConfig+0x482>
 800367c:	4b2e      	ldr	r3, [pc, #184]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 800367e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003680:	4a2d      	ldr	r2, [pc, #180]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 8003682:	f043 0301 	orr.w	r3, r3, #1
 8003686:	6713      	str	r3, [r2, #112]	; 0x70
 8003688:	e02d      	b.n	80036e6 <HAL_RCC_OscConfig+0x4de>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10c      	bne.n	80036ac <HAL_RCC_OscConfig+0x4a4>
 8003692:	4b29      	ldr	r3, [pc, #164]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 8003694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003696:	4a28      	ldr	r2, [pc, #160]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 8003698:	f023 0301 	bic.w	r3, r3, #1
 800369c:	6713      	str	r3, [r2, #112]	; 0x70
 800369e:	4b26      	ldr	r3, [pc, #152]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 80036a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a2:	4a25      	ldr	r2, [pc, #148]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 80036a4:	f023 0304 	bic.w	r3, r3, #4
 80036a8:	6713      	str	r3, [r2, #112]	; 0x70
 80036aa:	e01c      	b.n	80036e6 <HAL_RCC_OscConfig+0x4de>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	2b05      	cmp	r3, #5
 80036b2:	d10c      	bne.n	80036ce <HAL_RCC_OscConfig+0x4c6>
 80036b4:	4b20      	ldr	r3, [pc, #128]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 80036b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b8:	4a1f      	ldr	r2, [pc, #124]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 80036ba:	f043 0304 	orr.w	r3, r3, #4
 80036be:	6713      	str	r3, [r2, #112]	; 0x70
 80036c0:	4b1d      	ldr	r3, [pc, #116]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 80036c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c4:	4a1c      	ldr	r2, [pc, #112]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	6713      	str	r3, [r2, #112]	; 0x70
 80036cc:	e00b      	b.n	80036e6 <HAL_RCC_OscConfig+0x4de>
 80036ce:	4b1a      	ldr	r3, [pc, #104]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 80036d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d2:	4a19      	ldr	r2, [pc, #100]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 80036d4:	f023 0301 	bic.w	r3, r3, #1
 80036d8:	6713      	str	r3, [r2, #112]	; 0x70
 80036da:	4b17      	ldr	r3, [pc, #92]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 80036dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036de:	4a16      	ldr	r2, [pc, #88]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 80036e0:	f023 0304 	bic.w	r3, r3, #4
 80036e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d015      	beq.n	800371a <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ee:	f7fd fc47 	bl	8000f80 <HAL_GetTick>
 80036f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036f4:	e00a      	b.n	800370c <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036f6:	f7fd fc43 	bl	8000f80 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	f241 3288 	movw	r2, #5000	; 0x1388
 8003704:	4293      	cmp	r3, r2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e11e      	b.n	800394a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800370c:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <HAL_RCC_OscConfig+0x530>)
 800370e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0ee      	beq.n	80036f6 <HAL_RCC_OscConfig+0x4ee>
 8003718:	e018      	b.n	800374c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371a:	f7fd fc31 	bl	8000f80 <HAL_GetTick>
 800371e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003720:	e00e      	b.n	8003740 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003722:	f7fd fc2d 	bl	8000f80 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003730:	4293      	cmp	r3, r2
 8003732:	d905      	bls.n	8003740 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e108      	b.n	800394a <HAL_RCC_OscConfig+0x742>
 8003738:	58024400 	.word	0x58024400
 800373c:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003740:	4b84      	ldr	r3, [pc, #528]	; (8003954 <HAL_RCC_OscConfig+0x74c>)
 8003742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1ea      	bne.n	8003722 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 80f9 	beq.w	8003948 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003756:	4b7f      	ldr	r3, [pc, #508]	; (8003954 <HAL_RCC_OscConfig+0x74c>)
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800375e:	2b18      	cmp	r3, #24
 8003760:	f000 80b4 	beq.w	80038cc <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	2b02      	cmp	r3, #2
 800376a:	f040 8095 	bne.w	8003898 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376e:	4b79      	ldr	r3, [pc, #484]	; (8003954 <HAL_RCC_OscConfig+0x74c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a78      	ldr	r2, [pc, #480]	; (8003954 <HAL_RCC_OscConfig+0x74c>)
 8003774:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377a:	f7fd fc01 	bl	8000f80 <HAL_GetTick>
 800377e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003782:	f7fd fbfd 	bl	8000f80 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e0da      	b.n	800394a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003794:	4b6f      	ldr	r3, [pc, #444]	; (8003954 <HAL_RCC_OscConfig+0x74c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1f0      	bne.n	8003782 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037a0:	4b6c      	ldr	r3, [pc, #432]	; (8003954 <HAL_RCC_OscConfig+0x74c>)
 80037a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037a4:	4b6c      	ldr	r3, [pc, #432]	; (8003958 <HAL_RCC_OscConfig+0x750>)
 80037a6:	4013      	ands	r3, r2
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80037b0:	0112      	lsls	r2, r2, #4
 80037b2:	430a      	orrs	r2, r1
 80037b4:	4967      	ldr	r1, [pc, #412]	; (8003954 <HAL_RCC_OscConfig+0x74c>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	628b      	str	r3, [r1, #40]	; 0x28
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	3b01      	subs	r3, #1
 80037c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c8:	3b01      	subs	r3, #1
 80037ca:	025b      	lsls	r3, r3, #9
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d4:	3b01      	subs	r3, #1
 80037d6:	041b      	lsls	r3, r3, #16
 80037d8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80037dc:	431a      	orrs	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e2:	3b01      	subs	r3, #1
 80037e4:	061b      	lsls	r3, r3, #24
 80037e6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80037ea:	495a      	ldr	r1, [pc, #360]	; (8003954 <HAL_RCC_OscConfig+0x74c>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80037f0:	4b58      	ldr	r3, [pc, #352]	; (8003954 <HAL_RCC_OscConfig+0x74c>)
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	4a57      	ldr	r2, [pc, #348]	; (8003954 <HAL_RCC_OscConfig+0x74c>)
 80037f6:	f023 0301 	bic.w	r3, r3, #1
 80037fa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80037fc:	4b55      	ldr	r3, [pc, #340]	; (8003954 <HAL_RCC_OscConfig+0x74c>)
 80037fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003800:	4b56      	ldr	r3, [pc, #344]	; (800395c <HAL_RCC_OscConfig+0x754>)
 8003802:	4013      	ands	r3, r2
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003808:	00d2      	lsls	r2, r2, #3
 800380a:	4952      	ldr	r1, [pc, #328]	; (8003954 <HAL_RCC_OscConfig+0x74c>)
 800380c:	4313      	orrs	r3, r2
 800380e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003810:	4b50      	ldr	r3, [pc, #320]	; (8003954 <HAL_RCC_OscConfig+0x74c>)
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	f023 020c 	bic.w	r2, r3, #12
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	494d      	ldr	r1, [pc, #308]	; (8003954 <HAL_RCC_OscConfig+0x74c>)
 800381e:	4313      	orrs	r3, r2
 8003820:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003822:	4b4c      	ldr	r3, [pc, #304]	; (8003954 <HAL_RCC_OscConfig+0x74c>)
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	f023 0202 	bic.w	r2, r3, #2
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382e:	4949      	ldr	r1, [pc, #292]	; (8003954 <HAL_RCC_OscConfig+0x74c>)
 8003830:	4313      	orrs	r3, r2
 8003832:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003834:	4b47      	ldr	r3, [pc, #284]	; (8003954 <HAL_RCC_OscConfig+0x74c>)
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	4a46      	ldr	r2, [pc, #280]	; (8003954 <HAL_RCC_OscConfig+0x74c>)
 800383a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003840:	4b44      	ldr	r3, [pc, #272]	; (8003954 <HAL_RCC_OscConfig+0x74c>)
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003844:	4a43      	ldr	r2, [pc, #268]	; (8003954 <HAL_RCC_OscConfig+0x74c>)
 8003846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800384a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800384c:	4b41      	ldr	r3, [pc, #260]	; (8003954 <HAL_RCC_OscConfig+0x74c>)
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003850:	4a40      	ldr	r2, [pc, #256]	; (8003954 <HAL_RCC_OscConfig+0x74c>)
 8003852:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003856:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003858:	4b3e      	ldr	r3, [pc, #248]	; (8003954 <HAL_RCC_OscConfig+0x74c>)
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	4a3d      	ldr	r2, [pc, #244]	; (8003954 <HAL_RCC_OscConfig+0x74c>)
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003864:	4b3b      	ldr	r3, [pc, #236]	; (8003954 <HAL_RCC_OscConfig+0x74c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a3a      	ldr	r2, [pc, #232]	; (8003954 <HAL_RCC_OscConfig+0x74c>)
 800386a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800386e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003870:	f7fd fb86 	bl	8000f80 <HAL_GetTick>
 8003874:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003878:	f7fd fb82 	bl	8000f80 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e05f      	b.n	800394a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800388a:	4b32      	ldr	r3, [pc, #200]	; (8003954 <HAL_RCC_OscConfig+0x74c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0f0      	beq.n	8003878 <HAL_RCC_OscConfig+0x670>
 8003896:	e057      	b.n	8003948 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003898:	4b2e      	ldr	r3, [pc, #184]	; (8003954 <HAL_RCC_OscConfig+0x74c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a2d      	ldr	r2, [pc, #180]	; (8003954 <HAL_RCC_OscConfig+0x74c>)
 800389e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a4:	f7fd fb6c 	bl	8000f80 <HAL_GetTick>
 80038a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ac:	f7fd fb68 	bl	8000f80 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e045      	b.n	800394a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038be:	4b25      	ldr	r3, [pc, #148]	; (8003954 <HAL_RCC_OscConfig+0x74c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f0      	bne.n	80038ac <HAL_RCC_OscConfig+0x6a4>
 80038ca:	e03d      	b.n	8003948 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80038cc:	4b21      	ldr	r3, [pc, #132]	; (8003954 <HAL_RCC_OscConfig+0x74c>)
 80038ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80038d2:	4b20      	ldr	r3, [pc, #128]	; (8003954 <HAL_RCC_OscConfig+0x74c>)
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d031      	beq.n	8003944 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	f003 0203 	and.w	r2, r3, #3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d12a      	bne.n	8003944 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	091b      	lsrs	r3, r3, #4
 80038f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d122      	bne.n	8003944 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003908:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800390a:	429a      	cmp	r2, r3
 800390c:	d11a      	bne.n	8003944 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	0a5b      	lsrs	r3, r3, #9
 8003912:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800391c:	429a      	cmp	r2, r3
 800391e:	d111      	bne.n	8003944 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	0c1b      	lsrs	r3, r3, #16
 8003924:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800392e:	429a      	cmp	r2, r3
 8003930:	d108      	bne.n	8003944 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	0e1b      	lsrs	r3, r3, #24
 8003936:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003940:	429a      	cmp	r2, r3
 8003942:	d001      	beq.n	8003948 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e000      	b.n	800394a <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3730      	adds	r7, #48	; 0x30
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	58024400 	.word	0x58024400
 8003958:	fffffc0c 	.word	0xfffffc0c
 800395c:	ffff0007 	.word	0xffff0007

08003960 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e19c      	b.n	8003cae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003974:	4b8a      	ldr	r3, [pc, #552]	; (8003ba0 <HAL_RCC_ClockConfig+0x240>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 030f 	and.w	r3, r3, #15
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d910      	bls.n	80039a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003982:	4b87      	ldr	r3, [pc, #540]	; (8003ba0 <HAL_RCC_ClockConfig+0x240>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f023 020f 	bic.w	r2, r3, #15
 800398a:	4985      	ldr	r1, [pc, #532]	; (8003ba0 <HAL_RCC_ClockConfig+0x240>)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	4313      	orrs	r3, r2
 8003990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003992:	4b83      	ldr	r3, [pc, #524]	; (8003ba0 <HAL_RCC_ClockConfig+0x240>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	429a      	cmp	r2, r3
 800399e:	d001      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e184      	b.n	8003cae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d010      	beq.n	80039d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	4b7b      	ldr	r3, [pc, #492]	; (8003ba4 <HAL_RCC_ClockConfig+0x244>)
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039bc:	429a      	cmp	r2, r3
 80039be:	d908      	bls.n	80039d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80039c0:	4b78      	ldr	r3, [pc, #480]	; (8003ba4 <HAL_RCC_ClockConfig+0x244>)
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	4975      	ldr	r1, [pc, #468]	; (8003ba4 <HAL_RCC_ClockConfig+0x244>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0308 	and.w	r3, r3, #8
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d010      	beq.n	8003a00 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	695a      	ldr	r2, [r3, #20]
 80039e2:	4b70      	ldr	r3, [pc, #448]	; (8003ba4 <HAL_RCC_ClockConfig+0x244>)
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d908      	bls.n	8003a00 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80039ee:	4b6d      	ldr	r3, [pc, #436]	; (8003ba4 <HAL_RCC_ClockConfig+0x244>)
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	496a      	ldr	r1, [pc, #424]	; (8003ba4 <HAL_RCC_ClockConfig+0x244>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0310 	and.w	r3, r3, #16
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d010      	beq.n	8003a2e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	699a      	ldr	r2, [r3, #24]
 8003a10:	4b64      	ldr	r3, [pc, #400]	; (8003ba4 <HAL_RCC_ClockConfig+0x244>)
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d908      	bls.n	8003a2e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a1c:	4b61      	ldr	r3, [pc, #388]	; (8003ba4 <HAL_RCC_ClockConfig+0x244>)
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	495e      	ldr	r1, [pc, #376]	; (8003ba4 <HAL_RCC_ClockConfig+0x244>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d010      	beq.n	8003a5c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69da      	ldr	r2, [r3, #28]
 8003a3e:	4b59      	ldr	r3, [pc, #356]	; (8003ba4 <HAL_RCC_ClockConfig+0x244>)
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d908      	bls.n	8003a5c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003a4a:	4b56      	ldr	r3, [pc, #344]	; (8003ba4 <HAL_RCC_ClockConfig+0x244>)
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	4953      	ldr	r1, [pc, #332]	; (8003ba4 <HAL_RCC_ClockConfig+0x244>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d010      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	4b4d      	ldr	r3, [pc, #308]	; (8003ba4 <HAL_RCC_ClockConfig+0x244>)
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	f003 030f 	and.w	r3, r3, #15
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d908      	bls.n	8003a8a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a78:	4b4a      	ldr	r3, [pc, #296]	; (8003ba4 <HAL_RCC_ClockConfig+0x244>)
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	f023 020f 	bic.w	r2, r3, #15
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	4947      	ldr	r1, [pc, #284]	; (8003ba4 <HAL_RCC_ClockConfig+0x244>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d055      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003a96:	4b43      	ldr	r3, [pc, #268]	; (8003ba4 <HAL_RCC_ClockConfig+0x244>)
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	4940      	ldr	r1, [pc, #256]	; (8003ba4 <HAL_RCC_ClockConfig+0x244>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d107      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ab0:	4b3c      	ldr	r3, [pc, #240]	; (8003ba4 <HAL_RCC_ClockConfig+0x244>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d121      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0f6      	b.n	8003cae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b03      	cmp	r3, #3
 8003ac6:	d107      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ac8:	4b36      	ldr	r3, [pc, #216]	; (8003ba4 <HAL_RCC_ClockConfig+0x244>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d115      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e0ea      	b.n	8003cae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d107      	bne.n	8003af0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ae0:	4b30      	ldr	r3, [pc, #192]	; (8003ba4 <HAL_RCC_ClockConfig+0x244>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d109      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e0de      	b.n	8003cae <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003af0:	4b2c      	ldr	r3, [pc, #176]	; (8003ba4 <HAL_RCC_ClockConfig+0x244>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e0d6      	b.n	8003cae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b00:	4b28      	ldr	r3, [pc, #160]	; (8003ba4 <HAL_RCC_ClockConfig+0x244>)
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	f023 0207 	bic.w	r2, r3, #7
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	4925      	ldr	r1, [pc, #148]	; (8003ba4 <HAL_RCC_ClockConfig+0x244>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b12:	f7fd fa35 	bl	8000f80 <HAL_GetTick>
 8003b16:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b18:	e00a      	b.n	8003b30 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b1a:	f7fd fa31 	bl	8000f80 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e0be      	b.n	8003cae <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b30:	4b1c      	ldr	r3, [pc, #112]	; (8003ba4 <HAL_RCC_ClockConfig+0x244>)
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d1eb      	bne.n	8003b1a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d010      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	4b14      	ldr	r3, [pc, #80]	; (8003ba4 <HAL_RCC_ClockConfig+0x244>)
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d208      	bcs.n	8003b70 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b5e:	4b11      	ldr	r3, [pc, #68]	; (8003ba4 <HAL_RCC_ClockConfig+0x244>)
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	f023 020f 	bic.w	r2, r3, #15
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	490e      	ldr	r1, [pc, #56]	; (8003ba4 <HAL_RCC_ClockConfig+0x244>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b70:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <HAL_RCC_ClockConfig+0x240>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d214      	bcs.n	8003ba8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7e:	4b08      	ldr	r3, [pc, #32]	; (8003ba0 <HAL_RCC_ClockConfig+0x240>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f023 020f 	bic.w	r2, r3, #15
 8003b86:	4906      	ldr	r1, [pc, #24]	; (8003ba0 <HAL_RCC_ClockConfig+0x240>)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b8e:	4b04      	ldr	r3, [pc, #16]	; (8003ba0 <HAL_RCC_ClockConfig+0x240>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d005      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e086      	b.n	8003cae <HAL_RCC_ClockConfig+0x34e>
 8003ba0:	52002000 	.word	0x52002000
 8003ba4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d010      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691a      	ldr	r2, [r3, #16]
 8003bb8:	4b3f      	ldr	r3, [pc, #252]	; (8003cb8 <HAL_RCC_ClockConfig+0x358>)
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d208      	bcs.n	8003bd6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003bc4:	4b3c      	ldr	r3, [pc, #240]	; (8003cb8 <HAL_RCC_ClockConfig+0x358>)
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	4939      	ldr	r1, [pc, #228]	; (8003cb8 <HAL_RCC_ClockConfig+0x358>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d010      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695a      	ldr	r2, [r3, #20]
 8003be6:	4b34      	ldr	r3, [pc, #208]	; (8003cb8 <HAL_RCC_ClockConfig+0x358>)
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d208      	bcs.n	8003c04 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003bf2:	4b31      	ldr	r3, [pc, #196]	; (8003cb8 <HAL_RCC_ClockConfig+0x358>)
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	492e      	ldr	r1, [pc, #184]	; (8003cb8 <HAL_RCC_ClockConfig+0x358>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0310 	and.w	r3, r3, #16
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d010      	beq.n	8003c32 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	699a      	ldr	r2, [r3, #24]
 8003c14:	4b28      	ldr	r3, [pc, #160]	; (8003cb8 <HAL_RCC_ClockConfig+0x358>)
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d208      	bcs.n	8003c32 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c20:	4b25      	ldr	r3, [pc, #148]	; (8003cb8 <HAL_RCC_ClockConfig+0x358>)
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	4922      	ldr	r1, [pc, #136]	; (8003cb8 <HAL_RCC_ClockConfig+0x358>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0320 	and.w	r3, r3, #32
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d010      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	69da      	ldr	r2, [r3, #28]
 8003c42:	4b1d      	ldr	r3, [pc, #116]	; (8003cb8 <HAL_RCC_ClockConfig+0x358>)
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d208      	bcs.n	8003c60 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003c4e:	4b1a      	ldr	r3, [pc, #104]	; (8003cb8 <HAL_RCC_ClockConfig+0x358>)
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	4917      	ldr	r1, [pc, #92]	; (8003cb8 <HAL_RCC_ClockConfig+0x358>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c60:	f000 f834 	bl	8003ccc <HAL_RCC_GetSysClockFreq>
 8003c64:	4602      	mov	r2, r0
 8003c66:	4b14      	ldr	r3, [pc, #80]	; (8003cb8 <HAL_RCC_ClockConfig+0x358>)
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	0a1b      	lsrs	r3, r3, #8
 8003c6c:	f003 030f 	and.w	r3, r3, #15
 8003c70:	4912      	ldr	r1, [pc, #72]	; (8003cbc <HAL_RCC_ClockConfig+0x35c>)
 8003c72:	5ccb      	ldrb	r3, [r1, r3]
 8003c74:	f003 031f 	and.w	r3, r3, #31
 8003c78:	fa22 f303 	lsr.w	r3, r2, r3
 8003c7c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c7e:	4b0e      	ldr	r3, [pc, #56]	; (8003cb8 <HAL_RCC_ClockConfig+0x358>)
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	4a0d      	ldr	r2, [pc, #52]	; (8003cbc <HAL_RCC_ClockConfig+0x35c>)
 8003c88:	5cd3      	ldrb	r3, [r2, r3]
 8003c8a:	f003 031f 	and.w	r3, r3, #31
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	fa22 f303 	lsr.w	r3, r2, r3
 8003c94:	4a0a      	ldr	r2, [pc, #40]	; (8003cc0 <HAL_RCC_ClockConfig+0x360>)
 8003c96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c98:	4a0a      	ldr	r2, [pc, #40]	; (8003cc4 <HAL_RCC_ClockConfig+0x364>)
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003c9e:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <HAL_RCC_ClockConfig+0x368>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fd f922 	bl	8000eec <HAL_InitTick>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	58024400 	.word	0x58024400
 8003cbc:	0800a5a8 	.word	0x0800a5a8
 8003cc0:	24000008 	.word	0x24000008
 8003cc4:	24000004 	.word	0x24000004
 8003cc8:	2400000c 	.word	0x2400000c

08003ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b089      	sub	sp, #36	; 0x24
 8003cd0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cd2:	4bb3      	ldr	r3, [pc, #716]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cda:	2b18      	cmp	r3, #24
 8003cdc:	f200 8155 	bhi.w	8003f8a <HAL_RCC_GetSysClockFreq+0x2be>
 8003ce0:	a201      	add	r2, pc, #4	; (adr r2, 8003ce8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce6:	bf00      	nop
 8003ce8:	08003d4d 	.word	0x08003d4d
 8003cec:	08003f8b 	.word	0x08003f8b
 8003cf0:	08003f8b 	.word	0x08003f8b
 8003cf4:	08003f8b 	.word	0x08003f8b
 8003cf8:	08003f8b 	.word	0x08003f8b
 8003cfc:	08003f8b 	.word	0x08003f8b
 8003d00:	08003f8b 	.word	0x08003f8b
 8003d04:	08003f8b 	.word	0x08003f8b
 8003d08:	08003d73 	.word	0x08003d73
 8003d0c:	08003f8b 	.word	0x08003f8b
 8003d10:	08003f8b 	.word	0x08003f8b
 8003d14:	08003f8b 	.word	0x08003f8b
 8003d18:	08003f8b 	.word	0x08003f8b
 8003d1c:	08003f8b 	.word	0x08003f8b
 8003d20:	08003f8b 	.word	0x08003f8b
 8003d24:	08003f8b 	.word	0x08003f8b
 8003d28:	08003d79 	.word	0x08003d79
 8003d2c:	08003f8b 	.word	0x08003f8b
 8003d30:	08003f8b 	.word	0x08003f8b
 8003d34:	08003f8b 	.word	0x08003f8b
 8003d38:	08003f8b 	.word	0x08003f8b
 8003d3c:	08003f8b 	.word	0x08003f8b
 8003d40:	08003f8b 	.word	0x08003f8b
 8003d44:	08003f8b 	.word	0x08003f8b
 8003d48:	08003d7f 	.word	0x08003d7f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d4c:	4b94      	ldr	r3, [pc, #592]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0320 	and.w	r3, r3, #32
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d009      	beq.n	8003d6c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003d58:	4b91      	ldr	r3, [pc, #580]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	08db      	lsrs	r3, r3, #3
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	4a90      	ldr	r2, [pc, #576]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d64:	fa22 f303 	lsr.w	r3, r2, r3
 8003d68:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003d6a:	e111      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003d6c:	4b8d      	ldr	r3, [pc, #564]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d6e:	61bb      	str	r3, [r7, #24]
    break;
 8003d70:	e10e      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003d72:	4b8d      	ldr	r3, [pc, #564]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003d74:	61bb      	str	r3, [r7, #24]
    break;
 8003d76:	e10b      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003d78:	4b8c      	ldr	r3, [pc, #560]	; (8003fac <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003d7a:	61bb      	str	r3, [r7, #24]
    break;
 8003d7c:	e108      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d7e:	4b88      	ldr	r3, [pc, #544]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003d88:	4b85      	ldr	r3, [pc, #532]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8c:	091b      	lsrs	r3, r3, #4
 8003d8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d92:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003d94:	4b82      	ldr	r3, [pc, #520]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003d9e:	4b80      	ldr	r3, [pc, #512]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da2:	08db      	lsrs	r3, r3, #3
 8003da4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	fb02 f303 	mul.w	r3, r2, r3
 8003dae:	ee07 3a90 	vmov	s15, r3
 8003db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003db6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 80e1 	beq.w	8003f84 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	f000 8083 	beq.w	8003ed0 <HAL_RCC_GetSysClockFreq+0x204>
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	f200 80a1 	bhi.w	8003f14 <HAL_RCC_GetSysClockFreq+0x248>
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <HAL_RCC_GetSysClockFreq+0x114>
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d056      	beq.n	8003e8c <HAL_RCC_GetSysClockFreq+0x1c0>
 8003dde:	e099      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003de0:	4b6f      	ldr	r3, [pc, #444]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0320 	and.w	r3, r3, #32
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d02d      	beq.n	8003e48 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003dec:	4b6c      	ldr	r3, [pc, #432]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	08db      	lsrs	r3, r3, #3
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	4a6b      	ldr	r2, [pc, #428]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003df8:	fa22 f303 	lsr.w	r3, r2, r3
 8003dfc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	ee07 3a90 	vmov	s15, r3
 8003e04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	ee07 3a90 	vmov	s15, r3
 8003e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e16:	4b62      	ldr	r3, [pc, #392]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e1e:	ee07 3a90 	vmov	s15, r3
 8003e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e26:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e2a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003fb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e42:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003e46:	e087      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	ee07 3a90 	vmov	s15, r3
 8003e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e52:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003fb4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e5a:	4b51      	ldr	r3, [pc, #324]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e62:	ee07 3a90 	vmov	s15, r3
 8003e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e6e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003fb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e8a:	e065      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	ee07 3a90 	vmov	s15, r3
 8003e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e96:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003fb8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e9e:	4b40      	ldr	r3, [pc, #256]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ea6:	ee07 3a90 	vmov	s15, r3
 8003eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eae:	ed97 6a02 	vldr	s12, [r7, #8]
 8003eb2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003fb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ebe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ece:	e043      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	ee07 3a90 	vmov	s15, r3
 8003ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eda:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003fbc <HAL_RCC_GetSysClockFreq+0x2f0>
 8003ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ee2:	4b2f      	ldr	r3, [pc, #188]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eea:	ee07 3a90 	vmov	s15, r3
 8003eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ef2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ef6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003fb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f12:	e021      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	ee07 3a90 	vmov	s15, r3
 8003f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f1e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003fb8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f26:	4b1e      	ldr	r3, [pc, #120]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f2e:	ee07 3a90 	vmov	s15, r3
 8003f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f36:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f3a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003fb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f56:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003f58:	4b11      	ldr	r3, [pc, #68]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	0a5b      	lsrs	r3, r3, #9
 8003f5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f62:	3301      	adds	r3, #1
 8003f64:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	ee07 3a90 	vmov	s15, r3
 8003f6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f70:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f7c:	ee17 3a90 	vmov	r3, s15
 8003f80:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003f82:	e005      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	61bb      	str	r3, [r7, #24]
    break;
 8003f88:	e002      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003f8a:	4b07      	ldr	r3, [pc, #28]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003f8c:	61bb      	str	r3, [r7, #24]
    break;
 8003f8e:	bf00      	nop
  }

  return sysclockfreq;
 8003f90:	69bb      	ldr	r3, [r7, #24]
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3724      	adds	r7, #36	; 0x24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	58024400 	.word	0x58024400
 8003fa4:	03d09000 	.word	0x03d09000
 8003fa8:	003d0900 	.word	0x003d0900
 8003fac:	007a1200 	.word	0x007a1200
 8003fb0:	46000000 	.word	0x46000000
 8003fb4:	4c742400 	.word	0x4c742400
 8003fb8:	4a742400 	.word	0x4a742400
 8003fbc:	4af42400 	.word	0x4af42400

08003fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003fc6:	f7ff fe81 	bl	8003ccc <HAL_RCC_GetSysClockFreq>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	4b10      	ldr	r3, [pc, #64]	; (8004010 <HAL_RCC_GetHCLKFreq+0x50>)
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	0a1b      	lsrs	r3, r3, #8
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	490f      	ldr	r1, [pc, #60]	; (8004014 <HAL_RCC_GetHCLKFreq+0x54>)
 8003fd8:	5ccb      	ldrb	r3, [r1, r3]
 8003fda:	f003 031f 	and.w	r3, r3, #31
 8003fde:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fe4:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <HAL_RCC_GetHCLKFreq+0x50>)
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	f003 030f 	and.w	r3, r3, #15
 8003fec:	4a09      	ldr	r2, [pc, #36]	; (8004014 <HAL_RCC_GetHCLKFreq+0x54>)
 8003fee:	5cd3      	ldrb	r3, [r2, r3]
 8003ff0:	f003 031f 	and.w	r3, r3, #31
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8003ffa:	4a07      	ldr	r2, [pc, #28]	; (8004018 <HAL_RCC_GetHCLKFreq+0x58>)
 8003ffc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ffe:	4a07      	ldr	r2, [pc, #28]	; (800401c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004004:	4b04      	ldr	r3, [pc, #16]	; (8004018 <HAL_RCC_GetHCLKFreq+0x58>)
 8004006:	681b      	ldr	r3, [r3, #0]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3708      	adds	r7, #8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	58024400 	.word	0x58024400
 8004014:	0800a5a8 	.word	0x0800a5a8
 8004018:	24000008 	.word	0x24000008
 800401c:	24000004 	.word	0x24000004

08004020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004024:	f7ff ffcc 	bl	8003fc0 <HAL_RCC_GetHCLKFreq>
 8004028:	4602      	mov	r2, r0
 800402a:	4b06      	ldr	r3, [pc, #24]	; (8004044 <HAL_RCC_GetPCLK1Freq+0x24>)
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	091b      	lsrs	r3, r3, #4
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	4904      	ldr	r1, [pc, #16]	; (8004048 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004036:	5ccb      	ldrb	r3, [r1, r3]
 8004038:	f003 031f 	and.w	r3, r3, #31
 800403c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004040:	4618      	mov	r0, r3
 8004042:	bd80      	pop	{r7, pc}
 8004044:	58024400 	.word	0x58024400
 8004048:	0800a5a8 	.word	0x0800a5a8

0800404c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004050:	f7ff ffb6 	bl	8003fc0 <HAL_RCC_GetHCLKFreq>
 8004054:	4602      	mov	r2, r0
 8004056:	4b06      	ldr	r3, [pc, #24]	; (8004070 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	0a1b      	lsrs	r3, r3, #8
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	4904      	ldr	r1, [pc, #16]	; (8004074 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004062:	5ccb      	ldrb	r3, [r1, r3]
 8004064:	f003 031f 	and.w	r3, r3, #31
 8004068:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800406c:	4618      	mov	r0, r3
 800406e:	bd80      	pop	{r7, pc}
 8004070:	58024400 	.word	0x58024400
 8004074:	0800a5a8 	.word	0x0800a5a8

08004078 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004080:	2300      	movs	r3, #0
 8004082:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004084:	2300      	movs	r3, #0
 8004086:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d03f      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004098:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800409c:	d02a      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800409e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040a2:	d824      	bhi.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040a8:	d018      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040ae:	d81e      	bhi.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80040b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040b8:	d007      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80040ba:	e018      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040bc:	4bab      	ldr	r3, [pc, #684]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c0:	4aaa      	ldr	r2, [pc, #680]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80040c8:	e015      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3304      	adds	r3, #4
 80040ce:	2102      	movs	r1, #2
 80040d0:	4618      	mov	r0, r3
 80040d2:	f001 f989 	bl	80053e8 <RCCEx_PLL2_Config>
 80040d6:	4603      	mov	r3, r0
 80040d8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80040da:	e00c      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3324      	adds	r3, #36	; 0x24
 80040e0:	2102      	movs	r1, #2
 80040e2:	4618      	mov	r0, r3
 80040e4:	f001 fa32 	bl	800554c <RCCEx_PLL3_Config>
 80040e8:	4603      	mov	r3, r0
 80040ea:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80040ec:	e003      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	75fb      	strb	r3, [r7, #23]
      break;
 80040f2:	e000      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80040f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040f6:	7dfb      	ldrb	r3, [r7, #23]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d109      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80040fc:	4b9b      	ldr	r3, [pc, #620]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004100:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004108:	4998      	ldr	r1, [pc, #608]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800410a:	4313      	orrs	r3, r2
 800410c:	650b      	str	r3, [r1, #80]	; 0x50
 800410e:	e001      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004110:	7dfb      	ldrb	r3, [r7, #23]
 8004112:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411c:	2b00      	cmp	r3, #0
 800411e:	d03d      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004124:	2b04      	cmp	r3, #4
 8004126:	d826      	bhi.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004128:	a201      	add	r2, pc, #4	; (adr r2, 8004130 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800412a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412e:	bf00      	nop
 8004130:	08004145 	.word	0x08004145
 8004134:	08004153 	.word	0x08004153
 8004138:	08004165 	.word	0x08004165
 800413c:	0800417d 	.word	0x0800417d
 8004140:	0800417d 	.word	0x0800417d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004144:	4b89      	ldr	r3, [pc, #548]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	4a88      	ldr	r2, [pc, #544]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800414a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800414e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004150:	e015      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	3304      	adds	r3, #4
 8004156:	2100      	movs	r1, #0
 8004158:	4618      	mov	r0, r3
 800415a:	f001 f945 	bl	80053e8 <RCCEx_PLL2_Config>
 800415e:	4603      	mov	r3, r0
 8004160:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004162:	e00c      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3324      	adds	r3, #36	; 0x24
 8004168:	2100      	movs	r1, #0
 800416a:	4618      	mov	r0, r3
 800416c:	f001 f9ee 	bl	800554c <RCCEx_PLL3_Config>
 8004170:	4603      	mov	r3, r0
 8004172:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004174:	e003      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	75fb      	strb	r3, [r7, #23]
      break;
 800417a:	e000      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800417c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800417e:	7dfb      	ldrb	r3, [r7, #23]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d109      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004184:	4b79      	ldr	r3, [pc, #484]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004188:	f023 0207 	bic.w	r2, r3, #7
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004190:	4976      	ldr	r1, [pc, #472]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004192:	4313      	orrs	r3, r2
 8004194:	650b      	str	r3, [r1, #80]	; 0x50
 8004196:	e001      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004198:	7dfb      	ldrb	r3, [r7, #23]
 800419a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d051      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041ae:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80041b2:	d036      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80041b4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80041b8:	d830      	bhi.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80041ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041be:	d032      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80041c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041c4:	d82a      	bhi.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80041c6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80041ca:	d02e      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80041cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80041d0:	d824      	bhi.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80041d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041d6:	d018      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80041d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041dc:	d81e      	bhi.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x172>
 80041e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041e6:	d007      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80041e8:	e018      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ea:	4b60      	ldr	r3, [pc, #384]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ee:	4a5f      	ldr	r2, [pc, #380]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80041f6:	e019      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3304      	adds	r3, #4
 80041fc:	2100      	movs	r1, #0
 80041fe:	4618      	mov	r0, r3
 8004200:	f001 f8f2 	bl	80053e8 <RCCEx_PLL2_Config>
 8004204:	4603      	mov	r3, r0
 8004206:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004208:	e010      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3324      	adds	r3, #36	; 0x24
 800420e:	2100      	movs	r1, #0
 8004210:	4618      	mov	r0, r3
 8004212:	f001 f99b 	bl	800554c <RCCEx_PLL3_Config>
 8004216:	4603      	mov	r3, r0
 8004218:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800421a:	e007      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	75fb      	strb	r3, [r7, #23]
      break;
 8004220:	e004      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004222:	bf00      	nop
 8004224:	e002      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004226:	bf00      	nop
 8004228:	e000      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800422a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800422c:	7dfb      	ldrb	r3, [r7, #23]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10a      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004232:	4b4e      	ldr	r3, [pc, #312]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004236:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004240:	494a      	ldr	r1, [pc, #296]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004242:	4313      	orrs	r3, r2
 8004244:	658b      	str	r3, [r1, #88]	; 0x58
 8004246:	e001      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004248:	7dfb      	ldrb	r3, [r7, #23]
 800424a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004254:	2b00      	cmp	r3, #0
 8004256:	d051      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800425e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004262:	d036      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8004264:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004268:	d830      	bhi.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x254>
 800426a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800426e:	d032      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8004270:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004274:	d82a      	bhi.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004276:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800427a:	d02e      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x262>
 800427c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004280:	d824      	bhi.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004282:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004286:	d018      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x242>
 8004288:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800428c:	d81e      	bhi.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x254>
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8004292:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004296:	d007      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004298:	e018      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800429a:	4b34      	ldr	r3, [pc, #208]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800429c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429e:	4a33      	ldr	r2, [pc, #204]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042a6:	e019      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3304      	adds	r3, #4
 80042ac:	2100      	movs	r1, #0
 80042ae:	4618      	mov	r0, r3
 80042b0:	f001 f89a 	bl	80053e8 <RCCEx_PLL2_Config>
 80042b4:	4603      	mov	r3, r0
 80042b6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80042b8:	e010      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	3324      	adds	r3, #36	; 0x24
 80042be:	2100      	movs	r1, #0
 80042c0:	4618      	mov	r0, r3
 80042c2:	f001 f943 	bl	800554c <RCCEx_PLL3_Config>
 80042c6:	4603      	mov	r3, r0
 80042c8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042ca:	e007      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	75fb      	strb	r3, [r7, #23]
      break;
 80042d0:	e004      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80042d2:	bf00      	nop
 80042d4:	e002      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80042d6:	bf00      	nop
 80042d8:	e000      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80042da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042dc:	7dfb      	ldrb	r3, [r7, #23]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10a      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80042e2:	4b22      	ldr	r3, [pc, #136]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042f0:	491e      	ldr	r1, [pc, #120]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	658b      	str	r3, [r1, #88]	; 0x58
 80042f6:	e001      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f8:	7dfb      	ldrb	r3, [r7, #23]
 80042fa:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d035      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800430c:	2b30      	cmp	r3, #48	; 0x30
 800430e:	d01c      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004310:	2b30      	cmp	r3, #48	; 0x30
 8004312:	d817      	bhi.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004314:	2b20      	cmp	r3, #32
 8004316:	d00c      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004318:	2b20      	cmp	r3, #32
 800431a:	d813      	bhi.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800431c:	2b00      	cmp	r3, #0
 800431e:	d016      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8004320:	2b10      	cmp	r3, #16
 8004322:	d10f      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004324:	4b11      	ldr	r3, [pc, #68]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004328:	4a10      	ldr	r2, [pc, #64]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800432a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800432e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004330:	e00e      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3304      	adds	r3, #4
 8004336:	2102      	movs	r1, #2
 8004338:	4618      	mov	r0, r3
 800433a:	f001 f855 	bl	80053e8 <RCCEx_PLL2_Config>
 800433e:	4603      	mov	r3, r0
 8004340:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004342:	e005      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	75fb      	strb	r3, [r7, #23]
      break;
 8004348:	e002      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800434a:	bf00      	nop
 800434c:	e000      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800434e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004350:	7dfb      	ldrb	r3, [r7, #23]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10c      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004356:	4b05      	ldr	r3, [pc, #20]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004362:	4902      	ldr	r1, [pc, #8]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004364:	4313      	orrs	r3, r2
 8004366:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004368:	e004      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800436a:	bf00      	nop
 800436c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004370:	7dfb      	ldrb	r3, [r7, #23]
 8004372:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d047      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004384:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004388:	d030      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x374>
 800438a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800438e:	d82a      	bhi.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004390:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004394:	d02c      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8004396:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800439a:	d824      	bhi.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800439c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043a0:	d018      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80043a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043a6:	d81e      	bhi.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80043ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b0:	d007      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80043b2:	e018      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043b4:	4bac      	ldr	r3, [pc, #688]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80043b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b8:	4aab      	ldr	r2, [pc, #684]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80043ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80043c0:	e017      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3304      	adds	r3, #4
 80043c6:	2100      	movs	r1, #0
 80043c8:	4618      	mov	r0, r3
 80043ca:	f001 f80d 	bl	80053e8 <RCCEx_PLL2_Config>
 80043ce:	4603      	mov	r3, r0
 80043d0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80043d2:	e00e      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3324      	adds	r3, #36	; 0x24
 80043d8:	2100      	movs	r1, #0
 80043da:	4618      	mov	r0, r3
 80043dc:	f001 f8b6 	bl	800554c <RCCEx_PLL3_Config>
 80043e0:	4603      	mov	r3, r0
 80043e2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80043e4:	e005      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	75fb      	strb	r3, [r7, #23]
      break;
 80043ea:	e002      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80043ec:	bf00      	nop
 80043ee:	e000      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80043f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043f2:	7dfb      	ldrb	r3, [r7, #23]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d109      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80043f8:	4b9b      	ldr	r3, [pc, #620]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80043fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043fc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004404:	4998      	ldr	r1, [pc, #608]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004406:	4313      	orrs	r3, r2
 8004408:	650b      	str	r3, [r1, #80]	; 0x50
 800440a:	e001      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800440c:	7dfb      	ldrb	r3, [r7, #23]
 800440e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d049      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004424:	d02e      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8004426:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800442a:	d828      	bhi.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800442c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004430:	d02a      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004432:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004436:	d822      	bhi.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004438:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800443c:	d026      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800443e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004442:	d81c      	bhi.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004444:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004448:	d010      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800444a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800444e:	d816      	bhi.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004450:	2b00      	cmp	r3, #0
 8004452:	d01d      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004458:	d111      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3304      	adds	r3, #4
 800445e:	2101      	movs	r1, #1
 8004460:	4618      	mov	r0, r3
 8004462:	f000 ffc1 	bl	80053e8 <RCCEx_PLL2_Config>
 8004466:	4603      	mov	r3, r0
 8004468:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800446a:	e012      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3324      	adds	r3, #36	; 0x24
 8004470:	2101      	movs	r1, #1
 8004472:	4618      	mov	r0, r3
 8004474:	f001 f86a 	bl	800554c <RCCEx_PLL3_Config>
 8004478:	4603      	mov	r3, r0
 800447a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800447c:	e009      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	75fb      	strb	r3, [r7, #23]
      break;
 8004482:	e006      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004484:	bf00      	nop
 8004486:	e004      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004488:	bf00      	nop
 800448a:	e002      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800448c:	bf00      	nop
 800448e:	e000      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004490:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004492:	7dfb      	ldrb	r3, [r7, #23]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d109      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004498:	4b73      	ldr	r3, [pc, #460]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800449a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800449c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a4:	4970      	ldr	r1, [pc, #448]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	650b      	str	r3, [r1, #80]	; 0x50
 80044aa:	e001      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ac:	7dfb      	ldrb	r3, [r7, #23]
 80044ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d04b      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044c6:	d02e      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80044c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044cc:	d828      	bhi.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80044ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d2:	d02a      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80044d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d8:	d822      	bhi.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80044da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044de:	d026      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80044e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044e4:	d81c      	bhi.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80044e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044ea:	d010      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x496>
 80044ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044f0:	d816      	bhi.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d01d      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80044f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044fa:	d111      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3304      	adds	r3, #4
 8004500:	2101      	movs	r1, #1
 8004502:	4618      	mov	r0, r3
 8004504:	f000 ff70 	bl	80053e8 <RCCEx_PLL2_Config>
 8004508:	4603      	mov	r3, r0
 800450a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800450c:	e012      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	3324      	adds	r3, #36	; 0x24
 8004512:	2101      	movs	r1, #1
 8004514:	4618      	mov	r0, r3
 8004516:	f001 f819 	bl	800554c <RCCEx_PLL3_Config>
 800451a:	4603      	mov	r3, r0
 800451c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800451e:	e009      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	75fb      	strb	r3, [r7, #23]
      break;
 8004524:	e006      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004526:	bf00      	nop
 8004528:	e004      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800452a:	bf00      	nop
 800452c:	e002      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800452e:	bf00      	nop
 8004530:	e000      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004532:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004534:	7dfb      	ldrb	r3, [r7, #23]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10a      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800453a:	4b4b      	ldr	r3, [pc, #300]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800453c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004548:	4947      	ldr	r1, [pc, #284]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800454a:	4313      	orrs	r3, r2
 800454c:	658b      	str	r3, [r1, #88]	; 0x58
 800454e:	e001      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004550:	7dfb      	ldrb	r3, [r7, #23]
 8004552:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d02f      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004564:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004568:	d00e      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800456a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800456e:	d814      	bhi.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004570:	2b00      	cmp	r3, #0
 8004572:	d015      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004574:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004578:	d10f      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800457a:	4b3b      	ldr	r3, [pc, #236]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800457c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457e:	4a3a      	ldr	r2, [pc, #232]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004584:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004586:	e00c      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3304      	adds	r3, #4
 800458c:	2101      	movs	r1, #1
 800458e:	4618      	mov	r0, r3
 8004590:	f000 ff2a 	bl	80053e8 <RCCEx_PLL2_Config>
 8004594:	4603      	mov	r3, r0
 8004596:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004598:	e003      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	75fb      	strb	r3, [r7, #23]
      break;
 800459e:	e000      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80045a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045a2:	7dfb      	ldrb	r3, [r7, #23]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d109      	bne.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80045a8:	4b2f      	ldr	r3, [pc, #188]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80045aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045b4:	492c      	ldr	r1, [pc, #176]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	650b      	str	r3, [r1, #80]	; 0x50
 80045ba:	e001      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045bc:	7dfb      	ldrb	r3, [r7, #23]
 80045be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d032      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d0:	2b03      	cmp	r3, #3
 80045d2:	d81b      	bhi.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x594>
 80045d4:	a201      	add	r2, pc, #4	; (adr r2, 80045dc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80045d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045da:	bf00      	nop
 80045dc:	08004613 	.word	0x08004613
 80045e0:	080045ed 	.word	0x080045ed
 80045e4:	080045fb 	.word	0x080045fb
 80045e8:	08004613 	.word	0x08004613
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045ec:	4b1e      	ldr	r3, [pc, #120]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80045ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f0:	4a1d      	ldr	r2, [pc, #116]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80045f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80045f8:	e00c      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	3304      	adds	r3, #4
 80045fe:	2102      	movs	r1, #2
 8004600:	4618      	mov	r0, r3
 8004602:	f000 fef1 	bl	80053e8 <RCCEx_PLL2_Config>
 8004606:	4603      	mov	r3, r0
 8004608:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800460a:	e003      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	75fb      	strb	r3, [r7, #23]
      break;
 8004610:	e000      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004612:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004614:	7dfb      	ldrb	r3, [r7, #23]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d109      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800461a:	4b13      	ldr	r3, [pc, #76]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800461c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800461e:	f023 0203 	bic.w	r2, r3, #3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004626:	4910      	ldr	r1, [pc, #64]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004628:	4313      	orrs	r3, r2
 800462a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800462c:	e001      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800462e:	7dfb      	ldrb	r3, [r7, #23]
 8004630:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800463a:	2b00      	cmp	r3, #0
 800463c:	f000 808a 	beq.w	8004754 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004640:	4b0a      	ldr	r3, [pc, #40]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a09      	ldr	r2, [pc, #36]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800464a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800464c:	f7fc fc98 	bl	8000f80 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004652:	e00d      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004654:	f7fc fc94 	bl	8000f80 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b64      	cmp	r3, #100	; 0x64
 8004660:	d906      	bls.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	75fb      	strb	r3, [r7, #23]
        break;
 8004666:	e009      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004668:	58024400 	.word	0x58024400
 800466c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004670:	4bb9      	ldr	r3, [pc, #740]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0eb      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800467c:	7dfb      	ldrb	r3, [r7, #23]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d166      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004682:	4bb6      	ldr	r3, [pc, #728]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004684:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800468c:	4053      	eors	r3, r2
 800468e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004692:	2b00      	cmp	r3, #0
 8004694:	d013      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004696:	4bb1      	ldr	r3, [pc, #708]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800469e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046a0:	4bae      	ldr	r3, [pc, #696]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a4:	4aad      	ldr	r2, [pc, #692]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046aa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046ac:	4bab      	ldr	r3, [pc, #684]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b0:	4aaa      	ldr	r2, [pc, #680]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046b6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80046b8:	4aa8      	ldr	r2, [pc, #672]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046c8:	d115      	bne.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ca:	f7fc fc59 	bl	8000f80 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046d0:	e00b      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046d2:	f7fc fc55 	bl	8000f80 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d902      	bls.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	75fb      	strb	r3, [r7, #23]
            break;
 80046e8:	e005      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046ea:	4b9c      	ldr	r3, [pc, #624]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0ed      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 80046f6:	7dfb      	ldrb	r3, [r7, #23]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d126      	bne.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004706:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800470a:	d10d      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800470c:	4b93      	ldr	r3, [pc, #588]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800471a:	0919      	lsrs	r1, r3, #4
 800471c:	4b90      	ldr	r3, [pc, #576]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800471e:	400b      	ands	r3, r1
 8004720:	498e      	ldr	r1, [pc, #568]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004722:	4313      	orrs	r3, r2
 8004724:	610b      	str	r3, [r1, #16]
 8004726:	e005      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8004728:	4b8c      	ldr	r3, [pc, #560]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	4a8b      	ldr	r2, [pc, #556]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800472e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004732:	6113      	str	r3, [r2, #16]
 8004734:	4b89      	ldr	r3, [pc, #548]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004736:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800473e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004742:	4986      	ldr	r1, [pc, #536]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004744:	4313      	orrs	r3, r2
 8004746:	670b      	str	r3, [r1, #112]	; 0x70
 8004748:	e004      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800474a:	7dfb      	ldrb	r3, [r7, #23]
 800474c:	75bb      	strb	r3, [r7, #22]
 800474e:	e001      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004750:	7dfb      	ldrb	r3, [r7, #23]
 8004752:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d07e      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004764:	2b28      	cmp	r3, #40	; 0x28
 8004766:	d867      	bhi.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8004768:	a201      	add	r2, pc, #4	; (adr r2, 8004770 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800476a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476e:	bf00      	nop
 8004770:	0800483f 	.word	0x0800483f
 8004774:	08004839 	.word	0x08004839
 8004778:	08004839 	.word	0x08004839
 800477c:	08004839 	.word	0x08004839
 8004780:	08004839 	.word	0x08004839
 8004784:	08004839 	.word	0x08004839
 8004788:	08004839 	.word	0x08004839
 800478c:	08004839 	.word	0x08004839
 8004790:	08004815 	.word	0x08004815
 8004794:	08004839 	.word	0x08004839
 8004798:	08004839 	.word	0x08004839
 800479c:	08004839 	.word	0x08004839
 80047a0:	08004839 	.word	0x08004839
 80047a4:	08004839 	.word	0x08004839
 80047a8:	08004839 	.word	0x08004839
 80047ac:	08004839 	.word	0x08004839
 80047b0:	08004827 	.word	0x08004827
 80047b4:	08004839 	.word	0x08004839
 80047b8:	08004839 	.word	0x08004839
 80047bc:	08004839 	.word	0x08004839
 80047c0:	08004839 	.word	0x08004839
 80047c4:	08004839 	.word	0x08004839
 80047c8:	08004839 	.word	0x08004839
 80047cc:	08004839 	.word	0x08004839
 80047d0:	0800483f 	.word	0x0800483f
 80047d4:	08004839 	.word	0x08004839
 80047d8:	08004839 	.word	0x08004839
 80047dc:	08004839 	.word	0x08004839
 80047e0:	08004839 	.word	0x08004839
 80047e4:	08004839 	.word	0x08004839
 80047e8:	08004839 	.word	0x08004839
 80047ec:	08004839 	.word	0x08004839
 80047f0:	0800483f 	.word	0x0800483f
 80047f4:	08004839 	.word	0x08004839
 80047f8:	08004839 	.word	0x08004839
 80047fc:	08004839 	.word	0x08004839
 8004800:	08004839 	.word	0x08004839
 8004804:	08004839 	.word	0x08004839
 8004808:	08004839 	.word	0x08004839
 800480c:	08004839 	.word	0x08004839
 8004810:	0800483f 	.word	0x0800483f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3304      	adds	r3, #4
 8004818:	2101      	movs	r1, #1
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fde4 	bl	80053e8 <RCCEx_PLL2_Config>
 8004820:	4603      	mov	r3, r0
 8004822:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004824:	e00c      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	3324      	adds	r3, #36	; 0x24
 800482a:	2101      	movs	r1, #1
 800482c:	4618      	mov	r0, r3
 800482e:	f000 fe8d 	bl	800554c <RCCEx_PLL3_Config>
 8004832:	4603      	mov	r3, r0
 8004834:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004836:	e003      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	75fb      	strb	r3, [r7, #23]
      break;
 800483c:	e000      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800483e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004840:	7dfb      	ldrb	r3, [r7, #23]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d109      	bne.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004846:	4b45      	ldr	r3, [pc, #276]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004852:	4942      	ldr	r1, [pc, #264]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004854:	4313      	orrs	r3, r2
 8004856:	654b      	str	r3, [r1, #84]	; 0x54
 8004858:	e001      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800485a:	7dfb      	ldrb	r3, [r7, #23]
 800485c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d037      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486e:	2b05      	cmp	r3, #5
 8004870:	d820      	bhi.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004872:	a201      	add	r2, pc, #4	; (adr r2, 8004878 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8004874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004878:	080048bb 	.word	0x080048bb
 800487c:	08004891 	.word	0x08004891
 8004880:	080048a3 	.word	0x080048a3
 8004884:	080048bb 	.word	0x080048bb
 8004888:	080048bb 	.word	0x080048bb
 800488c:	080048bb 	.word	0x080048bb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	3304      	adds	r3, #4
 8004894:	2101      	movs	r1, #1
 8004896:	4618      	mov	r0, r3
 8004898:	f000 fda6 	bl	80053e8 <RCCEx_PLL2_Config>
 800489c:	4603      	mov	r3, r0
 800489e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80048a0:	e00c      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	3324      	adds	r3, #36	; 0x24
 80048a6:	2101      	movs	r1, #1
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 fe4f 	bl	800554c <RCCEx_PLL3_Config>
 80048ae:	4603      	mov	r3, r0
 80048b0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80048b2:	e003      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	75fb      	strb	r3, [r7, #23]
      break;
 80048b8:	e000      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80048ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048bc:	7dfb      	ldrb	r3, [r7, #23]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d109      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80048c2:	4b26      	ldr	r3, [pc, #152]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80048c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c6:	f023 0207 	bic.w	r2, r3, #7
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ce:	4923      	ldr	r1, [pc, #140]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	654b      	str	r3, [r1, #84]	; 0x54
 80048d4:	e001      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d6:	7dfb      	ldrb	r3, [r7, #23]
 80048d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0304 	and.w	r3, r3, #4
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d040      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ec:	2b05      	cmp	r3, #5
 80048ee:	d821      	bhi.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80048f0:	a201      	add	r2, pc, #4	; (adr r2, 80048f8 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80048f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f6:	bf00      	nop
 80048f8:	0800493b 	.word	0x0800493b
 80048fc:	08004911 	.word	0x08004911
 8004900:	08004923 	.word	0x08004923
 8004904:	0800493b 	.word	0x0800493b
 8004908:	0800493b 	.word	0x0800493b
 800490c:	0800493b 	.word	0x0800493b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3304      	adds	r3, #4
 8004914:	2101      	movs	r1, #1
 8004916:	4618      	mov	r0, r3
 8004918:	f000 fd66 	bl	80053e8 <RCCEx_PLL2_Config>
 800491c:	4603      	mov	r3, r0
 800491e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004920:	e00c      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	3324      	adds	r3, #36	; 0x24
 8004926:	2101      	movs	r1, #1
 8004928:	4618      	mov	r0, r3
 800492a:	f000 fe0f 	bl	800554c <RCCEx_PLL3_Config>
 800492e:	4603      	mov	r3, r0
 8004930:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004932:	e003      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	75fb      	strb	r3, [r7, #23]
      break;
 8004938:	e000      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800493a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800493c:	7dfb      	ldrb	r3, [r7, #23]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d110      	bne.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004942:	4b06      	ldr	r3, [pc, #24]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004946:	f023 0207 	bic.w	r2, r3, #7
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004950:	4902      	ldr	r1, [pc, #8]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004952:	4313      	orrs	r3, r2
 8004954:	658b      	str	r3, [r1, #88]	; 0x58
 8004956:	e007      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8004958:	58024800 	.word	0x58024800
 800495c:	58024400 	.word	0x58024400
 8004960:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004964:	7dfb      	ldrb	r3, [r7, #23]
 8004966:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0320 	and.w	r3, r3, #32
 8004970:	2b00      	cmp	r3, #0
 8004972:	d04b      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800497e:	d02e      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004980:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004984:	d828      	bhi.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800498a:	d02a      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800498c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004990:	d822      	bhi.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004992:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004996:	d026      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004998:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800499c:	d81c      	bhi.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800499e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049a2:	d010      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80049a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049a8:	d816      	bhi.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d01d      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x972>
 80049ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049b2:	d111      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3304      	adds	r3, #4
 80049b8:	2100      	movs	r1, #0
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 fd14 	bl	80053e8 <RCCEx_PLL2_Config>
 80049c0:	4603      	mov	r3, r0
 80049c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80049c4:	e012      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	3324      	adds	r3, #36	; 0x24
 80049ca:	2102      	movs	r1, #2
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 fdbd 	bl	800554c <RCCEx_PLL3_Config>
 80049d2:	4603      	mov	r3, r0
 80049d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80049d6:	e009      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	75fb      	strb	r3, [r7, #23]
      break;
 80049dc:	e006      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80049de:	bf00      	nop
 80049e0:	e004      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80049e2:	bf00      	nop
 80049e4:	e002      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80049e6:	bf00      	nop
 80049e8:	e000      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80049ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049ec:	7dfb      	ldrb	r3, [r7, #23]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10a      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049f2:	4bb2      	ldr	r3, [pc, #712]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80049f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a00:	49ae      	ldr	r1, [pc, #696]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	654b      	str	r3, [r1, #84]	; 0x54
 8004a06:	e001      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a08:	7dfb      	ldrb	r3, [r7, #23]
 8004a0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d04b      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a1e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004a22:	d02e      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004a24:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004a28:	d828      	bhi.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2e:	d02a      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a34:	d822      	bhi.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004a36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a3a:	d026      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004a3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a40:	d81c      	bhi.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a46:	d010      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8004a48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a4c:	d816      	bhi.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d01d      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a56:	d111      	bne.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	3304      	adds	r3, #4
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 fcc2 	bl	80053e8 <RCCEx_PLL2_Config>
 8004a64:	4603      	mov	r3, r0
 8004a66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004a68:	e012      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3324      	adds	r3, #36	; 0x24
 8004a6e:	2102      	movs	r1, #2
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 fd6b 	bl	800554c <RCCEx_PLL3_Config>
 8004a76:	4603      	mov	r3, r0
 8004a78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004a7a:	e009      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a80:	e006      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004a82:	bf00      	nop
 8004a84:	e004      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004a86:	bf00      	nop
 8004a88:	e002      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004a8a:	bf00      	nop
 8004a8c:	e000      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004a8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a90:	7dfb      	ldrb	r3, [r7, #23]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10a      	bne.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a96:	4b89      	ldr	r3, [pc, #548]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004aa4:	4985      	ldr	r1, [pc, #532]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	658b      	str	r3, [r1, #88]	; 0x58
 8004aaa:	e001      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aac:	7dfb      	ldrb	r3, [r7, #23]
 8004aae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d04b      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ac2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004ac6:	d02e      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004ac8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004acc:	d828      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ad2:	d02a      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004ad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ad8:	d822      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004ada:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004ade:	d026      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004ae0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004ae4:	d81c      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004ae6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004aea:	d010      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8004aec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004af0:	d816      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d01d      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8004af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004afa:	d111      	bne.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	3304      	adds	r3, #4
 8004b00:	2100      	movs	r1, #0
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 fc70 	bl	80053e8 <RCCEx_PLL2_Config>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004b0c:	e012      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	3324      	adds	r3, #36	; 0x24
 8004b12:	2102      	movs	r1, #2
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fd19 	bl	800554c <RCCEx_PLL3_Config>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004b1e:	e009      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	75fb      	strb	r3, [r7, #23]
      break;
 8004b24:	e006      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004b26:	bf00      	nop
 8004b28:	e004      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004b2a:	bf00      	nop
 8004b2c:	e002      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004b2e:	bf00      	nop
 8004b30:	e000      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004b32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b34:	7dfb      	ldrb	r3, [r7, #23]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10a      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004b3a:	4b60      	ldr	r3, [pc, #384]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b48:	495c      	ldr	r1, [pc, #368]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	658b      	str	r3, [r1, #88]	; 0x58
 8004b4e:	e001      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b50:	7dfb      	ldrb	r3, [r7, #23]
 8004b52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0308 	and.w	r3, r3, #8
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d018      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b68:	d10a      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3324      	adds	r3, #36	; 0x24
 8004b6e:	2102      	movs	r1, #2
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 fceb 	bl	800554c <RCCEx_PLL3_Config>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004b80:	4b4e      	ldr	r3, [pc, #312]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b8c:	494b      	ldr	r1, [pc, #300]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0310 	and.w	r3, r3, #16
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d01a      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ba8:	d10a      	bne.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	3324      	adds	r3, #36	; 0x24
 8004bae:	2102      	movs	r1, #2
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 fccb 	bl	800554c <RCCEx_PLL3_Config>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bc0:	4b3e      	ldr	r3, [pc, #248]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bce:	493b      	ldr	r1, [pc, #236]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d034      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004be6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bea:	d01d      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004bec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bf0:	d817      	bhi.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bfa:	d009      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004bfc:	e011      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	3304      	adds	r3, #4
 8004c02:	2100      	movs	r1, #0
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 fbef 	bl	80053e8 <RCCEx_PLL2_Config>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004c0e:	e00c      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3324      	adds	r3, #36	; 0x24
 8004c14:	2102      	movs	r1, #2
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 fc98 	bl	800554c <RCCEx_PLL3_Config>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004c20:	e003      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	75fb      	strb	r3, [r7, #23]
      break;
 8004c26:	e000      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8004c28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c2a:	7dfb      	ldrb	r3, [r7, #23]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10a      	bne.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c30:	4b22      	ldr	r3, [pc, #136]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c3e:	491f      	ldr	r1, [pc, #124]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	658b      	str	r3, [r1, #88]	; 0x58
 8004c44:	e001      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c46:	7dfb      	ldrb	r3, [r7, #23]
 8004c48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d036      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c60:	d01c      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004c62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c66:	d816      	bhi.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004c68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c6c:	d003      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004c6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c72:	d007      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8004c74:	e00f      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c76:	4b11      	ldr	r3, [pc, #68]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7a:	4a10      	ldr	r2, [pc, #64]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004c82:	e00c      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	3324      	adds	r3, #36	; 0x24
 8004c88:	2101      	movs	r1, #1
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 fc5e 	bl	800554c <RCCEx_PLL3_Config>
 8004c90:	4603      	mov	r3, r0
 8004c92:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004c94:	e003      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	75fb      	strb	r3, [r7, #23]
      break;
 8004c9a:	e000      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8004c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10d      	bne.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ca4:	4b05      	ldr	r3, [pc, #20]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cb2:	4902      	ldr	r1, [pc, #8]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	654b      	str	r3, [r1, #84]	; 0x54
 8004cb8:	e004      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8004cba:	bf00      	nop
 8004cbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc0:	7dfb      	ldrb	r3, [r7, #23]
 8004cc2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d029      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cdc:	d007      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004cde:	e00f      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ce0:	4b61      	ldr	r3, [pc, #388]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce4:	4a60      	ldr	r2, [pc, #384]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004cec:	e00b      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	3304      	adds	r3, #4
 8004cf2:	2102      	movs	r1, #2
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f000 fb77 	bl	80053e8 <RCCEx_PLL2_Config>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004cfe:	e002      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	75fb      	strb	r3, [r7, #23]
      break;
 8004d04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d06:	7dfb      	ldrb	r3, [r7, #23]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d109      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004d0c:	4b56      	ldr	r3, [pc, #344]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d18:	4953      	ldr	r1, [pc, #332]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004d1e:	e001      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d20:	7dfb      	ldrb	r3, [r7, #23]
 8004d22:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00a      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	3324      	adds	r3, #36	; 0x24
 8004d34:	2102      	movs	r1, #2
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fc08 	bl	800554c <RCCEx_PLL3_Config>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d030      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d5a:	d017      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004d5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d60:	d811      	bhi.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d66:	d013      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8004d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d6c:	d80b      	bhi.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d010      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8004d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d76:	d106      	bne.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d78:	4b3b      	ldr	r3, [pc, #236]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7c:	4a3a      	ldr	r2, [pc, #232]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004d84:	e007      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	75fb      	strb	r3, [r7, #23]
      break;
 8004d8a:	e004      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004d8c:	bf00      	nop
 8004d8e:	e002      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004d90:	bf00      	nop
 8004d92:	e000      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004d94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d96:	7dfb      	ldrb	r3, [r7, #23]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d109      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d9c:	4b32      	ldr	r3, [pc, #200]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004da8:	492f      	ldr	r1, [pc, #188]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	654b      	str	r3, [r1, #84]	; 0x54
 8004dae:	e001      	b.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db0:	7dfb      	ldrb	r3, [r7, #23]
 8004db2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d008      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004dc0:	4b29      	ldr	r3, [pc, #164]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dcc:	4926      	ldr	r1, [pc, #152]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d008      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004dde:	4b22      	ldr	r3, [pc, #136]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dea:	491f      	ldr	r1, [pc, #124]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00d      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004dfc:	4b1a      	ldr	r3, [pc, #104]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	4a19      	ldr	r2, [pc, #100]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e06:	6113      	str	r3, [r2, #16]
 8004e08:	4b17      	ldr	r3, [pc, #92]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e0a:	691a      	ldr	r2, [r3, #16]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e12:	4915      	ldr	r1, [pc, #84]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	da08      	bge.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004e20:	4b11      	ldr	r3, [pc, #68]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e24:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e2c:	490e      	ldr	r1, [pc, #56]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d009      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e3e:	4b0a      	ldr	r3, [pc, #40]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e4c:	4906      	ldr	r1, [pc, #24]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004e52:	7dbb      	ldrb	r3, [r7, #22]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	e000      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3718      	adds	r7, #24
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	58024400 	.word	0x58024400

08004e6c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004e70:	f7ff f8a6 	bl	8003fc0 <HAL_RCC_GetHCLKFreq>
 8004e74:	4602      	mov	r2, r0
 8004e76:	4b06      	ldr	r3, [pc, #24]	; (8004e90 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	091b      	lsrs	r3, r3, #4
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	4904      	ldr	r1, [pc, #16]	; (8004e94 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004e82:	5ccb      	ldrb	r3, [r1, r3]
 8004e84:	f003 031f 	and.w	r3, r3, #31
 8004e88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	58024400 	.word	0x58024400
 8004e94:	0800a5a8 	.word	0x0800a5a8

08004e98 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b089      	sub	sp, #36	; 0x24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ea0:	4ba1      	ldr	r3, [pc, #644]	; (8005128 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea4:	f003 0303 	and.w	r3, r3, #3
 8004ea8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004eaa:	4b9f      	ldr	r3, [pc, #636]	; (8005128 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eae:	0b1b      	lsrs	r3, r3, #12
 8004eb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004eb4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004eb6:	4b9c      	ldr	r3, [pc, #624]	; (8005128 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eba:	091b      	lsrs	r3, r3, #4
 8004ebc:	f003 0301 	and.w	r3, r3, #1
 8004ec0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004ec2:	4b99      	ldr	r3, [pc, #612]	; (8005128 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec6:	08db      	lsrs	r3, r3, #3
 8004ec8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	fb02 f303 	mul.w	r3, r2, r3
 8004ed2:	ee07 3a90 	vmov	s15, r3
 8004ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eda:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 8111 	beq.w	8005108 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	f000 8083 	beq.w	8004ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	f200 80a1 	bhi.w	8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d056      	beq.n	8004fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004f02:	e099      	b.n	8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f04:	4b88      	ldr	r3, [pc, #544]	; (8005128 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0320 	and.w	r3, r3, #32
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d02d      	beq.n	8004f6c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f10:	4b85      	ldr	r3, [pc, #532]	; (8005128 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	08db      	lsrs	r3, r3, #3
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	4a84      	ldr	r2, [pc, #528]	; (800512c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f20:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	ee07 3a90 	vmov	s15, r3
 8004f28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	ee07 3a90 	vmov	s15, r3
 8004f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f3a:	4b7b      	ldr	r3, [pc, #492]	; (8005128 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f42:	ee07 3a90 	vmov	s15, r3
 8004f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f4e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005130 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f66:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004f6a:	e087      	b.n	800507c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	ee07 3a90 	vmov	s15, r3
 8004f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f76:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005134 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f7e:	4b6a      	ldr	r3, [pc, #424]	; (8005128 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f86:	ee07 3a90 	vmov	s15, r3
 8004f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f92:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005130 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004faa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fae:	e065      	b.n	800507c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	ee07 3a90 	vmov	s15, r3
 8004fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005138 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fc2:	4b59      	ldr	r3, [pc, #356]	; (8005128 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fca:	ee07 3a90 	vmov	s15, r3
 8004fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fd6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005130 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ff2:	e043      	b.n	800507c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	ee07 3a90 	vmov	s15, r3
 8004ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ffe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800513c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005006:	4b48      	ldr	r3, [pc, #288]	; (8005128 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800500e:	ee07 3a90 	vmov	s15, r3
 8005012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005016:	ed97 6a03 	vldr	s12, [r7, #12]
 800501a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005130 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800501e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005026:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800502a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800502e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005032:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005036:	e021      	b.n	800507c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	ee07 3a90 	vmov	s15, r3
 800503e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005042:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005138 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800504a:	4b37      	ldr	r3, [pc, #220]	; (8005128 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800504c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005052:	ee07 3a90 	vmov	s15, r3
 8005056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800505a:	ed97 6a03 	vldr	s12, [r7, #12]
 800505e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005130 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800506a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800506e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005076:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800507a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800507c:	4b2a      	ldr	r3, [pc, #168]	; (8005128 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800507e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005080:	0a5b      	lsrs	r3, r3, #9
 8005082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005086:	ee07 3a90 	vmov	s15, r3
 800508a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800508e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005092:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005096:	edd7 6a07 	vldr	s13, [r7, #28]
 800509a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800509e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050a2:	ee17 2a90 	vmov	r2, s15
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80050aa:	4b1f      	ldr	r3, [pc, #124]	; (8005128 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ae:	0c1b      	lsrs	r3, r3, #16
 80050b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050b4:	ee07 3a90 	vmov	s15, r3
 80050b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80050c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050d0:	ee17 2a90 	vmov	r2, s15
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80050d8:	4b13      	ldr	r3, [pc, #76]	; (8005128 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050dc:	0e1b      	lsrs	r3, r3, #24
 80050de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050e2:	ee07 3a90 	vmov	s15, r3
 80050e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80050f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050fe:	ee17 2a90 	vmov	r2, s15
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005106:	e008      	b.n	800511a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	609a      	str	r2, [r3, #8]
}
 800511a:	bf00      	nop
 800511c:	3724      	adds	r7, #36	; 0x24
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	58024400 	.word	0x58024400
 800512c:	03d09000 	.word	0x03d09000
 8005130:	46000000 	.word	0x46000000
 8005134:	4c742400 	.word	0x4c742400
 8005138:	4a742400 	.word	0x4a742400
 800513c:	4af42400 	.word	0x4af42400

08005140 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005140:	b480      	push	{r7}
 8005142:	b089      	sub	sp, #36	; 0x24
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005148:	4ba1      	ldr	r3, [pc, #644]	; (80053d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800514a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514c:	f003 0303 	and.w	r3, r3, #3
 8005150:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005152:	4b9f      	ldr	r3, [pc, #636]	; (80053d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005156:	0d1b      	lsrs	r3, r3, #20
 8005158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800515c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800515e:	4b9c      	ldr	r3, [pc, #624]	; (80053d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005162:	0a1b      	lsrs	r3, r3, #8
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800516a:	4b99      	ldr	r3, [pc, #612]	; (80053d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800516c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516e:	08db      	lsrs	r3, r3, #3
 8005170:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	fb02 f303 	mul.w	r3, r2, r3
 800517a:	ee07 3a90 	vmov	s15, r3
 800517e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005182:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 8111 	beq.w	80053b0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	2b02      	cmp	r3, #2
 8005192:	f000 8083 	beq.w	800529c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	2b02      	cmp	r3, #2
 800519a:	f200 80a1 	bhi.w	80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d003      	beq.n	80051ac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d056      	beq.n	8005258 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80051aa:	e099      	b.n	80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051ac:	4b88      	ldr	r3, [pc, #544]	; (80053d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0320 	and.w	r3, r3, #32
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d02d      	beq.n	8005214 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80051b8:	4b85      	ldr	r3, [pc, #532]	; (80053d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	08db      	lsrs	r3, r3, #3
 80051be:	f003 0303 	and.w	r3, r3, #3
 80051c2:	4a84      	ldr	r2, [pc, #528]	; (80053d4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80051c4:	fa22 f303 	lsr.w	r3, r2, r3
 80051c8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	ee07 3a90 	vmov	s15, r3
 80051d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	ee07 3a90 	vmov	s15, r3
 80051da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051e2:	4b7b      	ldr	r3, [pc, #492]	; (80053d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ea:	ee07 3a90 	vmov	s15, r3
 80051ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80051f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80053d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005202:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800520a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800520e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005212:	e087      	b.n	8005324 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	ee07 3a90 	vmov	s15, r3
 800521a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800521e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80053dc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005226:	4b6a      	ldr	r3, [pc, #424]	; (80053d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800522e:	ee07 3a90 	vmov	s15, r3
 8005232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005236:	ed97 6a03 	vldr	s12, [r7, #12]
 800523a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80053d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800523e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800524a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800524e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005252:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005256:	e065      	b.n	8005324 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	ee07 3a90 	vmov	s15, r3
 800525e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005262:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80053e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800526a:	4b59      	ldr	r3, [pc, #356]	; (80053d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005272:	ee07 3a90 	vmov	s15, r3
 8005276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800527a:	ed97 6a03 	vldr	s12, [r7, #12]
 800527e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80053d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800528a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800528e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005296:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800529a:	e043      	b.n	8005324 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	ee07 3a90 	vmov	s15, r3
 80052a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80052aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ae:	4b48      	ldr	r3, [pc, #288]	; (80053d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b6:	ee07 3a90 	vmov	s15, r3
 80052ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052be:	ed97 6a03 	vldr	s12, [r7, #12]
 80052c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80053d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80052de:	e021      	b.n	8005324 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	ee07 3a90 	vmov	s15, r3
 80052e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80053e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80052ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052f2:	4b37      	ldr	r3, [pc, #220]	; (80053d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052fa:	ee07 3a90 	vmov	s15, r3
 80052fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005302:	ed97 6a03 	vldr	s12, [r7, #12]
 8005306:	eddf 5a34 	vldr	s11, [pc, #208]	; 80053d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800530a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800530e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005312:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800531a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800531e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005322:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005324:	4b2a      	ldr	r3, [pc, #168]	; (80053d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	0a5b      	lsrs	r3, r3, #9
 800532a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800532e:	ee07 3a90 	vmov	s15, r3
 8005332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005336:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800533a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800533e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800534a:	ee17 2a90 	vmov	r2, s15
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005352:	4b1f      	ldr	r3, [pc, #124]	; (80053d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	0c1b      	lsrs	r3, r3, #16
 8005358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800535c:	ee07 3a90 	vmov	s15, r3
 8005360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005364:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005368:	ee37 7a87 	vadd.f32	s14, s15, s14
 800536c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005370:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005374:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005378:	ee17 2a90 	vmov	r2, s15
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005380:	4b13      	ldr	r3, [pc, #76]	; (80053d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005384:	0e1b      	lsrs	r3, r3, #24
 8005386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800538a:	ee07 3a90 	vmov	s15, r3
 800538e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005392:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005396:	ee37 7a87 	vadd.f32	s14, s15, s14
 800539a:	edd7 6a07 	vldr	s13, [r7, #28]
 800539e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053a6:	ee17 2a90 	vmov	r2, s15
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80053ae:	e008      	b.n	80053c2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	609a      	str	r2, [r3, #8]
}
 80053c2:	bf00      	nop
 80053c4:	3724      	adds	r7, #36	; 0x24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	58024400 	.word	0x58024400
 80053d4:	03d09000 	.word	0x03d09000
 80053d8:	46000000 	.word	0x46000000
 80053dc:	4c742400 	.word	0x4c742400
 80053e0:	4a742400 	.word	0x4a742400
 80053e4:	4af42400 	.word	0x4af42400

080053e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053f2:	2300      	movs	r3, #0
 80053f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80053f6:	4b53      	ldr	r3, [pc, #332]	; (8005544 <RCCEx_PLL2_Config+0x15c>)
 80053f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fa:	f003 0303 	and.w	r3, r3, #3
 80053fe:	2b03      	cmp	r3, #3
 8005400:	d101      	bne.n	8005406 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e099      	b.n	800553a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005406:	4b4f      	ldr	r3, [pc, #316]	; (8005544 <RCCEx_PLL2_Config+0x15c>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a4e      	ldr	r2, [pc, #312]	; (8005544 <RCCEx_PLL2_Config+0x15c>)
 800540c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005410:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005412:	f7fb fdb5 	bl	8000f80 <HAL_GetTick>
 8005416:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005418:	e008      	b.n	800542c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800541a:	f7fb fdb1 	bl	8000f80 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d901      	bls.n	800542c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e086      	b.n	800553a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800542c:	4b45      	ldr	r3, [pc, #276]	; (8005544 <RCCEx_PLL2_Config+0x15c>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1f0      	bne.n	800541a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005438:	4b42      	ldr	r3, [pc, #264]	; (8005544 <RCCEx_PLL2_Config+0x15c>)
 800543a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	031b      	lsls	r3, r3, #12
 8005446:	493f      	ldr	r1, [pc, #252]	; (8005544 <RCCEx_PLL2_Config+0x15c>)
 8005448:	4313      	orrs	r3, r2
 800544a:	628b      	str	r3, [r1, #40]	; 0x28
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	3b01      	subs	r3, #1
 8005452:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	3b01      	subs	r3, #1
 800545c:	025b      	lsls	r3, r3, #9
 800545e:	b29b      	uxth	r3, r3
 8005460:	431a      	orrs	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	3b01      	subs	r3, #1
 8005468:	041b      	lsls	r3, r3, #16
 800546a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800546e:	431a      	orrs	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	3b01      	subs	r3, #1
 8005476:	061b      	lsls	r3, r3, #24
 8005478:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800547c:	4931      	ldr	r1, [pc, #196]	; (8005544 <RCCEx_PLL2_Config+0x15c>)
 800547e:	4313      	orrs	r3, r2
 8005480:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005482:	4b30      	ldr	r3, [pc, #192]	; (8005544 <RCCEx_PLL2_Config+0x15c>)
 8005484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005486:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	492d      	ldr	r1, [pc, #180]	; (8005544 <RCCEx_PLL2_Config+0x15c>)
 8005490:	4313      	orrs	r3, r2
 8005492:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005494:	4b2b      	ldr	r3, [pc, #172]	; (8005544 <RCCEx_PLL2_Config+0x15c>)
 8005496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005498:	f023 0220 	bic.w	r2, r3, #32
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	4928      	ldr	r1, [pc, #160]	; (8005544 <RCCEx_PLL2_Config+0x15c>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80054a6:	4b27      	ldr	r3, [pc, #156]	; (8005544 <RCCEx_PLL2_Config+0x15c>)
 80054a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054aa:	4a26      	ldr	r2, [pc, #152]	; (8005544 <RCCEx_PLL2_Config+0x15c>)
 80054ac:	f023 0310 	bic.w	r3, r3, #16
 80054b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80054b2:	4b24      	ldr	r3, [pc, #144]	; (8005544 <RCCEx_PLL2_Config+0x15c>)
 80054b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054b6:	4b24      	ldr	r3, [pc, #144]	; (8005548 <RCCEx_PLL2_Config+0x160>)
 80054b8:	4013      	ands	r3, r2
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	69d2      	ldr	r2, [r2, #28]
 80054be:	00d2      	lsls	r2, r2, #3
 80054c0:	4920      	ldr	r1, [pc, #128]	; (8005544 <RCCEx_PLL2_Config+0x15c>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80054c6:	4b1f      	ldr	r3, [pc, #124]	; (8005544 <RCCEx_PLL2_Config+0x15c>)
 80054c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ca:	4a1e      	ldr	r2, [pc, #120]	; (8005544 <RCCEx_PLL2_Config+0x15c>)
 80054cc:	f043 0310 	orr.w	r3, r3, #16
 80054d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d106      	bne.n	80054e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80054d8:	4b1a      	ldr	r3, [pc, #104]	; (8005544 <RCCEx_PLL2_Config+0x15c>)
 80054da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054dc:	4a19      	ldr	r2, [pc, #100]	; (8005544 <RCCEx_PLL2_Config+0x15c>)
 80054de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80054e4:	e00f      	b.n	8005506 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d106      	bne.n	80054fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80054ec:	4b15      	ldr	r3, [pc, #84]	; (8005544 <RCCEx_PLL2_Config+0x15c>)
 80054ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f0:	4a14      	ldr	r2, [pc, #80]	; (8005544 <RCCEx_PLL2_Config+0x15c>)
 80054f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80054f8:	e005      	b.n	8005506 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80054fa:	4b12      	ldr	r3, [pc, #72]	; (8005544 <RCCEx_PLL2_Config+0x15c>)
 80054fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fe:	4a11      	ldr	r2, [pc, #68]	; (8005544 <RCCEx_PLL2_Config+0x15c>)
 8005500:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005504:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005506:	4b0f      	ldr	r3, [pc, #60]	; (8005544 <RCCEx_PLL2_Config+0x15c>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a0e      	ldr	r2, [pc, #56]	; (8005544 <RCCEx_PLL2_Config+0x15c>)
 800550c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005510:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005512:	f7fb fd35 	bl	8000f80 <HAL_GetTick>
 8005516:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005518:	e008      	b.n	800552c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800551a:	f7fb fd31 	bl	8000f80 <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	2b02      	cmp	r3, #2
 8005526:	d901      	bls.n	800552c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e006      	b.n	800553a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800552c:	4b05      	ldr	r3, [pc, #20]	; (8005544 <RCCEx_PLL2_Config+0x15c>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d0f0      	beq.n	800551a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005538:	7bfb      	ldrb	r3, [r7, #15]
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	58024400 	.word	0x58024400
 8005548:	ffff0007 	.word	0xffff0007

0800554c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800555a:	4b53      	ldr	r3, [pc, #332]	; (80056a8 <RCCEx_PLL3_Config+0x15c>)
 800555c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555e:	f003 0303 	and.w	r3, r3, #3
 8005562:	2b03      	cmp	r3, #3
 8005564:	d101      	bne.n	800556a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e099      	b.n	800569e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800556a:	4b4f      	ldr	r3, [pc, #316]	; (80056a8 <RCCEx_PLL3_Config+0x15c>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a4e      	ldr	r2, [pc, #312]	; (80056a8 <RCCEx_PLL3_Config+0x15c>)
 8005570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005574:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005576:	f7fb fd03 	bl	8000f80 <HAL_GetTick>
 800557a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800557c:	e008      	b.n	8005590 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800557e:	f7fb fcff 	bl	8000f80 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b02      	cmp	r3, #2
 800558a:	d901      	bls.n	8005590 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e086      	b.n	800569e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005590:	4b45      	ldr	r3, [pc, #276]	; (80056a8 <RCCEx_PLL3_Config+0x15c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1f0      	bne.n	800557e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800559c:	4b42      	ldr	r3, [pc, #264]	; (80056a8 <RCCEx_PLL3_Config+0x15c>)
 800559e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	051b      	lsls	r3, r3, #20
 80055aa:	493f      	ldr	r1, [pc, #252]	; (80056a8 <RCCEx_PLL3_Config+0x15c>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	628b      	str	r3, [r1, #40]	; 0x28
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	3b01      	subs	r3, #1
 80055b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	3b01      	subs	r3, #1
 80055c0:	025b      	lsls	r3, r3, #9
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	431a      	orrs	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	3b01      	subs	r3, #1
 80055cc:	041b      	lsls	r3, r3, #16
 80055ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80055d2:	431a      	orrs	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	3b01      	subs	r3, #1
 80055da:	061b      	lsls	r3, r3, #24
 80055dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80055e0:	4931      	ldr	r1, [pc, #196]	; (80056a8 <RCCEx_PLL3_Config+0x15c>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80055e6:	4b30      	ldr	r3, [pc, #192]	; (80056a8 <RCCEx_PLL3_Config+0x15c>)
 80055e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	492d      	ldr	r1, [pc, #180]	; (80056a8 <RCCEx_PLL3_Config+0x15c>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80055f8:	4b2b      	ldr	r3, [pc, #172]	; (80056a8 <RCCEx_PLL3_Config+0x15c>)
 80055fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	4928      	ldr	r1, [pc, #160]	; (80056a8 <RCCEx_PLL3_Config+0x15c>)
 8005606:	4313      	orrs	r3, r2
 8005608:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800560a:	4b27      	ldr	r3, [pc, #156]	; (80056a8 <RCCEx_PLL3_Config+0x15c>)
 800560c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560e:	4a26      	ldr	r2, [pc, #152]	; (80056a8 <RCCEx_PLL3_Config+0x15c>)
 8005610:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005614:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005616:	4b24      	ldr	r3, [pc, #144]	; (80056a8 <RCCEx_PLL3_Config+0x15c>)
 8005618:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800561a:	4b24      	ldr	r3, [pc, #144]	; (80056ac <RCCEx_PLL3_Config+0x160>)
 800561c:	4013      	ands	r3, r2
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	69d2      	ldr	r2, [r2, #28]
 8005622:	00d2      	lsls	r2, r2, #3
 8005624:	4920      	ldr	r1, [pc, #128]	; (80056a8 <RCCEx_PLL3_Config+0x15c>)
 8005626:	4313      	orrs	r3, r2
 8005628:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800562a:	4b1f      	ldr	r3, [pc, #124]	; (80056a8 <RCCEx_PLL3_Config+0x15c>)
 800562c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562e:	4a1e      	ldr	r2, [pc, #120]	; (80056a8 <RCCEx_PLL3_Config+0x15c>)
 8005630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005634:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d106      	bne.n	800564a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800563c:	4b1a      	ldr	r3, [pc, #104]	; (80056a8 <RCCEx_PLL3_Config+0x15c>)
 800563e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005640:	4a19      	ldr	r2, [pc, #100]	; (80056a8 <RCCEx_PLL3_Config+0x15c>)
 8005642:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005646:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005648:	e00f      	b.n	800566a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d106      	bne.n	800565e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005650:	4b15      	ldr	r3, [pc, #84]	; (80056a8 <RCCEx_PLL3_Config+0x15c>)
 8005652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005654:	4a14      	ldr	r2, [pc, #80]	; (80056a8 <RCCEx_PLL3_Config+0x15c>)
 8005656:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800565a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800565c:	e005      	b.n	800566a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800565e:	4b12      	ldr	r3, [pc, #72]	; (80056a8 <RCCEx_PLL3_Config+0x15c>)
 8005660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005662:	4a11      	ldr	r2, [pc, #68]	; (80056a8 <RCCEx_PLL3_Config+0x15c>)
 8005664:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005668:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800566a:	4b0f      	ldr	r3, [pc, #60]	; (80056a8 <RCCEx_PLL3_Config+0x15c>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a0e      	ldr	r2, [pc, #56]	; (80056a8 <RCCEx_PLL3_Config+0x15c>)
 8005670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005674:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005676:	f7fb fc83 	bl	8000f80 <HAL_GetTick>
 800567a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800567c:	e008      	b.n	8005690 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800567e:	f7fb fc7f 	bl	8000f80 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	2b02      	cmp	r3, #2
 800568a:	d901      	bls.n	8005690 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e006      	b.n	800569e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005690:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <RCCEx_PLL3_Config+0x15c>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d0f0      	beq.n	800567e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800569c:	7bfb      	ldrb	r3, [r7, #15]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	58024400 	.word	0x58024400
 80056ac:	ffff0007 	.word	0xffff0007

080056b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e042      	b.n	8005748 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d106      	bne.n	80056da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f7fb fa91 	bl	8000bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2224      	movs	r2, #36	; 0x24
 80056de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 0201 	bic.w	r2, r2, #1
 80056f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f82c 	bl	8005750 <UART_SetConfig>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d101      	bne.n	8005702 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e022      	b.n	8005748 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005706:	2b00      	cmp	r3, #0
 8005708:	d002      	beq.n	8005710 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fe7e 	bl	800640c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800571e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689a      	ldr	r2, [r3, #8]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800572e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f042 0201 	orr.w	r2, r2, #1
 800573e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 ff05 	bl	8006550 <UART_CheckIdleState>
 8005746:	4603      	mov	r3, r0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3708      	adds	r7, #8
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005750:	b5b0      	push	{r4, r5, r7, lr}
 8005752:	b08e      	sub	sp, #56	; 0x38
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005758:	2300      	movs	r3, #0
 800575a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689a      	ldr	r2, [r3, #8]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	431a      	orrs	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	431a      	orrs	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	4313      	orrs	r3, r2
 8005774:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	4bbf      	ldr	r3, [pc, #764]	; (8005a7c <UART_SetConfig+0x32c>)
 800577e:	4013      	ands	r3, r2
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	6812      	ldr	r2, [r2, #0]
 8005784:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005786:	430b      	orrs	r3, r1
 8005788:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	68da      	ldr	r2, [r3, #12]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4ab5      	ldr	r2, [pc, #724]	; (8005a80 <UART_SetConfig+0x330>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d004      	beq.n	80057ba <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057b6:	4313      	orrs	r3, r2
 80057b8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	4bb0      	ldr	r3, [pc, #704]	; (8005a84 <UART_SetConfig+0x334>)
 80057c2:	4013      	ands	r3, r2
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6812      	ldr	r2, [r2, #0]
 80057c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80057ca:	430b      	orrs	r3, r1
 80057cc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d4:	f023 010f 	bic.w	r1, r3, #15
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4aa7      	ldr	r2, [pc, #668]	; (8005a88 <UART_SetConfig+0x338>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d176      	bne.n	80058dc <UART_SetConfig+0x18c>
 80057ee:	4ba7      	ldr	r3, [pc, #668]	; (8005a8c <UART_SetConfig+0x33c>)
 80057f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057f6:	2b28      	cmp	r3, #40	; 0x28
 80057f8:	d86c      	bhi.n	80058d4 <UART_SetConfig+0x184>
 80057fa:	a201      	add	r2, pc, #4	; (adr r2, 8005800 <UART_SetConfig+0xb0>)
 80057fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005800:	080058a5 	.word	0x080058a5
 8005804:	080058d5 	.word	0x080058d5
 8005808:	080058d5 	.word	0x080058d5
 800580c:	080058d5 	.word	0x080058d5
 8005810:	080058d5 	.word	0x080058d5
 8005814:	080058d5 	.word	0x080058d5
 8005818:	080058d5 	.word	0x080058d5
 800581c:	080058d5 	.word	0x080058d5
 8005820:	080058ad 	.word	0x080058ad
 8005824:	080058d5 	.word	0x080058d5
 8005828:	080058d5 	.word	0x080058d5
 800582c:	080058d5 	.word	0x080058d5
 8005830:	080058d5 	.word	0x080058d5
 8005834:	080058d5 	.word	0x080058d5
 8005838:	080058d5 	.word	0x080058d5
 800583c:	080058d5 	.word	0x080058d5
 8005840:	080058b5 	.word	0x080058b5
 8005844:	080058d5 	.word	0x080058d5
 8005848:	080058d5 	.word	0x080058d5
 800584c:	080058d5 	.word	0x080058d5
 8005850:	080058d5 	.word	0x080058d5
 8005854:	080058d5 	.word	0x080058d5
 8005858:	080058d5 	.word	0x080058d5
 800585c:	080058d5 	.word	0x080058d5
 8005860:	080058bd 	.word	0x080058bd
 8005864:	080058d5 	.word	0x080058d5
 8005868:	080058d5 	.word	0x080058d5
 800586c:	080058d5 	.word	0x080058d5
 8005870:	080058d5 	.word	0x080058d5
 8005874:	080058d5 	.word	0x080058d5
 8005878:	080058d5 	.word	0x080058d5
 800587c:	080058d5 	.word	0x080058d5
 8005880:	080058c5 	.word	0x080058c5
 8005884:	080058d5 	.word	0x080058d5
 8005888:	080058d5 	.word	0x080058d5
 800588c:	080058d5 	.word	0x080058d5
 8005890:	080058d5 	.word	0x080058d5
 8005894:	080058d5 	.word	0x080058d5
 8005898:	080058d5 	.word	0x080058d5
 800589c:	080058d5 	.word	0x080058d5
 80058a0:	080058cd 	.word	0x080058cd
 80058a4:	2301      	movs	r3, #1
 80058a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058aa:	e326      	b.n	8005efa <UART_SetConfig+0x7aa>
 80058ac:	2304      	movs	r3, #4
 80058ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058b2:	e322      	b.n	8005efa <UART_SetConfig+0x7aa>
 80058b4:	2308      	movs	r3, #8
 80058b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ba:	e31e      	b.n	8005efa <UART_SetConfig+0x7aa>
 80058bc:	2310      	movs	r3, #16
 80058be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058c2:	e31a      	b.n	8005efa <UART_SetConfig+0x7aa>
 80058c4:	2320      	movs	r3, #32
 80058c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ca:	e316      	b.n	8005efa <UART_SetConfig+0x7aa>
 80058cc:	2340      	movs	r3, #64	; 0x40
 80058ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058d2:	e312      	b.n	8005efa <UART_SetConfig+0x7aa>
 80058d4:	2380      	movs	r3, #128	; 0x80
 80058d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058da:	e30e      	b.n	8005efa <UART_SetConfig+0x7aa>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a6b      	ldr	r2, [pc, #428]	; (8005a90 <UART_SetConfig+0x340>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d130      	bne.n	8005948 <UART_SetConfig+0x1f8>
 80058e6:	4b69      	ldr	r3, [pc, #420]	; (8005a8c <UART_SetConfig+0x33c>)
 80058e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ea:	f003 0307 	and.w	r3, r3, #7
 80058ee:	2b05      	cmp	r3, #5
 80058f0:	d826      	bhi.n	8005940 <UART_SetConfig+0x1f0>
 80058f2:	a201      	add	r2, pc, #4	; (adr r2, 80058f8 <UART_SetConfig+0x1a8>)
 80058f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f8:	08005911 	.word	0x08005911
 80058fc:	08005919 	.word	0x08005919
 8005900:	08005921 	.word	0x08005921
 8005904:	08005929 	.word	0x08005929
 8005908:	08005931 	.word	0x08005931
 800590c:	08005939 	.word	0x08005939
 8005910:	2300      	movs	r3, #0
 8005912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005916:	e2f0      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005918:	2304      	movs	r3, #4
 800591a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800591e:	e2ec      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005920:	2308      	movs	r3, #8
 8005922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005926:	e2e8      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005928:	2310      	movs	r3, #16
 800592a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800592e:	e2e4      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005930:	2320      	movs	r3, #32
 8005932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005936:	e2e0      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005938:	2340      	movs	r3, #64	; 0x40
 800593a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800593e:	e2dc      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005940:	2380      	movs	r3, #128	; 0x80
 8005942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005946:	e2d8      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a51      	ldr	r2, [pc, #324]	; (8005a94 <UART_SetConfig+0x344>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d130      	bne.n	80059b4 <UART_SetConfig+0x264>
 8005952:	4b4e      	ldr	r3, [pc, #312]	; (8005a8c <UART_SetConfig+0x33c>)
 8005954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005956:	f003 0307 	and.w	r3, r3, #7
 800595a:	2b05      	cmp	r3, #5
 800595c:	d826      	bhi.n	80059ac <UART_SetConfig+0x25c>
 800595e:	a201      	add	r2, pc, #4	; (adr r2, 8005964 <UART_SetConfig+0x214>)
 8005960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005964:	0800597d 	.word	0x0800597d
 8005968:	08005985 	.word	0x08005985
 800596c:	0800598d 	.word	0x0800598d
 8005970:	08005995 	.word	0x08005995
 8005974:	0800599d 	.word	0x0800599d
 8005978:	080059a5 	.word	0x080059a5
 800597c:	2300      	movs	r3, #0
 800597e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005982:	e2ba      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005984:	2304      	movs	r3, #4
 8005986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800598a:	e2b6      	b.n	8005efa <UART_SetConfig+0x7aa>
 800598c:	2308      	movs	r3, #8
 800598e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005992:	e2b2      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005994:	2310      	movs	r3, #16
 8005996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800599a:	e2ae      	b.n	8005efa <UART_SetConfig+0x7aa>
 800599c:	2320      	movs	r3, #32
 800599e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059a2:	e2aa      	b.n	8005efa <UART_SetConfig+0x7aa>
 80059a4:	2340      	movs	r3, #64	; 0x40
 80059a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059aa:	e2a6      	b.n	8005efa <UART_SetConfig+0x7aa>
 80059ac:	2380      	movs	r3, #128	; 0x80
 80059ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059b2:	e2a2      	b.n	8005efa <UART_SetConfig+0x7aa>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a37      	ldr	r2, [pc, #220]	; (8005a98 <UART_SetConfig+0x348>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d130      	bne.n	8005a20 <UART_SetConfig+0x2d0>
 80059be:	4b33      	ldr	r3, [pc, #204]	; (8005a8c <UART_SetConfig+0x33c>)
 80059c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c2:	f003 0307 	and.w	r3, r3, #7
 80059c6:	2b05      	cmp	r3, #5
 80059c8:	d826      	bhi.n	8005a18 <UART_SetConfig+0x2c8>
 80059ca:	a201      	add	r2, pc, #4	; (adr r2, 80059d0 <UART_SetConfig+0x280>)
 80059cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d0:	080059e9 	.word	0x080059e9
 80059d4:	080059f1 	.word	0x080059f1
 80059d8:	080059f9 	.word	0x080059f9
 80059dc:	08005a01 	.word	0x08005a01
 80059e0:	08005a09 	.word	0x08005a09
 80059e4:	08005a11 	.word	0x08005a11
 80059e8:	2300      	movs	r3, #0
 80059ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059ee:	e284      	b.n	8005efa <UART_SetConfig+0x7aa>
 80059f0:	2304      	movs	r3, #4
 80059f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059f6:	e280      	b.n	8005efa <UART_SetConfig+0x7aa>
 80059f8:	2308      	movs	r3, #8
 80059fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059fe:	e27c      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005a00:	2310      	movs	r3, #16
 8005a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a06:	e278      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005a08:	2320      	movs	r3, #32
 8005a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a0e:	e274      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005a10:	2340      	movs	r3, #64	; 0x40
 8005a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a16:	e270      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005a18:	2380      	movs	r3, #128	; 0x80
 8005a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a1e:	e26c      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a1d      	ldr	r2, [pc, #116]	; (8005a9c <UART_SetConfig+0x34c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d142      	bne.n	8005ab0 <UART_SetConfig+0x360>
 8005a2a:	4b18      	ldr	r3, [pc, #96]	; (8005a8c <UART_SetConfig+0x33c>)
 8005a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2e:	f003 0307 	and.w	r3, r3, #7
 8005a32:	2b05      	cmp	r3, #5
 8005a34:	d838      	bhi.n	8005aa8 <UART_SetConfig+0x358>
 8005a36:	a201      	add	r2, pc, #4	; (adr r2, 8005a3c <UART_SetConfig+0x2ec>)
 8005a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3c:	08005a55 	.word	0x08005a55
 8005a40:	08005a5d 	.word	0x08005a5d
 8005a44:	08005a65 	.word	0x08005a65
 8005a48:	08005a6d 	.word	0x08005a6d
 8005a4c:	08005a75 	.word	0x08005a75
 8005a50:	08005aa1 	.word	0x08005aa1
 8005a54:	2300      	movs	r3, #0
 8005a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a5a:	e24e      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005a5c:	2304      	movs	r3, #4
 8005a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a62:	e24a      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005a64:	2308      	movs	r3, #8
 8005a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a6a:	e246      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005a6c:	2310      	movs	r3, #16
 8005a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a72:	e242      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005a74:	2320      	movs	r3, #32
 8005a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a7a:	e23e      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005a7c:	cfff69f3 	.word	0xcfff69f3
 8005a80:	58000c00 	.word	0x58000c00
 8005a84:	11fff4ff 	.word	0x11fff4ff
 8005a88:	40011000 	.word	0x40011000
 8005a8c:	58024400 	.word	0x58024400
 8005a90:	40004400 	.word	0x40004400
 8005a94:	40004800 	.word	0x40004800
 8005a98:	40004c00 	.word	0x40004c00
 8005a9c:	40005000 	.word	0x40005000
 8005aa0:	2340      	movs	r3, #64	; 0x40
 8005aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aa6:	e228      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005aa8:	2380      	movs	r3, #128	; 0x80
 8005aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aae:	e224      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4ab1      	ldr	r2, [pc, #708]	; (8005d7c <UART_SetConfig+0x62c>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d176      	bne.n	8005ba8 <UART_SetConfig+0x458>
 8005aba:	4bb1      	ldr	r3, [pc, #708]	; (8005d80 <UART_SetConfig+0x630>)
 8005abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005abe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ac2:	2b28      	cmp	r3, #40	; 0x28
 8005ac4:	d86c      	bhi.n	8005ba0 <UART_SetConfig+0x450>
 8005ac6:	a201      	add	r2, pc, #4	; (adr r2, 8005acc <UART_SetConfig+0x37c>)
 8005ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005acc:	08005b71 	.word	0x08005b71
 8005ad0:	08005ba1 	.word	0x08005ba1
 8005ad4:	08005ba1 	.word	0x08005ba1
 8005ad8:	08005ba1 	.word	0x08005ba1
 8005adc:	08005ba1 	.word	0x08005ba1
 8005ae0:	08005ba1 	.word	0x08005ba1
 8005ae4:	08005ba1 	.word	0x08005ba1
 8005ae8:	08005ba1 	.word	0x08005ba1
 8005aec:	08005b79 	.word	0x08005b79
 8005af0:	08005ba1 	.word	0x08005ba1
 8005af4:	08005ba1 	.word	0x08005ba1
 8005af8:	08005ba1 	.word	0x08005ba1
 8005afc:	08005ba1 	.word	0x08005ba1
 8005b00:	08005ba1 	.word	0x08005ba1
 8005b04:	08005ba1 	.word	0x08005ba1
 8005b08:	08005ba1 	.word	0x08005ba1
 8005b0c:	08005b81 	.word	0x08005b81
 8005b10:	08005ba1 	.word	0x08005ba1
 8005b14:	08005ba1 	.word	0x08005ba1
 8005b18:	08005ba1 	.word	0x08005ba1
 8005b1c:	08005ba1 	.word	0x08005ba1
 8005b20:	08005ba1 	.word	0x08005ba1
 8005b24:	08005ba1 	.word	0x08005ba1
 8005b28:	08005ba1 	.word	0x08005ba1
 8005b2c:	08005b89 	.word	0x08005b89
 8005b30:	08005ba1 	.word	0x08005ba1
 8005b34:	08005ba1 	.word	0x08005ba1
 8005b38:	08005ba1 	.word	0x08005ba1
 8005b3c:	08005ba1 	.word	0x08005ba1
 8005b40:	08005ba1 	.word	0x08005ba1
 8005b44:	08005ba1 	.word	0x08005ba1
 8005b48:	08005ba1 	.word	0x08005ba1
 8005b4c:	08005b91 	.word	0x08005b91
 8005b50:	08005ba1 	.word	0x08005ba1
 8005b54:	08005ba1 	.word	0x08005ba1
 8005b58:	08005ba1 	.word	0x08005ba1
 8005b5c:	08005ba1 	.word	0x08005ba1
 8005b60:	08005ba1 	.word	0x08005ba1
 8005b64:	08005ba1 	.word	0x08005ba1
 8005b68:	08005ba1 	.word	0x08005ba1
 8005b6c:	08005b99 	.word	0x08005b99
 8005b70:	2301      	movs	r3, #1
 8005b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b76:	e1c0      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005b78:	2304      	movs	r3, #4
 8005b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b7e:	e1bc      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005b80:	2308      	movs	r3, #8
 8005b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b86:	e1b8      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005b88:	2310      	movs	r3, #16
 8005b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b8e:	e1b4      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005b90:	2320      	movs	r3, #32
 8005b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b96:	e1b0      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005b98:	2340      	movs	r3, #64	; 0x40
 8005b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b9e:	e1ac      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005ba0:	2380      	movs	r3, #128	; 0x80
 8005ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ba6:	e1a8      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a75      	ldr	r2, [pc, #468]	; (8005d84 <UART_SetConfig+0x634>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d130      	bne.n	8005c14 <UART_SetConfig+0x4c4>
 8005bb2:	4b73      	ldr	r3, [pc, #460]	; (8005d80 <UART_SetConfig+0x630>)
 8005bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb6:	f003 0307 	and.w	r3, r3, #7
 8005bba:	2b05      	cmp	r3, #5
 8005bbc:	d826      	bhi.n	8005c0c <UART_SetConfig+0x4bc>
 8005bbe:	a201      	add	r2, pc, #4	; (adr r2, 8005bc4 <UART_SetConfig+0x474>)
 8005bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc4:	08005bdd 	.word	0x08005bdd
 8005bc8:	08005be5 	.word	0x08005be5
 8005bcc:	08005bed 	.word	0x08005bed
 8005bd0:	08005bf5 	.word	0x08005bf5
 8005bd4:	08005bfd 	.word	0x08005bfd
 8005bd8:	08005c05 	.word	0x08005c05
 8005bdc:	2300      	movs	r3, #0
 8005bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005be2:	e18a      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005be4:	2304      	movs	r3, #4
 8005be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bea:	e186      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005bec:	2308      	movs	r3, #8
 8005bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bf2:	e182      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005bf4:	2310      	movs	r3, #16
 8005bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bfa:	e17e      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005bfc:	2320      	movs	r3, #32
 8005bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c02:	e17a      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005c04:	2340      	movs	r3, #64	; 0x40
 8005c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c0a:	e176      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005c0c:	2380      	movs	r3, #128	; 0x80
 8005c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c12:	e172      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a5b      	ldr	r2, [pc, #364]	; (8005d88 <UART_SetConfig+0x638>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d130      	bne.n	8005c80 <UART_SetConfig+0x530>
 8005c1e:	4b58      	ldr	r3, [pc, #352]	; (8005d80 <UART_SetConfig+0x630>)
 8005c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c22:	f003 0307 	and.w	r3, r3, #7
 8005c26:	2b05      	cmp	r3, #5
 8005c28:	d826      	bhi.n	8005c78 <UART_SetConfig+0x528>
 8005c2a:	a201      	add	r2, pc, #4	; (adr r2, 8005c30 <UART_SetConfig+0x4e0>)
 8005c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c30:	08005c49 	.word	0x08005c49
 8005c34:	08005c51 	.word	0x08005c51
 8005c38:	08005c59 	.word	0x08005c59
 8005c3c:	08005c61 	.word	0x08005c61
 8005c40:	08005c69 	.word	0x08005c69
 8005c44:	08005c71 	.word	0x08005c71
 8005c48:	2300      	movs	r3, #0
 8005c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c4e:	e154      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005c50:	2304      	movs	r3, #4
 8005c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c56:	e150      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005c58:	2308      	movs	r3, #8
 8005c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c5e:	e14c      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005c60:	2310      	movs	r3, #16
 8005c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c66:	e148      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005c68:	2320      	movs	r3, #32
 8005c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c6e:	e144      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005c70:	2340      	movs	r3, #64	; 0x40
 8005c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c76:	e140      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005c78:	2380      	movs	r3, #128	; 0x80
 8005c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c7e:	e13c      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a41      	ldr	r2, [pc, #260]	; (8005d8c <UART_SetConfig+0x63c>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	f040 8082 	bne.w	8005d90 <UART_SetConfig+0x640>
 8005c8c:	4b3c      	ldr	r3, [pc, #240]	; (8005d80 <UART_SetConfig+0x630>)
 8005c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c94:	2b28      	cmp	r3, #40	; 0x28
 8005c96:	d86d      	bhi.n	8005d74 <UART_SetConfig+0x624>
 8005c98:	a201      	add	r2, pc, #4	; (adr r2, 8005ca0 <UART_SetConfig+0x550>)
 8005c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9e:	bf00      	nop
 8005ca0:	08005d45 	.word	0x08005d45
 8005ca4:	08005d75 	.word	0x08005d75
 8005ca8:	08005d75 	.word	0x08005d75
 8005cac:	08005d75 	.word	0x08005d75
 8005cb0:	08005d75 	.word	0x08005d75
 8005cb4:	08005d75 	.word	0x08005d75
 8005cb8:	08005d75 	.word	0x08005d75
 8005cbc:	08005d75 	.word	0x08005d75
 8005cc0:	08005d4d 	.word	0x08005d4d
 8005cc4:	08005d75 	.word	0x08005d75
 8005cc8:	08005d75 	.word	0x08005d75
 8005ccc:	08005d75 	.word	0x08005d75
 8005cd0:	08005d75 	.word	0x08005d75
 8005cd4:	08005d75 	.word	0x08005d75
 8005cd8:	08005d75 	.word	0x08005d75
 8005cdc:	08005d75 	.word	0x08005d75
 8005ce0:	08005d55 	.word	0x08005d55
 8005ce4:	08005d75 	.word	0x08005d75
 8005ce8:	08005d75 	.word	0x08005d75
 8005cec:	08005d75 	.word	0x08005d75
 8005cf0:	08005d75 	.word	0x08005d75
 8005cf4:	08005d75 	.word	0x08005d75
 8005cf8:	08005d75 	.word	0x08005d75
 8005cfc:	08005d75 	.word	0x08005d75
 8005d00:	08005d5d 	.word	0x08005d5d
 8005d04:	08005d75 	.word	0x08005d75
 8005d08:	08005d75 	.word	0x08005d75
 8005d0c:	08005d75 	.word	0x08005d75
 8005d10:	08005d75 	.word	0x08005d75
 8005d14:	08005d75 	.word	0x08005d75
 8005d18:	08005d75 	.word	0x08005d75
 8005d1c:	08005d75 	.word	0x08005d75
 8005d20:	08005d65 	.word	0x08005d65
 8005d24:	08005d75 	.word	0x08005d75
 8005d28:	08005d75 	.word	0x08005d75
 8005d2c:	08005d75 	.word	0x08005d75
 8005d30:	08005d75 	.word	0x08005d75
 8005d34:	08005d75 	.word	0x08005d75
 8005d38:	08005d75 	.word	0x08005d75
 8005d3c:	08005d75 	.word	0x08005d75
 8005d40:	08005d6d 	.word	0x08005d6d
 8005d44:	2301      	movs	r3, #1
 8005d46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d4a:	e0d6      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005d4c:	2304      	movs	r3, #4
 8005d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d52:	e0d2      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005d54:	2308      	movs	r3, #8
 8005d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d5a:	e0ce      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005d5c:	2310      	movs	r3, #16
 8005d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d62:	e0ca      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005d64:	2320      	movs	r3, #32
 8005d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d6a:	e0c6      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005d6c:	2340      	movs	r3, #64	; 0x40
 8005d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d72:	e0c2      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005d74:	2380      	movs	r3, #128	; 0x80
 8005d76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d7a:	e0be      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005d7c:	40011400 	.word	0x40011400
 8005d80:	58024400 	.word	0x58024400
 8005d84:	40007800 	.word	0x40007800
 8005d88:	40007c00 	.word	0x40007c00
 8005d8c:	40011800 	.word	0x40011800
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4aad      	ldr	r2, [pc, #692]	; (800604c <UART_SetConfig+0x8fc>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d176      	bne.n	8005e88 <UART_SetConfig+0x738>
 8005d9a:	4bad      	ldr	r3, [pc, #692]	; (8006050 <UART_SetConfig+0x900>)
 8005d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005da2:	2b28      	cmp	r3, #40	; 0x28
 8005da4:	d86c      	bhi.n	8005e80 <UART_SetConfig+0x730>
 8005da6:	a201      	add	r2, pc, #4	; (adr r2, 8005dac <UART_SetConfig+0x65c>)
 8005da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dac:	08005e51 	.word	0x08005e51
 8005db0:	08005e81 	.word	0x08005e81
 8005db4:	08005e81 	.word	0x08005e81
 8005db8:	08005e81 	.word	0x08005e81
 8005dbc:	08005e81 	.word	0x08005e81
 8005dc0:	08005e81 	.word	0x08005e81
 8005dc4:	08005e81 	.word	0x08005e81
 8005dc8:	08005e81 	.word	0x08005e81
 8005dcc:	08005e59 	.word	0x08005e59
 8005dd0:	08005e81 	.word	0x08005e81
 8005dd4:	08005e81 	.word	0x08005e81
 8005dd8:	08005e81 	.word	0x08005e81
 8005ddc:	08005e81 	.word	0x08005e81
 8005de0:	08005e81 	.word	0x08005e81
 8005de4:	08005e81 	.word	0x08005e81
 8005de8:	08005e81 	.word	0x08005e81
 8005dec:	08005e61 	.word	0x08005e61
 8005df0:	08005e81 	.word	0x08005e81
 8005df4:	08005e81 	.word	0x08005e81
 8005df8:	08005e81 	.word	0x08005e81
 8005dfc:	08005e81 	.word	0x08005e81
 8005e00:	08005e81 	.word	0x08005e81
 8005e04:	08005e81 	.word	0x08005e81
 8005e08:	08005e81 	.word	0x08005e81
 8005e0c:	08005e69 	.word	0x08005e69
 8005e10:	08005e81 	.word	0x08005e81
 8005e14:	08005e81 	.word	0x08005e81
 8005e18:	08005e81 	.word	0x08005e81
 8005e1c:	08005e81 	.word	0x08005e81
 8005e20:	08005e81 	.word	0x08005e81
 8005e24:	08005e81 	.word	0x08005e81
 8005e28:	08005e81 	.word	0x08005e81
 8005e2c:	08005e71 	.word	0x08005e71
 8005e30:	08005e81 	.word	0x08005e81
 8005e34:	08005e81 	.word	0x08005e81
 8005e38:	08005e81 	.word	0x08005e81
 8005e3c:	08005e81 	.word	0x08005e81
 8005e40:	08005e81 	.word	0x08005e81
 8005e44:	08005e81 	.word	0x08005e81
 8005e48:	08005e81 	.word	0x08005e81
 8005e4c:	08005e79 	.word	0x08005e79
 8005e50:	2301      	movs	r3, #1
 8005e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e56:	e050      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005e58:	2304      	movs	r3, #4
 8005e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e5e:	e04c      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005e60:	2308      	movs	r3, #8
 8005e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e66:	e048      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005e68:	2310      	movs	r3, #16
 8005e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e6e:	e044      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005e70:	2320      	movs	r3, #32
 8005e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e76:	e040      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005e78:	2340      	movs	r3, #64	; 0x40
 8005e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e7e:	e03c      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005e80:	2380      	movs	r3, #128	; 0x80
 8005e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e86:	e038      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a71      	ldr	r2, [pc, #452]	; (8006054 <UART_SetConfig+0x904>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d130      	bne.n	8005ef4 <UART_SetConfig+0x7a4>
 8005e92:	4b6f      	ldr	r3, [pc, #444]	; (8006050 <UART_SetConfig+0x900>)
 8005e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e96:	f003 0307 	and.w	r3, r3, #7
 8005e9a:	2b05      	cmp	r3, #5
 8005e9c:	d826      	bhi.n	8005eec <UART_SetConfig+0x79c>
 8005e9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ea4 <UART_SetConfig+0x754>)
 8005ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea4:	08005ebd 	.word	0x08005ebd
 8005ea8:	08005ec5 	.word	0x08005ec5
 8005eac:	08005ecd 	.word	0x08005ecd
 8005eb0:	08005ed5 	.word	0x08005ed5
 8005eb4:	08005edd 	.word	0x08005edd
 8005eb8:	08005ee5 	.word	0x08005ee5
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ec2:	e01a      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005ec4:	2304      	movs	r3, #4
 8005ec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eca:	e016      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005ecc:	2308      	movs	r3, #8
 8005ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ed2:	e012      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005ed4:	2310      	movs	r3, #16
 8005ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eda:	e00e      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005edc:	2320      	movs	r3, #32
 8005ede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ee2:	e00a      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005ee4:	2340      	movs	r3, #64	; 0x40
 8005ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eea:	e006      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005eec:	2380      	movs	r3, #128	; 0x80
 8005eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ef2:	e002      	b.n	8005efa <UART_SetConfig+0x7aa>
 8005ef4:	2380      	movs	r3, #128	; 0x80
 8005ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a55      	ldr	r2, [pc, #340]	; (8006054 <UART_SetConfig+0x904>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	f040 80f0 	bne.w	80060e6 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005f0a:	2b20      	cmp	r3, #32
 8005f0c:	dc46      	bgt.n	8005f9c <UART_SetConfig+0x84c>
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	db75      	blt.n	8005ffe <UART_SetConfig+0x8ae>
 8005f12:	3b02      	subs	r3, #2
 8005f14:	2b1e      	cmp	r3, #30
 8005f16:	d872      	bhi.n	8005ffe <UART_SetConfig+0x8ae>
 8005f18:	a201      	add	r2, pc, #4	; (adr r2, 8005f20 <UART_SetConfig+0x7d0>)
 8005f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1e:	bf00      	nop
 8005f20:	08005fa3 	.word	0x08005fa3
 8005f24:	08005fff 	.word	0x08005fff
 8005f28:	08005fab 	.word	0x08005fab
 8005f2c:	08005fff 	.word	0x08005fff
 8005f30:	08005fff 	.word	0x08005fff
 8005f34:	08005fff 	.word	0x08005fff
 8005f38:	08005fbb 	.word	0x08005fbb
 8005f3c:	08005fff 	.word	0x08005fff
 8005f40:	08005fff 	.word	0x08005fff
 8005f44:	08005fff 	.word	0x08005fff
 8005f48:	08005fff 	.word	0x08005fff
 8005f4c:	08005fff 	.word	0x08005fff
 8005f50:	08005fff 	.word	0x08005fff
 8005f54:	08005fff 	.word	0x08005fff
 8005f58:	08005fcb 	.word	0x08005fcb
 8005f5c:	08005fff 	.word	0x08005fff
 8005f60:	08005fff 	.word	0x08005fff
 8005f64:	08005fff 	.word	0x08005fff
 8005f68:	08005fff 	.word	0x08005fff
 8005f6c:	08005fff 	.word	0x08005fff
 8005f70:	08005fff 	.word	0x08005fff
 8005f74:	08005fff 	.word	0x08005fff
 8005f78:	08005fff 	.word	0x08005fff
 8005f7c:	08005fff 	.word	0x08005fff
 8005f80:	08005fff 	.word	0x08005fff
 8005f84:	08005fff 	.word	0x08005fff
 8005f88:	08005fff 	.word	0x08005fff
 8005f8c:	08005fff 	.word	0x08005fff
 8005f90:	08005fff 	.word	0x08005fff
 8005f94:	08005fff 	.word	0x08005fff
 8005f98:	08005ff1 	.word	0x08005ff1
 8005f9c:	2b40      	cmp	r3, #64	; 0x40
 8005f9e:	d02a      	beq.n	8005ff6 <UART_SetConfig+0x8a6>
 8005fa0:	e02d      	b.n	8005ffe <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005fa2:	f7fe ff63 	bl	8004e6c <HAL_RCCEx_GetD3PCLK1Freq>
 8005fa6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005fa8:	e02f      	b.n	800600a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005faa:	f107 0314 	add.w	r3, r7, #20
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7fe ff72 	bl	8004e98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fb8:	e027      	b.n	800600a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fba:	f107 0308 	add.w	r3, r7, #8
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7ff f8be 	bl	8005140 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fc8:	e01f      	b.n	800600a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fca:	4b21      	ldr	r3, [pc, #132]	; (8006050 <UART_SetConfig+0x900>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0320 	and.w	r3, r3, #32
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d009      	beq.n	8005fea <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005fd6:	4b1e      	ldr	r3, [pc, #120]	; (8006050 <UART_SetConfig+0x900>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	08db      	lsrs	r3, r3, #3
 8005fdc:	f003 0303 	and.w	r3, r3, #3
 8005fe0:	4a1d      	ldr	r2, [pc, #116]	; (8006058 <UART_SetConfig+0x908>)
 8005fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005fe8:	e00f      	b.n	800600a <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8005fea:	4b1b      	ldr	r3, [pc, #108]	; (8006058 <UART_SetConfig+0x908>)
 8005fec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fee:	e00c      	b.n	800600a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ff0:	4b1a      	ldr	r3, [pc, #104]	; (800605c <UART_SetConfig+0x90c>)
 8005ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ff4:	e009      	b.n	800600a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ffc:	e005      	b.n	800600a <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8005ffe:	2300      	movs	r3, #0
 8006000:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006008:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800600a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 81e6 	beq.w	80063de <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006016:	4a12      	ldr	r2, [pc, #72]	; (8006060 <UART_SetConfig+0x910>)
 8006018:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800601c:	461a      	mov	r2, r3
 800601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006020:	fbb3 f3f2 	udiv	r3, r3, r2
 8006024:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685a      	ldr	r2, [r3, #4]
 800602a:	4613      	mov	r3, r2
 800602c:	005b      	lsls	r3, r3, #1
 800602e:	4413      	add	r3, r2
 8006030:	6a3a      	ldr	r2, [r7, #32]
 8006032:	429a      	cmp	r2, r3
 8006034:	d305      	bcc.n	8006042 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800603c:	6a3a      	ldr	r2, [r7, #32]
 800603e:	429a      	cmp	r2, r3
 8006040:	d910      	bls.n	8006064 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006048:	e1c9      	b.n	80063de <UART_SetConfig+0xc8e>
 800604a:	bf00      	nop
 800604c:	40011c00 	.word	0x40011c00
 8006050:	58024400 	.word	0x58024400
 8006054:	58000c00 	.word	0x58000c00
 8006058:	03d09000 	.word	0x03d09000
 800605c:	003d0900 	.word	0x003d0900
 8006060:	0800a5b8 	.word	0x0800a5b8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006066:	4618      	mov	r0, r3
 8006068:	f04f 0100 	mov.w	r1, #0
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006070:	4ac1      	ldr	r2, [pc, #772]	; (8006378 <UART_SetConfig+0xc28>)
 8006072:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006076:	b29a      	uxth	r2, r3
 8006078:	f04f 0300 	mov.w	r3, #0
 800607c:	f7fa f94e 	bl	800031c <__aeabi_uldivmod>
 8006080:	4602      	mov	r2, r0
 8006082:	460b      	mov	r3, r1
 8006084:	4610      	mov	r0, r2
 8006086:	4619      	mov	r1, r3
 8006088:	f04f 0200 	mov.w	r2, #0
 800608c:	f04f 0300 	mov.w	r3, #0
 8006090:	020b      	lsls	r3, r1, #8
 8006092:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006096:	0202      	lsls	r2, r0, #8
 8006098:	6879      	ldr	r1, [r7, #4]
 800609a:	6849      	ldr	r1, [r1, #4]
 800609c:	0849      	lsrs	r1, r1, #1
 800609e:	4608      	mov	r0, r1
 80060a0:	f04f 0100 	mov.w	r1, #0
 80060a4:	1814      	adds	r4, r2, r0
 80060a6:	eb43 0501 	adc.w	r5, r3, r1
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	461a      	mov	r2, r3
 80060b0:	f04f 0300 	mov.w	r3, #0
 80060b4:	4620      	mov	r0, r4
 80060b6:	4629      	mov	r1, r5
 80060b8:	f7fa f930 	bl	800031c <__aeabi_uldivmod>
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	4613      	mov	r3, r2
 80060c2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060ca:	d308      	bcc.n	80060de <UART_SetConfig+0x98e>
 80060cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060d2:	d204      	bcs.n	80060de <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060da:	60da      	str	r2, [r3, #12]
 80060dc:	e17f      	b.n	80063de <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80060e4:	e17b      	b.n	80063de <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ee:	f040 80bd 	bne.w	800626c <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 80060f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80060f6:	2b20      	cmp	r3, #32
 80060f8:	dc48      	bgt.n	800618c <UART_SetConfig+0xa3c>
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	db7b      	blt.n	80061f6 <UART_SetConfig+0xaa6>
 80060fe:	2b20      	cmp	r3, #32
 8006100:	d879      	bhi.n	80061f6 <UART_SetConfig+0xaa6>
 8006102:	a201      	add	r2, pc, #4	; (adr r2, 8006108 <UART_SetConfig+0x9b8>)
 8006104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006108:	08006193 	.word	0x08006193
 800610c:	0800619b 	.word	0x0800619b
 8006110:	080061f7 	.word	0x080061f7
 8006114:	080061f7 	.word	0x080061f7
 8006118:	080061a3 	.word	0x080061a3
 800611c:	080061f7 	.word	0x080061f7
 8006120:	080061f7 	.word	0x080061f7
 8006124:	080061f7 	.word	0x080061f7
 8006128:	080061b3 	.word	0x080061b3
 800612c:	080061f7 	.word	0x080061f7
 8006130:	080061f7 	.word	0x080061f7
 8006134:	080061f7 	.word	0x080061f7
 8006138:	080061f7 	.word	0x080061f7
 800613c:	080061f7 	.word	0x080061f7
 8006140:	080061f7 	.word	0x080061f7
 8006144:	080061f7 	.word	0x080061f7
 8006148:	080061c3 	.word	0x080061c3
 800614c:	080061f7 	.word	0x080061f7
 8006150:	080061f7 	.word	0x080061f7
 8006154:	080061f7 	.word	0x080061f7
 8006158:	080061f7 	.word	0x080061f7
 800615c:	080061f7 	.word	0x080061f7
 8006160:	080061f7 	.word	0x080061f7
 8006164:	080061f7 	.word	0x080061f7
 8006168:	080061f7 	.word	0x080061f7
 800616c:	080061f7 	.word	0x080061f7
 8006170:	080061f7 	.word	0x080061f7
 8006174:	080061f7 	.word	0x080061f7
 8006178:	080061f7 	.word	0x080061f7
 800617c:	080061f7 	.word	0x080061f7
 8006180:	080061f7 	.word	0x080061f7
 8006184:	080061f7 	.word	0x080061f7
 8006188:	080061e9 	.word	0x080061e9
 800618c:	2b40      	cmp	r3, #64	; 0x40
 800618e:	d02e      	beq.n	80061ee <UART_SetConfig+0xa9e>
 8006190:	e031      	b.n	80061f6 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006192:	f7fd ff45 	bl	8004020 <HAL_RCC_GetPCLK1Freq>
 8006196:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006198:	e033      	b.n	8006202 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800619a:	f7fd ff57 	bl	800404c <HAL_RCC_GetPCLK2Freq>
 800619e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80061a0:	e02f      	b.n	8006202 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061a2:	f107 0314 	add.w	r3, r7, #20
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7fe fe76 	bl	8004e98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061b0:	e027      	b.n	8006202 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061b2:	f107 0308 	add.w	r3, r7, #8
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fe ffc2 	bl	8005140 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061c0:	e01f      	b.n	8006202 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061c2:	4b6e      	ldr	r3, [pc, #440]	; (800637c <UART_SetConfig+0xc2c>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0320 	and.w	r3, r3, #32
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d009      	beq.n	80061e2 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80061ce:	4b6b      	ldr	r3, [pc, #428]	; (800637c <UART_SetConfig+0xc2c>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	08db      	lsrs	r3, r3, #3
 80061d4:	f003 0303 	and.w	r3, r3, #3
 80061d8:	4a69      	ldr	r2, [pc, #420]	; (8006380 <UART_SetConfig+0xc30>)
 80061da:	fa22 f303 	lsr.w	r3, r2, r3
 80061de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061e0:	e00f      	b.n	8006202 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 80061e2:	4b67      	ldr	r3, [pc, #412]	; (8006380 <UART_SetConfig+0xc30>)
 80061e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061e6:	e00c      	b.n	8006202 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80061e8:	4b66      	ldr	r3, [pc, #408]	; (8006384 <UART_SetConfig+0xc34>)
 80061ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061ec:	e009      	b.n	8006202 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061f4:	e005      	b.n	8006202 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 80061f6:	2300      	movs	r3, #0
 80061f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006200:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006204:	2b00      	cmp	r3, #0
 8006206:	f000 80ea 	beq.w	80063de <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620e:	4a5a      	ldr	r2, [pc, #360]	; (8006378 <UART_SetConfig+0xc28>)
 8006210:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006214:	461a      	mov	r2, r3
 8006216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006218:	fbb3 f3f2 	udiv	r3, r3, r2
 800621c:	005a      	lsls	r2, r3, #1
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	085b      	lsrs	r3, r3, #1
 8006224:	441a      	add	r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	fbb2 f3f3 	udiv	r3, r2, r3
 800622e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006232:	2b0f      	cmp	r3, #15
 8006234:	d916      	bls.n	8006264 <UART_SetConfig+0xb14>
 8006236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800623c:	d212      	bcs.n	8006264 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800623e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006240:	b29b      	uxth	r3, r3
 8006242:	f023 030f 	bic.w	r3, r3, #15
 8006246:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624a:	085b      	lsrs	r3, r3, #1
 800624c:	b29b      	uxth	r3, r3
 800624e:	f003 0307 	and.w	r3, r3, #7
 8006252:	b29a      	uxth	r2, r3
 8006254:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006256:	4313      	orrs	r3, r2
 8006258:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006260:	60da      	str	r2, [r3, #12]
 8006262:	e0bc      	b.n	80063de <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800626a:	e0b8      	b.n	80063de <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800626c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006270:	2b20      	cmp	r3, #32
 8006272:	dc4b      	bgt.n	800630c <UART_SetConfig+0xbbc>
 8006274:	2b00      	cmp	r3, #0
 8006276:	f2c0 8087 	blt.w	8006388 <UART_SetConfig+0xc38>
 800627a:	2b20      	cmp	r3, #32
 800627c:	f200 8084 	bhi.w	8006388 <UART_SetConfig+0xc38>
 8006280:	a201      	add	r2, pc, #4	; (adr r2, 8006288 <UART_SetConfig+0xb38>)
 8006282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006286:	bf00      	nop
 8006288:	08006313 	.word	0x08006313
 800628c:	0800631b 	.word	0x0800631b
 8006290:	08006389 	.word	0x08006389
 8006294:	08006389 	.word	0x08006389
 8006298:	08006323 	.word	0x08006323
 800629c:	08006389 	.word	0x08006389
 80062a0:	08006389 	.word	0x08006389
 80062a4:	08006389 	.word	0x08006389
 80062a8:	08006333 	.word	0x08006333
 80062ac:	08006389 	.word	0x08006389
 80062b0:	08006389 	.word	0x08006389
 80062b4:	08006389 	.word	0x08006389
 80062b8:	08006389 	.word	0x08006389
 80062bc:	08006389 	.word	0x08006389
 80062c0:	08006389 	.word	0x08006389
 80062c4:	08006389 	.word	0x08006389
 80062c8:	08006343 	.word	0x08006343
 80062cc:	08006389 	.word	0x08006389
 80062d0:	08006389 	.word	0x08006389
 80062d4:	08006389 	.word	0x08006389
 80062d8:	08006389 	.word	0x08006389
 80062dc:	08006389 	.word	0x08006389
 80062e0:	08006389 	.word	0x08006389
 80062e4:	08006389 	.word	0x08006389
 80062e8:	08006389 	.word	0x08006389
 80062ec:	08006389 	.word	0x08006389
 80062f0:	08006389 	.word	0x08006389
 80062f4:	08006389 	.word	0x08006389
 80062f8:	08006389 	.word	0x08006389
 80062fc:	08006389 	.word	0x08006389
 8006300:	08006389 	.word	0x08006389
 8006304:	08006389 	.word	0x08006389
 8006308:	08006369 	.word	0x08006369
 800630c:	2b40      	cmp	r3, #64	; 0x40
 800630e:	d02e      	beq.n	800636e <UART_SetConfig+0xc1e>
 8006310:	e03a      	b.n	8006388 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006312:	f7fd fe85 	bl	8004020 <HAL_RCC_GetPCLK1Freq>
 8006316:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006318:	e03c      	b.n	8006394 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800631a:	f7fd fe97 	bl	800404c <HAL_RCC_GetPCLK2Freq>
 800631e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006320:	e038      	b.n	8006394 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006322:	f107 0314 	add.w	r3, r7, #20
 8006326:	4618      	mov	r0, r3
 8006328:	f7fe fdb6 	bl	8004e98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006330:	e030      	b.n	8006394 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006332:	f107 0308 	add.w	r3, r7, #8
 8006336:	4618      	mov	r0, r3
 8006338:	f7fe ff02 	bl	8005140 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006340:	e028      	b.n	8006394 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006342:	4b0e      	ldr	r3, [pc, #56]	; (800637c <UART_SetConfig+0xc2c>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0320 	and.w	r3, r3, #32
 800634a:	2b00      	cmp	r3, #0
 800634c:	d009      	beq.n	8006362 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800634e:	4b0b      	ldr	r3, [pc, #44]	; (800637c <UART_SetConfig+0xc2c>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	08db      	lsrs	r3, r3, #3
 8006354:	f003 0303 	and.w	r3, r3, #3
 8006358:	4a09      	ldr	r2, [pc, #36]	; (8006380 <UART_SetConfig+0xc30>)
 800635a:	fa22 f303 	lsr.w	r3, r2, r3
 800635e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006360:	e018      	b.n	8006394 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8006362:	4b07      	ldr	r3, [pc, #28]	; (8006380 <UART_SetConfig+0xc30>)
 8006364:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006366:	e015      	b.n	8006394 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006368:	4b06      	ldr	r3, [pc, #24]	; (8006384 <UART_SetConfig+0xc34>)
 800636a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800636c:	e012      	b.n	8006394 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800636e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006372:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006374:	e00e      	b.n	8006394 <UART_SetConfig+0xc44>
 8006376:	bf00      	nop
 8006378:	0800a5b8 	.word	0x0800a5b8
 800637c:	58024400 	.word	0x58024400
 8006380:	03d09000 	.word	0x03d09000
 8006384:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8006388:	2300      	movs	r3, #0
 800638a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006392:	bf00      	nop
    }

    if (pclk != 0U)
 8006394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006396:	2b00      	cmp	r3, #0
 8006398:	d021      	beq.n	80063de <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639e:	4a1a      	ldr	r2, [pc, #104]	; (8006408 <UART_SetConfig+0xcb8>)
 80063a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063a4:	461a      	mov	r2, r3
 80063a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	085b      	lsrs	r3, r3, #1
 80063b2:	441a      	add	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063bc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c0:	2b0f      	cmp	r3, #15
 80063c2:	d909      	bls.n	80063d8 <UART_SetConfig+0xc88>
 80063c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ca:	d205      	bcs.n	80063d8 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	60da      	str	r2, [r3, #12]
 80063d6:	e002      	b.n	80063de <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80063fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3738      	adds	r7, #56	; 0x38
 8006402:	46bd      	mov	sp, r7
 8006404:	bdb0      	pop	{r4, r5, r7, pc}
 8006406:	bf00      	nop
 8006408:	0800a5b8 	.word	0x0800a5b8

0800640c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00a      	beq.n	8006436 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	430a      	orrs	r2, r1
 8006434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643a:	f003 0302 	and.w	r3, r3, #2
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00a      	beq.n	8006458 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	430a      	orrs	r2, r1
 8006456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645c:	f003 0304 	and.w	r3, r3, #4
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00a      	beq.n	800647a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	430a      	orrs	r2, r1
 8006478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647e:	f003 0308 	and.w	r3, r3, #8
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00a      	beq.n	800649c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	430a      	orrs	r2, r1
 800649a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a0:	f003 0310 	and.w	r3, r3, #16
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00a      	beq.n	80064be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c2:	f003 0320 	and.w	r3, r3, #32
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00a      	beq.n	80064e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	430a      	orrs	r2, r1
 80064de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d01a      	beq.n	8006522 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006506:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800650a:	d10a      	bne.n	8006522 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	430a      	orrs	r2, r1
 8006520:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00a      	beq.n	8006544 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	430a      	orrs	r2, r1
 8006542:	605a      	str	r2, [r3, #4]
  }
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af02      	add	r7, sp, #8
 8006556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006560:	f7fa fd0e 	bl	8000f80 <HAL_GetTick>
 8006564:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0308 	and.w	r3, r3, #8
 8006570:	2b08      	cmp	r3, #8
 8006572:	d10e      	bne.n	8006592 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006574:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006578:	9300      	str	r3, [sp, #0]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f82f 	bl	80065e6 <UART_WaitOnFlagUntilTimeout>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e025      	b.n	80065de <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0304 	and.w	r3, r3, #4
 800659c:	2b04      	cmp	r3, #4
 800659e:	d10e      	bne.n	80065be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f819 	bl	80065e6 <UART_WaitOnFlagUntilTimeout>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e00f      	b.n	80065de <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2220      	movs	r2, #32
 80065c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b09c      	sub	sp, #112	; 0x70
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	60f8      	str	r0, [r7, #12]
 80065ee:	60b9      	str	r1, [r7, #8]
 80065f0:	603b      	str	r3, [r7, #0]
 80065f2:	4613      	mov	r3, r2
 80065f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065f6:	e0a9      	b.n	800674c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fe:	f000 80a5 	beq.w	800674c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006602:	f7fa fcbd 	bl	8000f80 <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800660e:	429a      	cmp	r2, r3
 8006610:	d302      	bcc.n	8006618 <UART_WaitOnFlagUntilTimeout+0x32>
 8006612:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006614:	2b00      	cmp	r3, #0
 8006616:	d140      	bne.n	800669a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006620:	e853 3f00 	ldrex	r3, [r3]
 8006624:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006628:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800662c:	667b      	str	r3, [r7, #100]	; 0x64
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	461a      	mov	r2, r3
 8006634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006636:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006638:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800663c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800663e:	e841 2300 	strex	r3, r2, [r1]
 8006642:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1e6      	bne.n	8006618 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	3308      	adds	r3, #8
 8006650:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006654:	e853 3f00 	ldrex	r3, [r3]
 8006658:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800665a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665c:	f023 0301 	bic.w	r3, r3, #1
 8006660:	663b      	str	r3, [r7, #96]	; 0x60
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3308      	adds	r3, #8
 8006668:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800666a:	64ba      	str	r2, [r7, #72]	; 0x48
 800666c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006670:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006672:	e841 2300 	strex	r3, r2, [r1]
 8006676:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1e5      	bne.n	800664a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2220      	movs	r2, #32
 8006682:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2220      	movs	r2, #32
 800668a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e069      	b.n	800676e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0304 	and.w	r3, r3, #4
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d051      	beq.n	800674c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066b6:	d149      	bne.n	800674c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066c0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ca:	e853 3f00 	ldrex	r3, [r3]
 80066ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	461a      	mov	r2, r3
 80066de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066e0:	637b      	str	r3, [r7, #52]	; 0x34
 80066e2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066e8:	e841 2300 	strex	r3, r2, [r1]
 80066ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80066ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1e6      	bne.n	80066c2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	3308      	adds	r3, #8
 80066fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	e853 3f00 	ldrex	r3, [r3]
 8006702:	613b      	str	r3, [r7, #16]
   return(result);
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	f023 0301 	bic.w	r3, r3, #1
 800670a:	66bb      	str	r3, [r7, #104]	; 0x68
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	3308      	adds	r3, #8
 8006712:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006714:	623a      	str	r2, [r7, #32]
 8006716:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006718:	69f9      	ldr	r1, [r7, #28]
 800671a:	6a3a      	ldr	r2, [r7, #32]
 800671c:	e841 2300 	strex	r3, r2, [r1]
 8006720:	61bb      	str	r3, [r7, #24]
   return(result);
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1e5      	bne.n	80066f4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2220      	movs	r2, #32
 800672c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2220      	movs	r2, #32
 8006734:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2220      	movs	r2, #32
 800673c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e010      	b.n	800676e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	69da      	ldr	r2, [r3, #28]
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	4013      	ands	r3, r2
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	429a      	cmp	r2, r3
 800675a:	bf0c      	ite	eq
 800675c:	2301      	moveq	r3, #1
 800675e:	2300      	movne	r3, #0
 8006760:	b2db      	uxtb	r3, r3
 8006762:	461a      	mov	r2, r3
 8006764:	79fb      	ldrb	r3, [r7, #7]
 8006766:	429a      	cmp	r2, r3
 8006768:	f43f af46 	beq.w	80065f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3770      	adds	r7, #112	; 0x70
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006776:	b480      	push	{r7}
 8006778:	b085      	sub	sp, #20
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006784:	2b01      	cmp	r3, #1
 8006786:	d101      	bne.n	800678c <HAL_UARTEx_DisableFifoMode+0x16>
 8006788:	2302      	movs	r3, #2
 800678a:	e027      	b.n	80067dc <HAL_UARTEx_DisableFifoMode+0x66>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2224      	movs	r2, #36	; 0x24
 8006798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f022 0201 	bic.w	r2, r2, #1
 80067b2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80067ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2220      	movs	r2, #32
 80067ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3714      	adds	r7, #20
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d101      	bne.n	8006800 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80067fc:	2302      	movs	r3, #2
 80067fe:	e02d      	b.n	800685c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2224      	movs	r2, #36	; 0x24
 800680c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f022 0201 	bic.w	r2, r2, #1
 8006826:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	683a      	ldr	r2, [r7, #0]
 8006838:	430a      	orrs	r2, r1
 800683a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 f84f 	bl	80068e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2220      	movs	r2, #32
 800684e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3710      	adds	r7, #16
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006874:	2b01      	cmp	r3, #1
 8006876:	d101      	bne.n	800687c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006878:	2302      	movs	r3, #2
 800687a:	e02d      	b.n	80068d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2224      	movs	r2, #36	; 0x24
 8006888:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f022 0201 	bic.w	r2, r2, #1
 80068a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	430a      	orrs	r2, r1
 80068b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f811 	bl	80068e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2220      	movs	r2, #32
 80068ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3710      	adds	r7, #16
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d108      	bne.n	8006902 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006900:	e031      	b.n	8006966 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006902:	2310      	movs	r3, #16
 8006904:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006906:	2310      	movs	r3, #16
 8006908:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	0e5b      	lsrs	r3, r3, #25
 8006912:	b2db      	uxtb	r3, r3
 8006914:	f003 0307 	and.w	r3, r3, #7
 8006918:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	0f5b      	lsrs	r3, r3, #29
 8006922:	b2db      	uxtb	r3, r3
 8006924:	f003 0307 	and.w	r3, r3, #7
 8006928:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800692a:	7bbb      	ldrb	r3, [r7, #14]
 800692c:	7b3a      	ldrb	r2, [r7, #12]
 800692e:	4911      	ldr	r1, [pc, #68]	; (8006974 <UARTEx_SetNbDataToProcess+0x94>)
 8006930:	5c8a      	ldrb	r2, [r1, r2]
 8006932:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006936:	7b3a      	ldrb	r2, [r7, #12]
 8006938:	490f      	ldr	r1, [pc, #60]	; (8006978 <UARTEx_SetNbDataToProcess+0x98>)
 800693a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800693c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006940:	b29a      	uxth	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006948:	7bfb      	ldrb	r3, [r7, #15]
 800694a:	7b7a      	ldrb	r2, [r7, #13]
 800694c:	4909      	ldr	r1, [pc, #36]	; (8006974 <UARTEx_SetNbDataToProcess+0x94>)
 800694e:	5c8a      	ldrb	r2, [r1, r2]
 8006950:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006954:	7b7a      	ldrb	r2, [r7, #13]
 8006956:	4908      	ldr	r1, [pc, #32]	; (8006978 <UARTEx_SetNbDataToProcess+0x98>)
 8006958:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800695a:	fb93 f3f2 	sdiv	r3, r3, r2
 800695e:	b29a      	uxth	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006966:	bf00      	nop
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	0800a5d0 	.word	0x0800a5d0
 8006978:	0800a5d8 	.word	0x0800a5d8

0800697c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800697c:	b084      	sub	sp, #16
 800697e:	b580      	push	{r7, lr}
 8006980:	b084      	sub	sp, #16
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	f107 001c 	add.w	r0, r7, #28
 800698a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800698e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006990:	2b01      	cmp	r3, #1
 8006992:	d120      	bne.n	80069d6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006998:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	68da      	ldr	r2, [r3, #12]
 80069a4:	4b2a      	ldr	r3, [pc, #168]	; (8006a50 <USB_CoreInit+0xd4>)
 80069a6:	4013      	ands	r3, r2
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80069b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d105      	bne.n	80069ca <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f001 fb4e 	bl	800806c <USB_CoreReset>
 80069d0:	4603      	mov	r3, r0
 80069d2:	73fb      	strb	r3, [r7, #15]
 80069d4:	e01a      	b.n	8006a0c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f001 fb42 	bl	800806c <USB_CoreReset>
 80069e8:	4603      	mov	r3, r0
 80069ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80069ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d106      	bne.n	8006a00 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	639a      	str	r2, [r3, #56]	; 0x38
 80069fe:	e005      	b.n	8006a0c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d116      	bne.n	8006a40 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006a20:	4b0c      	ldr	r3, [pc, #48]	; (8006a54 <USB_CoreInit+0xd8>)
 8006a22:	4313      	orrs	r3, r2
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f043 0206 	orr.w	r2, r3, #6
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f043 0220 	orr.w	r2, r3, #32
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a4c:	b004      	add	sp, #16
 8006a4e:	4770      	bx	lr
 8006a50:	ffbdffbf 	.word	0xffbdffbf
 8006a54:	03ee0000 	.word	0x03ee0000

08006a58 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	4613      	mov	r3, r2
 8006a64:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006a66:	79fb      	ldrb	r3, [r7, #7]
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d165      	bne.n	8006b38 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	4a41      	ldr	r2, [pc, #260]	; (8006b74 <USB_SetTurnaroundTime+0x11c>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d906      	bls.n	8006a82 <USB_SetTurnaroundTime+0x2a>
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	4a40      	ldr	r2, [pc, #256]	; (8006b78 <USB_SetTurnaroundTime+0x120>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d202      	bcs.n	8006a82 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006a7c:	230f      	movs	r3, #15
 8006a7e:	617b      	str	r3, [r7, #20]
 8006a80:	e062      	b.n	8006b48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	4a3c      	ldr	r2, [pc, #240]	; (8006b78 <USB_SetTurnaroundTime+0x120>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d306      	bcc.n	8006a98 <USB_SetTurnaroundTime+0x40>
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	4a3b      	ldr	r2, [pc, #236]	; (8006b7c <USB_SetTurnaroundTime+0x124>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d202      	bcs.n	8006a98 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006a92:	230e      	movs	r3, #14
 8006a94:	617b      	str	r3, [r7, #20]
 8006a96:	e057      	b.n	8006b48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	4a38      	ldr	r2, [pc, #224]	; (8006b7c <USB_SetTurnaroundTime+0x124>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d306      	bcc.n	8006aae <USB_SetTurnaroundTime+0x56>
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	4a37      	ldr	r2, [pc, #220]	; (8006b80 <USB_SetTurnaroundTime+0x128>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d202      	bcs.n	8006aae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006aa8:	230d      	movs	r3, #13
 8006aaa:	617b      	str	r3, [r7, #20]
 8006aac:	e04c      	b.n	8006b48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	4a33      	ldr	r2, [pc, #204]	; (8006b80 <USB_SetTurnaroundTime+0x128>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d306      	bcc.n	8006ac4 <USB_SetTurnaroundTime+0x6c>
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	4a32      	ldr	r2, [pc, #200]	; (8006b84 <USB_SetTurnaroundTime+0x12c>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d802      	bhi.n	8006ac4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006abe:	230c      	movs	r3, #12
 8006ac0:	617b      	str	r3, [r7, #20]
 8006ac2:	e041      	b.n	8006b48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	4a2f      	ldr	r2, [pc, #188]	; (8006b84 <USB_SetTurnaroundTime+0x12c>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d906      	bls.n	8006ada <USB_SetTurnaroundTime+0x82>
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	4a2e      	ldr	r2, [pc, #184]	; (8006b88 <USB_SetTurnaroundTime+0x130>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d802      	bhi.n	8006ada <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006ad4:	230b      	movs	r3, #11
 8006ad6:	617b      	str	r3, [r7, #20]
 8006ad8:	e036      	b.n	8006b48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	4a2a      	ldr	r2, [pc, #168]	; (8006b88 <USB_SetTurnaroundTime+0x130>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d906      	bls.n	8006af0 <USB_SetTurnaroundTime+0x98>
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	4a29      	ldr	r2, [pc, #164]	; (8006b8c <USB_SetTurnaroundTime+0x134>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d802      	bhi.n	8006af0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006aea:	230a      	movs	r3, #10
 8006aec:	617b      	str	r3, [r7, #20]
 8006aee:	e02b      	b.n	8006b48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	4a26      	ldr	r2, [pc, #152]	; (8006b8c <USB_SetTurnaroundTime+0x134>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d906      	bls.n	8006b06 <USB_SetTurnaroundTime+0xae>
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	4a25      	ldr	r2, [pc, #148]	; (8006b90 <USB_SetTurnaroundTime+0x138>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d202      	bcs.n	8006b06 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006b00:	2309      	movs	r3, #9
 8006b02:	617b      	str	r3, [r7, #20]
 8006b04:	e020      	b.n	8006b48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	4a21      	ldr	r2, [pc, #132]	; (8006b90 <USB_SetTurnaroundTime+0x138>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d306      	bcc.n	8006b1c <USB_SetTurnaroundTime+0xc4>
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	4a20      	ldr	r2, [pc, #128]	; (8006b94 <USB_SetTurnaroundTime+0x13c>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d802      	bhi.n	8006b1c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006b16:	2308      	movs	r3, #8
 8006b18:	617b      	str	r3, [r7, #20]
 8006b1a:	e015      	b.n	8006b48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	4a1d      	ldr	r2, [pc, #116]	; (8006b94 <USB_SetTurnaroundTime+0x13c>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d906      	bls.n	8006b32 <USB_SetTurnaroundTime+0xda>
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	4a1c      	ldr	r2, [pc, #112]	; (8006b98 <USB_SetTurnaroundTime+0x140>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d202      	bcs.n	8006b32 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006b2c:	2307      	movs	r3, #7
 8006b2e:	617b      	str	r3, [r7, #20]
 8006b30:	e00a      	b.n	8006b48 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006b32:	2306      	movs	r3, #6
 8006b34:	617b      	str	r3, [r7, #20]
 8006b36:	e007      	b.n	8006b48 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006b38:	79fb      	ldrb	r3, [r7, #7]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d102      	bne.n	8006b44 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006b3e:	2309      	movs	r3, #9
 8006b40:	617b      	str	r3, [r7, #20]
 8006b42:	e001      	b.n	8006b48 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006b44:	2309      	movs	r3, #9
 8006b46:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	68da      	ldr	r2, [r3, #12]
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	029b      	lsls	r3, r3, #10
 8006b5c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006b60:	431a      	orrs	r2, r3
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	371c      	adds	r7, #28
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr
 8006b74:	00d8acbf 	.word	0x00d8acbf
 8006b78:	00e4e1c0 	.word	0x00e4e1c0
 8006b7c:	00f42400 	.word	0x00f42400
 8006b80:	01067380 	.word	0x01067380
 8006b84:	011a499f 	.word	0x011a499f
 8006b88:	01312cff 	.word	0x01312cff
 8006b8c:	014ca43f 	.word	0x014ca43f
 8006b90:	016e3600 	.word	0x016e3600
 8006b94:	01a6ab1f 	.word	0x01a6ab1f
 8006b98:	01e84800 	.word	0x01e84800

08006b9c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	f043 0201 	orr.w	r2, r3, #1
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	370c      	adds	r7, #12
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr

08006bbe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b083      	sub	sp, #12
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f023 0201 	bic.w	r2, r3, #1
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	460b      	mov	r3, r1
 8006bea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006bfc:	78fb      	ldrb	r3, [r7, #3]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d115      	bne.n	8006c2e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006c0e:	2001      	movs	r0, #1
 8006c10:	f7fa f9c2 	bl	8000f98 <HAL_Delay>
      ms++;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	3301      	adds	r3, #1
 8006c18:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f001 f995 	bl	8007f4a <USB_GetMode>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d01e      	beq.n	8006c64 <USB_SetCurrentMode+0x84>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2b31      	cmp	r3, #49	; 0x31
 8006c2a:	d9f0      	bls.n	8006c0e <USB_SetCurrentMode+0x2e>
 8006c2c:	e01a      	b.n	8006c64 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c2e:	78fb      	ldrb	r3, [r7, #3]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d115      	bne.n	8006c60 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006c40:	2001      	movs	r0, #1
 8006c42:	f7fa f9a9 	bl	8000f98 <HAL_Delay>
      ms++;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f001 f97c 	bl	8007f4a <USB_GetMode>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d005      	beq.n	8006c64 <USB_SetCurrentMode+0x84>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2b31      	cmp	r3, #49	; 0x31
 8006c5c:	d9f0      	bls.n	8006c40 <USB_SetCurrentMode+0x60>
 8006c5e:	e001      	b.n	8006c64 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e005      	b.n	8006c70 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2b32      	cmp	r3, #50	; 0x32
 8006c68:	d101      	bne.n	8006c6e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e000      	b.n	8006c70 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c78:	b084      	sub	sp, #16
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b086      	sub	sp, #24
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
 8006c82:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006c86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c92:	2300      	movs	r3, #0
 8006c94:	613b      	str	r3, [r7, #16]
 8006c96:	e009      	b.n	8006cac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	3340      	adds	r3, #64	; 0x40
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	613b      	str	r3, [r7, #16]
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	2b0e      	cmp	r3, #14
 8006cb0:	d9f2      	bls.n	8006c98 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d11c      	bne.n	8006cf2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cc6:	f043 0302 	orr.w	r3, r3, #2
 8006cca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	601a      	str	r2, [r3, #0]
 8006cf0:	e005      	b.n	8006cfe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d04:	461a      	mov	r2, r3
 8006d06:	2300      	movs	r3, #0
 8006d08:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d10:	4619      	mov	r1, r3
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d18:	461a      	mov	r2, r3
 8006d1a:	680b      	ldr	r3, [r1, #0]
 8006d1c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d10c      	bne.n	8006d3e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d104      	bne.n	8006d34 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 f961 	bl	8006ff4 <USB_SetDevSpeed>
 8006d32:	e008      	b.n	8006d46 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006d34:	2101      	movs	r1, #1
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f95c 	bl	8006ff4 <USB_SetDevSpeed>
 8006d3c:	e003      	b.n	8006d46 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006d3e:	2103      	movs	r1, #3
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f957 	bl	8006ff4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d46:	2110      	movs	r1, #16
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f8f3 	bl	8006f34 <USB_FlushTxFifo>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d001      	beq.n	8006d58 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 f91d 	bl	8006f98 <USB_FlushRxFifo>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d001      	beq.n	8006d68 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d6e:	461a      	mov	r2, r3
 8006d70:	2300      	movs	r3, #0
 8006d72:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d86:	461a      	mov	r2, r3
 8006d88:	2300      	movs	r3, #0
 8006d8a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	613b      	str	r3, [r7, #16]
 8006d90:	e043      	b.n	8006e1a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	015a      	lsls	r2, r3, #5
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	4413      	add	r3, r2
 8006d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006da4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006da8:	d118      	bne.n	8006ddc <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d10a      	bne.n	8006dc6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	015a      	lsls	r2, r3, #5
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	4413      	add	r3, r2
 8006db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006dc2:	6013      	str	r3, [r2, #0]
 8006dc4:	e013      	b.n	8006dee <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	015a      	lsls	r2, r3, #5
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	4413      	add	r3, r2
 8006dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006dd8:	6013      	str	r3, [r2, #0]
 8006dda:	e008      	b.n	8006dee <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	015a      	lsls	r2, r3, #5
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	4413      	add	r3, r2
 8006de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de8:	461a      	mov	r2, r3
 8006dea:	2300      	movs	r3, #0
 8006dec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	015a      	lsls	r2, r3, #5
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	4413      	add	r3, r2
 8006df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	015a      	lsls	r2, r3, #5
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	4413      	add	r3, r2
 8006e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	3301      	adds	r3, #1
 8006e18:	613b      	str	r3, [r7, #16]
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d3b7      	bcc.n	8006d92 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e22:	2300      	movs	r3, #0
 8006e24:	613b      	str	r3, [r7, #16]
 8006e26:	e043      	b.n	8006eb0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	015a      	lsls	r2, r3, #5
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	4413      	add	r3, r2
 8006e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e3e:	d118      	bne.n	8006e72 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d10a      	bne.n	8006e5c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	015a      	lsls	r2, r3, #5
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e52:	461a      	mov	r2, r3
 8006e54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e58:	6013      	str	r3, [r2, #0]
 8006e5a:	e013      	b.n	8006e84 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	015a      	lsls	r2, r3, #5
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	4413      	add	r3, r2
 8006e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e68:	461a      	mov	r2, r3
 8006e6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e6e:	6013      	str	r3, [r2, #0]
 8006e70:	e008      	b.n	8006e84 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	015a      	lsls	r2, r3, #5
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e7e:	461a      	mov	r2, r3
 8006e80:	2300      	movs	r3, #0
 8006e82:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	015a      	lsls	r2, r3, #5
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e90:	461a      	mov	r2, r3
 8006e92:	2300      	movs	r3, #0
 8006e94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	015a      	lsls	r2, r3, #5
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ea8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	3301      	adds	r3, #1
 8006eae:	613b      	str	r3, [r7, #16]
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d3b7      	bcc.n	8006e28 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ec6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006eca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006ed8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d105      	bne.n	8006eec <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	f043 0210 	orr.w	r2, r3, #16
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	699a      	ldr	r2, [r3, #24]
 8006ef0:	4b0e      	ldr	r3, [pc, #56]	; (8006f2c <USB_DevInit+0x2b4>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d005      	beq.n	8006f0a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	f043 0208 	orr.w	r2, r3, #8
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d105      	bne.n	8006f1c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	699a      	ldr	r2, [r3, #24]
 8006f14:	4b06      	ldr	r3, [pc, #24]	; (8006f30 <USB_DevInit+0x2b8>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3718      	adds	r7, #24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f28:	b004      	add	sp, #16
 8006f2a:	4770      	bx	lr
 8006f2c:	803c3800 	.word	0x803c3800
 8006f30:	40000004 	.word	0x40000004

08006f34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	3301      	adds	r3, #1
 8006f46:	60fb      	str	r3, [r7, #12]
 8006f48:	4a12      	ldr	r2, [pc, #72]	; (8006f94 <USB_FlushTxFifo+0x60>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d901      	bls.n	8006f52 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e01a      	b.n	8006f88 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	daf3      	bge.n	8006f42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	019b      	lsls	r3, r3, #6
 8006f62:	f043 0220 	orr.w	r2, r3, #32
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	60fb      	str	r3, [r7, #12]
 8006f70:	4a08      	ldr	r2, [pc, #32]	; (8006f94 <USB_FlushTxFifo+0x60>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d901      	bls.n	8006f7a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e006      	b.n	8006f88 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	f003 0320 	and.w	r3, r3, #32
 8006f82:	2b20      	cmp	r3, #32
 8006f84:	d0f1      	beq.n	8006f6a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr
 8006f94:	00030d40 	.word	0x00030d40

08006f98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	60fb      	str	r3, [r7, #12]
 8006faa:	4a11      	ldr	r2, [pc, #68]	; (8006ff0 <USB_FlushRxFifo+0x58>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d901      	bls.n	8006fb4 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e017      	b.n	8006fe4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	daf3      	bge.n	8006fa4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2210      	movs	r2, #16
 8006fc4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	60fb      	str	r3, [r7, #12]
 8006fcc:	4a08      	ldr	r2, [pc, #32]	; (8006ff0 <USB_FlushRxFifo+0x58>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d901      	bls.n	8006fd6 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e006      	b.n	8006fe4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	f003 0310 	and.w	r3, r3, #16
 8006fde:	2b10      	cmp	r3, #16
 8006fe0:	d0f1      	beq.n	8006fc6 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	00030d40 	.word	0x00030d40

08006ff4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	78fb      	ldrb	r3, [r7, #3]
 800700e:	68f9      	ldr	r1, [r7, #12]
 8007010:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007014:	4313      	orrs	r3, r2
 8007016:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr

08007026 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007026:	b480      	push	{r7}
 8007028:	b087      	sub	sp, #28
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f003 0306 	and.w	r3, r3, #6
 800703e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d102      	bne.n	800704c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007046:	2300      	movs	r3, #0
 8007048:	75fb      	strb	r3, [r7, #23]
 800704a:	e00a      	b.n	8007062 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2b02      	cmp	r3, #2
 8007050:	d002      	beq.n	8007058 <USB_GetDevSpeed+0x32>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2b06      	cmp	r3, #6
 8007056:	d102      	bne.n	800705e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007058:	2302      	movs	r3, #2
 800705a:	75fb      	strb	r3, [r7, #23]
 800705c:	e001      	b.n	8007062 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800705e:	230f      	movs	r3, #15
 8007060:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007062:	7dfb      	ldrb	r3, [r7, #23]
}
 8007064:	4618      	mov	r0, r3
 8007066:	371c      	adds	r7, #28
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	785b      	ldrb	r3, [r3, #1]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d139      	bne.n	8007100 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007092:	69da      	ldr	r2, [r3, #28]
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	f003 030f 	and.w	r3, r3, #15
 800709c:	2101      	movs	r1, #1
 800709e:	fa01 f303 	lsl.w	r3, r1, r3
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	68f9      	ldr	r1, [r7, #12]
 80070a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070aa:	4313      	orrs	r3, r2
 80070ac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	015a      	lsls	r2, r3, #5
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d153      	bne.n	800716c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	015a      	lsls	r2, r3, #5
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	4413      	add	r3, r2
 80070cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	78db      	ldrb	r3, [r3, #3]
 80070de:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070e0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	059b      	lsls	r3, r3, #22
 80070e6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070e8:	431a      	orrs	r2, r3
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	0159      	lsls	r1, r3, #5
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	440b      	add	r3, r1
 80070f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070f6:	4619      	mov	r1, r3
 80070f8:	4b20      	ldr	r3, [pc, #128]	; (800717c <USB_ActivateEndpoint+0x10c>)
 80070fa:	4313      	orrs	r3, r2
 80070fc:	600b      	str	r3, [r1, #0]
 80070fe:	e035      	b.n	800716c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007106:	69da      	ldr	r2, [r3, #28]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	f003 030f 	and.w	r3, r3, #15
 8007110:	2101      	movs	r1, #1
 8007112:	fa01 f303 	lsl.w	r3, r1, r3
 8007116:	041b      	lsls	r3, r3, #16
 8007118:	68f9      	ldr	r1, [r7, #12]
 800711a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800711e:	4313      	orrs	r3, r2
 8007120:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	015a      	lsls	r2, r3, #5
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	4413      	add	r3, r2
 800712a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007134:	2b00      	cmp	r3, #0
 8007136:	d119      	bne.n	800716c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	015a      	lsls	r2, r3, #5
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	4413      	add	r3, r2
 8007140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	78db      	ldrb	r3, [r3, #3]
 8007152:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007154:	430b      	orrs	r3, r1
 8007156:	431a      	orrs	r2, r3
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	0159      	lsls	r1, r3, #5
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	440b      	add	r3, r1
 8007160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007164:	4619      	mov	r1, r3
 8007166:	4b05      	ldr	r3, [pc, #20]	; (800717c <USB_ActivateEndpoint+0x10c>)
 8007168:	4313      	orrs	r3, r2
 800716a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3714      	adds	r7, #20
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	10008000 	.word	0x10008000

08007180 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	785b      	ldrb	r3, [r3, #1]
 8007198:	2b01      	cmp	r3, #1
 800719a:	d161      	bne.n	8007260 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071b2:	d11f      	bne.n	80071f4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	015a      	lsls	r2, r3, #5
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	4413      	add	r3, r2
 80071bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	0151      	lsls	r1, r2, #5
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	440a      	add	r2, r1
 80071ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80071d2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	015a      	lsls	r2, r3, #5
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	4413      	add	r3, r2
 80071dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	0151      	lsls	r1, r2, #5
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	440a      	add	r2, r1
 80071ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	f003 030f 	and.w	r3, r3, #15
 8007204:	2101      	movs	r1, #1
 8007206:	fa01 f303 	lsl.w	r3, r1, r3
 800720a:	b29b      	uxth	r3, r3
 800720c:	43db      	mvns	r3, r3
 800720e:	68f9      	ldr	r1, [r7, #12]
 8007210:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007214:	4013      	ands	r3, r2
 8007216:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800721e:	69da      	ldr	r2, [r3, #28]
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	f003 030f 	and.w	r3, r3, #15
 8007228:	2101      	movs	r1, #1
 800722a:	fa01 f303 	lsl.w	r3, r1, r3
 800722e:	b29b      	uxth	r3, r3
 8007230:	43db      	mvns	r3, r3
 8007232:	68f9      	ldr	r1, [r7, #12]
 8007234:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007238:	4013      	ands	r3, r2
 800723a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	4413      	add	r3, r2
 8007244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	0159      	lsls	r1, r3, #5
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	440b      	add	r3, r1
 8007252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007256:	4619      	mov	r1, r3
 8007258:	4b35      	ldr	r3, [pc, #212]	; (8007330 <USB_DeactivateEndpoint+0x1b0>)
 800725a:	4013      	ands	r3, r2
 800725c:	600b      	str	r3, [r1, #0]
 800725e:	e060      	b.n	8007322 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	015a      	lsls	r2, r3, #5
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	4413      	add	r3, r2
 8007268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007272:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007276:	d11f      	bne.n	80072b8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	015a      	lsls	r2, r3, #5
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	4413      	add	r3, r2
 8007280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	0151      	lsls	r1, r2, #5
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	440a      	add	r2, r1
 800728e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007292:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007296:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	015a      	lsls	r2, r3, #5
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	4413      	add	r3, r2
 80072a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	0151      	lsls	r1, r2, #5
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	440a      	add	r2, r1
 80072ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	f003 030f 	and.w	r3, r3, #15
 80072c8:	2101      	movs	r1, #1
 80072ca:	fa01 f303 	lsl.w	r3, r1, r3
 80072ce:	041b      	lsls	r3, r3, #16
 80072d0:	43db      	mvns	r3, r3
 80072d2:	68f9      	ldr	r1, [r7, #12]
 80072d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072d8:	4013      	ands	r3, r2
 80072da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072e2:	69da      	ldr	r2, [r3, #28]
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	f003 030f 	and.w	r3, r3, #15
 80072ec:	2101      	movs	r1, #1
 80072ee:	fa01 f303 	lsl.w	r3, r1, r3
 80072f2:	041b      	lsls	r3, r3, #16
 80072f4:	43db      	mvns	r3, r3
 80072f6:	68f9      	ldr	r1, [r7, #12]
 80072f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072fc:	4013      	ands	r3, r2
 80072fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	015a      	lsls	r2, r3, #5
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	4413      	add	r3, r2
 8007308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	0159      	lsls	r1, r3, #5
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	440b      	add	r3, r1
 8007316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800731a:	4619      	mov	r1, r3
 800731c:	4b05      	ldr	r3, [pc, #20]	; (8007334 <USB_DeactivateEndpoint+0x1b4>)
 800731e:	4013      	ands	r3, r2
 8007320:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3714      	adds	r7, #20
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr
 8007330:	ec337800 	.word	0xec337800
 8007334:	eff37800 	.word	0xeff37800

08007338 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b08a      	sub	sp, #40	; 0x28
 800733c:	af02      	add	r7, sp, #8
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	4613      	mov	r3, r2
 8007344:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	785b      	ldrb	r3, [r3, #1]
 8007354:	2b01      	cmp	r3, #1
 8007356:	f040 8163 	bne.w	8007620 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	695b      	ldr	r3, [r3, #20]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d132      	bne.n	80073c8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	015a      	lsls	r2, r3, #5
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	4413      	add	r3, r2
 800736a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800736e:	691a      	ldr	r2, [r3, #16]
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	0159      	lsls	r1, r3, #5
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	440b      	add	r3, r1
 8007378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800737c:	4619      	mov	r1, r3
 800737e:	4ba5      	ldr	r3, [pc, #660]	; (8007614 <USB_EPStartXfer+0x2dc>)
 8007380:	4013      	ands	r3, r2
 8007382:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	015a      	lsls	r2, r3, #5
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	4413      	add	r3, r2
 800738c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	69ba      	ldr	r2, [r7, #24]
 8007394:	0151      	lsls	r1, r2, #5
 8007396:	69fa      	ldr	r2, [r7, #28]
 8007398:	440a      	add	r2, r1
 800739a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800739e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	015a      	lsls	r2, r3, #5
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	4413      	add	r3, r2
 80073ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b0:	691a      	ldr	r2, [r3, #16]
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	0159      	lsls	r1, r3, #5
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	440b      	add	r3, r1
 80073ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073be:	4619      	mov	r1, r3
 80073c0:	4b95      	ldr	r3, [pc, #596]	; (8007618 <USB_EPStartXfer+0x2e0>)
 80073c2:	4013      	ands	r3, r2
 80073c4:	610b      	str	r3, [r1, #16]
 80073c6:	e074      	b.n	80074b2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	015a      	lsls	r2, r3, #5
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	4413      	add	r3, r2
 80073d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d4:	691a      	ldr	r2, [r3, #16]
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	0159      	lsls	r1, r3, #5
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	440b      	add	r3, r1
 80073de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e2:	4619      	mov	r1, r3
 80073e4:	4b8c      	ldr	r3, [pc, #560]	; (8007618 <USB_EPStartXfer+0x2e0>)
 80073e6:	4013      	ands	r3, r2
 80073e8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	015a      	lsls	r2, r3, #5
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	4413      	add	r3, r2
 80073f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f6:	691a      	ldr	r2, [r3, #16]
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	0159      	lsls	r1, r3, #5
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	440b      	add	r3, r1
 8007400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007404:	4619      	mov	r1, r3
 8007406:	4b83      	ldr	r3, [pc, #524]	; (8007614 <USB_EPStartXfer+0x2dc>)
 8007408:	4013      	ands	r3, r2
 800740a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	015a      	lsls	r2, r3, #5
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	4413      	add	r3, r2
 8007414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007418:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	6959      	ldr	r1, [r3, #20]
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	440b      	add	r3, r1
 8007424:	1e59      	subs	r1, r3, #1
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	fbb1 f3f3 	udiv	r3, r1, r3
 800742e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007430:	4b7a      	ldr	r3, [pc, #488]	; (800761c <USB_EPStartXfer+0x2e4>)
 8007432:	400b      	ands	r3, r1
 8007434:	69b9      	ldr	r1, [r7, #24]
 8007436:	0148      	lsls	r0, r1, #5
 8007438:	69f9      	ldr	r1, [r7, #28]
 800743a:	4401      	add	r1, r0
 800743c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007440:	4313      	orrs	r3, r2
 8007442:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	015a      	lsls	r2, r3, #5
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	4413      	add	r3, r2
 800744c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007450:	691a      	ldr	r2, [r3, #16]
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800745a:	69b9      	ldr	r1, [r7, #24]
 800745c:	0148      	lsls	r0, r1, #5
 800745e:	69f9      	ldr	r1, [r7, #28]
 8007460:	4401      	add	r1, r0
 8007462:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007466:	4313      	orrs	r3, r2
 8007468:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	78db      	ldrb	r3, [r3, #3]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d11f      	bne.n	80074b2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	015a      	lsls	r2, r3, #5
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	4413      	add	r3, r2
 800747a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	69ba      	ldr	r2, [r7, #24]
 8007482:	0151      	lsls	r1, r2, #5
 8007484:	69fa      	ldr	r2, [r7, #28]
 8007486:	440a      	add	r2, r1
 8007488:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800748c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007490:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	015a      	lsls	r2, r3, #5
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	4413      	add	r3, r2
 800749a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	69ba      	ldr	r2, [r7, #24]
 80074a2:	0151      	lsls	r1, r2, #5
 80074a4:	69fa      	ldr	r2, [r7, #28]
 80074a6:	440a      	add	r2, r1
 80074a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074b0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80074b2:	79fb      	ldrb	r3, [r7, #7]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d14b      	bne.n	8007550 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d009      	beq.n	80074d4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	015a      	lsls	r2, r3, #5
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	4413      	add	r3, r2
 80074c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074cc:	461a      	mov	r2, r3
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	78db      	ldrb	r3, [r3, #3]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d128      	bne.n	800752e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d110      	bne.n	800750e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	015a      	lsls	r2, r3, #5
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	69ba      	ldr	r2, [r7, #24]
 80074fc:	0151      	lsls	r1, r2, #5
 80074fe:	69fa      	ldr	r2, [r7, #28]
 8007500:	440a      	add	r2, r1
 8007502:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007506:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800750a:	6013      	str	r3, [r2, #0]
 800750c:	e00f      	b.n	800752e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	015a      	lsls	r2, r3, #5
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	4413      	add	r3, r2
 8007516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	69ba      	ldr	r2, [r7, #24]
 800751e:	0151      	lsls	r1, r2, #5
 8007520:	69fa      	ldr	r2, [r7, #28]
 8007522:	440a      	add	r2, r1
 8007524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800752c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	015a      	lsls	r2, r3, #5
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	4413      	add	r3, r2
 8007536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	69ba      	ldr	r2, [r7, #24]
 800753e:	0151      	lsls	r1, r2, #5
 8007540:	69fa      	ldr	r2, [r7, #28]
 8007542:	440a      	add	r2, r1
 8007544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007548:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800754c:	6013      	str	r3, [r2, #0]
 800754e:	e133      	b.n	80077b8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	015a      	lsls	r2, r3, #5
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	4413      	add	r3, r2
 8007558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	69ba      	ldr	r2, [r7, #24]
 8007560:	0151      	lsls	r1, r2, #5
 8007562:	69fa      	ldr	r2, [r7, #28]
 8007564:	440a      	add	r2, r1
 8007566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800756a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800756e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	78db      	ldrb	r3, [r3, #3]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d015      	beq.n	80075a4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	695b      	ldr	r3, [r3, #20]
 800757c:	2b00      	cmp	r3, #0
 800757e:	f000 811b 	beq.w	80077b8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	f003 030f 	and.w	r3, r3, #15
 8007592:	2101      	movs	r1, #1
 8007594:	fa01 f303 	lsl.w	r3, r1, r3
 8007598:	69f9      	ldr	r1, [r7, #28]
 800759a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800759e:	4313      	orrs	r3, r2
 80075a0:	634b      	str	r3, [r1, #52]	; 0x34
 80075a2:	e109      	b.n	80077b8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d110      	bne.n	80075d6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	015a      	lsls	r2, r3, #5
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	4413      	add	r3, r2
 80075bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	69ba      	ldr	r2, [r7, #24]
 80075c4:	0151      	lsls	r1, r2, #5
 80075c6:	69fa      	ldr	r2, [r7, #28]
 80075c8:	440a      	add	r2, r1
 80075ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075d2:	6013      	str	r3, [r2, #0]
 80075d4:	e00f      	b.n	80075f6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	015a      	lsls	r2, r3, #5
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	4413      	add	r3, r2
 80075de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	69ba      	ldr	r2, [r7, #24]
 80075e6:	0151      	lsls	r1, r2, #5
 80075e8:	69fa      	ldr	r2, [r7, #28]
 80075ea:	440a      	add	r2, r1
 80075ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075f4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	68d9      	ldr	r1, [r3, #12]
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	781a      	ldrb	r2, [r3, #0]
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	b298      	uxth	r0, r3
 8007604:	79fb      	ldrb	r3, [r7, #7]
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	4603      	mov	r3, r0
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f000 fa38 	bl	8007a80 <USB_WritePacket>
 8007610:	e0d2      	b.n	80077b8 <USB_EPStartXfer+0x480>
 8007612:	bf00      	nop
 8007614:	e007ffff 	.word	0xe007ffff
 8007618:	fff80000 	.word	0xfff80000
 800761c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	015a      	lsls	r2, r3, #5
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	4413      	add	r3, r2
 8007628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800762c:	691a      	ldr	r2, [r3, #16]
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	0159      	lsls	r1, r3, #5
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	440b      	add	r3, r1
 8007636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800763a:	4619      	mov	r1, r3
 800763c:	4b61      	ldr	r3, [pc, #388]	; (80077c4 <USB_EPStartXfer+0x48c>)
 800763e:	4013      	ands	r3, r2
 8007640:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	015a      	lsls	r2, r3, #5
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	4413      	add	r3, r2
 800764a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800764e:	691a      	ldr	r2, [r3, #16]
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	0159      	lsls	r1, r3, #5
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	440b      	add	r3, r1
 8007658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800765c:	4619      	mov	r1, r3
 800765e:	4b5a      	ldr	r3, [pc, #360]	; (80077c8 <USB_EPStartXfer+0x490>)
 8007660:	4013      	ands	r3, r2
 8007662:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	695b      	ldr	r3, [r3, #20]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d123      	bne.n	80076b4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	015a      	lsls	r2, r3, #5
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	4413      	add	r3, r2
 8007674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007678:	691a      	ldr	r2, [r3, #16]
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007682:	69b9      	ldr	r1, [r7, #24]
 8007684:	0148      	lsls	r0, r1, #5
 8007686:	69f9      	ldr	r1, [r7, #28]
 8007688:	4401      	add	r1, r0
 800768a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800768e:	4313      	orrs	r3, r2
 8007690:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	015a      	lsls	r2, r3, #5
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	4413      	add	r3, r2
 800769a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	69ba      	ldr	r2, [r7, #24]
 80076a2:	0151      	lsls	r1, r2, #5
 80076a4:	69fa      	ldr	r2, [r7, #28]
 80076a6:	440a      	add	r2, r1
 80076a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076b0:	6113      	str	r3, [r2, #16]
 80076b2:	e033      	b.n	800771c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	695a      	ldr	r2, [r3, #20]
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	4413      	add	r3, r2
 80076be:	1e5a      	subs	r2, r3, #1
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	015a      	lsls	r2, r3, #5
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	4413      	add	r3, r2
 80076d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d6:	691a      	ldr	r2, [r3, #16]
 80076d8:	8afb      	ldrh	r3, [r7, #22]
 80076da:	04d9      	lsls	r1, r3, #19
 80076dc:	4b3b      	ldr	r3, [pc, #236]	; (80077cc <USB_EPStartXfer+0x494>)
 80076de:	400b      	ands	r3, r1
 80076e0:	69b9      	ldr	r1, [r7, #24]
 80076e2:	0148      	lsls	r0, r1, #5
 80076e4:	69f9      	ldr	r1, [r7, #28]
 80076e6:	4401      	add	r1, r0
 80076e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076ec:	4313      	orrs	r3, r2
 80076ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	015a      	lsls	r2, r3, #5
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	4413      	add	r3, r2
 80076f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076fc:	691a      	ldr	r2, [r3, #16]
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	8af9      	ldrh	r1, [r7, #22]
 8007704:	fb01 f303 	mul.w	r3, r1, r3
 8007708:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800770c:	69b9      	ldr	r1, [r7, #24]
 800770e:	0148      	lsls	r0, r1, #5
 8007710:	69f9      	ldr	r1, [r7, #28]
 8007712:	4401      	add	r1, r0
 8007714:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007718:	4313      	orrs	r3, r2
 800771a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800771c:	79fb      	ldrb	r3, [r7, #7]
 800771e:	2b01      	cmp	r3, #1
 8007720:	d10d      	bne.n	800773e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d009      	beq.n	800773e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	68d9      	ldr	r1, [r3, #12]
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	015a      	lsls	r2, r3, #5
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	4413      	add	r3, r2
 8007736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800773a:	460a      	mov	r2, r1
 800773c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	78db      	ldrb	r3, [r3, #3]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d128      	bne.n	8007798 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007752:	2b00      	cmp	r3, #0
 8007754:	d110      	bne.n	8007778 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	015a      	lsls	r2, r3, #5
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	4413      	add	r3, r2
 800775e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	69ba      	ldr	r2, [r7, #24]
 8007766:	0151      	lsls	r1, r2, #5
 8007768:	69fa      	ldr	r2, [r7, #28]
 800776a:	440a      	add	r2, r1
 800776c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007770:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007774:	6013      	str	r3, [r2, #0]
 8007776:	e00f      	b.n	8007798 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	015a      	lsls	r2, r3, #5
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	4413      	add	r3, r2
 8007780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	69ba      	ldr	r2, [r7, #24]
 8007788:	0151      	lsls	r1, r2, #5
 800778a:	69fa      	ldr	r2, [r7, #28]
 800778c:	440a      	add	r2, r1
 800778e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007796:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	015a      	lsls	r2, r3, #5
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	4413      	add	r3, r2
 80077a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	69ba      	ldr	r2, [r7, #24]
 80077a8:	0151      	lsls	r1, r2, #5
 80077aa:	69fa      	ldr	r2, [r7, #28]
 80077ac:	440a      	add	r2, r1
 80077ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3720      	adds	r7, #32
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	fff80000 	.word	0xfff80000
 80077c8:	e007ffff 	.word	0xe007ffff
 80077cc:	1ff80000 	.word	0x1ff80000

080077d0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b087      	sub	sp, #28
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	4613      	mov	r3, r2
 80077dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	785b      	ldrb	r3, [r3, #1]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	f040 80cd 	bne.w	800798c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d132      	bne.n	8007860 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	015a      	lsls	r2, r3, #5
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	4413      	add	r3, r2
 8007802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007806:	691a      	ldr	r2, [r3, #16]
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	0159      	lsls	r1, r3, #5
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	440b      	add	r3, r1
 8007810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007814:	4619      	mov	r1, r3
 8007816:	4b98      	ldr	r3, [pc, #608]	; (8007a78 <USB_EP0StartXfer+0x2a8>)
 8007818:	4013      	ands	r3, r2
 800781a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	015a      	lsls	r2, r3, #5
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	4413      	add	r3, r2
 8007824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	693a      	ldr	r2, [r7, #16]
 800782c:	0151      	lsls	r1, r2, #5
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	440a      	add	r2, r1
 8007832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007836:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800783a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	015a      	lsls	r2, r3, #5
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	4413      	add	r3, r2
 8007844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007848:	691a      	ldr	r2, [r3, #16]
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	0159      	lsls	r1, r3, #5
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	440b      	add	r3, r1
 8007852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007856:	4619      	mov	r1, r3
 8007858:	4b88      	ldr	r3, [pc, #544]	; (8007a7c <USB_EP0StartXfer+0x2ac>)
 800785a:	4013      	ands	r3, r2
 800785c:	610b      	str	r3, [r1, #16]
 800785e:	e04e      	b.n	80078fe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	015a      	lsls	r2, r3, #5
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	4413      	add	r3, r2
 8007868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800786c:	691a      	ldr	r2, [r3, #16]
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	0159      	lsls	r1, r3, #5
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	440b      	add	r3, r1
 8007876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800787a:	4619      	mov	r1, r3
 800787c:	4b7f      	ldr	r3, [pc, #508]	; (8007a7c <USB_EP0StartXfer+0x2ac>)
 800787e:	4013      	ands	r3, r2
 8007880:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	015a      	lsls	r2, r3, #5
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	4413      	add	r3, r2
 800788a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800788e:	691a      	ldr	r2, [r3, #16]
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	0159      	lsls	r1, r3, #5
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	440b      	add	r3, r1
 8007898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800789c:	4619      	mov	r1, r3
 800789e:	4b76      	ldr	r3, [pc, #472]	; (8007a78 <USB_EP0StartXfer+0x2a8>)
 80078a0:	4013      	ands	r3, r2
 80078a2:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	695a      	ldr	r2, [r3, #20]
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d903      	bls.n	80078b8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	689a      	ldr	r2, [r3, #8]
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	015a      	lsls	r2, r3, #5
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	4413      	add	r3, r2
 80078c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	693a      	ldr	r2, [r7, #16]
 80078c8:	0151      	lsls	r1, r2, #5
 80078ca:	697a      	ldr	r2, [r7, #20]
 80078cc:	440a      	add	r2, r1
 80078ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e4:	691a      	ldr	r2, [r3, #16]
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	695b      	ldr	r3, [r3, #20]
 80078ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078ee:	6939      	ldr	r1, [r7, #16]
 80078f0:	0148      	lsls	r0, r1, #5
 80078f2:	6979      	ldr	r1, [r7, #20]
 80078f4:	4401      	add	r1, r0
 80078f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80078fa:	4313      	orrs	r3, r2
 80078fc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80078fe:	79fb      	ldrb	r3, [r7, #7]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d11e      	bne.n	8007942 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	691b      	ldr	r3, [r3, #16]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d009      	beq.n	8007920 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	015a      	lsls	r2, r3, #5
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	4413      	add	r3, r2
 8007914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007918:	461a      	mov	r2, r3
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	015a      	lsls	r2, r3, #5
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	4413      	add	r3, r2
 8007928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	693a      	ldr	r2, [r7, #16]
 8007930:	0151      	lsls	r1, r2, #5
 8007932:	697a      	ldr	r2, [r7, #20]
 8007934:	440a      	add	r2, r1
 8007936:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800793a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800793e:	6013      	str	r3, [r2, #0]
 8007940:	e092      	b.n	8007a68 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	015a      	lsls	r2, r3, #5
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	4413      	add	r3, r2
 800794a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	0151      	lsls	r1, r2, #5
 8007954:	697a      	ldr	r2, [r7, #20]
 8007956:	440a      	add	r2, r1
 8007958:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800795c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007960:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d07e      	beq.n	8007a68 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007970:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	f003 030f 	and.w	r3, r3, #15
 800797a:	2101      	movs	r1, #1
 800797c:	fa01 f303 	lsl.w	r3, r1, r3
 8007980:	6979      	ldr	r1, [r7, #20]
 8007982:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007986:	4313      	orrs	r3, r2
 8007988:	634b      	str	r3, [r1, #52]	; 0x34
 800798a:	e06d      	b.n	8007a68 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	015a      	lsls	r2, r3, #5
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	4413      	add	r3, r2
 8007994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007998:	691a      	ldr	r2, [r3, #16]
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	0159      	lsls	r1, r3, #5
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	440b      	add	r3, r1
 80079a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a6:	4619      	mov	r1, r3
 80079a8:	4b34      	ldr	r3, [pc, #208]	; (8007a7c <USB_EP0StartXfer+0x2ac>)
 80079aa:	4013      	ands	r3, r2
 80079ac:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	015a      	lsls	r2, r3, #5
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	4413      	add	r3, r2
 80079b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ba:	691a      	ldr	r2, [r3, #16]
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	0159      	lsls	r1, r3, #5
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	440b      	add	r3, r1
 80079c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c8:	4619      	mov	r1, r3
 80079ca:	4b2b      	ldr	r3, [pc, #172]	; (8007a78 <USB_EP0StartXfer+0x2a8>)
 80079cc:	4013      	ands	r3, r2
 80079ce:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	695b      	ldr	r3, [r3, #20]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d003      	beq.n	80079e0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	689a      	ldr	r2, [r3, #8]
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	015a      	lsls	r2, r3, #5
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	4413      	add	r3, r2
 80079e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	693a      	ldr	r2, [r7, #16]
 80079f0:	0151      	lsls	r1, r2, #5
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	440a      	add	r2, r1
 80079f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	015a      	lsls	r2, r3, #5
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	4413      	add	r3, r2
 8007a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a0c:	691a      	ldr	r2, [r3, #16]
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a16:	6939      	ldr	r1, [r7, #16]
 8007a18:	0148      	lsls	r0, r1, #5
 8007a1a:	6979      	ldr	r1, [r7, #20]
 8007a1c:	4401      	add	r1, r0
 8007a1e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007a22:	4313      	orrs	r3, r2
 8007a24:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007a26:	79fb      	ldrb	r3, [r7, #7]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d10d      	bne.n	8007a48 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d009      	beq.n	8007a48 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	68d9      	ldr	r1, [r3, #12]
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	015a      	lsls	r2, r3, #5
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a44:	460a      	mov	r2, r1
 8007a46:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	015a      	lsls	r2, r3, #5
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	4413      	add	r3, r2
 8007a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	693a      	ldr	r2, [r7, #16]
 8007a58:	0151      	lsls	r1, r2, #5
 8007a5a:	697a      	ldr	r2, [r7, #20]
 8007a5c:	440a      	add	r2, r1
 8007a5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	371c      	adds	r7, #28
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	e007ffff 	.word	0xe007ffff
 8007a7c:	fff80000 	.word	0xfff80000

08007a80 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b089      	sub	sp, #36	; 0x24
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	4611      	mov	r1, r2
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	460b      	mov	r3, r1
 8007a90:	71fb      	strb	r3, [r7, #7]
 8007a92:	4613      	mov	r3, r2
 8007a94:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007a9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d123      	bne.n	8007aee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007aa6:	88bb      	ldrh	r3, [r7, #4]
 8007aa8:	3303      	adds	r3, #3
 8007aaa:	089b      	lsrs	r3, r3, #2
 8007aac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007aae:	2300      	movs	r3, #0
 8007ab0:	61bb      	str	r3, [r7, #24]
 8007ab2:	e018      	b.n	8007ae6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007ab4:	79fb      	ldrb	r3, [r7, #7]
 8007ab6:	031a      	lsls	r2, r3, #12
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	4413      	add	r3, r2
 8007abc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	3301      	adds	r3, #1
 8007acc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	3301      	adds	r3, #1
 8007ade:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	61bb      	str	r3, [r7, #24]
 8007ae6:	69ba      	ldr	r2, [r7, #24]
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d3e2      	bcc.n	8007ab4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3724      	adds	r7, #36	; 0x24
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b08b      	sub	sp, #44	; 0x2c
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	4613      	mov	r3, r2
 8007b08:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007b12:	88fb      	ldrh	r3, [r7, #6]
 8007b14:	089b      	lsrs	r3, r3, #2
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007b1a:	88fb      	ldrh	r3, [r7, #6]
 8007b1c:	f003 0303 	and.w	r3, r3, #3
 8007b20:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007b22:	2300      	movs	r3, #0
 8007b24:	623b      	str	r3, [r7, #32]
 8007b26:	e014      	b.n	8007b52 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b32:	601a      	str	r2, [r3, #0]
    pDest++;
 8007b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b36:	3301      	adds	r3, #1
 8007b38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b42:	3301      	adds	r3, #1
 8007b44:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b48:	3301      	adds	r3, #1
 8007b4a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007b4c:	6a3b      	ldr	r3, [r7, #32]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	623b      	str	r3, [r7, #32]
 8007b52:	6a3a      	ldr	r2, [r7, #32]
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d3e6      	bcc.n	8007b28 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007b5a:	8bfb      	ldrh	r3, [r7, #30]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d01e      	beq.n	8007b9e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007b60:	2300      	movs	r3, #0
 8007b62:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	f107 0310 	add.w	r3, r7, #16
 8007b70:	6812      	ldr	r2, [r2, #0]
 8007b72:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007b74:	693a      	ldr	r2, [r7, #16]
 8007b76:	6a3b      	ldr	r3, [r7, #32]
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	00db      	lsls	r3, r3, #3
 8007b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b80:	b2da      	uxtb	r2, r3
 8007b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b84:	701a      	strb	r2, [r3, #0]
      i++;
 8007b86:	6a3b      	ldr	r3, [r7, #32]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	623b      	str	r3, [r7, #32]
      pDest++;
 8007b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8e:	3301      	adds	r3, #1
 8007b90:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007b92:	8bfb      	ldrh	r3, [r7, #30]
 8007b94:	3b01      	subs	r3, #1
 8007b96:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007b98:	8bfb      	ldrh	r3, [r7, #30]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1ea      	bne.n	8007b74 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	372c      	adds	r7, #44	; 0x2c
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	785b      	ldrb	r3, [r3, #1]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d12c      	bne.n	8007c22 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	015a      	lsls	r2, r3, #5
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	4413      	add	r3, r2
 8007bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	db12      	blt.n	8007c00 <USB_EPSetStall+0x54>
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00f      	beq.n	8007c00 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	015a      	lsls	r2, r3, #5
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	4413      	add	r3, r2
 8007be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68ba      	ldr	r2, [r7, #8]
 8007bf0:	0151      	lsls	r1, r2, #5
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	440a      	add	r2, r1
 8007bf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bfa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007bfe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	015a      	lsls	r2, r3, #5
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	4413      	add	r3, r2
 8007c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68ba      	ldr	r2, [r7, #8]
 8007c10:	0151      	lsls	r1, r2, #5
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	440a      	add	r2, r1
 8007c16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c1e:	6013      	str	r3, [r2, #0]
 8007c20:	e02b      	b.n	8007c7a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	015a      	lsls	r2, r3, #5
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	4413      	add	r3, r2
 8007c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	db12      	blt.n	8007c5a <USB_EPSetStall+0xae>
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00f      	beq.n	8007c5a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	015a      	lsls	r2, r3, #5
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	4413      	add	r3, r2
 8007c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	0151      	lsls	r1, r2, #5
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	440a      	add	r2, r1
 8007c50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c58:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	015a      	lsls	r2, r3, #5
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	4413      	add	r3, r2
 8007c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68ba      	ldr	r2, [r7, #8]
 8007c6a:	0151      	lsls	r1, r2, #5
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	440a      	add	r2, r1
 8007c70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c78:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	785b      	ldrb	r3, [r3, #1]
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d128      	bne.n	8007cf6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	015a      	lsls	r2, r3, #5
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	4413      	add	r3, r2
 8007cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	0151      	lsls	r1, r2, #5
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	440a      	add	r2, r1
 8007cba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007cc2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	78db      	ldrb	r3, [r3, #3]
 8007cc8:	2b03      	cmp	r3, #3
 8007cca:	d003      	beq.n	8007cd4 <USB_EPClearStall+0x4c>
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	78db      	ldrb	r3, [r3, #3]
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	d138      	bne.n	8007d46 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	015a      	lsls	r2, r3, #5
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	4413      	add	r3, r2
 8007cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	68ba      	ldr	r2, [r7, #8]
 8007ce4:	0151      	lsls	r1, r2, #5
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	440a      	add	r2, r1
 8007cea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cf2:	6013      	str	r3, [r2, #0]
 8007cf4:	e027      	b.n	8007d46 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	015a      	lsls	r2, r3, #5
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	0151      	lsls	r1, r2, #5
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	440a      	add	r2, r1
 8007d0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d14:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	78db      	ldrb	r3, [r3, #3]
 8007d1a:	2b03      	cmp	r3, #3
 8007d1c:	d003      	beq.n	8007d26 <USB_EPClearStall+0x9e>
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	78db      	ldrb	r3, [r3, #3]
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	d10f      	bne.n	8007d46 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	015a      	lsls	r2, r3, #5
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	68ba      	ldr	r2, [r7, #8]
 8007d36:	0151      	lsls	r1, r2, #5
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	440a      	add	r2, r1
 8007d3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d44:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3714      	adds	r7, #20
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b085      	sub	sp, #20
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d72:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007d76:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	78fb      	ldrb	r3, [r7, #3]
 8007d82:	011b      	lsls	r3, r3, #4
 8007d84:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007d88:	68f9      	ldr	r1, [r7, #12]
 8007d8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007dba:	f023 0303 	bic.w	r3, r3, #3
 8007dbe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dce:	f023 0302 	bic.w	r3, r3, #2
 8007dd2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3714      	adds	r7, #20
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b085      	sub	sp, #20
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007dfc:	f023 0303 	bic.w	r3, r3, #3
 8007e00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e10:	f043 0302 	orr.w	r3, r3, #2
 8007e14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3714      	adds	r7, #20
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	695b      	ldr	r3, [r3, #20]
 8007e30:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	4013      	ands	r3, r2
 8007e3a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3714      	adds	r7, #20
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b085      	sub	sp, #20
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e66:	69db      	ldr	r3, [r3, #28]
 8007e68:	68ba      	ldr	r2, [r7, #8]
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	0c1b      	lsrs	r3, r3, #16
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e7e:	b480      	push	{r7}
 8007e80:	b085      	sub	sp, #20
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e9a:	69db      	ldr	r3, [r3, #28]
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	b29b      	uxth	r3, r3
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3714      	adds	r7, #20
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr

08007eb2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b085      	sub	sp, #20
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
 8007eba:	460b      	mov	r3, r1
 8007ebc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007ec2:	78fb      	ldrb	r3, [r7, #3]
 8007ec4:	015a      	lsls	r2, r3, #5
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	4413      	add	r3, r2
 8007eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	4013      	ands	r3, r2
 8007ede:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007ee0:	68bb      	ldr	r3, [r7, #8]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3714      	adds	r7, #20
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr

08007eee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b087      	sub	sp, #28
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f10:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007f12:	78fb      	ldrb	r3, [r7, #3]
 8007f14:	f003 030f 	and.w	r3, r3, #15
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f1e:	01db      	lsls	r3, r3, #7
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	693a      	ldr	r2, [r7, #16]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007f28:	78fb      	ldrb	r3, [r7, #3]
 8007f2a:	015a      	lsls	r2, r3, #5
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	4413      	add	r3, r2
 8007f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	693a      	ldr	r2, [r7, #16]
 8007f38:	4013      	ands	r3, r2
 8007f3a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f3c:	68bb      	ldr	r3, [r7, #8]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	371c      	adds	r7, #28
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007f4a:	b480      	push	{r7}
 8007f4c:	b083      	sub	sp, #12
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	695b      	ldr	r3, [r3, #20]
 8007f56:	f003 0301 	and.w	r3, r3, #1
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	370c      	adds	r7, #12
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
	...

08007f68 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f82:	4619      	mov	r1, r3
 8007f84:	4b09      	ldr	r3, [pc, #36]	; (8007fac <USB_ActivateSetup+0x44>)
 8007f86:	4013      	ands	r3, r2
 8007f88:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3714      	adds	r7, #20
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr
 8007fac:	fffff800 	.word	0xfffff800

08007fb0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b087      	sub	sp, #28
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	607a      	str	r2, [r7, #4]
 8007fbc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	333c      	adds	r3, #60	; 0x3c
 8007fc6:	3304      	adds	r3, #4
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	4a26      	ldr	r2, [pc, #152]	; (8008068 <USB_EP0_OutStart+0xb8>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d90a      	bls.n	8007fea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fe0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fe4:	d101      	bne.n	8007fea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	e037      	b.n	800805a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008004:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008008:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008010:	691b      	ldr	r3, [r3, #16]
 8008012:	697a      	ldr	r2, [r7, #20]
 8008014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008018:	f043 0318 	orr.w	r3, r3, #24
 800801c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	697a      	ldr	r2, [r7, #20]
 8008028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800802c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008030:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008032:	7afb      	ldrb	r3, [r7, #11]
 8008034:	2b01      	cmp	r3, #1
 8008036:	d10f      	bne.n	8008058 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800803e:	461a      	mov	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	697a      	ldr	r2, [r7, #20]
 800804e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008052:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008056:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	371c      	adds	r7, #28
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	4f54300a 	.word	0x4f54300a

0800806c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800806c:	b480      	push	{r7}
 800806e:	b085      	sub	sp, #20
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008074:	2300      	movs	r3, #0
 8008076:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	3301      	adds	r3, #1
 800807c:	60fb      	str	r3, [r7, #12]
 800807e:	4a13      	ldr	r2, [pc, #76]	; (80080cc <USB_CoreReset+0x60>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d901      	bls.n	8008088 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008084:	2303      	movs	r3, #3
 8008086:	e01a      	b.n	80080be <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	2b00      	cmp	r3, #0
 800808e:	daf3      	bge.n	8008078 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008090:	2300      	movs	r3, #0
 8008092:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	f043 0201 	orr.w	r2, r3, #1
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	3301      	adds	r3, #1
 80080a4:	60fb      	str	r3, [r7, #12]
 80080a6:	4a09      	ldr	r2, [pc, #36]	; (80080cc <USB_CoreReset+0x60>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d901      	bls.n	80080b0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e006      	b.n	80080be <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	f003 0301 	and.w	r3, r3, #1
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d0f1      	beq.n	80080a0 <USB_CoreReset+0x34>

  return HAL_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3714      	adds	r7, #20
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	00030d40 	.word	0x00030d40

080080d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	460b      	mov	r3, r1
 80080da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80080dc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80080e0:	f002 f9ac 	bl	800a43c <USBD_static_malloc>
 80080e4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d105      	bne.n	80080f8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80080f4:	2302      	movs	r3, #2
 80080f6:	e066      	b.n	80081c6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	7c1b      	ldrb	r3, [r3, #16]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d119      	bne.n	800813c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008108:	f44f 7300 	mov.w	r3, #512	; 0x200
 800810c:	2202      	movs	r2, #2
 800810e:	2181      	movs	r1, #129	; 0x81
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f002 f870 	bl	800a1f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800811c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008120:	2202      	movs	r2, #2
 8008122:	2101      	movs	r1, #1
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f002 f866 	bl	800a1f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2201      	movs	r2, #1
 800812e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2210      	movs	r2, #16
 8008136:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800813a:	e016      	b.n	800816a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800813c:	2340      	movs	r3, #64	; 0x40
 800813e:	2202      	movs	r2, #2
 8008140:	2181      	movs	r1, #129	; 0x81
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f002 f857 	bl	800a1f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800814e:	2340      	movs	r3, #64	; 0x40
 8008150:	2202      	movs	r2, #2
 8008152:	2101      	movs	r1, #1
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f002 f84e 	bl	800a1f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2201      	movs	r2, #1
 800815e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2210      	movs	r2, #16
 8008166:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800816a:	2308      	movs	r3, #8
 800816c:	2203      	movs	r2, #3
 800816e:	2182      	movs	r1, #130	; 0x82
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f002 f840 	bl	800a1f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2201      	movs	r2, #1
 800817a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2200      	movs	r2, #0
 800818c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2200      	movs	r2, #0
 8008194:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	7c1b      	ldrb	r3, [r3, #16]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d109      	bne.n	80081b4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081aa:	2101      	movs	r1, #1
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f002 f911 	bl	800a3d4 <USBD_LL_PrepareReceive>
 80081b2:	e007      	b.n	80081c4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081ba:	2340      	movs	r3, #64	; 0x40
 80081bc:	2101      	movs	r1, #1
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f002 f908 	bl	800a3d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b082      	sub	sp, #8
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
 80081d6:	460b      	mov	r3, r1
 80081d8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80081da:	2181      	movs	r1, #129	; 0x81
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f002 f830 	bl	800a242 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80081e8:	2101      	movs	r1, #1
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f002 f829 	bl	800a242 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80081f8:	2182      	movs	r1, #130	; 0x82
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f002 f821 	bl	800a242 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00e      	beq.n	8008238 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800822a:	4618      	mov	r0, r3
 800822c:	f002 f914 	bl	800a458 <USBD_static_free>
    pdev->pClassData = NULL;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
	...

08008244 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b086      	sub	sp, #24
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008254:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008256:	2300      	movs	r3, #0
 8008258:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800825a:	2300      	movs	r3, #0
 800825c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800825e:	2300      	movs	r3, #0
 8008260:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d101      	bne.n	800826c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008268:	2303      	movs	r3, #3
 800826a:	e0af      	b.n	80083cc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008274:	2b00      	cmp	r3, #0
 8008276:	d03f      	beq.n	80082f8 <USBD_CDC_Setup+0xb4>
 8008278:	2b20      	cmp	r3, #32
 800827a:	f040 809f 	bne.w	80083bc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	88db      	ldrh	r3, [r3, #6]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d02e      	beq.n	80082e4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	b25b      	sxtb	r3, r3
 800828c:	2b00      	cmp	r3, #0
 800828e:	da16      	bge.n	80082be <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800829c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800829e:	683a      	ldr	r2, [r7, #0]
 80082a0:	88d2      	ldrh	r2, [r2, #6]
 80082a2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	88db      	ldrh	r3, [r3, #6]
 80082a8:	2b07      	cmp	r3, #7
 80082aa:	bf28      	it	cs
 80082ac:	2307      	movcs	r3, #7
 80082ae:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	89fa      	ldrh	r2, [r7, #14]
 80082b4:	4619      	mov	r1, r3
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f001 fb19 	bl	80098ee <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80082bc:	e085      	b.n	80083ca <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	785a      	ldrb	r2, [r3, #1]
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	88db      	ldrh	r3, [r3, #6]
 80082cc:	b2da      	uxtb	r2, r3
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80082d4:	6939      	ldr	r1, [r7, #16]
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	88db      	ldrh	r3, [r3, #6]
 80082da:	461a      	mov	r2, r3
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f001 fb32 	bl	8009946 <USBD_CtlPrepareRx>
      break;
 80082e2:	e072      	b.n	80083ca <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	683a      	ldr	r2, [r7, #0]
 80082ee:	7850      	ldrb	r0, [r2, #1]
 80082f0:	2200      	movs	r2, #0
 80082f2:	6839      	ldr	r1, [r7, #0]
 80082f4:	4798      	blx	r3
      break;
 80082f6:	e068      	b.n	80083ca <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	785b      	ldrb	r3, [r3, #1]
 80082fc:	2b0b      	cmp	r3, #11
 80082fe:	d852      	bhi.n	80083a6 <USBD_CDC_Setup+0x162>
 8008300:	a201      	add	r2, pc, #4	; (adr r2, 8008308 <USBD_CDC_Setup+0xc4>)
 8008302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008306:	bf00      	nop
 8008308:	08008339 	.word	0x08008339
 800830c:	080083b5 	.word	0x080083b5
 8008310:	080083a7 	.word	0x080083a7
 8008314:	080083a7 	.word	0x080083a7
 8008318:	080083a7 	.word	0x080083a7
 800831c:	080083a7 	.word	0x080083a7
 8008320:	080083a7 	.word	0x080083a7
 8008324:	080083a7 	.word	0x080083a7
 8008328:	080083a7 	.word	0x080083a7
 800832c:	080083a7 	.word	0x080083a7
 8008330:	08008363 	.word	0x08008363
 8008334:	0800838d 	.word	0x0800838d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800833e:	b2db      	uxtb	r3, r3
 8008340:	2b03      	cmp	r3, #3
 8008342:	d107      	bne.n	8008354 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008344:	f107 030a 	add.w	r3, r7, #10
 8008348:	2202      	movs	r2, #2
 800834a:	4619      	mov	r1, r3
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f001 face 	bl	80098ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008352:	e032      	b.n	80083ba <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008354:	6839      	ldr	r1, [r7, #0]
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f001 fa58 	bl	800980c <USBD_CtlError>
            ret = USBD_FAIL;
 800835c:	2303      	movs	r3, #3
 800835e:	75fb      	strb	r3, [r7, #23]
          break;
 8008360:	e02b      	b.n	80083ba <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008368:	b2db      	uxtb	r3, r3
 800836a:	2b03      	cmp	r3, #3
 800836c:	d107      	bne.n	800837e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800836e:	f107 030d 	add.w	r3, r7, #13
 8008372:	2201      	movs	r2, #1
 8008374:	4619      	mov	r1, r3
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f001 fab9 	bl	80098ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800837c:	e01d      	b.n	80083ba <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800837e:	6839      	ldr	r1, [r7, #0]
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f001 fa43 	bl	800980c <USBD_CtlError>
            ret = USBD_FAIL;
 8008386:	2303      	movs	r3, #3
 8008388:	75fb      	strb	r3, [r7, #23]
          break;
 800838a:	e016      	b.n	80083ba <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008392:	b2db      	uxtb	r3, r3
 8008394:	2b03      	cmp	r3, #3
 8008396:	d00f      	beq.n	80083b8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008398:	6839      	ldr	r1, [r7, #0]
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f001 fa36 	bl	800980c <USBD_CtlError>
            ret = USBD_FAIL;
 80083a0:	2303      	movs	r3, #3
 80083a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80083a4:	e008      	b.n	80083b8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80083a6:	6839      	ldr	r1, [r7, #0]
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f001 fa2f 	bl	800980c <USBD_CtlError>
          ret = USBD_FAIL;
 80083ae:	2303      	movs	r3, #3
 80083b0:	75fb      	strb	r3, [r7, #23]
          break;
 80083b2:	e002      	b.n	80083ba <USBD_CDC_Setup+0x176>
          break;
 80083b4:	bf00      	nop
 80083b6:	e008      	b.n	80083ca <USBD_CDC_Setup+0x186>
          break;
 80083b8:	bf00      	nop
      }
      break;
 80083ba:	e006      	b.n	80083ca <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80083bc:	6839      	ldr	r1, [r7, #0]
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f001 fa24 	bl	800980c <USBD_CtlError>
      ret = USBD_FAIL;
 80083c4:	2303      	movs	r3, #3
 80083c6:	75fb      	strb	r3, [r7, #23]
      break;
 80083c8:	bf00      	nop
  }

  return (uint8_t)ret;
 80083ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3718      	adds	r7, #24
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	460b      	mov	r3, r1
 80083de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80083e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d101      	bne.n	80083f6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80083f2:	2303      	movs	r3, #3
 80083f4:	e04f      	b.n	8008496 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80083fe:	78fa      	ldrb	r2, [r7, #3]
 8008400:	6879      	ldr	r1, [r7, #4]
 8008402:	4613      	mov	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	440b      	add	r3, r1
 800840c:	3318      	adds	r3, #24
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d029      	beq.n	8008468 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008414:	78fa      	ldrb	r2, [r7, #3]
 8008416:	6879      	ldr	r1, [r7, #4]
 8008418:	4613      	mov	r3, r2
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4413      	add	r3, r2
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	440b      	add	r3, r1
 8008422:	3318      	adds	r3, #24
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	78f9      	ldrb	r1, [r7, #3]
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	460b      	mov	r3, r1
 800842c:	00db      	lsls	r3, r3, #3
 800842e:	1a5b      	subs	r3, r3, r1
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	4403      	add	r3, r0
 8008434:	3344      	adds	r3, #68	; 0x44
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	fbb2 f1f3 	udiv	r1, r2, r3
 800843c:	fb03 f301 	mul.w	r3, r3, r1
 8008440:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008442:	2b00      	cmp	r3, #0
 8008444:	d110      	bne.n	8008468 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008446:	78fa      	ldrb	r2, [r7, #3]
 8008448:	6879      	ldr	r1, [r7, #4]
 800844a:	4613      	mov	r3, r2
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	4413      	add	r3, r2
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	440b      	add	r3, r1
 8008454:	3318      	adds	r3, #24
 8008456:	2200      	movs	r2, #0
 8008458:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800845a:	78f9      	ldrb	r1, [r7, #3]
 800845c:	2300      	movs	r3, #0
 800845e:	2200      	movs	r2, #0
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f001 ff96 	bl	800a392 <USBD_LL_Transmit>
 8008466:	e015      	b.n	8008494 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	2200      	movs	r2, #0
 800846c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d00b      	beq.n	8008494 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800848a:	68ba      	ldr	r2, [r7, #8]
 800848c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008490:	78fa      	ldrb	r2, [r7, #3]
 8008492:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800849e:	b580      	push	{r7, lr}
 80084a0:	b084      	sub	sp, #16
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
 80084a6:	460b      	mov	r3, r1
 80084a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084b0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d101      	bne.n	80084c0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80084bc:	2303      	movs	r3, #3
 80084be:	e015      	b.n	80084ec <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80084c0:	78fb      	ldrb	r3, [r7, #3]
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f001 ffa6 	bl	800a416 <USBD_LL_GetRxDataSize>
 80084ca:	4602      	mov	r2, r0
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80084e6:	4611      	mov	r1, r2
 80084e8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3710      	adds	r7, #16
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008502:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d101      	bne.n	800850e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800850a:	2303      	movs	r3, #3
 800850c:	e01b      	b.n	8008546 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d015      	beq.n	8008544 <USBD_CDC_EP0_RxReady+0x50>
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800851e:	2bff      	cmp	r3, #255	; 0xff
 8008520:	d010      	beq.n	8008544 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008530:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008538:	b292      	uxth	r2, r2
 800853a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	22ff      	movs	r2, #255	; 0xff
 8008540:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
	...

08008550 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2243      	movs	r2, #67	; 0x43
 800855c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800855e:	4b03      	ldr	r3, [pc, #12]	; (800856c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008560:	4618      	mov	r0, r3
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr
 800856c:	2400009c 	.word	0x2400009c

08008570 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2243      	movs	r2, #67	; 0x43
 800857c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800857e:	4b03      	ldr	r3, [pc, #12]	; (800858c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008580:	4618      	mov	r0, r3
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr
 800858c:	24000058 	.word	0x24000058

08008590 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2243      	movs	r2, #67	; 0x43
 800859c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800859e:	4b03      	ldr	r3, [pc, #12]	; (80085ac <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr
 80085ac:	240000e0 	.word	0x240000e0

080085b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	220a      	movs	r2, #10
 80085bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80085be:	4b03      	ldr	r3, [pc, #12]	; (80085cc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr
 80085cc:	24000014 	.word	0x24000014

080085d0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d101      	bne.n	80085e4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80085e0:	2303      	movs	r3, #3
 80085e2:	e004      	b.n	80085ee <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	370c      	adds	r7, #12
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80085fa:	b480      	push	{r7}
 80085fc:	b087      	sub	sp, #28
 80085fe:	af00      	add	r7, sp, #0
 8008600:	60f8      	str	r0, [r7, #12]
 8008602:	60b9      	str	r1, [r7, #8]
 8008604:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800860c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d101      	bne.n	8008618 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008614:	2303      	movs	r3, #3
 8008616:	e008      	b.n	800862a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	371c      	adds	r7, #28
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr

08008636 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008636:	b480      	push	{r7}
 8008638:	b085      	sub	sp, #20
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
 800863e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008646:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d101      	bne.n	8008652 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800864e:	2303      	movs	r3, #3
 8008650:	e004      	b.n	800865c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	683a      	ldr	r2, [r7, #0]
 8008656:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3714      	adds	r7, #20
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008676:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008678:	2301      	movs	r3, #1
 800867a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008682:	2b00      	cmp	r3, #0
 8008684:	d101      	bne.n	800868a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008686:	2303      	movs	r3, #3
 8008688:	e01a      	b.n	80086c0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008690:	2b00      	cmp	r3, #0
 8008692:	d114      	bne.n	80086be <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	2201      	movs	r2, #1
 8008698:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80086b2:	2181      	movs	r1, #129	; 0x81
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f001 fe6c 	bl	800a392 <USBD_LL_Transmit>

    ret = USBD_OK;
 80086ba:	2300      	movs	r3, #0
 80086bc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80086be:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3710      	adds	r7, #16
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d101      	bne.n	80086e6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80086e2:	2303      	movs	r3, #3
 80086e4:	e016      	b.n	8008714 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	7c1b      	ldrb	r3, [r3, #16]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d109      	bne.n	8008702 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80086f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086f8:	2101      	movs	r1, #1
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f001 fe6a 	bl	800a3d4 <USBD_LL_PrepareReceive>
 8008700:	e007      	b.n	8008712 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008708:	2340      	movs	r3, #64	; 0x40
 800870a:	2101      	movs	r1, #1
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f001 fe61 	bl	800a3d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008712:	2300      	movs	r3, #0
}
 8008714:	4618      	mov	r0, r3
 8008716:	3710      	adds	r7, #16
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	4613      	mov	r3, r2
 8008728:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d101      	bne.n	8008734 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008730:	2303      	movs	r3, #3
 8008732:	e01f      	b.n	8008774 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2200      	movs	r2, #0
 8008738:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2200      	movs	r2, #0
 8008740:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2200      	movs	r2, #0
 8008748:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d003      	beq.n	800875a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	68ba      	ldr	r2, [r7, #8]
 8008756:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2201      	movs	r2, #1
 800875e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	79fa      	ldrb	r2, [r7, #7]
 8008766:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008768:	68f8      	ldr	r0, [r7, #12]
 800876a:	f001 fcd3 	bl	800a114 <USBD_LL_Init>
 800876e:	4603      	mov	r3, r0
 8008770:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008772:	7dfb      	ldrb	r3, [r7, #23]
}
 8008774:	4618      	mov	r0, r3
 8008776:	3718      	adds	r7, #24
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008786:	2300      	movs	r3, #0
 8008788:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d101      	bne.n	8008794 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008790:	2303      	movs	r3, #3
 8008792:	e016      	b.n	80087c2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	683a      	ldr	r2, [r7, #0]
 8008798:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d00b      	beq.n	80087c0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b0:	f107 020e 	add.w	r2, r7, #14
 80087b4:	4610      	mov	r0, r2
 80087b6:	4798      	blx	r3
 80087b8:	4602      	mov	r2, r0
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b082      	sub	sp, #8
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f001 fcf4 	bl	800a1c0 <USBD_LL_Start>
 80087d8:	4603      	mov	r3, r0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3708      	adds	r7, #8
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80087e2:	b480      	push	{r7}
 80087e4:	b083      	sub	sp, #12
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	460b      	mov	r3, r1
 8008802:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008804:	2303      	movs	r3, #3
 8008806:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800880e:	2b00      	cmp	r3, #0
 8008810:	d009      	beq.n	8008826 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	78fa      	ldrb	r2, [r7, #3]
 800881c:	4611      	mov	r1, r2
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	4798      	blx	r3
 8008822:	4603      	mov	r3, r0
 8008824:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008826:	7bfb      	ldrb	r3, [r7, #15]
}
 8008828:	4618      	mov	r0, r3
 800882a:	3710      	adds	r7, #16
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	460b      	mov	r3, r1
 800883a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008842:	2b00      	cmp	r3, #0
 8008844:	d007      	beq.n	8008856 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	78fa      	ldrb	r2, [r7, #3]
 8008850:	4611      	mov	r1, r2
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	4798      	blx	r3
  }

  return USBD_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3708      	adds	r7, #8
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008870:	6839      	ldr	r1, [r7, #0]
 8008872:	4618      	mov	r0, r3
 8008874:	f000 ff90 	bl	8009798 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008886:	461a      	mov	r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008894:	f003 031f 	and.w	r3, r3, #31
 8008898:	2b02      	cmp	r3, #2
 800889a:	d01a      	beq.n	80088d2 <USBD_LL_SetupStage+0x72>
 800889c:	2b02      	cmp	r3, #2
 800889e:	d822      	bhi.n	80088e6 <USBD_LL_SetupStage+0x86>
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d002      	beq.n	80088aa <USBD_LL_SetupStage+0x4a>
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d00a      	beq.n	80088be <USBD_LL_SetupStage+0x5e>
 80088a8:	e01d      	b.n	80088e6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80088b0:	4619      	mov	r1, r3
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 fa62 	bl	8008d7c <USBD_StdDevReq>
 80088b8:	4603      	mov	r3, r0
 80088ba:	73fb      	strb	r3, [r7, #15]
      break;
 80088bc:	e020      	b.n	8008900 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80088c4:	4619      	mov	r1, r3
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fac6 	bl	8008e58 <USBD_StdItfReq>
 80088cc:	4603      	mov	r3, r0
 80088ce:	73fb      	strb	r3, [r7, #15]
      break;
 80088d0:	e016      	b.n	8008900 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80088d8:	4619      	mov	r1, r3
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 fb05 	bl	8008eea <USBD_StdEPReq>
 80088e0:	4603      	mov	r3, r0
 80088e2:	73fb      	strb	r3, [r7, #15]
      break;
 80088e4:	e00c      	b.n	8008900 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80088ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	4619      	mov	r1, r3
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f001 fcc3 	bl	800a280 <USBD_LL_StallEP>
 80088fa:	4603      	mov	r3, r0
 80088fc:	73fb      	strb	r3, [r7, #15]
      break;
 80088fe:	bf00      	nop
  }

  return ret;
 8008900:	7bfb      	ldrb	r3, [r7, #15]
}
 8008902:	4618      	mov	r0, r3
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b086      	sub	sp, #24
 800890e:	af00      	add	r7, sp, #0
 8008910:	60f8      	str	r0, [r7, #12]
 8008912:	460b      	mov	r3, r1
 8008914:	607a      	str	r2, [r7, #4]
 8008916:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008918:	7afb      	ldrb	r3, [r7, #11]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d138      	bne.n	8008990 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008924:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800892c:	2b03      	cmp	r3, #3
 800892e:	d14a      	bne.n	80089c6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	689a      	ldr	r2, [r3, #8]
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	429a      	cmp	r2, r3
 800893a:	d913      	bls.n	8008964 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	689a      	ldr	r2, [r3, #8]
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	1ad2      	subs	r2, r2, r3
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	68da      	ldr	r2, [r3, #12]
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	4293      	cmp	r3, r2
 8008954:	bf28      	it	cs
 8008956:	4613      	movcs	r3, r2
 8008958:	461a      	mov	r2, r3
 800895a:	6879      	ldr	r1, [r7, #4]
 800895c:	68f8      	ldr	r0, [r7, #12]
 800895e:	f001 f80f 	bl	8009980 <USBD_CtlContinueRx>
 8008962:	e030      	b.n	80089c6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800896a:	b2db      	uxtb	r3, r3
 800896c:	2b03      	cmp	r3, #3
 800896e:	d10b      	bne.n	8008988 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d005      	beq.n	8008988 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008982:	691b      	ldr	r3, [r3, #16]
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f001 f80a 	bl	80099a2 <USBD_CtlSendStatus>
 800898e:	e01a      	b.n	80089c6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008996:	b2db      	uxtb	r3, r3
 8008998:	2b03      	cmp	r3, #3
 800899a:	d114      	bne.n	80089c6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089a2:	699b      	ldr	r3, [r3, #24]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00e      	beq.n	80089c6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ae:	699b      	ldr	r3, [r3, #24]
 80089b0:	7afa      	ldrb	r2, [r7, #11]
 80089b2:	4611      	mov	r1, r2
 80089b4:	68f8      	ldr	r0, [r7, #12]
 80089b6:	4798      	blx	r3
 80089b8:	4603      	mov	r3, r0
 80089ba:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80089bc:	7dfb      	ldrb	r3, [r7, #23]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d001      	beq.n	80089c6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80089c2:	7dfb      	ldrb	r3, [r7, #23]
 80089c4:	e000      	b.n	80089c8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3718      	adds	r7, #24
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b086      	sub	sp, #24
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	460b      	mov	r3, r1
 80089da:	607a      	str	r2, [r7, #4]
 80089dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80089de:	7afb      	ldrb	r3, [r7, #11]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d16b      	bne.n	8008abc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	3314      	adds	r3, #20
 80089e8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80089f0:	2b02      	cmp	r3, #2
 80089f2:	d156      	bne.n	8008aa2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	689a      	ldr	r2, [r3, #8]
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d914      	bls.n	8008a2a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	689a      	ldr	r2, [r3, #8]
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	1ad2      	subs	r2, r2, r3
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	461a      	mov	r2, r3
 8008a14:	6879      	ldr	r1, [r7, #4]
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	f000 ff84 	bl	8009924 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	2200      	movs	r2, #0
 8008a20:	2100      	movs	r1, #0
 8008a22:	68f8      	ldr	r0, [r7, #12]
 8008a24:	f001 fcd6 	bl	800a3d4 <USBD_LL_PrepareReceive>
 8008a28:	e03b      	b.n	8008aa2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	68da      	ldr	r2, [r3, #12]
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d11c      	bne.n	8008a70 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	685a      	ldr	r2, [r3, #4]
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d316      	bcc.n	8008a70 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	685a      	ldr	r2, [r3, #4]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d20f      	bcs.n	8008a70 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008a50:	2200      	movs	r2, #0
 8008a52:	2100      	movs	r1, #0
 8008a54:	68f8      	ldr	r0, [r7, #12]
 8008a56:	f000 ff65 	bl	8009924 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a62:	2300      	movs	r3, #0
 8008a64:	2200      	movs	r2, #0
 8008a66:	2100      	movs	r1, #0
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f001 fcb3 	bl	800a3d4 <USBD_LL_PrepareReceive>
 8008a6e:	e018      	b.n	8008aa2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	2b03      	cmp	r3, #3
 8008a7a:	d10b      	bne.n	8008a94 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d005      	beq.n	8008a94 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	68f8      	ldr	r0, [r7, #12]
 8008a92:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a94:	2180      	movs	r1, #128	; 0x80
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f001 fbf2 	bl	800a280 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f000 ff93 	bl	80099c8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d122      	bne.n	8008af2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	f7ff fe98 	bl	80087e2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008aba:	e01a      	b.n	8008af2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	2b03      	cmp	r3, #3
 8008ac6:	d114      	bne.n	8008af2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ace:	695b      	ldr	r3, [r3, #20]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00e      	beq.n	8008af2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ada:	695b      	ldr	r3, [r3, #20]
 8008adc:	7afa      	ldrb	r2, [r7, #11]
 8008ade:	4611      	mov	r1, r2
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	4798      	blx	r3
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008ae8:	7dfb      	ldrb	r3, [r7, #23]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d001      	beq.n	8008af2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008aee:	7dfb      	ldrb	r3, [r7, #23]
 8008af0:	e000      	b.n	8008af4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008af2:	2300      	movs	r3, #0
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3718      	adds	r7, #24
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2201      	movs	r2, #1
 8008b08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d101      	bne.n	8008b30 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008b2c:	2303      	movs	r3, #3
 8008b2e:	e02f      	b.n	8008b90 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00f      	beq.n	8008b5a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d009      	beq.n	8008b5a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	6852      	ldr	r2, [r2, #4]
 8008b52:	b2d2      	uxtb	r2, r2
 8008b54:	4611      	mov	r1, r2
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008b5a:	2340      	movs	r3, #64	; 0x40
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	2100      	movs	r1, #0
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f001 fb48 	bl	800a1f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2240      	movs	r2, #64	; 0x40
 8008b72:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008b76:	2340      	movs	r3, #64	; 0x40
 8008b78:	2200      	movs	r2, #0
 8008b7a:	2180      	movs	r1, #128	; 0x80
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f001 fb3a 	bl	800a1f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2201      	movs	r2, #1
 8008b86:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2240      	movs	r2, #64	; 0x40
 8008b8c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	78fa      	ldrb	r2, [r7, #3]
 8008ba8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bc6:	b2da      	uxtb	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2204      	movs	r2, #4
 8008bd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008bd6:	2300      	movs	r3, #0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	2b04      	cmp	r3, #4
 8008bf6:	d106      	bne.n	8008c06 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008bfe:	b2da      	uxtb	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d101      	bne.n	8008c2a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008c26:	2303      	movs	r3, #3
 8008c28:	e012      	b.n	8008c50 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	2b03      	cmp	r3, #3
 8008c34:	d10b      	bne.n	8008c4e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c3c:	69db      	ldr	r3, [r3, #28]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d005      	beq.n	8008c4e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c48:	69db      	ldr	r3, [r3, #28]
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3708      	adds	r7, #8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	460b      	mov	r3, r1
 8008c62:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d101      	bne.n	8008c72 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008c6e:	2303      	movs	r3, #3
 8008c70:	e014      	b.n	8008c9c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	2b03      	cmp	r3, #3
 8008c7c:	d10d      	bne.n	8008c9a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c84:	6a1b      	ldr	r3, [r3, #32]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d007      	beq.n	8008c9a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c90:	6a1b      	ldr	r3, [r3, #32]
 8008c92:	78fa      	ldrb	r2, [r7, #3]
 8008c94:	4611      	mov	r1, r2
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3708      	adds	r7, #8
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	460b      	mov	r3, r1
 8008cae:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d101      	bne.n	8008cbe <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008cba:	2303      	movs	r3, #3
 8008cbc:	e014      	b.n	8008ce8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	2b03      	cmp	r3, #3
 8008cc8:	d10d      	bne.n	8008ce6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d007      	beq.n	8008ce6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cde:	78fa      	ldrb	r2, [r7, #3]
 8008ce0:	4611      	mov	r1, r2
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	370c      	adds	r7, #12
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr

08008d06 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b082      	sub	sp, #8
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2201      	movs	r2, #1
 8008d12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d009      	beq.n	8008d34 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	6852      	ldr	r2, [r2, #4]
 8008d2c:	b2d2      	uxtb	r2, r2
 8008d2e:	4611      	mov	r1, r2
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	4798      	blx	r3
  }

  return USBD_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3708      	adds	r7, #8
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008d3e:	b480      	push	{r7}
 8008d40:	b087      	sub	sp, #28
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	3301      	adds	r3, #1
 8008d54:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008d5c:	8a3b      	ldrh	r3, [r7, #16]
 8008d5e:	021b      	lsls	r3, r3, #8
 8008d60:	b21a      	sxth	r2, r3
 8008d62:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008d66:	4313      	orrs	r3, r2
 8008d68:	b21b      	sxth	r3, r3
 8008d6a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008d6c:	89fb      	ldrh	r3, [r7, #14]
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	371c      	adds	r7, #28
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr
	...

08008d7c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d86:	2300      	movs	r3, #0
 8008d88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d92:	2b40      	cmp	r3, #64	; 0x40
 8008d94:	d005      	beq.n	8008da2 <USBD_StdDevReq+0x26>
 8008d96:	2b40      	cmp	r3, #64	; 0x40
 8008d98:	d853      	bhi.n	8008e42 <USBD_StdDevReq+0xc6>
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00b      	beq.n	8008db6 <USBD_StdDevReq+0x3a>
 8008d9e:	2b20      	cmp	r3, #32
 8008da0:	d14f      	bne.n	8008e42 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	6839      	ldr	r1, [r7, #0]
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	4798      	blx	r3
 8008db0:	4603      	mov	r3, r0
 8008db2:	73fb      	strb	r3, [r7, #15]
      break;
 8008db4:	e04a      	b.n	8008e4c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	785b      	ldrb	r3, [r3, #1]
 8008dba:	2b09      	cmp	r3, #9
 8008dbc:	d83b      	bhi.n	8008e36 <USBD_StdDevReq+0xba>
 8008dbe:	a201      	add	r2, pc, #4	; (adr r2, 8008dc4 <USBD_StdDevReq+0x48>)
 8008dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc4:	08008e19 	.word	0x08008e19
 8008dc8:	08008e2d 	.word	0x08008e2d
 8008dcc:	08008e37 	.word	0x08008e37
 8008dd0:	08008e23 	.word	0x08008e23
 8008dd4:	08008e37 	.word	0x08008e37
 8008dd8:	08008df7 	.word	0x08008df7
 8008ddc:	08008ded 	.word	0x08008ded
 8008de0:	08008e37 	.word	0x08008e37
 8008de4:	08008e0f 	.word	0x08008e0f
 8008de8:	08008e01 	.word	0x08008e01
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008dec:	6839      	ldr	r1, [r7, #0]
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 f9de 	bl	80091b0 <USBD_GetDescriptor>
          break;
 8008df4:	e024      	b.n	8008e40 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008df6:	6839      	ldr	r1, [r7, #0]
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 fb43 	bl	8009484 <USBD_SetAddress>
          break;
 8008dfe:	e01f      	b.n	8008e40 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008e00:	6839      	ldr	r1, [r7, #0]
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 fb82 	bl	800950c <USBD_SetConfig>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	73fb      	strb	r3, [r7, #15]
          break;
 8008e0c:	e018      	b.n	8008e40 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008e0e:	6839      	ldr	r1, [r7, #0]
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 fc21 	bl	8009658 <USBD_GetConfig>
          break;
 8008e16:	e013      	b.n	8008e40 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008e18:	6839      	ldr	r1, [r7, #0]
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 fc52 	bl	80096c4 <USBD_GetStatus>
          break;
 8008e20:	e00e      	b.n	8008e40 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008e22:	6839      	ldr	r1, [r7, #0]
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 fc81 	bl	800972c <USBD_SetFeature>
          break;
 8008e2a:	e009      	b.n	8008e40 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fc90 	bl	8009754 <USBD_ClrFeature>
          break;
 8008e34:	e004      	b.n	8008e40 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008e36:	6839      	ldr	r1, [r7, #0]
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 fce7 	bl	800980c <USBD_CtlError>
          break;
 8008e3e:	bf00      	nop
      }
      break;
 8008e40:	e004      	b.n	8008e4c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008e42:	6839      	ldr	r1, [r7, #0]
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 fce1 	bl	800980c <USBD_CtlError>
      break;
 8008e4a:	bf00      	nop
  }

  return ret;
 8008e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop

08008e58 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e62:	2300      	movs	r3, #0
 8008e64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e6e:	2b40      	cmp	r3, #64	; 0x40
 8008e70:	d005      	beq.n	8008e7e <USBD_StdItfReq+0x26>
 8008e72:	2b40      	cmp	r3, #64	; 0x40
 8008e74:	d82f      	bhi.n	8008ed6 <USBD_StdItfReq+0x7e>
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d001      	beq.n	8008e7e <USBD_StdItfReq+0x26>
 8008e7a:	2b20      	cmp	r3, #32
 8008e7c:	d12b      	bne.n	8008ed6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	3b01      	subs	r3, #1
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	d81d      	bhi.n	8008ec8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	889b      	ldrh	r3, [r3, #4]
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d813      	bhi.n	8008ebe <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	6839      	ldr	r1, [r7, #0]
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	4798      	blx	r3
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	88db      	ldrh	r3, [r3, #6]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d110      	bne.n	8008ed2 <USBD_StdItfReq+0x7a>
 8008eb0:	7bfb      	ldrb	r3, [r7, #15]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d10d      	bne.n	8008ed2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 fd73 	bl	80099a2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008ebc:	e009      	b.n	8008ed2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008ebe:	6839      	ldr	r1, [r7, #0]
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 fca3 	bl	800980c <USBD_CtlError>
          break;
 8008ec6:	e004      	b.n	8008ed2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008ec8:	6839      	ldr	r1, [r7, #0]
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 fc9e 	bl	800980c <USBD_CtlError>
          break;
 8008ed0:	e000      	b.n	8008ed4 <USBD_StdItfReq+0x7c>
          break;
 8008ed2:	bf00      	nop
      }
      break;
 8008ed4:	e004      	b.n	8008ee0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008ed6:	6839      	ldr	r1, [r7, #0]
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 fc97 	bl	800980c <USBD_CtlError>
      break;
 8008ede:	bf00      	nop
  }

  return ret;
 8008ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b084      	sub	sp, #16
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
 8008ef2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	889b      	ldrh	r3, [r3, #4]
 8008efc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f06:	2b40      	cmp	r3, #64	; 0x40
 8008f08:	d007      	beq.n	8008f1a <USBD_StdEPReq+0x30>
 8008f0a:	2b40      	cmp	r3, #64	; 0x40
 8008f0c:	f200 8145 	bhi.w	800919a <USBD_StdEPReq+0x2b0>
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d00c      	beq.n	8008f2e <USBD_StdEPReq+0x44>
 8008f14:	2b20      	cmp	r3, #32
 8008f16:	f040 8140 	bne.w	800919a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	6839      	ldr	r1, [r7, #0]
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	4798      	blx	r3
 8008f28:	4603      	mov	r3, r0
 8008f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8008f2c:	e13a      	b.n	80091a4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	785b      	ldrb	r3, [r3, #1]
 8008f32:	2b03      	cmp	r3, #3
 8008f34:	d007      	beq.n	8008f46 <USBD_StdEPReq+0x5c>
 8008f36:	2b03      	cmp	r3, #3
 8008f38:	f300 8129 	bgt.w	800918e <USBD_StdEPReq+0x2a4>
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d07f      	beq.n	8009040 <USBD_StdEPReq+0x156>
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d03c      	beq.n	8008fbe <USBD_StdEPReq+0xd4>
 8008f44:	e123      	b.n	800918e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	2b02      	cmp	r3, #2
 8008f50:	d002      	beq.n	8008f58 <USBD_StdEPReq+0x6e>
 8008f52:	2b03      	cmp	r3, #3
 8008f54:	d016      	beq.n	8008f84 <USBD_StdEPReq+0x9a>
 8008f56:	e02c      	b.n	8008fb2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f58:	7bbb      	ldrb	r3, [r7, #14]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00d      	beq.n	8008f7a <USBD_StdEPReq+0x90>
 8008f5e:	7bbb      	ldrb	r3, [r7, #14]
 8008f60:	2b80      	cmp	r3, #128	; 0x80
 8008f62:	d00a      	beq.n	8008f7a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f64:	7bbb      	ldrb	r3, [r7, #14]
 8008f66:	4619      	mov	r1, r3
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f001 f989 	bl	800a280 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f6e:	2180      	movs	r1, #128	; 0x80
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f001 f985 	bl	800a280 <USBD_LL_StallEP>
 8008f76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f78:	e020      	b.n	8008fbc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008f7a:	6839      	ldr	r1, [r7, #0]
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 fc45 	bl	800980c <USBD_CtlError>
              break;
 8008f82:	e01b      	b.n	8008fbc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	885b      	ldrh	r3, [r3, #2]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d10e      	bne.n	8008faa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f8c:	7bbb      	ldrb	r3, [r7, #14]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00b      	beq.n	8008faa <USBD_StdEPReq+0xc0>
 8008f92:	7bbb      	ldrb	r3, [r7, #14]
 8008f94:	2b80      	cmp	r3, #128	; 0x80
 8008f96:	d008      	beq.n	8008faa <USBD_StdEPReq+0xc0>
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	88db      	ldrh	r3, [r3, #6]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d104      	bne.n	8008faa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fa0:	7bbb      	ldrb	r3, [r7, #14]
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f001 f96b 	bl	800a280 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 fcf9 	bl	80099a2 <USBD_CtlSendStatus>

              break;
 8008fb0:	e004      	b.n	8008fbc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008fb2:	6839      	ldr	r1, [r7, #0]
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fc29 	bl	800980c <USBD_CtlError>
              break;
 8008fba:	bf00      	nop
          }
          break;
 8008fbc:	e0ec      	b.n	8009198 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d002      	beq.n	8008fd0 <USBD_StdEPReq+0xe6>
 8008fca:	2b03      	cmp	r3, #3
 8008fcc:	d016      	beq.n	8008ffc <USBD_StdEPReq+0x112>
 8008fce:	e030      	b.n	8009032 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fd0:	7bbb      	ldrb	r3, [r7, #14]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00d      	beq.n	8008ff2 <USBD_StdEPReq+0x108>
 8008fd6:	7bbb      	ldrb	r3, [r7, #14]
 8008fd8:	2b80      	cmp	r3, #128	; 0x80
 8008fda:	d00a      	beq.n	8008ff2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fdc:	7bbb      	ldrb	r3, [r7, #14]
 8008fde:	4619      	mov	r1, r3
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f001 f94d 	bl	800a280 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fe6:	2180      	movs	r1, #128	; 0x80
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f001 f949 	bl	800a280 <USBD_LL_StallEP>
 8008fee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ff0:	e025      	b.n	800903e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008ff2:	6839      	ldr	r1, [r7, #0]
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 fc09 	bl	800980c <USBD_CtlError>
              break;
 8008ffa:	e020      	b.n	800903e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	885b      	ldrh	r3, [r3, #2]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d11b      	bne.n	800903c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009004:	7bbb      	ldrb	r3, [r7, #14]
 8009006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800900a:	2b00      	cmp	r3, #0
 800900c:	d004      	beq.n	8009018 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800900e:	7bbb      	ldrb	r3, [r7, #14]
 8009010:	4619      	mov	r1, r3
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f001 f953 	bl	800a2be <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 fcc2 	bl	80099a2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	6839      	ldr	r1, [r7, #0]
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	4798      	blx	r3
 800902c:	4603      	mov	r3, r0
 800902e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009030:	e004      	b.n	800903c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009032:	6839      	ldr	r1, [r7, #0]
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 fbe9 	bl	800980c <USBD_CtlError>
              break;
 800903a:	e000      	b.n	800903e <USBD_StdEPReq+0x154>
              break;
 800903c:	bf00      	nop
          }
          break;
 800903e:	e0ab      	b.n	8009198 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009046:	b2db      	uxtb	r3, r3
 8009048:	2b02      	cmp	r3, #2
 800904a:	d002      	beq.n	8009052 <USBD_StdEPReq+0x168>
 800904c:	2b03      	cmp	r3, #3
 800904e:	d032      	beq.n	80090b6 <USBD_StdEPReq+0x1cc>
 8009050:	e097      	b.n	8009182 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009052:	7bbb      	ldrb	r3, [r7, #14]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d007      	beq.n	8009068 <USBD_StdEPReq+0x17e>
 8009058:	7bbb      	ldrb	r3, [r7, #14]
 800905a:	2b80      	cmp	r3, #128	; 0x80
 800905c:	d004      	beq.n	8009068 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800905e:	6839      	ldr	r1, [r7, #0]
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 fbd3 	bl	800980c <USBD_CtlError>
                break;
 8009066:	e091      	b.n	800918c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009068:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800906c:	2b00      	cmp	r3, #0
 800906e:	da0b      	bge.n	8009088 <USBD_StdEPReq+0x19e>
 8009070:	7bbb      	ldrb	r3, [r7, #14]
 8009072:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009076:	4613      	mov	r3, r2
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	4413      	add	r3, r2
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	3310      	adds	r3, #16
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	4413      	add	r3, r2
 8009084:	3304      	adds	r3, #4
 8009086:	e00b      	b.n	80090a0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009088:	7bbb      	ldrb	r3, [r7, #14]
 800908a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800908e:	4613      	mov	r3, r2
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	4413      	add	r3, r2
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	4413      	add	r3, r2
 800909e:	3304      	adds	r3, #4
 80090a0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	2200      	movs	r2, #0
 80090a6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	2202      	movs	r2, #2
 80090ac:	4619      	mov	r1, r3
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fc1d 	bl	80098ee <USBD_CtlSendData>
              break;
 80090b4:	e06a      	b.n	800918c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80090b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	da11      	bge.n	80090e2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80090be:	7bbb      	ldrb	r3, [r7, #14]
 80090c0:	f003 020f 	and.w	r2, r3, #15
 80090c4:	6879      	ldr	r1, [r7, #4]
 80090c6:	4613      	mov	r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	4413      	add	r3, r2
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	440b      	add	r3, r1
 80090d0:	3324      	adds	r3, #36	; 0x24
 80090d2:	881b      	ldrh	r3, [r3, #0]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d117      	bne.n	8009108 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80090d8:	6839      	ldr	r1, [r7, #0]
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 fb96 	bl	800980c <USBD_CtlError>
                  break;
 80090e0:	e054      	b.n	800918c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80090e2:	7bbb      	ldrb	r3, [r7, #14]
 80090e4:	f003 020f 	and.w	r2, r3, #15
 80090e8:	6879      	ldr	r1, [r7, #4]
 80090ea:	4613      	mov	r3, r2
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	4413      	add	r3, r2
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	440b      	add	r3, r1
 80090f4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80090f8:	881b      	ldrh	r3, [r3, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d104      	bne.n	8009108 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80090fe:	6839      	ldr	r1, [r7, #0]
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 fb83 	bl	800980c <USBD_CtlError>
                  break;
 8009106:	e041      	b.n	800918c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009108:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800910c:	2b00      	cmp	r3, #0
 800910e:	da0b      	bge.n	8009128 <USBD_StdEPReq+0x23e>
 8009110:	7bbb      	ldrb	r3, [r7, #14]
 8009112:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009116:	4613      	mov	r3, r2
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	4413      	add	r3, r2
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	3310      	adds	r3, #16
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	4413      	add	r3, r2
 8009124:	3304      	adds	r3, #4
 8009126:	e00b      	b.n	8009140 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009128:	7bbb      	ldrb	r3, [r7, #14]
 800912a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800912e:	4613      	mov	r3, r2
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	4413      	add	r3, r2
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	4413      	add	r3, r2
 800913e:	3304      	adds	r3, #4
 8009140:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009142:	7bbb      	ldrb	r3, [r7, #14]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d002      	beq.n	800914e <USBD_StdEPReq+0x264>
 8009148:	7bbb      	ldrb	r3, [r7, #14]
 800914a:	2b80      	cmp	r3, #128	; 0x80
 800914c:	d103      	bne.n	8009156 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	2200      	movs	r2, #0
 8009152:	601a      	str	r2, [r3, #0]
 8009154:	e00e      	b.n	8009174 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009156:	7bbb      	ldrb	r3, [r7, #14]
 8009158:	4619      	mov	r1, r3
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f001 f8ce 	bl	800a2fc <USBD_LL_IsStallEP>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d003      	beq.n	800916e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	2201      	movs	r2, #1
 800916a:	601a      	str	r2, [r3, #0]
 800916c:	e002      	b.n	8009174 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	2200      	movs	r2, #0
 8009172:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	2202      	movs	r2, #2
 8009178:	4619      	mov	r1, r3
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 fbb7 	bl	80098ee <USBD_CtlSendData>
              break;
 8009180:	e004      	b.n	800918c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009182:	6839      	ldr	r1, [r7, #0]
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 fb41 	bl	800980c <USBD_CtlError>
              break;
 800918a:	bf00      	nop
          }
          break;
 800918c:	e004      	b.n	8009198 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800918e:	6839      	ldr	r1, [r7, #0]
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 fb3b 	bl	800980c <USBD_CtlError>
          break;
 8009196:	bf00      	nop
      }
      break;
 8009198:	e004      	b.n	80091a4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800919a:	6839      	ldr	r1, [r7, #0]
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fb35 	bl	800980c <USBD_CtlError>
      break;
 80091a2:	bf00      	nop
  }

  return ret;
 80091a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
	...

080091b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80091ba:	2300      	movs	r3, #0
 80091bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80091be:	2300      	movs	r3, #0
 80091c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80091c2:	2300      	movs	r3, #0
 80091c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	885b      	ldrh	r3, [r3, #2]
 80091ca:	0a1b      	lsrs	r3, r3, #8
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	3b01      	subs	r3, #1
 80091d0:	2b06      	cmp	r3, #6
 80091d2:	f200 8128 	bhi.w	8009426 <USBD_GetDescriptor+0x276>
 80091d6:	a201      	add	r2, pc, #4	; (adr r2, 80091dc <USBD_GetDescriptor+0x2c>)
 80091d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091dc:	080091f9 	.word	0x080091f9
 80091e0:	08009211 	.word	0x08009211
 80091e4:	08009251 	.word	0x08009251
 80091e8:	08009427 	.word	0x08009427
 80091ec:	08009427 	.word	0x08009427
 80091f0:	080093c7 	.word	0x080093c7
 80091f4:	080093f3 	.word	0x080093f3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	7c12      	ldrb	r2, [r2, #16]
 8009204:	f107 0108 	add.w	r1, r7, #8
 8009208:	4610      	mov	r0, r2
 800920a:	4798      	blx	r3
 800920c:	60f8      	str	r0, [r7, #12]
      break;
 800920e:	e112      	b.n	8009436 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	7c1b      	ldrb	r3, [r3, #16]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d10d      	bne.n	8009234 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800921e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009220:	f107 0208 	add.w	r2, r7, #8
 8009224:	4610      	mov	r0, r2
 8009226:	4798      	blx	r3
 8009228:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	3301      	adds	r3, #1
 800922e:	2202      	movs	r2, #2
 8009230:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009232:	e100      	b.n	8009436 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800923a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800923c:	f107 0208 	add.w	r2, r7, #8
 8009240:	4610      	mov	r0, r2
 8009242:	4798      	blx	r3
 8009244:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	3301      	adds	r3, #1
 800924a:	2202      	movs	r2, #2
 800924c:	701a      	strb	r2, [r3, #0]
      break;
 800924e:	e0f2      	b.n	8009436 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	885b      	ldrh	r3, [r3, #2]
 8009254:	b2db      	uxtb	r3, r3
 8009256:	2b05      	cmp	r3, #5
 8009258:	f200 80ac 	bhi.w	80093b4 <USBD_GetDescriptor+0x204>
 800925c:	a201      	add	r2, pc, #4	; (adr r2, 8009264 <USBD_GetDescriptor+0xb4>)
 800925e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009262:	bf00      	nop
 8009264:	0800927d 	.word	0x0800927d
 8009268:	080092b1 	.word	0x080092b1
 800926c:	080092e5 	.word	0x080092e5
 8009270:	08009319 	.word	0x08009319
 8009274:	0800934d 	.word	0x0800934d
 8009278:	08009381 	.word	0x08009381
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d00b      	beq.n	80092a0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	7c12      	ldrb	r2, [r2, #16]
 8009294:	f107 0108 	add.w	r1, r7, #8
 8009298:	4610      	mov	r0, r2
 800929a:	4798      	blx	r3
 800929c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800929e:	e091      	b.n	80093c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092a0:	6839      	ldr	r1, [r7, #0]
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 fab2 	bl	800980c <USBD_CtlError>
            err++;
 80092a8:	7afb      	ldrb	r3, [r7, #11]
 80092aa:	3301      	adds	r3, #1
 80092ac:	72fb      	strb	r3, [r7, #11]
          break;
 80092ae:	e089      	b.n	80093c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d00b      	beq.n	80092d4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	7c12      	ldrb	r2, [r2, #16]
 80092c8:	f107 0108 	add.w	r1, r7, #8
 80092cc:	4610      	mov	r0, r2
 80092ce:	4798      	blx	r3
 80092d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092d2:	e077      	b.n	80093c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092d4:	6839      	ldr	r1, [r7, #0]
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 fa98 	bl	800980c <USBD_CtlError>
            err++;
 80092dc:	7afb      	ldrb	r3, [r7, #11]
 80092de:	3301      	adds	r3, #1
 80092e0:	72fb      	strb	r3, [r7, #11]
          break;
 80092e2:	e06f      	b.n	80093c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00b      	beq.n	8009308 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	7c12      	ldrb	r2, [r2, #16]
 80092fc:	f107 0108 	add.w	r1, r7, #8
 8009300:	4610      	mov	r0, r2
 8009302:	4798      	blx	r3
 8009304:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009306:	e05d      	b.n	80093c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009308:	6839      	ldr	r1, [r7, #0]
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 fa7e 	bl	800980c <USBD_CtlError>
            err++;
 8009310:	7afb      	ldrb	r3, [r7, #11]
 8009312:	3301      	adds	r3, #1
 8009314:	72fb      	strb	r3, [r7, #11]
          break;
 8009316:	e055      	b.n	80093c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00b      	beq.n	800933c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	7c12      	ldrb	r2, [r2, #16]
 8009330:	f107 0108 	add.w	r1, r7, #8
 8009334:	4610      	mov	r0, r2
 8009336:	4798      	blx	r3
 8009338:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800933a:	e043      	b.n	80093c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800933c:	6839      	ldr	r1, [r7, #0]
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 fa64 	bl	800980c <USBD_CtlError>
            err++;
 8009344:	7afb      	ldrb	r3, [r7, #11]
 8009346:	3301      	adds	r3, #1
 8009348:	72fb      	strb	r3, [r7, #11]
          break;
 800934a:	e03b      	b.n	80093c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009352:	695b      	ldr	r3, [r3, #20]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00b      	beq.n	8009370 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800935e:	695b      	ldr	r3, [r3, #20]
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	7c12      	ldrb	r2, [r2, #16]
 8009364:	f107 0108 	add.w	r1, r7, #8
 8009368:	4610      	mov	r0, r2
 800936a:	4798      	blx	r3
 800936c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800936e:	e029      	b.n	80093c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009370:	6839      	ldr	r1, [r7, #0]
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 fa4a 	bl	800980c <USBD_CtlError>
            err++;
 8009378:	7afb      	ldrb	r3, [r7, #11]
 800937a:	3301      	adds	r3, #1
 800937c:	72fb      	strb	r3, [r7, #11]
          break;
 800937e:	e021      	b.n	80093c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009386:	699b      	ldr	r3, [r3, #24]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d00b      	beq.n	80093a4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009392:	699b      	ldr	r3, [r3, #24]
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	7c12      	ldrb	r2, [r2, #16]
 8009398:	f107 0108 	add.w	r1, r7, #8
 800939c:	4610      	mov	r0, r2
 800939e:	4798      	blx	r3
 80093a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093a2:	e00f      	b.n	80093c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093a4:	6839      	ldr	r1, [r7, #0]
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 fa30 	bl	800980c <USBD_CtlError>
            err++;
 80093ac:	7afb      	ldrb	r3, [r7, #11]
 80093ae:	3301      	adds	r3, #1
 80093b0:	72fb      	strb	r3, [r7, #11]
          break;
 80093b2:	e007      	b.n	80093c4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80093b4:	6839      	ldr	r1, [r7, #0]
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 fa28 	bl	800980c <USBD_CtlError>
          err++;
 80093bc:	7afb      	ldrb	r3, [r7, #11]
 80093be:	3301      	adds	r3, #1
 80093c0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80093c2:	bf00      	nop
      }
      break;
 80093c4:	e037      	b.n	8009436 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	7c1b      	ldrb	r3, [r3, #16]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d109      	bne.n	80093e2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093d6:	f107 0208 	add.w	r2, r7, #8
 80093da:	4610      	mov	r0, r2
 80093dc:	4798      	blx	r3
 80093de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093e0:	e029      	b.n	8009436 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80093e2:	6839      	ldr	r1, [r7, #0]
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 fa11 	bl	800980c <USBD_CtlError>
        err++;
 80093ea:	7afb      	ldrb	r3, [r7, #11]
 80093ec:	3301      	adds	r3, #1
 80093ee:	72fb      	strb	r3, [r7, #11]
      break;
 80093f0:	e021      	b.n	8009436 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	7c1b      	ldrb	r3, [r3, #16]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d10d      	bne.n	8009416 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009402:	f107 0208 	add.w	r2, r7, #8
 8009406:	4610      	mov	r0, r2
 8009408:	4798      	blx	r3
 800940a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	3301      	adds	r3, #1
 8009410:	2207      	movs	r2, #7
 8009412:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009414:	e00f      	b.n	8009436 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009416:	6839      	ldr	r1, [r7, #0]
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 f9f7 	bl	800980c <USBD_CtlError>
        err++;
 800941e:	7afb      	ldrb	r3, [r7, #11]
 8009420:	3301      	adds	r3, #1
 8009422:	72fb      	strb	r3, [r7, #11]
      break;
 8009424:	e007      	b.n	8009436 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009426:	6839      	ldr	r1, [r7, #0]
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 f9ef 	bl	800980c <USBD_CtlError>
      err++;
 800942e:	7afb      	ldrb	r3, [r7, #11]
 8009430:	3301      	adds	r3, #1
 8009432:	72fb      	strb	r3, [r7, #11]
      break;
 8009434:	bf00      	nop
  }

  if (err != 0U)
 8009436:	7afb      	ldrb	r3, [r7, #11]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d11e      	bne.n	800947a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	88db      	ldrh	r3, [r3, #6]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d016      	beq.n	8009472 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009444:	893b      	ldrh	r3, [r7, #8]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d00e      	beq.n	8009468 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	88da      	ldrh	r2, [r3, #6]
 800944e:	893b      	ldrh	r3, [r7, #8]
 8009450:	4293      	cmp	r3, r2
 8009452:	bf28      	it	cs
 8009454:	4613      	movcs	r3, r2
 8009456:	b29b      	uxth	r3, r3
 8009458:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800945a:	893b      	ldrh	r3, [r7, #8]
 800945c:	461a      	mov	r2, r3
 800945e:	68f9      	ldr	r1, [r7, #12]
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 fa44 	bl	80098ee <USBD_CtlSendData>
 8009466:	e009      	b.n	800947c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009468:	6839      	ldr	r1, [r7, #0]
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f9ce 	bl	800980c <USBD_CtlError>
 8009470:	e004      	b.n	800947c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 fa95 	bl	80099a2 <USBD_CtlSendStatus>
 8009478:	e000      	b.n	800947c <USBD_GetDescriptor+0x2cc>
    return;
 800947a:	bf00      	nop
  }
}
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop

08009484 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	889b      	ldrh	r3, [r3, #4]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d131      	bne.n	80094fa <USBD_SetAddress+0x76>
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	88db      	ldrh	r3, [r3, #6]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d12d      	bne.n	80094fa <USBD_SetAddress+0x76>
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	885b      	ldrh	r3, [r3, #2]
 80094a2:	2b7f      	cmp	r3, #127	; 0x7f
 80094a4:	d829      	bhi.n	80094fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	885b      	ldrh	r3, [r3, #2]
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	2b03      	cmp	r3, #3
 80094bc:	d104      	bne.n	80094c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80094be:	6839      	ldr	r1, [r7, #0]
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 f9a3 	bl	800980c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094c6:	e01d      	b.n	8009504 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	7bfa      	ldrb	r2, [r7, #15]
 80094cc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80094d0:	7bfb      	ldrb	r3, [r7, #15]
 80094d2:	4619      	mov	r1, r3
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 ff3d 	bl	800a354 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 fa61 	bl	80099a2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80094e0:	7bfb      	ldrb	r3, [r7, #15]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d004      	beq.n	80094f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2202      	movs	r2, #2
 80094ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ee:	e009      	b.n	8009504 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094f8:	e004      	b.n	8009504 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80094fa:	6839      	ldr	r1, [r7, #0]
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 f985 	bl	800980c <USBD_CtlError>
  }
}
 8009502:	bf00      	nop
 8009504:	bf00      	nop
 8009506:	3710      	adds	r7, #16
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009516:	2300      	movs	r3, #0
 8009518:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	885b      	ldrh	r3, [r3, #2]
 800951e:	b2da      	uxtb	r2, r3
 8009520:	4b4c      	ldr	r3, [pc, #304]	; (8009654 <USBD_SetConfig+0x148>)
 8009522:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009524:	4b4b      	ldr	r3, [pc, #300]	; (8009654 <USBD_SetConfig+0x148>)
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	2b01      	cmp	r3, #1
 800952a:	d905      	bls.n	8009538 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800952c:	6839      	ldr	r1, [r7, #0]
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 f96c 	bl	800980c <USBD_CtlError>
    return USBD_FAIL;
 8009534:	2303      	movs	r3, #3
 8009536:	e088      	b.n	800964a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800953e:	b2db      	uxtb	r3, r3
 8009540:	2b02      	cmp	r3, #2
 8009542:	d002      	beq.n	800954a <USBD_SetConfig+0x3e>
 8009544:	2b03      	cmp	r3, #3
 8009546:	d025      	beq.n	8009594 <USBD_SetConfig+0x88>
 8009548:	e071      	b.n	800962e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800954a:	4b42      	ldr	r3, [pc, #264]	; (8009654 <USBD_SetConfig+0x148>)
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d01c      	beq.n	800958c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009552:	4b40      	ldr	r3, [pc, #256]	; (8009654 <USBD_SetConfig+0x148>)
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	461a      	mov	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800955c:	4b3d      	ldr	r3, [pc, #244]	; (8009654 <USBD_SetConfig+0x148>)
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	4619      	mov	r1, r3
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f7ff f948 	bl	80087f8 <USBD_SetClassConfig>
 8009568:	4603      	mov	r3, r0
 800956a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800956c:	7bfb      	ldrb	r3, [r7, #15]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d004      	beq.n	800957c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009572:	6839      	ldr	r1, [r7, #0]
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 f949 	bl	800980c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800957a:	e065      	b.n	8009648 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 fa10 	bl	80099a2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2203      	movs	r2, #3
 8009586:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800958a:	e05d      	b.n	8009648 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 fa08 	bl	80099a2 <USBD_CtlSendStatus>
      break;
 8009592:	e059      	b.n	8009648 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009594:	4b2f      	ldr	r3, [pc, #188]	; (8009654 <USBD_SetConfig+0x148>)
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d112      	bne.n	80095c2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2202      	movs	r2, #2
 80095a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80095a4:	4b2b      	ldr	r3, [pc, #172]	; (8009654 <USBD_SetConfig+0x148>)
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	461a      	mov	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80095ae:	4b29      	ldr	r3, [pc, #164]	; (8009654 <USBD_SetConfig+0x148>)
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	4619      	mov	r1, r3
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f7ff f93b 	bl	8008830 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 f9f1 	bl	80099a2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80095c0:	e042      	b.n	8009648 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80095c2:	4b24      	ldr	r3, [pc, #144]	; (8009654 <USBD_SetConfig+0x148>)
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	461a      	mov	r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d02a      	beq.n	8009626 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	4619      	mov	r1, r3
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f7ff f929 	bl	8008830 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80095de:	4b1d      	ldr	r3, [pc, #116]	; (8009654 <USBD_SetConfig+0x148>)
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	461a      	mov	r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80095e8:	4b1a      	ldr	r3, [pc, #104]	; (8009654 <USBD_SetConfig+0x148>)
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	4619      	mov	r1, r3
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7ff f902 	bl	80087f8 <USBD_SetClassConfig>
 80095f4:	4603      	mov	r3, r0
 80095f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80095f8:	7bfb      	ldrb	r3, [r7, #15]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00f      	beq.n	800961e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80095fe:	6839      	ldr	r1, [r7, #0]
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 f903 	bl	800980c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	b2db      	uxtb	r3, r3
 800960c:	4619      	mov	r1, r3
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f7ff f90e 	bl	8008830 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2202      	movs	r2, #2
 8009618:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800961c:	e014      	b.n	8009648 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 f9bf 	bl	80099a2 <USBD_CtlSendStatus>
      break;
 8009624:	e010      	b.n	8009648 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 f9bb 	bl	80099a2 <USBD_CtlSendStatus>
      break;
 800962c:	e00c      	b.n	8009648 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800962e:	6839      	ldr	r1, [r7, #0]
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 f8eb 	bl	800980c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009636:	4b07      	ldr	r3, [pc, #28]	; (8009654 <USBD_SetConfig+0x148>)
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	4619      	mov	r1, r3
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f7ff f8f7 	bl	8008830 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009642:	2303      	movs	r3, #3
 8009644:	73fb      	strb	r3, [r7, #15]
      break;
 8009646:	bf00      	nop
  }

  return ret;
 8009648:	7bfb      	ldrb	r3, [r7, #15]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	2400026a 	.word	0x2400026a

08009658 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	88db      	ldrh	r3, [r3, #6]
 8009666:	2b01      	cmp	r3, #1
 8009668:	d004      	beq.n	8009674 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800966a:	6839      	ldr	r1, [r7, #0]
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 f8cd 	bl	800980c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009672:	e023      	b.n	80096bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800967a:	b2db      	uxtb	r3, r3
 800967c:	2b02      	cmp	r3, #2
 800967e:	dc02      	bgt.n	8009686 <USBD_GetConfig+0x2e>
 8009680:	2b00      	cmp	r3, #0
 8009682:	dc03      	bgt.n	800968c <USBD_GetConfig+0x34>
 8009684:	e015      	b.n	80096b2 <USBD_GetConfig+0x5a>
 8009686:	2b03      	cmp	r3, #3
 8009688:	d00b      	beq.n	80096a2 <USBD_GetConfig+0x4a>
 800968a:	e012      	b.n	80096b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	3308      	adds	r3, #8
 8009696:	2201      	movs	r2, #1
 8009698:	4619      	mov	r1, r3
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 f927 	bl	80098ee <USBD_CtlSendData>
        break;
 80096a0:	e00c      	b.n	80096bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	3304      	adds	r3, #4
 80096a6:	2201      	movs	r2, #1
 80096a8:	4619      	mov	r1, r3
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 f91f 	bl	80098ee <USBD_CtlSendData>
        break;
 80096b0:	e004      	b.n	80096bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80096b2:	6839      	ldr	r1, [r7, #0]
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 f8a9 	bl	800980c <USBD_CtlError>
        break;
 80096ba:	bf00      	nop
}
 80096bc:	bf00      	nop
 80096be:	3708      	adds	r7, #8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	3b01      	subs	r3, #1
 80096d8:	2b02      	cmp	r3, #2
 80096da:	d81e      	bhi.n	800971a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	88db      	ldrh	r3, [r3, #6]
 80096e0:	2b02      	cmp	r3, #2
 80096e2:	d004      	beq.n	80096ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80096e4:	6839      	ldr	r1, [r7, #0]
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 f890 	bl	800980c <USBD_CtlError>
        break;
 80096ec:	e01a      	b.n	8009724 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2201      	movs	r2, #1
 80096f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d005      	beq.n	800970a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	f043 0202 	orr.w	r2, r3, #2
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	330c      	adds	r3, #12
 800970e:	2202      	movs	r2, #2
 8009710:	4619      	mov	r1, r3
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 f8eb 	bl	80098ee <USBD_CtlSendData>
      break;
 8009718:	e004      	b.n	8009724 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800971a:	6839      	ldr	r1, [r7, #0]
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 f875 	bl	800980c <USBD_CtlError>
      break;
 8009722:	bf00      	nop
  }
}
 8009724:	bf00      	nop
 8009726:	3708      	adds	r7, #8
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	885b      	ldrh	r3, [r3, #2]
 800973a:	2b01      	cmp	r3, #1
 800973c:	d106      	bne.n	800974c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2201      	movs	r2, #1
 8009742:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 f92b 	bl	80099a2 <USBD_CtlSendStatus>
  }
}
 800974c:	bf00      	nop
 800974e:	3708      	adds	r7, #8
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009764:	b2db      	uxtb	r3, r3
 8009766:	3b01      	subs	r3, #1
 8009768:	2b02      	cmp	r3, #2
 800976a:	d80b      	bhi.n	8009784 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	885b      	ldrh	r3, [r3, #2]
 8009770:	2b01      	cmp	r3, #1
 8009772:	d10c      	bne.n	800978e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 f910 	bl	80099a2 <USBD_CtlSendStatus>
      }
      break;
 8009782:	e004      	b.n	800978e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009784:	6839      	ldr	r1, [r7, #0]
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 f840 	bl	800980c <USBD_CtlError>
      break;
 800978c:	e000      	b.n	8009790 <USBD_ClrFeature+0x3c>
      break;
 800978e:	bf00      	nop
  }
}
 8009790:	bf00      	nop
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	781a      	ldrb	r2, [r3, #0]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	3301      	adds	r3, #1
 80097b2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	781a      	ldrb	r2, [r3, #0]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	3301      	adds	r3, #1
 80097c0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f7ff fabb 	bl	8008d3e <SWAPBYTE>
 80097c8:	4603      	mov	r3, r0
 80097ca:	461a      	mov	r2, r3
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	3301      	adds	r3, #1
 80097d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	3301      	adds	r3, #1
 80097da:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80097dc:	68f8      	ldr	r0, [r7, #12]
 80097de:	f7ff faae 	bl	8008d3e <SWAPBYTE>
 80097e2:	4603      	mov	r3, r0
 80097e4:	461a      	mov	r2, r3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	3301      	adds	r3, #1
 80097ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	3301      	adds	r3, #1
 80097f4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80097f6:	68f8      	ldr	r0, [r7, #12]
 80097f8:	f7ff faa1 	bl	8008d3e <SWAPBYTE>
 80097fc:	4603      	mov	r3, r0
 80097fe:	461a      	mov	r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	80da      	strh	r2, [r3, #6]
}
 8009804:	bf00      	nop
 8009806:	3710      	adds	r7, #16
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009816:	2180      	movs	r1, #128	; 0x80
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 fd31 	bl	800a280 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800981e:	2100      	movs	r1, #0
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 fd2d 	bl	800a280 <USBD_LL_StallEP>
}
 8009826:	bf00      	nop
 8009828:	3708      	adds	r7, #8
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}

0800982e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800982e:	b580      	push	{r7, lr}
 8009830:	b086      	sub	sp, #24
 8009832:	af00      	add	r7, sp, #0
 8009834:	60f8      	str	r0, [r7, #12]
 8009836:	60b9      	str	r1, [r7, #8]
 8009838:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800983a:	2300      	movs	r3, #0
 800983c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d036      	beq.n	80098b2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009848:	6938      	ldr	r0, [r7, #16]
 800984a:	f000 f836 	bl	80098ba <USBD_GetLen>
 800984e:	4603      	mov	r3, r0
 8009850:	3301      	adds	r3, #1
 8009852:	b29b      	uxth	r3, r3
 8009854:	005b      	lsls	r3, r3, #1
 8009856:	b29a      	uxth	r2, r3
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800985c:	7dfb      	ldrb	r3, [r7, #23]
 800985e:	68ba      	ldr	r2, [r7, #8]
 8009860:	4413      	add	r3, r2
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	7812      	ldrb	r2, [r2, #0]
 8009866:	701a      	strb	r2, [r3, #0]
  idx++;
 8009868:	7dfb      	ldrb	r3, [r7, #23]
 800986a:	3301      	adds	r3, #1
 800986c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800986e:	7dfb      	ldrb	r3, [r7, #23]
 8009870:	68ba      	ldr	r2, [r7, #8]
 8009872:	4413      	add	r3, r2
 8009874:	2203      	movs	r2, #3
 8009876:	701a      	strb	r2, [r3, #0]
  idx++;
 8009878:	7dfb      	ldrb	r3, [r7, #23]
 800987a:	3301      	adds	r3, #1
 800987c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800987e:	e013      	b.n	80098a8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009880:	7dfb      	ldrb	r3, [r7, #23]
 8009882:	68ba      	ldr	r2, [r7, #8]
 8009884:	4413      	add	r3, r2
 8009886:	693a      	ldr	r2, [r7, #16]
 8009888:	7812      	ldrb	r2, [r2, #0]
 800988a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	3301      	adds	r3, #1
 8009890:	613b      	str	r3, [r7, #16]
    idx++;
 8009892:	7dfb      	ldrb	r3, [r7, #23]
 8009894:	3301      	adds	r3, #1
 8009896:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009898:	7dfb      	ldrb	r3, [r7, #23]
 800989a:	68ba      	ldr	r2, [r7, #8]
 800989c:	4413      	add	r3, r2
 800989e:	2200      	movs	r2, #0
 80098a0:	701a      	strb	r2, [r3, #0]
    idx++;
 80098a2:	7dfb      	ldrb	r3, [r7, #23]
 80098a4:	3301      	adds	r3, #1
 80098a6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d1e7      	bne.n	8009880 <USBD_GetString+0x52>
 80098b0:	e000      	b.n	80098b4 <USBD_GetString+0x86>
    return;
 80098b2:	bf00      	nop
  }
}
 80098b4:	3718      	adds	r7, #24
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80098ba:	b480      	push	{r7}
 80098bc:	b085      	sub	sp, #20
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80098c2:	2300      	movs	r3, #0
 80098c4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80098ca:	e005      	b.n	80098d8 <USBD_GetLen+0x1e>
  {
    len++;
 80098cc:	7bfb      	ldrb	r3, [r7, #15]
 80098ce:	3301      	adds	r3, #1
 80098d0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	3301      	adds	r3, #1
 80098d6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d1f5      	bne.n	80098cc <USBD_GetLen+0x12>
  }

  return len;
 80098e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3714      	adds	r7, #20
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr

080098ee <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b084      	sub	sp, #16
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	60f8      	str	r0, [r7, #12]
 80098f6:	60b9      	str	r1, [r7, #8]
 80098f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2202      	movs	r2, #2
 80098fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	68ba      	ldr	r2, [r7, #8]
 8009912:	2100      	movs	r1, #0
 8009914:	68f8      	ldr	r0, [r7, #12]
 8009916:	f000 fd3c 	bl	800a392 <USBD_LL_Transmit>

  return USBD_OK;
 800991a:	2300      	movs	r3, #0
}
 800991c:	4618      	mov	r0, r3
 800991e:	3710      	adds	r7, #16
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	68ba      	ldr	r2, [r7, #8]
 8009934:	2100      	movs	r1, #0
 8009936:	68f8      	ldr	r0, [r7, #12]
 8009938:	f000 fd2b 	bl	800a392 <USBD_LL_Transmit>

  return USBD_OK;
 800993c:	2300      	movs	r3, #0
}
 800993e:	4618      	mov	r0, r3
 8009940:	3710      	adds	r7, #16
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b084      	sub	sp, #16
 800994a:	af00      	add	r7, sp, #0
 800994c:	60f8      	str	r0, [r7, #12]
 800994e:	60b9      	str	r1, [r7, #8]
 8009950:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2203      	movs	r2, #3
 8009956:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	68ba      	ldr	r2, [r7, #8]
 800996e:	2100      	movs	r1, #0
 8009970:	68f8      	ldr	r0, [r7, #12]
 8009972:	f000 fd2f 	bl	800a3d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009976:	2300      	movs	r3, #0
}
 8009978:	4618      	mov	r0, r3
 800997a:	3710      	adds	r7, #16
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	68ba      	ldr	r2, [r7, #8]
 8009990:	2100      	movs	r1, #0
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f000 fd1e 	bl	800a3d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009998:	2300      	movs	r3, #0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b082      	sub	sp, #8
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2204      	movs	r2, #4
 80099ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80099b2:	2300      	movs	r3, #0
 80099b4:	2200      	movs	r2, #0
 80099b6:	2100      	movs	r1, #0
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 fcea 	bl	800a392 <USBD_LL_Transmit>

  return USBD_OK;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3708      	adds	r7, #8
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2205      	movs	r2, #5
 80099d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80099d8:	2300      	movs	r3, #0
 80099da:	2200      	movs	r2, #0
 80099dc:	2100      	movs	r1, #0
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 fcf8 	bl	800a3d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3708      	adds	r7, #8
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
	...

080099f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80099f4:	2201      	movs	r2, #1
 80099f6:	4913      	ldr	r1, [pc, #76]	; (8009a44 <MX_USB_DEVICE_Init+0x54>)
 80099f8:	4813      	ldr	r0, [pc, #76]	; (8009a48 <MX_USB_DEVICE_Init+0x58>)
 80099fa:	f7fe fe8f 	bl	800871c <USBD_Init>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d001      	beq.n	8009a08 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009a04:	f7f7 f80c 	bl	8000a20 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8009a08:	4910      	ldr	r1, [pc, #64]	; (8009a4c <MX_USB_DEVICE_Init+0x5c>)
 8009a0a:	480f      	ldr	r0, [pc, #60]	; (8009a48 <MX_USB_DEVICE_Init+0x58>)
 8009a0c:	f7fe feb6 	bl	800877c <USBD_RegisterClass>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d001      	beq.n	8009a1a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009a16:	f7f7 f803 	bl	8000a20 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8009a1a:	490d      	ldr	r1, [pc, #52]	; (8009a50 <MX_USB_DEVICE_Init+0x60>)
 8009a1c:	480a      	ldr	r0, [pc, #40]	; (8009a48 <MX_USB_DEVICE_Init+0x58>)
 8009a1e:	f7fe fdd7 	bl	80085d0 <USBD_CDC_RegisterInterface>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d001      	beq.n	8009a2c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009a28:	f7f6 fffa 	bl	8000a20 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8009a2c:	4806      	ldr	r0, [pc, #24]	; (8009a48 <MX_USB_DEVICE_Init+0x58>)
 8009a2e:	f7fe fecc 	bl	80087ca <USBD_Start>
 8009a32:	4603      	mov	r3, r0
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d001      	beq.n	8009a3c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009a38:	f7f6 fff2 	bl	8000a20 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8009a3c:	f7f9 fbd4 	bl	80031e8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009a40:	bf00      	nop
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	24000138 	.word	0x24000138
 8009a48:	2400061c 	.word	0x2400061c
 8009a4c:	24000020 	.word	0x24000020
 8009a50:	24000124 	.word	0x24000124

08009a54 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8009a58:	2200      	movs	r2, #0
 8009a5a:	4905      	ldr	r1, [pc, #20]	; (8009a70 <CDC_Init_HS+0x1c>)
 8009a5c:	4805      	ldr	r0, [pc, #20]	; (8009a74 <CDC_Init_HS+0x20>)
 8009a5e:	f7fe fdcc 	bl	80085fa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8009a62:	4905      	ldr	r1, [pc, #20]	; (8009a78 <CDC_Init_HS+0x24>)
 8009a64:	4803      	ldr	r0, [pc, #12]	; (8009a74 <CDC_Init_HS+0x20>)
 8009a66:	f7fe fde6 	bl	8008636 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009a6a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	240010ec 	.word	0x240010ec
 8009a74:	2400061c 	.word	0x2400061c
 8009a78:	240008ec 	.word	0x240008ec

08009a7c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8009a80:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b083      	sub	sp, #12
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	4603      	mov	r3, r0
 8009a94:	6039      	str	r1, [r7, #0]
 8009a96:	71fb      	strb	r3, [r7, #7]
 8009a98:	4613      	mov	r3, r2
 8009a9a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8009a9c:	79fb      	ldrb	r3, [r7, #7]
 8009a9e:	2b23      	cmp	r3, #35	; 0x23
 8009aa0:	d84a      	bhi.n	8009b38 <CDC_Control_HS+0xac>
 8009aa2:	a201      	add	r2, pc, #4	; (adr r2, 8009aa8 <CDC_Control_HS+0x1c>)
 8009aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa8:	08009b39 	.word	0x08009b39
 8009aac:	08009b39 	.word	0x08009b39
 8009ab0:	08009b39 	.word	0x08009b39
 8009ab4:	08009b39 	.word	0x08009b39
 8009ab8:	08009b39 	.word	0x08009b39
 8009abc:	08009b39 	.word	0x08009b39
 8009ac0:	08009b39 	.word	0x08009b39
 8009ac4:	08009b39 	.word	0x08009b39
 8009ac8:	08009b39 	.word	0x08009b39
 8009acc:	08009b39 	.word	0x08009b39
 8009ad0:	08009b39 	.word	0x08009b39
 8009ad4:	08009b39 	.word	0x08009b39
 8009ad8:	08009b39 	.word	0x08009b39
 8009adc:	08009b39 	.word	0x08009b39
 8009ae0:	08009b39 	.word	0x08009b39
 8009ae4:	08009b39 	.word	0x08009b39
 8009ae8:	08009b39 	.word	0x08009b39
 8009aec:	08009b39 	.word	0x08009b39
 8009af0:	08009b39 	.word	0x08009b39
 8009af4:	08009b39 	.word	0x08009b39
 8009af8:	08009b39 	.word	0x08009b39
 8009afc:	08009b39 	.word	0x08009b39
 8009b00:	08009b39 	.word	0x08009b39
 8009b04:	08009b39 	.word	0x08009b39
 8009b08:	08009b39 	.word	0x08009b39
 8009b0c:	08009b39 	.word	0x08009b39
 8009b10:	08009b39 	.word	0x08009b39
 8009b14:	08009b39 	.word	0x08009b39
 8009b18:	08009b39 	.word	0x08009b39
 8009b1c:	08009b39 	.word	0x08009b39
 8009b20:	08009b39 	.word	0x08009b39
 8009b24:	08009b39 	.word	0x08009b39
 8009b28:	08009b39 	.word	0x08009b39
 8009b2c:	08009b39 	.word	0x08009b39
 8009b30:	08009b39 	.word	0x08009b39
 8009b34:	08009b39 	.word	0x08009b39
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009b38:	bf00      	nop
  }

  return (USBD_OK);
 8009b3a:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	370c      	adds	r7, #12
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr

08009b48 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8009b52:	6879      	ldr	r1, [r7, #4]
 8009b54:	480f      	ldr	r0, [pc, #60]	; (8009b94 <CDC_Receive_HS+0x4c>)
 8009b56:	f7fe fd6e 	bl	8008636 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8009b5a:	480e      	ldr	r0, [pc, #56]	; (8009b94 <CDC_Receive_HS+0x4c>)
 8009b5c:	f7fe fdb4 	bl	80086c8 <USBD_CDC_ReceivePacket>

  uint8_t len = (uint8_t) *Len;
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	73fb      	strb	r3, [r7, #15]
  memset (buffer, '\0', 64);
 8009b66:	2240      	movs	r2, #64	; 0x40
 8009b68:	2100      	movs	r1, #0
 8009b6a:	480b      	ldr	r0, [pc, #44]	; (8009b98 <CDC_Receive_HS+0x50>)
 8009b6c:	f000 fcdc 	bl	800a528 <memset>
  memcpy (buffer, Buf, len);
 8009b70:	7bfb      	ldrb	r3, [r7, #15]
 8009b72:	461a      	mov	r2, r3
 8009b74:	6879      	ldr	r1, [r7, #4]
 8009b76:	4808      	ldr	r0, [pc, #32]	; (8009b98 <CDC_Receive_HS+0x50>)
 8009b78:	f000 fcc8 	bl	800a50c <memcpy>
  memset (Buf, '\0', len);
 8009b7c:	7bfb      	ldrb	r3, [r7, #15]
 8009b7e:	461a      	mov	r2, r3
 8009b80:	2100      	movs	r1, #0
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 fcd0 	bl	800a528 <memset>
  return (USBD_OK);
 8009b88:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3710      	adds	r7, #16
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	2400061c 	.word	0x2400061c
 8009b98:	2400051c 	.word	0x2400051c

08009b9c <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8009bac:	4b0d      	ldr	r3, [pc, #52]	; (8009be4 <CDC_Transmit_HS+0x48>)
 8009bae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009bb2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d001      	beq.n	8009bc2 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e00b      	b.n	8009bda <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8009bc2:	887b      	ldrh	r3, [r7, #2]
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	6879      	ldr	r1, [r7, #4]
 8009bc8:	4806      	ldr	r0, [pc, #24]	; (8009be4 <CDC_Transmit_HS+0x48>)
 8009bca:	f7fe fd16 	bl	80085fa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8009bce:	4805      	ldr	r0, [pc, #20]	; (8009be4 <CDC_Transmit_HS+0x48>)
 8009bd0:	f7fe fd4a 	bl	8008668 <USBD_CDC_TransmitPacket>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8009bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3710      	adds	r7, #16
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
 8009be2:	bf00      	nop
 8009be4:	2400061c 	.word	0x2400061c

08009be8 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b087      	sub	sp, #28
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8009bfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	371c      	adds	r7, #28
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr
	...

08009c0c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	4603      	mov	r3, r0
 8009c14:	6039      	str	r1, [r7, #0]
 8009c16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	2212      	movs	r2, #18
 8009c1c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8009c1e:	4b03      	ldr	r3, [pc, #12]	; (8009c2c <USBD_HS_DeviceDescriptor+0x20>)
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	370c      	adds	r7, #12
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr
 8009c2c:	24000154 	.word	0x24000154

08009c30 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	4603      	mov	r3, r0
 8009c38:	6039      	str	r1, [r7, #0]
 8009c3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	2204      	movs	r2, #4
 8009c40:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009c42:	4b03      	ldr	r3, [pc, #12]	; (8009c50 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	370c      	adds	r7, #12
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr
 8009c50:	24000168 	.word	0x24000168

08009c54 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	6039      	str	r1, [r7, #0]
 8009c5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c60:	79fb      	ldrb	r3, [r7, #7]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d105      	bne.n	8009c72 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009c66:	683a      	ldr	r2, [r7, #0]
 8009c68:	4907      	ldr	r1, [pc, #28]	; (8009c88 <USBD_HS_ProductStrDescriptor+0x34>)
 8009c6a:	4808      	ldr	r0, [pc, #32]	; (8009c8c <USBD_HS_ProductStrDescriptor+0x38>)
 8009c6c:	f7ff fddf 	bl	800982e <USBD_GetString>
 8009c70:	e004      	b.n	8009c7c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009c72:	683a      	ldr	r2, [r7, #0]
 8009c74:	4904      	ldr	r1, [pc, #16]	; (8009c88 <USBD_HS_ProductStrDescriptor+0x34>)
 8009c76:	4805      	ldr	r0, [pc, #20]	; (8009c8c <USBD_HS_ProductStrDescriptor+0x38>)
 8009c78:	f7ff fdd9 	bl	800982e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c7c:	4b02      	ldr	r3, [pc, #8]	; (8009c88 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3708      	adds	r7, #8
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	240018ec 	.word	0x240018ec
 8009c8c:	0800a560 	.word	0x0800a560

08009c90 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	4603      	mov	r3, r0
 8009c98:	6039      	str	r1, [r7, #0]
 8009c9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009c9c:	683a      	ldr	r2, [r7, #0]
 8009c9e:	4904      	ldr	r1, [pc, #16]	; (8009cb0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8009ca0:	4804      	ldr	r0, [pc, #16]	; (8009cb4 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8009ca2:	f7ff fdc4 	bl	800982e <USBD_GetString>
  return USBD_StrDesc;
 8009ca6:	4b02      	ldr	r3, [pc, #8]	; (8009cb0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3708      	adds	r7, #8
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	240018ec 	.word	0x240018ec
 8009cb4:	0800a578 	.word	0x0800a578

08009cb8 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	6039      	str	r1, [r7, #0]
 8009cc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	221a      	movs	r2, #26
 8009cc8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009cca:	f000 f843 	bl	8009d54 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009cce:	4b02      	ldr	r3, [pc, #8]	; (8009cd8 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3708      	adds	r7, #8
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}
 8009cd8:	2400016c 	.word	0x2400016c

08009cdc <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	6039      	str	r1, [r7, #0]
 8009ce6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009ce8:	79fb      	ldrb	r3, [r7, #7]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d105      	bne.n	8009cfa <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009cee:	683a      	ldr	r2, [r7, #0]
 8009cf0:	4907      	ldr	r1, [pc, #28]	; (8009d10 <USBD_HS_ConfigStrDescriptor+0x34>)
 8009cf2:	4808      	ldr	r0, [pc, #32]	; (8009d14 <USBD_HS_ConfigStrDescriptor+0x38>)
 8009cf4:	f7ff fd9b 	bl	800982e <USBD_GetString>
 8009cf8:	e004      	b.n	8009d04 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009cfa:	683a      	ldr	r2, [r7, #0]
 8009cfc:	4904      	ldr	r1, [pc, #16]	; (8009d10 <USBD_HS_ConfigStrDescriptor+0x34>)
 8009cfe:	4805      	ldr	r0, [pc, #20]	; (8009d14 <USBD_HS_ConfigStrDescriptor+0x38>)
 8009d00:	f7ff fd95 	bl	800982e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d04:	4b02      	ldr	r3, [pc, #8]	; (8009d10 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3708      	adds	r7, #8
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	240018ec 	.word	0x240018ec
 8009d14:	0800a58c 	.word	0x0800a58c

08009d18 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	4603      	mov	r3, r0
 8009d20:	6039      	str	r1, [r7, #0]
 8009d22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d24:	79fb      	ldrb	r3, [r7, #7]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d105      	bne.n	8009d36 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8009d2a:	683a      	ldr	r2, [r7, #0]
 8009d2c:	4907      	ldr	r1, [pc, #28]	; (8009d4c <USBD_HS_InterfaceStrDescriptor+0x34>)
 8009d2e:	4808      	ldr	r0, [pc, #32]	; (8009d50 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8009d30:	f7ff fd7d 	bl	800982e <USBD_GetString>
 8009d34:	e004      	b.n	8009d40 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8009d36:	683a      	ldr	r2, [r7, #0]
 8009d38:	4904      	ldr	r1, [pc, #16]	; (8009d4c <USBD_HS_InterfaceStrDescriptor+0x34>)
 8009d3a:	4805      	ldr	r0, [pc, #20]	; (8009d50 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8009d3c:	f7ff fd77 	bl	800982e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d40:	4b02      	ldr	r3, [pc, #8]	; (8009d4c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3708      	adds	r7, #8
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	240018ec 	.word	0x240018ec
 8009d50:	0800a598 	.word	0x0800a598

08009d54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009d5a:	4b0f      	ldr	r3, [pc, #60]	; (8009d98 <Get_SerialNum+0x44>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009d60:	4b0e      	ldr	r3, [pc, #56]	; (8009d9c <Get_SerialNum+0x48>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009d66:	4b0e      	ldr	r3, [pc, #56]	; (8009da0 <Get_SerialNum+0x4c>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4413      	add	r3, r2
 8009d72:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d009      	beq.n	8009d8e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009d7a:	2208      	movs	r2, #8
 8009d7c:	4909      	ldr	r1, [pc, #36]	; (8009da4 <Get_SerialNum+0x50>)
 8009d7e:	68f8      	ldr	r0, [r7, #12]
 8009d80:	f000 f814 	bl	8009dac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009d84:	2204      	movs	r2, #4
 8009d86:	4908      	ldr	r1, [pc, #32]	; (8009da8 <Get_SerialNum+0x54>)
 8009d88:	68b8      	ldr	r0, [r7, #8]
 8009d8a:	f000 f80f 	bl	8009dac <IntToUnicode>
  }
}
 8009d8e:	bf00      	nop
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	1ff1e800 	.word	0x1ff1e800
 8009d9c:	1ff1e804 	.word	0x1ff1e804
 8009da0:	1ff1e808 	.word	0x1ff1e808
 8009da4:	2400016e 	.word	0x2400016e
 8009da8:	2400017e 	.word	0x2400017e

08009dac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b087      	sub	sp, #28
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	4613      	mov	r3, r2
 8009db8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	75fb      	strb	r3, [r7, #23]
 8009dc2:	e027      	b.n	8009e14 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	0f1b      	lsrs	r3, r3, #28
 8009dc8:	2b09      	cmp	r3, #9
 8009dca:	d80b      	bhi.n	8009de4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	0f1b      	lsrs	r3, r3, #28
 8009dd0:	b2da      	uxtb	r2, r3
 8009dd2:	7dfb      	ldrb	r3, [r7, #23]
 8009dd4:	005b      	lsls	r3, r3, #1
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	440b      	add	r3, r1
 8009ddc:	3230      	adds	r2, #48	; 0x30
 8009dde:	b2d2      	uxtb	r2, r2
 8009de0:	701a      	strb	r2, [r3, #0]
 8009de2:	e00a      	b.n	8009dfa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	0f1b      	lsrs	r3, r3, #28
 8009de8:	b2da      	uxtb	r2, r3
 8009dea:	7dfb      	ldrb	r3, [r7, #23]
 8009dec:	005b      	lsls	r3, r3, #1
 8009dee:	4619      	mov	r1, r3
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	440b      	add	r3, r1
 8009df4:	3237      	adds	r2, #55	; 0x37
 8009df6:	b2d2      	uxtb	r2, r2
 8009df8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	011b      	lsls	r3, r3, #4
 8009dfe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009e00:	7dfb      	ldrb	r3, [r7, #23]
 8009e02:	005b      	lsls	r3, r3, #1
 8009e04:	3301      	adds	r3, #1
 8009e06:	68ba      	ldr	r2, [r7, #8]
 8009e08:	4413      	add	r3, r2
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009e0e:	7dfb      	ldrb	r3, [r7, #23]
 8009e10:	3301      	adds	r3, #1
 8009e12:	75fb      	strb	r3, [r7, #23]
 8009e14:	7dfa      	ldrb	r2, [r7, #23]
 8009e16:	79fb      	ldrb	r3, [r7, #7]
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d3d3      	bcc.n	8009dc4 <IntToUnicode+0x18>
  }
}
 8009e1c:	bf00      	nop
 8009e1e:	bf00      	nop
 8009e20:	371c      	adds	r7, #28
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr
	...

08009e2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b0b6      	sub	sp, #216	; 0xd8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e34:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009e38:	2200      	movs	r2, #0
 8009e3a:	601a      	str	r2, [r3, #0]
 8009e3c:	605a      	str	r2, [r3, #4]
 8009e3e:	609a      	str	r2, [r3, #8]
 8009e40:	60da      	str	r2, [r3, #12]
 8009e42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009e44:	f107 0310 	add.w	r3, r7, #16
 8009e48:	22b4      	movs	r2, #180	; 0xb4
 8009e4a:	2100      	movs	r1, #0
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f000 fb6b 	bl	800a528 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a33      	ldr	r2, [pc, #204]	; (8009f24 <HAL_PCD_MspInit+0xf8>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d15e      	bne.n	8009f1a <HAL_PCD_MspInit+0xee>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009e5c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009e60:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009e62:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8009e66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009e6a:	f107 0310 	add.w	r3, r7, #16
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7fa f902 	bl	8004078 <HAL_RCCEx_PeriphCLKConfig>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d001      	beq.n	8009e7e <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8009e7a:	f7f6 fdd1 	bl	8000a20 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8009e7e:	f7f9 f9b3 	bl	80031e8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e82:	4b29      	ldr	r3, [pc, #164]	; (8009f28 <HAL_PCD_MspInit+0xfc>)
 8009e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009e88:	4a27      	ldr	r2, [pc, #156]	; (8009f28 <HAL_PCD_MspInit+0xfc>)
 8009e8a:	f043 0301 	orr.w	r3, r3, #1
 8009e8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009e92:	4b25      	ldr	r3, [pc, #148]	; (8009f28 <HAL_PCD_MspInit+0xfc>)
 8009e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009e98:	f003 0301 	and.w	r3, r3, #1
 8009e9c:	60fb      	str	r3, [r7, #12]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    PA10     ------> USB_OTG_HS_ID
    */
    GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8009ea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ea4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8009eb4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009eb8:	4619      	mov	r1, r3
 8009eba:	481c      	ldr	r0, [pc, #112]	; (8009f2c <HAL_PCD_MspInit+0x100>)
 8009ebc:	f7f7 fdca 	bl	8001a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8009ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ec4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ec8:	2302      	movs	r3, #2
 8009eca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8009eda:	230a      	movs	r3, #10
 8009edc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8009ee0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	4811      	ldr	r0, [pc, #68]	; (8009f2c <HAL_PCD_MspInit+0x100>)
 8009ee8:	f7f7 fdb4 	bl	8001a54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8009eec:	4b0e      	ldr	r3, [pc, #56]	; (8009f28 <HAL_PCD_MspInit+0xfc>)
 8009eee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009ef2:	4a0d      	ldr	r2, [pc, #52]	; (8009f28 <HAL_PCD_MspInit+0xfc>)
 8009ef4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009ef8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009efc:	4b0a      	ldr	r3, [pc, #40]	; (8009f28 <HAL_PCD_MspInit+0xfc>)
 8009efe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f06:	60bb      	str	r3, [r7, #8]
 8009f08:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	2100      	movs	r1, #0
 8009f0e:	204d      	movs	r0, #77	; 0x4d
 8009f10:	f7f7 f955 	bl	80011be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8009f14:	204d      	movs	r0, #77	; 0x4d
 8009f16:	f7f7 f96c 	bl	80011f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8009f1a:	bf00      	nop
 8009f1c:	37d8      	adds	r7, #216	; 0xd8
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop
 8009f24:	40040000 	.word	0x40040000
 8009f28:	58024400 	.word	0x58024400
 8009f2c:	58020000 	.word	0x58020000

08009f30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009f44:	4619      	mov	r1, r3
 8009f46:	4610      	mov	r0, r2
 8009f48:	f7fe fc8a 	bl	8008860 <USBD_LL_SetupStage>
}
 8009f4c:	bf00      	nop
 8009f4e:	3708      	adds	r7, #8
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009f66:	78fa      	ldrb	r2, [r7, #3]
 8009f68:	6879      	ldr	r1, [r7, #4]
 8009f6a:	4613      	mov	r3, r2
 8009f6c:	00db      	lsls	r3, r3, #3
 8009f6e:	1a9b      	subs	r3, r3, r2
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	440b      	add	r3, r1
 8009f74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	78fb      	ldrb	r3, [r7, #3]
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	f7fe fcc4 	bl	800890a <USBD_LL_DataOutStage>
}
 8009f82:	bf00      	nop
 8009f84:	3708      	adds	r7, #8
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b082      	sub	sp, #8
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
 8009f92:	460b      	mov	r3, r1
 8009f94:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009f9c:	78fa      	ldrb	r2, [r7, #3]
 8009f9e:	6879      	ldr	r1, [r7, #4]
 8009fa0:	4613      	mov	r3, r2
 8009fa2:	00db      	lsls	r3, r3, #3
 8009fa4:	1a9b      	subs	r3, r3, r2
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	440b      	add	r3, r1
 8009faa:	3348      	adds	r3, #72	; 0x48
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	78fb      	ldrb	r3, [r7, #3]
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	f7fe fd0d 	bl	80089d0 <USBD_LL_DataInStage>
}
 8009fb6:	bf00      	nop
 8009fb8:	3708      	adds	r7, #8
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b082      	sub	sp, #8
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f7fe fe21 	bl	8008c14 <USBD_LL_SOF>
}
 8009fd2:	bf00      	nop
 8009fd4:	3708      	adds	r7, #8
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b084      	sub	sp, #16
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	68db      	ldr	r3, [r3, #12]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d102      	bne.n	8009ff4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	73fb      	strb	r3, [r7, #15]
 8009ff2:	e008      	b.n	800a006 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	2b02      	cmp	r3, #2
 8009ffa:	d102      	bne.n	800a002 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	73fb      	strb	r3, [r7, #15]
 800a000:	e001      	b.n	800a006 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a002:	f7f6 fd0d 	bl	8000a20 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a00c:	7bfa      	ldrb	r2, [r7, #15]
 800a00e:	4611      	mov	r1, r2
 800a010:	4618      	mov	r0, r3
 800a012:	f7fe fdc1 	bl	8008b98 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a01c:	4618      	mov	r0, r3
 800a01e:	f7fe fd6d 	bl	8008afc <USBD_LL_Reset>
}
 800a022:	bf00      	nop
 800a024:	3710      	adds	r7, #16
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
	...

0800a02c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7fe fdbc 	bl	8008bb8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	687a      	ldr	r2, [r7, #4]
 800a04c:	6812      	ldr	r2, [r2, #0]
 800a04e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a052:	f043 0301 	orr.w	r3, r3, #1
 800a056:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6a1b      	ldr	r3, [r3, #32]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d005      	beq.n	800a06c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a060:	4b04      	ldr	r3, [pc, #16]	; (800a074 <HAL_PCD_SuspendCallback+0x48>)
 800a062:	691b      	ldr	r3, [r3, #16]
 800a064:	4a03      	ldr	r2, [pc, #12]	; (800a074 <HAL_PCD_SuspendCallback+0x48>)
 800a066:	f043 0306 	orr.w	r3, r3, #6
 800a06a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a06c:	bf00      	nop
 800a06e:	3708      	adds	r7, #8
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}
 800a074:	e000ed00 	.word	0xe000ed00

0800a078 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a086:	4618      	mov	r0, r3
 800a088:	f7fe fdac 	bl	8008be4 <USBD_LL_Resume>
}
 800a08c:	bf00      	nop
 800a08e:	3708      	adds	r7, #8
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	460b      	mov	r3, r1
 800a09e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a0a6:	78fa      	ldrb	r2, [r7, #3]
 800a0a8:	4611      	mov	r1, r2
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7fe fdfa 	bl	8008ca4 <USBD_LL_IsoOUTIncomplete>
}
 800a0b0:	bf00      	nop
 800a0b2:	3708      	adds	r7, #8
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a0ca:	78fa      	ldrb	r2, [r7, #3]
 800a0cc:	4611      	mov	r1, r2
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7fe fdc2 	bl	8008c58 <USBD_LL_IsoINIncomplete>
}
 800a0d4:	bf00      	nop
 800a0d6:	3708      	adds	r7, #8
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7fe fe00 	bl	8008cf0 <USBD_LL_DevConnected>
}
 800a0f0:	bf00      	nop
 800a0f2:	3708      	adds	r7, #8
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a106:	4618      	mov	r0, r3
 800a108:	f7fe fdfd 	bl	8008d06 <USBD_LL_DevDisconnected>
}
 800a10c:	bf00      	nop
 800a10e:	3708      	adds	r7, #8
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	2b01      	cmp	r3, #1
 800a122:	d143      	bne.n	800a1ac <USBD_LL_Init+0x98>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800a124:	4a24      	ldr	r2, [pc, #144]	; (800a1b8 <USBD_LL_Init+0xa4>)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_HS;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4a22      	ldr	r2, [pc, #136]	; (800a1b8 <USBD_LL_Init+0xa4>)
 800a130:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800a134:	4b20      	ldr	r3, [pc, #128]	; (800a1b8 <USBD_LL_Init+0xa4>)
 800a136:	4a21      	ldr	r2, [pc, #132]	; (800a1bc <USBD_LL_Init+0xa8>)
 800a138:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800a13a:	4b1f      	ldr	r3, [pc, #124]	; (800a1b8 <USBD_LL_Init+0xa4>)
 800a13c:	2209      	movs	r2, #9
 800a13e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800a140:	4b1d      	ldr	r3, [pc, #116]	; (800a1b8 <USBD_LL_Init+0xa4>)
 800a142:	2202      	movs	r2, #2
 800a144:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800a146:	4b1c      	ldr	r3, [pc, #112]	; (800a1b8 <USBD_LL_Init+0xa4>)
 800a148:	2200      	movs	r2, #0
 800a14a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800a14c:	4b1a      	ldr	r3, [pc, #104]	; (800a1b8 <USBD_LL_Init+0xa4>)
 800a14e:	2202      	movs	r2, #2
 800a150:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800a152:	4b19      	ldr	r3, [pc, #100]	; (800a1b8 <USBD_LL_Init+0xa4>)
 800a154:	2200      	movs	r2, #0
 800a156:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800a158:	4b17      	ldr	r3, [pc, #92]	; (800a1b8 <USBD_LL_Init+0xa4>)
 800a15a:	2200      	movs	r2, #0
 800a15c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800a15e:	4b16      	ldr	r3, [pc, #88]	; (800a1b8 <USBD_LL_Init+0xa4>)
 800a160:	2200      	movs	r2, #0
 800a162:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.battery_charging_enable = ENABLE;
 800a164:	4b14      	ldr	r3, [pc, #80]	; (800a1b8 <USBD_LL_Init+0xa4>)
 800a166:	2201      	movs	r2, #1
 800a168:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 800a16a:	4b13      	ldr	r3, [pc, #76]	; (800a1b8 <USBD_LL_Init+0xa4>)
 800a16c:	2201      	movs	r2, #1
 800a16e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800a170:	4b11      	ldr	r3, [pc, #68]	; (800a1b8 <USBD_LL_Init+0xa4>)
 800a172:	2200      	movs	r2, #0
 800a174:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800a176:	4b10      	ldr	r3, [pc, #64]	; (800a1b8 <USBD_LL_Init+0xa4>)
 800a178:	2200      	movs	r2, #0
 800a17a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800a17c:	480e      	ldr	r0, [pc, #56]	; (800a1b8 <USBD_LL_Init+0xa4>)
 800a17e:	f7f7 fe2a 	bl	8001dd6 <HAL_PCD_Init>
 800a182:	4603      	mov	r3, r0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d001      	beq.n	800a18c <USBD_LL_Init+0x78>
  {
    Error_Handler( );
 800a188:	f7f6 fc4a 	bl	8000a20 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800a18c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a190:	4809      	ldr	r0, [pc, #36]	; (800a1b8 <USBD_LL_Init+0xa4>)
 800a192:	f7f8 ffae 	bl	80030f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800a196:	2280      	movs	r2, #128	; 0x80
 800a198:	2100      	movs	r1, #0
 800a19a:	4807      	ldr	r0, [pc, #28]	; (800a1b8 <USBD_LL_Init+0xa4>)
 800a19c:	f7f8 ff62 	bl	8003064 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800a1a0:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800a1a4:	2101      	movs	r1, #1
 800a1a6:	4804      	ldr	r0, [pc, #16]	; (800a1b8 <USBD_LL_Init+0xa4>)
 800a1a8:	f7f8 ff5c 	bl	8003064 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3708      	adds	r7, #8
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	24001aec 	.word	0x24001aec
 800a1bc:	40040000 	.word	0x40040000

0800a1c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7f7 ff21 	bl	800201e <HAL_PCD_Start>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1e0:	7bfb      	ldrb	r3, [r7, #15]
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f000 f942 	bl	800a46c <USBD_Get_USB_Status>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3710      	adds	r7, #16
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a1f6:	b580      	push	{r7, lr}
 800a1f8:	b084      	sub	sp, #16
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
 800a1fe:	4608      	mov	r0, r1
 800a200:	4611      	mov	r1, r2
 800a202:	461a      	mov	r2, r3
 800a204:	4603      	mov	r3, r0
 800a206:	70fb      	strb	r3, [r7, #3]
 800a208:	460b      	mov	r3, r1
 800a20a:	70bb      	strb	r3, [r7, #2]
 800a20c:	4613      	mov	r3, r2
 800a20e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a210:	2300      	movs	r3, #0
 800a212:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a214:	2300      	movs	r3, #0
 800a216:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a21e:	78bb      	ldrb	r3, [r7, #2]
 800a220:	883a      	ldrh	r2, [r7, #0]
 800a222:	78f9      	ldrb	r1, [r7, #3]
 800a224:	f7f8 fb26 	bl	8002874 <HAL_PCD_EP_Open>
 800a228:	4603      	mov	r3, r0
 800a22a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a22c:	7bfb      	ldrb	r3, [r7, #15]
 800a22e:	4618      	mov	r0, r3
 800a230:	f000 f91c 	bl	800a46c <USBD_Get_USB_Status>
 800a234:	4603      	mov	r3, r0
 800a236:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a238:	7bbb      	ldrb	r3, [r7, #14]
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3710      	adds	r7, #16
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}

0800a242 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b084      	sub	sp, #16
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
 800a24a:	460b      	mov	r3, r1
 800a24c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a24e:	2300      	movs	r3, #0
 800a250:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a252:	2300      	movs	r3, #0
 800a254:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a25c:	78fa      	ldrb	r2, [r7, #3]
 800a25e:	4611      	mov	r1, r2
 800a260:	4618      	mov	r0, r3
 800a262:	f7f8 fb6f 	bl	8002944 <HAL_PCD_EP_Close>
 800a266:	4603      	mov	r3, r0
 800a268:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a26a:	7bfb      	ldrb	r3, [r7, #15]
 800a26c:	4618      	mov	r0, r3
 800a26e:	f000 f8fd 	bl	800a46c <USBD_Get_USB_Status>
 800a272:	4603      	mov	r3, r0
 800a274:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a276:	7bbb      	ldrb	r3, [r7, #14]
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3710      	adds	r7, #16
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	460b      	mov	r3, r1
 800a28a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a28c:	2300      	movs	r3, #0
 800a28e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a290:	2300      	movs	r3, #0
 800a292:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a29a:	78fa      	ldrb	r2, [r7, #3]
 800a29c:	4611      	mov	r1, r2
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f7f8 fc47 	bl	8002b32 <HAL_PCD_EP_SetStall>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2a8:	7bfb      	ldrb	r3, [r7, #15]
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f000 f8de 	bl	800a46c <USBD_Get_USB_Status>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b084      	sub	sp, #16
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a2d8:	78fa      	ldrb	r2, [r7, #3]
 800a2da:	4611      	mov	r1, r2
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f7f8 fc8c 	bl	8002bfa <HAL_PCD_EP_ClrStall>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2e6:	7bfb      	ldrb	r3, [r7, #15]
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f000 f8bf 	bl	800a46c <USBD_Get_USB_Status>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3710      	adds	r7, #16
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b085      	sub	sp, #20
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	460b      	mov	r3, r1
 800a306:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a30e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a310:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a314:	2b00      	cmp	r3, #0
 800a316:	da0b      	bge.n	800a330 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a318:	78fb      	ldrb	r3, [r7, #3]
 800a31a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a31e:	68f9      	ldr	r1, [r7, #12]
 800a320:	4613      	mov	r3, r2
 800a322:	00db      	lsls	r3, r3, #3
 800a324:	1a9b      	subs	r3, r3, r2
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	440b      	add	r3, r1
 800a32a:	333e      	adds	r3, #62	; 0x3e
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	e00b      	b.n	800a348 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a330:	78fb      	ldrb	r3, [r7, #3]
 800a332:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a336:	68f9      	ldr	r1, [r7, #12]
 800a338:	4613      	mov	r3, r2
 800a33a:	00db      	lsls	r3, r3, #3
 800a33c:	1a9b      	subs	r3, r3, r2
 800a33e:	009b      	lsls	r3, r3, #2
 800a340:	440b      	add	r3, r1
 800a342:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a346:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3714      	adds	r7, #20
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	460b      	mov	r3, r1
 800a35e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a360:	2300      	movs	r3, #0
 800a362:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a364:	2300      	movs	r3, #0
 800a366:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a36e:	78fa      	ldrb	r2, [r7, #3]
 800a370:	4611      	mov	r1, r2
 800a372:	4618      	mov	r0, r3
 800a374:	f7f8 fa59 	bl	800282a <HAL_PCD_SetAddress>
 800a378:	4603      	mov	r3, r0
 800a37a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a37c:	7bfb      	ldrb	r3, [r7, #15]
 800a37e:	4618      	mov	r0, r3
 800a380:	f000 f874 	bl	800a46c <USBD_Get_USB_Status>
 800a384:	4603      	mov	r3, r0
 800a386:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a388:	7bbb      	ldrb	r3, [r7, #14]
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3710      	adds	r7, #16
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b086      	sub	sp, #24
 800a396:	af00      	add	r7, sp, #0
 800a398:	60f8      	str	r0, [r7, #12]
 800a39a:	607a      	str	r2, [r7, #4]
 800a39c:	603b      	str	r3, [r7, #0]
 800a39e:	460b      	mov	r3, r1
 800a3a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a3b0:	7af9      	ldrb	r1, [r7, #11]
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	f7f8 fb72 	bl	8002a9e <HAL_PCD_EP_Transmit>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3be:	7dfb      	ldrb	r3, [r7, #23]
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f000 f853 	bl	800a46c <USBD_Get_USB_Status>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a3ca:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3718      	adds	r7, #24
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b086      	sub	sp, #24
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	607a      	str	r2, [r7, #4]
 800a3de:	603b      	str	r3, [r7, #0]
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a3f2:	7af9      	ldrb	r1, [r7, #11]
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	f7f8 faee 	bl	80029d8 <HAL_PCD_EP_Receive>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a400:	7dfb      	ldrb	r3, [r7, #23]
 800a402:	4618      	mov	r0, r3
 800a404:	f000 f832 	bl	800a46c <USBD_Get_USB_Status>
 800a408:	4603      	mov	r3, r0
 800a40a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a40c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3718      	adds	r7, #24
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}

0800a416 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a416:	b580      	push	{r7, lr}
 800a418:	b082      	sub	sp, #8
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
 800a41e:	460b      	mov	r3, r1
 800a420:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a428:	78fa      	ldrb	r2, [r7, #3]
 800a42a:	4611      	mov	r1, r2
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7f8 fb1e 	bl	8002a6e <HAL_PCD_EP_GetRxCount>
 800a432:	4603      	mov	r3, r0
}
 800a434:	4618      	mov	r0, r3
 800a436:	3708      	adds	r7, #8
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a444:	4b03      	ldr	r3, [pc, #12]	; (800a454 <USBD_static_malloc+0x18>)
}
 800a446:	4618      	mov	r0, r3
 800a448:	370c      	adds	r7, #12
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	2400026c 	.word	0x2400026c

0800a458 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]

}
 800a460:	bf00      	nop
 800a462:	370c      	adds	r7, #12
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b085      	sub	sp, #20
 800a470:	af00      	add	r7, sp, #0
 800a472:	4603      	mov	r3, r0
 800a474:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a476:	2300      	movs	r3, #0
 800a478:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a47a:	79fb      	ldrb	r3, [r7, #7]
 800a47c:	2b03      	cmp	r3, #3
 800a47e:	d817      	bhi.n	800a4b0 <USBD_Get_USB_Status+0x44>
 800a480:	a201      	add	r2, pc, #4	; (adr r2, 800a488 <USBD_Get_USB_Status+0x1c>)
 800a482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a486:	bf00      	nop
 800a488:	0800a499 	.word	0x0800a499
 800a48c:	0800a49f 	.word	0x0800a49f
 800a490:	0800a4a5 	.word	0x0800a4a5
 800a494:	0800a4ab 	.word	0x0800a4ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a498:	2300      	movs	r3, #0
 800a49a:	73fb      	strb	r3, [r7, #15]
    break;
 800a49c:	e00b      	b.n	800a4b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a49e:	2303      	movs	r3, #3
 800a4a0:	73fb      	strb	r3, [r7, #15]
    break;
 800a4a2:	e008      	b.n	800a4b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a4a8:	e005      	b.n	800a4b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a4aa:	2303      	movs	r3, #3
 800a4ac:	73fb      	strb	r3, [r7, #15]
    break;
 800a4ae:	e002      	b.n	800a4b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a4b0:	2303      	movs	r3, #3
 800a4b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a4b4:	bf00      	nop
  }
  return usb_status;
 800a4b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3714      	adds	r7, #20
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <__libc_init_array>:
 800a4c4:	b570      	push	{r4, r5, r6, lr}
 800a4c6:	4d0d      	ldr	r5, [pc, #52]	; (800a4fc <__libc_init_array+0x38>)
 800a4c8:	4c0d      	ldr	r4, [pc, #52]	; (800a500 <__libc_init_array+0x3c>)
 800a4ca:	1b64      	subs	r4, r4, r5
 800a4cc:	10a4      	asrs	r4, r4, #2
 800a4ce:	2600      	movs	r6, #0
 800a4d0:	42a6      	cmp	r6, r4
 800a4d2:	d109      	bne.n	800a4e8 <__libc_init_array+0x24>
 800a4d4:	4d0b      	ldr	r5, [pc, #44]	; (800a504 <__libc_init_array+0x40>)
 800a4d6:	4c0c      	ldr	r4, [pc, #48]	; (800a508 <__libc_init_array+0x44>)
 800a4d8:	f000 f82e 	bl	800a538 <_init>
 800a4dc:	1b64      	subs	r4, r4, r5
 800a4de:	10a4      	asrs	r4, r4, #2
 800a4e0:	2600      	movs	r6, #0
 800a4e2:	42a6      	cmp	r6, r4
 800a4e4:	d105      	bne.n	800a4f2 <__libc_init_array+0x2e>
 800a4e6:	bd70      	pop	{r4, r5, r6, pc}
 800a4e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4ec:	4798      	blx	r3
 800a4ee:	3601      	adds	r6, #1
 800a4f0:	e7ee      	b.n	800a4d0 <__libc_init_array+0xc>
 800a4f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4f6:	4798      	blx	r3
 800a4f8:	3601      	adds	r6, #1
 800a4fa:	e7f2      	b.n	800a4e2 <__libc_init_array+0x1e>
 800a4fc:	0800a5e8 	.word	0x0800a5e8
 800a500:	0800a5e8 	.word	0x0800a5e8
 800a504:	0800a5e8 	.word	0x0800a5e8
 800a508:	0800a5ec 	.word	0x0800a5ec

0800a50c <memcpy>:
 800a50c:	440a      	add	r2, r1
 800a50e:	4291      	cmp	r1, r2
 800a510:	f100 33ff 	add.w	r3, r0, #4294967295
 800a514:	d100      	bne.n	800a518 <memcpy+0xc>
 800a516:	4770      	bx	lr
 800a518:	b510      	push	{r4, lr}
 800a51a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a51e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a522:	4291      	cmp	r1, r2
 800a524:	d1f9      	bne.n	800a51a <memcpy+0xe>
 800a526:	bd10      	pop	{r4, pc}

0800a528 <memset>:
 800a528:	4402      	add	r2, r0
 800a52a:	4603      	mov	r3, r0
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d100      	bne.n	800a532 <memset+0xa>
 800a530:	4770      	bx	lr
 800a532:	f803 1b01 	strb.w	r1, [r3], #1
 800a536:	e7f9      	b.n	800a52c <memset+0x4>

0800a538 <_init>:
 800a538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a53a:	bf00      	nop
 800a53c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a53e:	bc08      	pop	{r3}
 800a540:	469e      	mov	lr, r3
 800a542:	4770      	bx	lr

0800a544 <_fini>:
 800a544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a546:	bf00      	nop
 800a548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a54a:	bc08      	pop	{r3}
 800a54c:	469e      	mov	lr, r3
 800a54e:	4770      	bx	lr
